
SysTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000853c  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08008680  08008680  00018680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008a60  08008a60  00018a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008a64  08008a64  00018a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d8  20000000  08008a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000828  200001d8  08008c40  000201d8  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000a00  08008c40  00020a00  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001eec9  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000039bf  00000000  00000000  0003f0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008d49  00000000  00000000  00042a89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ae0  00000000  00000000  0004b7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000012f0  00000000  00000000  0004c2b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000081e1  00000000  00000000  0004d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003e3d  00000000  00000000  00055789  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000595c6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000030c0  00000000  00000000  00059644  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d8 	.word	0x200001d8
 800015c:	00000000 	.word	0x00000000
 8000160:	08008664 	.word	0x08008664

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001dc 	.word	0x200001dc
 800017c:	08008664 	.word	0x08008664

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f092 0f00 	teq	r2, #0
 800047a:	bf14      	ite	ne
 800047c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e720      	b.n	80002d4 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aedc 	beq.w	8000282 <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6c1      	b.n	8000282 <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	; 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c20:	f1a2 0201 	sub.w	r2, r2, #1
 8000c24:	d1ed      	bne.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fmul>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d06f      	beq.n	8000e78 <__aeabi_fmul+0xf8>
 8000d98:	441a      	add	r2, r3
 8000d9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9e:	0240      	lsls	r0, r0, #9
 8000da0:	bf18      	it	ne
 8000da2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da6:	d01e      	beq.n	8000de6 <__aeabi_fmul+0x66>
 8000da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db4:	fba0 3101 	umull	r3, r1, r0, r1
 8000db8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc0:	bf3e      	ittt	cc
 8000dc2:	0049      	lslcc	r1, r1, #1
 8000dc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc8:	005b      	lslcc	r3, r3, #1
 8000dca:	ea40 0001 	orr.w	r0, r0, r1
 8000dce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd2:	2afd      	cmp	r2, #253	; 0xfd
 8000dd4:	d81d      	bhi.n	8000e12 <__aeabi_fmul+0x92>
 8000dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dde:	bf08      	it	eq
 8000de0:	f020 0001 	biceq.w	r0, r0, #1
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dee:	bf08      	it	eq
 8000df0:	0249      	lsleq	r1, r1, #9
 8000df2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfa:	3a7f      	subs	r2, #127	; 0x7f
 8000dfc:	bfc2      	ittt	gt
 8000dfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e06:	4770      	bxgt	lr
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	3a01      	subs	r2, #1
 8000e12:	dc5d      	bgt.n	8000ed0 <__aeabi_fmul+0x150>
 8000e14:	f112 0f19 	cmn.w	r2, #25
 8000e18:	bfdc      	itt	le
 8000e1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1e:	4770      	bxle	lr
 8000e20:	f1c2 0200 	rsb	r2, r2, #0
 8000e24:	0041      	lsls	r1, r0, #1
 8000e26:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2a:	f1c2 0220 	rsb	r2, r2, #32
 8000e2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e36:	f140 0000 	adc.w	r0, r0, #0
 8000e3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3e:	bf08      	it	eq
 8000e40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e44:	4770      	bx	lr
 8000e46:	f092 0f00 	teq	r2, #0
 8000e4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0040      	lsleq	r0, r0, #1
 8000e52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e56:	3a01      	subeq	r2, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xce>
 8000e5a:	ea40 000c 	orr.w	r0, r0, ip
 8000e5e:	f093 0f00 	teq	r3, #0
 8000e62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0049      	lsleq	r1, r1, #1
 8000e6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6e:	3b01      	subeq	r3, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xe6>
 8000e72:	ea41 010c 	orr.w	r1, r1, ip
 8000e76:	e78f      	b.n	8000d98 <__aeabi_fmul+0x18>
 8000e78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	bf18      	it	ne
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d00a      	beq.n	8000e9e <__aeabi_fmul+0x11e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1d8      	bne.n	8000e46 <__aeabi_fmul+0xc6>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	bf17      	itett	ne
 8000ea4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea8:	4608      	moveq	r0, r1
 8000eaa:	f091 0f00 	teqne	r1, #0
 8000eae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb2:	d014      	beq.n	8000ede <__aeabi_fmul+0x15e>
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	d101      	bne.n	8000ebe <__aeabi_fmul+0x13e>
 8000eba:	0242      	lsls	r2, r0, #9
 8000ebc:	d10f      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ebe:	ea93 0f0c 	teq	r3, ip
 8000ec2:	d103      	bne.n	8000ecc <__aeabi_fmul+0x14c>
 8000ec4:	024b      	lsls	r3, r1, #9
 8000ec6:	bf18      	it	ne
 8000ec8:	4608      	movne	r0, r1
 8000eca:	d108      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000edc:	4770      	bx	lr
 8000ede:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee6:	4770      	bx	lr

08000ee8 <__aeabi_fdiv>:
 8000ee8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef0:	bf1e      	ittt	ne
 8000ef2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef6:	ea92 0f0c 	teqne	r2, ip
 8000efa:	ea93 0f0c 	teqne	r3, ip
 8000efe:	d069      	beq.n	8000fd4 <__aeabi_fdiv+0xec>
 8000f00:	eba2 0203 	sub.w	r2, r2, r3
 8000f04:	ea80 0c01 	eor.w	ip, r0, r1
 8000f08:	0249      	lsls	r1, r1, #9
 8000f0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0e:	d037      	beq.n	8000f80 <__aeabi_fdiv+0x98>
 8000f10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f20:	428b      	cmp	r3, r1
 8000f22:	bf38      	it	cc
 8000f24:	005b      	lslcc	r3, r3, #1
 8000f26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	bf24      	itt	cs
 8000f32:	1a5b      	subcs	r3, r3, r1
 8000f34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4a:	bf24      	itt	cs
 8000f4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f58:	bf24      	itt	cs
 8000f5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	bf18      	it	ne
 8000f66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6a:	d1e0      	bne.n	8000f2e <__aeabi_fdiv+0x46>
 8000f6c:	2afd      	cmp	r2, #253	; 0xfd
 8000f6e:	f63f af50 	bhi.w	8000e12 <__aeabi_fmul+0x92>
 8000f72:	428b      	cmp	r3, r1
 8000f74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f78:	bf08      	it	eq
 8000f7a:	f020 0001 	biceq.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f88:	327f      	adds	r2, #127	; 0x7f
 8000f8a:	bfc2      	ittt	gt
 8000f8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f94:	4770      	bxgt	lr
 8000f96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	3a01      	subs	r2, #1
 8000fa0:	e737      	b.n	8000e12 <__aeabi_fmul+0x92>
 8000fa2:	f092 0f00 	teq	r2, #0
 8000fa6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0040      	lsleq	r0, r0, #1
 8000fae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb2:	3a01      	subeq	r2, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xc2>
 8000fb6:	ea40 000c 	orr.w	r0, r0, ip
 8000fba:	f093 0f00 	teq	r3, #0
 8000fbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0049      	lsleq	r1, r1, #1
 8000fc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fca:	3b01      	subeq	r3, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xda>
 8000fce:	ea41 010c 	orr.w	r1, r1, ip
 8000fd2:	e795      	b.n	8000f00 <__aeabi_fdiv+0x18>
 8000fd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd8:	ea92 0f0c 	teq	r2, ip
 8000fdc:	d108      	bne.n	8000ff0 <__aeabi_fdiv+0x108>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	f47f af7d 	bne.w	8000ede <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	f47f af70 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8000fec:	4608      	mov	r0, r1
 8000fee:	e776      	b.n	8000ede <__aeabi_fmul+0x15e>
 8000ff0:	ea93 0f0c 	teq	r3, ip
 8000ff4:	d104      	bne.n	8001000 <__aeabi_fdiv+0x118>
 8000ff6:	024b      	lsls	r3, r1, #9
 8000ff8:	f43f af4c 	beq.w	8000e94 <__aeabi_fmul+0x114>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e76e      	b.n	8000ede <__aeabi_fmul+0x15e>
 8001000:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001004:	bf18      	it	ne
 8001006:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100a:	d1ca      	bne.n	8000fa2 <__aeabi_fdiv+0xba>
 800100c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001010:	f47f af5c 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8001014:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001018:	f47f af3c 	bne.w	8000e94 <__aeabi_fmul+0x114>
 800101c:	e75f      	b.n	8000ede <__aeabi_fmul+0x15e>
 800101e:	bf00      	nop

08001020 <__gesf2>:
 8001020:	f04f 3cff 	mov.w	ip, #4294967295
 8001024:	e006      	b.n	8001034 <__cmpsf2+0x4>
 8001026:	bf00      	nop

08001028 <__lesf2>:
 8001028:	f04f 0c01 	mov.w	ip, #1
 800102c:	e002      	b.n	8001034 <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__cmpsf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001040:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001044:	bf18      	it	ne
 8001046:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104a:	d011      	beq.n	8001070 <__cmpsf2+0x40>
 800104c:	b001      	add	sp, #4
 800104e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001052:	bf18      	it	ne
 8001054:	ea90 0f01 	teqne	r0, r1
 8001058:	bf58      	it	pl
 800105a:	ebb2 0003 	subspl.w	r0, r2, r3
 800105e:	bf88      	it	hi
 8001060:	17c8      	asrhi	r0, r1, #31
 8001062:	bf38      	it	cc
 8001064:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001068:	bf18      	it	ne
 800106a:	f040 0001 	orrne.w	r0, r0, #1
 800106e:	4770      	bx	lr
 8001070:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001074:	d102      	bne.n	800107c <__cmpsf2+0x4c>
 8001076:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107a:	d105      	bne.n	8001088 <__cmpsf2+0x58>
 800107c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001080:	d1e4      	bne.n	800104c <__cmpsf2+0x1c>
 8001082:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001086:	d0e1      	beq.n	800104c <__cmpsf2+0x1c>
 8001088:	f85d 0b04 	ldr.w	r0, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <__aeabi_cfrcmple>:
 8001090:	4684      	mov	ip, r0
 8001092:	4608      	mov	r0, r1
 8001094:	4661      	mov	r1, ip
 8001096:	e7ff      	b.n	8001098 <__aeabi_cfcmpeq>

08001098 <__aeabi_cfcmpeq>:
 8001098:	b50f      	push	{r0, r1, r2, r3, lr}
 800109a:	f7ff ffc9 	bl	8001030 <__cmpsf2>
 800109e:	2800      	cmp	r0, #0
 80010a0:	bf48      	it	mi
 80010a2:	f110 0f00 	cmnmi.w	r0, #0
 80010a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a8 <__aeabi_fcmpeq>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff fff4 	bl	8001098 <__aeabi_cfcmpeq>
 80010b0:	bf0c      	ite	eq
 80010b2:	2001      	moveq	r0, #1
 80010b4:	2000      	movne	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmplt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffea 	bl	8001098 <__aeabi_cfcmpeq>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmple>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffe0 	bl	8001098 <__aeabi_cfcmpeq>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpge>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffd2 	bl	8001090 <__aeabi_cfrcmple>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpgt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffc8 	bl	8001090 <__aeabi_cfrcmple>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_f2iz>:
 800110c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001114:	d30f      	bcc.n	8001136 <__aeabi_f2iz+0x2a>
 8001116:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d90d      	bls.n	800113c <__aeabi_f2iz+0x30>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001128:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	bf18      	it	ne
 8001132:	4240      	negne	r0, r0
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr
 800113c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001140:	d101      	bne.n	8001146 <__aeabi_f2iz+0x3a>
 8001142:	0242      	lsls	r2, r0, #9
 8001144:	d105      	bne.n	8001152 <__aeabi_f2iz+0x46>
 8001146:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114a:	bf08      	it	eq
 800114c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr

08001158 <__aeabi_f2uiz>:
 8001158:	0042      	lsls	r2, r0, #1
 800115a:	d20e      	bcs.n	800117a <__aeabi_f2uiz+0x22>
 800115c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001160:	d30b      	bcc.n	800117a <__aeabi_f2uiz+0x22>
 8001162:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001166:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116a:	d409      	bmi.n	8001180 <__aeabi_f2uiz+0x28>
 800116c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001170:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001174:	fa23 f002 	lsr.w	r0, r3, r2
 8001178:	4770      	bx	lr
 800117a:	f04f 0000 	mov.w	r0, #0
 800117e:	4770      	bx	lr
 8001180:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001184:	d101      	bne.n	800118a <__aeabi_f2uiz+0x32>
 8001186:	0242      	lsls	r2, r0, #9
 8001188:	d102      	bne.n	8001190 <__aeabi_f2uiz+0x38>
 800118a:	f04f 30ff 	mov.w	r0, #4294967295
 800118e:	4770      	bx	lr
 8001190:	f04f 0000 	mov.w	r0, #0
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop

08001198 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_InitTick+0x24>)
{
 800119a:	b510      	push	{r4, lr}
 800119c:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80011a8:	f000 f884 	bl	80012b4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	4621      	mov	r1, r4
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f000 f83e 	bl	8001234 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80011b8:	2000      	movs	r0, #0
 80011ba:	bd10      	pop	{r4, pc}
 80011bc:	20000004 	.word	0x20000004

080011c0 <HAL_Init>:
{
 80011c0:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c2:	2003      	movs	r0, #3
 80011c4:	f000 f824 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff ffe5 	bl	8001198 <HAL_InitTick>
  HAL_MspInit();
 80011ce:	f003 fbd5 	bl	800497c <HAL_MspInit>
}
 80011d2:	2000      	movs	r0, #0
 80011d4:	bd08      	pop	{r3, pc}
	...

080011d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80011d8:	4a02      	ldr	r2, [pc, #8]	; (80011e4 <HAL_IncTick+0xc>)
 80011da:	6813      	ldr	r3, [r2, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000210 	.word	0x20000210

080011e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011e8:	4b01      	ldr	r3, [pc, #4]	; (80011f0 <HAL_GetTick+0x8>)
 80011ea:	6818      	ldr	r0, [r3, #0]
}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000210 	.word	0x20000210

080011f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80011f4:	b513      	push	{r0, r1, r4, lr}
 80011f6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80011f8:	f7ff fff6 	bl	80011e8 <HAL_GetTick>
 80011fc:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80011fe:	f7ff fff3 	bl	80011e8 <HAL_GetTick>
 8001202:	9b01      	ldr	r3, [sp, #4]
 8001204:	1b00      	subs	r0, r0, r4
 8001206:	4298      	cmp	r0, r3
 8001208:	d3f9      	bcc.n	80011fe <HAL_Delay+0xa>
  {
  }
}
 800120a:	b002      	add	sp, #8
 800120c:	bd10      	pop	{r4, pc}
	...

08001210 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001212:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800121e:	041b      	lsls	r3, r3, #16
 8001220:	0c1b      	lsrs	r3, r3, #16
 8001222:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800122a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800122c:	60d3      	str	r3, [r2, #12]
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001236:	b530      	push	{r4, r5, lr}
 8001238:	68dc      	ldr	r4, [r3, #12]
 800123a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001242:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	2b04      	cmp	r3, #4
 8001246:	bf28      	it	cs
 8001248:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001250:	bf98      	it	ls
 8001252:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	fa05 f303 	lsl.w	r3, r5, r3
 8001258:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125c:	bf88      	it	hi
 800125e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4019      	ands	r1, r3
 8001262:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	fa05 f404 	lsl.w	r4, r5, r4
 8001268:	3c01      	subs	r4, #1
 800126a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800126c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126e:	ea42 0201 	orr.w	r2, r2, r1
 8001272:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	bfaf      	iteee	ge
 8001278:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	4b06      	ldrlt	r3, [pc, #24]	; (8001298 <HAL_NVIC_SetPriority+0x64>)
 800127e:	f000 000f 	andlt.w	r0, r0, #15
 8001282:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001284:	bfa5      	ittet	ge
 8001286:	b2d2      	uxtbge	r2, r2
 8001288:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001292:	bd30      	pop	{r4, r5, pc}
 8001294:	e000ed00 	.word	0xe000ed00
 8001298:	e000ed14 	.word	0xe000ed14

0800129c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800129c:	2301      	movs	r3, #1
 800129e:	0942      	lsrs	r2, r0, #5
 80012a0:	f000 001f 	and.w	r0, r0, #31
 80012a4:	fa03 f000 	lsl.w	r0, r3, r0
 80012a8:	4b01      	ldr	r3, [pc, #4]	; (80012b0 <HAL_NVIC_EnableIRQ+0x14>)
 80012aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80012ae:	4770      	bx	lr
 80012b0:	e000e100 	.word	0xe000e100

080012b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b4:	3801      	subs	r0, #1
 80012b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80012ba:	d20a      	bcs.n	80012d2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012bc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c0:	4a06      	ldr	r2, [pc, #24]	; (80012dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80012d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80012e2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	bf0c      	ite	eq
 80012e8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80012ec:	f022 0204 	bicne.w	r2, r2, #4
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	4770      	bx	lr
 80012f4:	e000e010 	.word	0xe000e010

080012f8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80012f8:	4770      	bx	lr

080012fa <HAL_SYSTICK_IRQHandler>:
{
 80012fa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80012fc:	f7ff fffc 	bl	80012f8 <HAL_SYSTICK_Callback>
 8001300:	bd08      	pop	{r3, pc}
	...

08001304 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 8001304:	2300      	movs	r3, #0
{ 
 8001306:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800130a:	4a62      	ldr	r2, [pc, #392]	; (8001494 <HAL_GPIO_Init+0x190>)
  while (((GPIO_Init->Pin) >> position) != 0)
 800130c:	f8d1 8000 	ldr.w	r8, [r1]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001310:	f8df 9188 	ldr.w	r9, [pc, #392]	; 800149c <HAL_GPIO_Init+0x198>
{ 
 8001314:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8001316:	fa38 f403 	lsrs.w	r4, r8, r3
 800131a:	d102      	bne.n	8001322 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  } 
}
 800131c:	b005      	add	sp, #20
 800131e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001322:	2401      	movs	r4, #1
 8001324:	409c      	lsls	r4, r3
    if(iocurrent)
 8001326:	ea18 0604 	ands.w	r6, r8, r4
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800132a:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 800132c:	f000 80a7 	beq.w	800147e <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001330:	684c      	ldr	r4, [r1, #4]
 8001332:	f024 0a10 	bic.w	sl, r4, #16
 8001336:	f1ba 0f02 	cmp.w	sl, #2
 800133a:	d116      	bne.n	800136a <HAL_GPIO_Init+0x66>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800133c:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 8001340:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001344:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001348:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800134c:	f8dc 5020 	ldr.w	r5, [ip, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001350:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001354:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001358:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 800135c:	690d      	ldr	r5, [r1, #16]
 800135e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001362:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 8001366:	f8cc 5020 	str.w	r5, [ip, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800136a:	2503      	movs	r5, #3
 800136c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001370:	fa05 f50c 	lsl.w	r5, r5, ip
 8001374:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 8001376:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800137a:	f004 0e03 	and.w	lr, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800137e:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001382:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001386:	f10a 3aff 	add.w	sl, sl, #4294967295
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800138a:	ea4e 0e0b 	orr.w	lr, lr, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800138e:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8001392:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001396:	d816      	bhi.n	80013c6 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR; 
 8001398:	f8d0 e008 	ldr.w	lr, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800139c:	68cf      	ldr	r7, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800139e:	ea05 0e0e 	and.w	lr, r5, lr
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80013a2:	fa07 fa0c 	lsl.w	sl, r7, ip
 80013a6:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80013aa:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80013ae:	f8d0 e004 	ldr.w	lr, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80013b2:	9f01      	ldr	r7, [sp, #4]
 80013b4:	ea2e 0707 	bic.w	r7, lr, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80013b8:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80013bc:	fa0e fe03 	lsl.w	lr, lr, r3
 80013c0:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80013c4:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80013c6:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80013c8:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80013ca:	688f      	ldr	r7, [r1, #8]
 80013cc:	fa07 f70c 	lsl.w	r7, r7, ip
 80013d0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80013d2:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80013d4:	00e5      	lsls	r5, r4, #3
 80013d6:	d552      	bpl.n	800147e <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80013d8:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013dc:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80013e0:	f023 0703 	bic.w	r7, r3, #3
 80013e4:	f045 0501 	orr.w	r5, r5, #1
 80013e8:	f8c9 5020 	str.w	r5, [r9, #32]
 80013ec:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80013f0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80013f4:	f005 0501 	and.w	r5, r5, #1
 80013f8:	9503      	str	r5, [sp, #12]
 80013fa:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80013fe:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	9d03      	ldr	r5, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001404:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 8001408:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800140a:	fa0e fe0c 	lsl.w	lr, lr, ip
 800140e:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001412:	4d21      	ldr	r5, [pc, #132]	; (8001498 <HAL_GPIO_Init+0x194>)
 8001414:	42a8      	cmp	r0, r5
 8001416:	d034      	beq.n	8001482 <HAL_GPIO_Init+0x17e>
 8001418:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800141c:	42a8      	cmp	r0, r5
 800141e:	d032      	beq.n	8001486 <HAL_GPIO_Init+0x182>
 8001420:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001424:	42a8      	cmp	r0, r5
 8001426:	d030      	beq.n	800148a <HAL_GPIO_Init+0x186>
 8001428:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800142c:	42a8      	cmp	r0, r5
 800142e:	d02e      	beq.n	800148e <HAL_GPIO_Init+0x18a>
 8001430:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001434:	42a8      	cmp	r0, r5
 8001436:	bf14      	ite	ne
 8001438:	2505      	movne	r5, #5
 800143a:	2504      	moveq	r5, #4
 800143c:	fa05 f50c 	lsl.w	r5, r5, ip
 8001440:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001444:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001446:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 8001448:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800144a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800144e:	bf0c      	ite	eq
 8001450:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8001452:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8001454:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001456:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001458:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800145c:	bf0c      	ite	eq
 800145e:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8001460:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8001462:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001464:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001466:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800146a:	bf0c      	ite	eq
 800146c:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800146e:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8001470:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001472:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001474:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001476:	bf54      	ite	pl
 8001478:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 800147a:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 800147c:	60d5      	str	r5, [r2, #12]
    position++;
 800147e:	3301      	adds	r3, #1
 8001480:	e749      	b.n	8001316 <HAL_GPIO_Init+0x12>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001482:	2500      	movs	r5, #0
 8001484:	e7da      	b.n	800143c <HAL_GPIO_Init+0x138>
 8001486:	2501      	movs	r5, #1
 8001488:	e7d8      	b.n	800143c <HAL_GPIO_Init+0x138>
 800148a:	2502      	movs	r5, #2
 800148c:	e7d6      	b.n	800143c <HAL_GPIO_Init+0x138>
 800148e:	2503      	movs	r5, #3
 8001490:	e7d4      	b.n	800143c <HAL_GPIO_Init+0x138>
 8001492:	bf00      	nop
 8001494:	40010400 	.word	0x40010400
 8001498:	40020000 	.word	0x40020000
 800149c:	40023800 	.word	0x40023800

080014a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a0:	b10a      	cbz	r2, 80014a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80014a2:	6181      	str	r1, [r0, #24]
 80014a4:	4770      	bx	lr
 80014a6:	0409      	lsls	r1, r1, #16
 80014a8:	e7fb      	b.n	80014a2 <HAL_GPIO_WritePin+0x2>

080014aa <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014aa:	6802      	ldr	r2, [r0, #0]
 80014ac:	6953      	ldr	r3, [r2, #20]
 80014ae:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80014b2:	d00d      	beq.n	80014d0 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014b4:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80014b8:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80014ba:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80014bc:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80014be:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80014c8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80014cc:	2001      	movs	r0, #1
 80014ce:	4770      	bx	lr
  }
  return HAL_OK;
 80014d0:	4618      	mov	r0, r3
}
 80014d2:	4770      	bx	lr

080014d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80014d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014d8:	4604      	mov	r4, r0
 80014da:	4617      	mov	r7, r2
 80014dc:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80014de:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80014e2:	b28e      	uxth	r6, r1
 80014e4:	6825      	ldr	r5, [r4, #0]
 80014e6:	f1b8 0f01 	cmp.w	r8, #1
 80014ea:	bf0c      	ite	eq
 80014ec:	696b      	ldreq	r3, [r5, #20]
 80014ee:	69ab      	ldrne	r3, [r5, #24]
 80014f0:	ea36 0303 	bics.w	r3, r6, r3
 80014f4:	bf14      	ite	ne
 80014f6:	2001      	movne	r0, #1
 80014f8:	2000      	moveq	r0, #0
 80014fa:	b908      	cbnz	r0, 8001500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80014fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001500:	696b      	ldr	r3, [r5, #20]
 8001502:	055a      	lsls	r2, r3, #21
 8001504:	d512      	bpl.n	800152c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001506:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8001508:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800150a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150e:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001510:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001514:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001516:	2304      	movs	r3, #4
 8001518:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800151a:	2300      	movs	r3, #0
      return HAL_ERROR;
 800151c:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 800151e:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001520:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001524:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800152c:	1c7b      	adds	r3, r7, #1
 800152e:	d0d9      	beq.n	80014e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001530:	b94f      	cbnz	r7, 8001546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001532:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001534:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001536:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001538:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800153c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001540:	2003      	movs	r0, #3
 8001542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001546:	f7ff fe4f 	bl	80011e8 <HAL_GetTick>
 800154a:	eba0 0009 	sub.w	r0, r0, r9
 800154e:	4287      	cmp	r7, r0
 8001550:	d2c8      	bcs.n	80014e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001552:	e7ee      	b.n	8001532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001554 <I2C_WaitOnFlagUntilTimeout>:
{
 8001554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001558:	4604      	mov	r4, r0
 800155a:	4690      	mov	r8, r2
 800155c:	461f      	mov	r7, r3
 800155e:	9e08      	ldr	r6, [sp, #32]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001560:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001564:	b28d      	uxth	r5, r1
 8001566:	6823      	ldr	r3, [r4, #0]
 8001568:	f1b9 0f01 	cmp.w	r9, #1
 800156c:	bf0c      	ite	eq
 800156e:	695b      	ldreq	r3, [r3, #20]
 8001570:	699b      	ldrne	r3, [r3, #24]
 8001572:	ea35 0303 	bics.w	r3, r5, r3
 8001576:	bf0c      	ite	eq
 8001578:	2301      	moveq	r3, #1
 800157a:	2300      	movne	r3, #0
 800157c:	4543      	cmp	r3, r8
 800157e:	d002      	beq.n	8001586 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001580:	2000      	movs	r0, #0
}
 8001582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001586:	1c7b      	adds	r3, r7, #1
 8001588:	d0ed      	beq.n	8001566 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800158a:	b95f      	cbnz	r7, 80015a4 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 800158c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800158e:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001590:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001592:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001596:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800159a:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800159c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80015a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80015a4:	f7ff fe20 	bl	80011e8 <HAL_GetTick>
 80015a8:	1b80      	subs	r0, r0, r6
 80015aa:	4287      	cmp	r7, r0
 80015ac:	d2db      	bcs.n	8001566 <I2C_WaitOnFlagUntilTimeout+0x12>
 80015ae:	e7ed      	b.n	800158c <I2C_WaitOnFlagUntilTimeout+0x38>

080015b0 <I2C_WaitOnTXEFlagUntilTimeout>:
{  
 80015b0:	b570      	push	{r4, r5, r6, lr}
 80015b2:	4604      	mov	r4, r0
 80015b4:	460d      	mov	r5, r1
 80015b6:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015b8:	6823      	ldr	r3, [r4, #0]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	061b      	lsls	r3, r3, #24
 80015be:	d501      	bpl.n	80015c4 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80015c0:	2000      	movs	r0, #0
 80015c2:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80015c4:	4620      	mov	r0, r4
 80015c6:	f7ff ff70 	bl	80014aa <I2C_IsAcknowledgeFailed>
 80015ca:	b9a8      	cbnz	r0, 80015f8 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80015cc:	1c6a      	adds	r2, r5, #1
 80015ce:	d0f3      	beq.n	80015b8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80015d0:	b965      	cbnz	r5, 80015ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80015d4:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015d6:	f043 0320 	orr.w	r3, r3, #32
 80015da:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80015dc:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80015de:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80015e0:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80015e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80015e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80015ea:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80015ec:	f7ff fdfc 	bl	80011e8 <HAL_GetTick>
 80015f0:	1b80      	subs	r0, r0, r6
 80015f2:	4285      	cmp	r5, r0
 80015f4:	d2e0      	bcs.n	80015b8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80015f6:	e7ec      	b.n	80015d2 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80015f8:	2001      	movs	r0, #1
}
 80015fa:	bd70      	pop	{r4, r5, r6, pc}

080015fc <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 80015fc:	b570      	push	{r4, r5, r6, lr}
 80015fe:	4604      	mov	r4, r0
 8001600:	460d      	mov	r5, r1
 8001602:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001604:	6820      	ldr	r0, [r4, #0]
 8001606:	6943      	ldr	r3, [r0, #20]
 8001608:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800160c:	d001      	beq.n	8001612 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800160e:	2000      	movs	r0, #0
}
 8001610:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001612:	6942      	ldr	r2, [r0, #20]
 8001614:	06d2      	lsls	r2, r2, #27
 8001616:	d50b      	bpl.n	8001630 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001618:	f06f 0210 	mvn.w	r2, #16
 800161c:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 800161e:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001620:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001622:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001626:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001628:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 800162a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 800162e:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001630:	b95d      	cbnz	r5, 800164a <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001632:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001634:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001636:	f043 0320 	orr.w	r3, r3, #32
 800163a:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800163c:	2320      	movs	r3, #32
 800163e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001642:	2300      	movs	r3, #0
 8001644:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001648:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800164a:	f7ff fdcd 	bl	80011e8 <HAL_GetTick>
 800164e:	1b80      	subs	r0, r0, r6
 8001650:	4285      	cmp	r5, r0
 8001652:	d2d7      	bcs.n	8001604 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001654:	e7ed      	b.n	8001632 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001656 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001656:	b570      	push	{r4, r5, r6, lr}
 8001658:	4604      	mov	r4, r0
 800165a:	460d      	mov	r5, r1
 800165c:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	075b      	lsls	r3, r3, #29
 8001664:	d501      	bpl.n	800166a <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001666:	2000      	movs	r0, #0
 8001668:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800166a:	4620      	mov	r0, r4
 800166c:	f7ff ff1d 	bl	80014aa <I2C_IsAcknowledgeFailed>
 8001670:	b9a8      	cbnz	r0, 800169e <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001672:	1c6a      	adds	r2, r5, #1
 8001674:	d0f3      	beq.n	800165e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001676:	b965      	cbnz	r5, 8001692 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001678:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800167a:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800167c:	f043 0320 	orr.w	r3, r3, #32
 8001680:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001682:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001684:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001686:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001688:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800168c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001690:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001692:	f7ff fda9 	bl	80011e8 <HAL_GetTick>
 8001696:	1b80      	subs	r0, r0, r6
 8001698:	4285      	cmp	r5, r0
 800169a:	d2e0      	bcs.n	800165e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 800169c:	e7ec      	b.n	8001678 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800169e:	2001      	movs	r0, #1
}
 80016a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080016a4 <HAL_I2C_Init>:
{
 80016a4:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 80016a6:	4604      	mov	r4, r0
 80016a8:	b908      	cbnz	r0, 80016ae <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80016aa:	2001      	movs	r0, #1
 80016ac:	bd70      	pop	{r4, r5, r6, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80016ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016b6:	b91b      	cbnz	r3, 80016c0 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80016b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80016bc:	f002 ff8e 	bl	80045dc <HAL_I2C_MspInit>
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016c0:	f000 ff8a 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
  if(pclk1 < I2C_MIN_PCLK_FREQ)
 80016c4:	4b3b      	ldr	r3, [pc, #236]	; (80017b4 <HAL_I2C_Init+0x110>)
 80016c6:	4298      	cmp	r0, r3
 80016c8:	d9ef      	bls.n	80016aa <HAL_I2C_Init+0x6>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80016ca:	2324      	movs	r3, #36	; 0x24
  freqrange = I2C_FREQ_RANGE(pclk1);
 80016cc:	4d3a      	ldr	r5, [pc, #232]	; (80017b8 <HAL_I2C_Init+0x114>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 80016ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  freqrange = I2C_FREQ_RANGE(pclk1);
 80016d2:	fbb0 f5f5 	udiv	r5, r0, r5
  __HAL_I2C_DISABLE(hi2c);
 80016d6:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016d8:	4938      	ldr	r1, [pc, #224]	; (80017bc <HAL_I2C_Init+0x118>)
  __HAL_I2C_DISABLE(hi2c);
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	f022 0201 	bic.w	r2, r2, #1
 80016e0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80016e8:	432a      	orrs	r2, r5
 80016ea:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016ec:	6862      	ldr	r2, [r4, #4]
 80016ee:	6a1e      	ldr	r6, [r3, #32]
 80016f0:	428a      	cmp	r2, r1
 80016f2:	bf81      	itttt	hi
 80016f4:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80016f8:	4369      	mulhi	r1, r5
 80016fa:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80016fe:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001702:	bf94      	ite	ls
 8001704:	1c69      	addls	r1, r5, #1
 8001706:	3101      	addhi	r1, #1
 8001708:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 800170c:	4331      	orrs	r1, r6
 800170e:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001710:	69dd      	ldr	r5, [r3, #28]
 8001712:	492a      	ldr	r1, [pc, #168]	; (80017bc <HAL_I2C_Init+0x118>)
 8001714:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8001718:	428a      	cmp	r2, r1
 800171a:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800171e:	d830      	bhi.n	8001782 <HAL_I2C_Init+0xde>
 8001720:	0052      	lsls	r2, r2, #1
 8001722:	fbb0 f0f2 	udiv	r0, r0, r2
 8001726:	f3c0 020b 	ubfx	r2, r0, #0, #12
 800172a:	2a03      	cmp	r2, #3
 800172c:	bf98      	it	ls
 800172e:	2004      	movls	r0, #4
 8001730:	4328      	orrs	r0, r5
 8001732:	61d8      	str	r0, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001734:	6819      	ldr	r1, [r3, #0]
 8001736:	6a20      	ldr	r0, [r4, #32]
 8001738:	69e2      	ldr	r2, [r4, #28]
 800173a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800173e:	4302      	orrs	r2, r0
 8001740:	430a      	orrs	r2, r1
 8001742:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001744:	6899      	ldr	r1, [r3, #8]
 8001746:	68e0      	ldr	r0, [r4, #12]
 8001748:	6922      	ldr	r2, [r4, #16]
 800174a:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800174e:	4302      	orrs	r2, r0
 8001750:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001754:	430a      	orrs	r2, r1
 8001756:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001758:	68d9      	ldr	r1, [r3, #12]
 800175a:	69a0      	ldr	r0, [r4, #24]
 800175c:	6962      	ldr	r2, [r4, #20]
 800175e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001762:	4302      	orrs	r2, r0
 8001764:	430a      	orrs	r2, r1
 8001766:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001768:	681a      	ldr	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800176a:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 800176c:	f042 0201 	orr.w	r2, r2, #1
 8001770:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001772:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001774:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001776:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800177a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800177c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8001780:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001782:	68a1      	ldr	r1, [r4, #8]
 8001784:	b949      	cbnz	r1, 800179a <HAL_I2C_Init+0xf6>
 8001786:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800178a:	fbb0 f0f2 	udiv	r0, r0, r2
 800178e:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8001792:	b162      	cbz	r2, 80017ae <HAL_I2C_Init+0x10a>
 8001794:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001798:	e7ca      	b.n	8001730 <HAL_I2C_Init+0x8c>
 800179a:	2119      	movs	r1, #25
 800179c:	434a      	muls	r2, r1
 800179e:	fbb0 f0f2 	udiv	r0, r0, r2
 80017a2:	f3c0 020b 	ubfx	r2, r0, #0, #12
 80017a6:	b112      	cbz	r2, 80017ae <HAL_I2C_Init+0x10a>
 80017a8:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80017ac:	e7c0      	b.n	8001730 <HAL_I2C_Init+0x8c>
 80017ae:	2001      	movs	r0, #1
 80017b0:	e7be      	b.n	8001730 <HAL_I2C_Init+0x8c>
 80017b2:	bf00      	nop
 80017b4:	001e847f 	.word	0x001e847f
 80017b8:	000f4240 	.word	0x000f4240
 80017bc:	000186a0 	.word	0x000186a0

080017c0 <HAL_I2C_Master_Transmit>:
{
 80017c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80017c4:	4604      	mov	r4, r0
 80017c6:	461f      	mov	r7, r3
 80017c8:	460d      	mov	r5, r1
 80017ca:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 80017cc:	f7ff fd0c 	bl	80011e8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80017d0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80017d4:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80017d6:	2b20      	cmp	r3, #32
 80017d8:	d004      	beq.n	80017e4 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY; 
 80017da:	2502      	movs	r5, #2
}
 80017dc:	4628      	mov	r0, r5
 80017de:	b004      	add	sp, #16
 80017e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017e4:	9000      	str	r0, [sp, #0]
 80017e6:	2319      	movs	r3, #25
 80017e8:	2201      	movs	r2, #1
 80017ea:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 80017ee:	4620      	mov	r0, r4
 80017f0:	f7ff feb0 	bl	8001554 <I2C_WaitOnFlagUntilTimeout>
 80017f4:	2800      	cmp	r0, #0
 80017f6:	d1f0      	bne.n	80017da <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80017f8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d0ec      	beq.n	80017da <HAL_I2C_Master_Transmit+0x1a>
 8001800:	2301      	movs	r3, #1
 8001802:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001806:	6823      	ldr	r3, [r4, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800180c:	bf5e      	ittt	pl
 800180e:	681a      	ldrpl	r2, [r3, #0]
 8001810:	f042 0201 	orrpl.w	r2, r2, #1
 8001814:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800181c:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800181e:	2221      	movs	r2, #33	; 0x21
 8001820:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001824:	2210      	movs	r2, #16
 8001826:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800182a:	2200      	movs	r2, #0
 800182c:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800182e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001832:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001834:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001836:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001838:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800183c:	8522      	strh	r2, [r4, #40]	; 0x28
  if((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME) || (hi2c->XferOptions == I2C_NO_OPTION_FRAME))
 800183e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001840:	2a04      	cmp	r2, #4
 8001842:	d006      	beq.n	8001852 <HAL_I2C_Master_Transmit+0x92>
 8001844:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001846:	2a01      	cmp	r2, #1
 8001848:	d003      	beq.n	8001852 <HAL_I2C_Master_Transmit+0x92>
 800184a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800184c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001850:	d104      	bne.n	800185c <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	e002      	b.n	8001862 <HAL_I2C_Master_Transmit+0xa2>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800185c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800185e:	2a12      	cmp	r2, #18
 8001860:	d0f7      	beq.n	8001852 <HAL_I2C_Master_Transmit+0x92>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001862:	9600      	str	r6, [sp, #0]
 8001864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001866:	2200      	movs	r2, #0
 8001868:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800186c:	4620      	mov	r0, r4
 800186e:	f7ff fe71 	bl	8001554 <I2C_WaitOnFlagUntilTimeout>
 8001872:	bb28      	cbnz	r0, 80018c0 <HAL_I2C_Master_Transmit+0x100>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001874:	6923      	ldr	r3, [r4, #16]
 8001876:	6822      	ldr	r2, [r4, #0]
 8001878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800187c:	d112      	bne.n	80018a4 <HAL_I2C_Master_Transmit+0xe4>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800187e:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001882:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001884:	4633      	mov	r3, r6
 8001886:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001888:	4936      	ldr	r1, [pc, #216]	; (8001964 <HAL_I2C_Master_Transmit+0x1a4>)
 800188a:	4620      	mov	r0, r4
 800188c:	f7ff fe22 	bl	80014d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001890:	4605      	mov	r5, r0
 8001892:	b9a0      	cbnz	r0, 80018be <HAL_I2C_Master_Transmit+0xfe>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	9003      	str	r0, [sp, #12]
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	9203      	str	r2, [sp, #12]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	9303      	str	r3, [sp, #12]
 80018a0:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 80018a2:	e04f      	b.n	8001944 <HAL_I2C_Master_Transmit+0x184>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018a4:	11eb      	asrs	r3, r5, #7
 80018a6:	f003 0306 	and.w	r3, r3, #6
 80018aa:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80018ae:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80018b0:	492d      	ldr	r1, [pc, #180]	; (8001968 <HAL_I2C_Master_Transmit+0x1a8>)
 80018b2:	4633      	mov	r3, r6
 80018b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80018b6:	4620      	mov	r0, r4
 80018b8:	f7ff fe0c 	bl	80014d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018bc:	b148      	cbz	r0, 80018d2 <HAL_I2C_Master_Transmit+0x112>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018be:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	d107      	bne.n	80018da <HAL_I2C_Master_Transmit+0x11a>
        __HAL_UNLOCK(hi2c);
 80018ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80018ce:	2501      	movs	r5, #1
 80018d0:	e784      	b.n	80017dc <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	b2ed      	uxtb	r5, r5
 80018d6:	611d      	str	r5, [r3, #16]
 80018d8:	e7d4      	b.n	8001884 <HAL_I2C_Master_Transmit+0xc4>
        __HAL_UNLOCK(hi2c);
 80018da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 80018de:	2503      	movs	r5, #3
 80018e0:	e77c      	b.n	80017dc <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e2:	4632      	mov	r2, r6
 80018e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7ff fe62 	bl	80015b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80018ec:	b140      	cbz	r0, 8001900 <HAL_I2C_Master_Transmit+0x140>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d1f4      	bne.n	80018de <HAL_I2C_Master_Transmit+0x11e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f4:	6822      	ldr	r2, [r4, #0]
 80018f6:	6813      	ldr	r3, [r2, #0]
 80018f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e7e6      	b.n	80018ce <HAL_I2C_Master_Transmit+0x10e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001900:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001902:	6820      	ldr	r0, [r4, #0]
 8001904:	1c4b      	adds	r3, r1, #1
 8001906:	6263      	str	r3, [r4, #36]	; 0x24
 8001908:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 800190a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800190c:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 800190e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001910:	3b01      	subs	r3, #1
 8001912:	b29b      	uxth	r3, r3
 8001914:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001916:	1e53      	subs	r3, r2, #1
 8001918:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 800191a:	6943      	ldr	r3, [r0, #20]
 800191c:	075b      	lsls	r3, r3, #29
 800191e:	d50a      	bpl.n	8001936 <HAL_I2C_Master_Transmit+0x176>
 8001920:	b14f      	cbz	r7, 8001936 <HAL_I2C_Master_Transmit+0x176>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001922:	1c8b      	adds	r3, r1, #2
 8001924:	6263      	str	r3, [r4, #36]	; 0x24
 8001926:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001928:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800192a:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 800192c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800192e:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001930:	3b01      	subs	r3, #1
 8001932:	b29b      	uxth	r3, r3
 8001934:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001936:	4632      	mov	r2, r6
 8001938:	990a      	ldr	r1, [sp, #40]	; 0x28
 800193a:	4620      	mov	r0, r4
 800193c:	f7ff fe8b 	bl	8001656 <I2C_WaitOnBTFFlagUntilTimeout>
 8001940:	2800      	cmp	r0, #0
 8001942:	d1d4      	bne.n	80018ee <HAL_I2C_Master_Transmit+0x12e>
    while(hi2c->XferSize > 0U)
 8001944:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1cb      	bne.n	80018e2 <HAL_I2C_Master_Transmit+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800194a:	6821      	ldr	r1, [r4, #0]
 800194c:	680a      	ldr	r2, [r1, #0]
 800194e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001952:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001954:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8001956:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800195a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800195e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001962:	e73b      	b.n	80017dc <HAL_I2C_Master_Transmit+0x1c>
 8001964:	00010002 	.word	0x00010002
 8001968:	00010008 	.word	0x00010008

0800196c <HAL_I2C_Master_Receive>:
{
 800196c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001970:	4604      	mov	r4, r0
 8001972:	b089      	sub	sp, #36	; 0x24
 8001974:	4698      	mov	r8, r3
 8001976:	460d      	mov	r5, r1
 8001978:	4691      	mov	r9, r2
 800197a:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 800197c:	f7ff fc34 	bl	80011e8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001980:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001984:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001986:	2b20      	cmp	r3, #32
 8001988:	d004      	beq.n	8001994 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY; 
 800198a:	2502      	movs	r5, #2
}
 800198c:	4628      	mov	r0, r5
 800198e:	b009      	add	sp, #36	; 0x24
 8001990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001994:	9000      	str	r0, [sp, #0]
 8001996:	2319      	movs	r3, #25
 8001998:	2201      	movs	r2, #1
 800199a:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 800199e:	4620      	mov	r0, r4
 80019a0:	f7ff fdd8 	bl	8001554 <I2C_WaitOnFlagUntilTimeout>
 80019a4:	2800      	cmp	r0, #0
 80019a6:	d1f0      	bne.n	800198a <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 80019a8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d0ec      	beq.n	800198a <HAL_I2C_Master_Receive+0x1e>
 80019b0:	2301      	movs	r3, #1
 80019b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80019bc:	bf5e      	ittt	pl
 80019be:	681a      	ldrpl	r2, [r3, #0]
 80019c0:	f042 0201 	orrpl.w	r2, r2, #1
 80019c4:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019cc:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80019ce:	2222      	movs	r2, #34	; 0x22
 80019d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019d4:	2210      	movs	r2, #16
 80019d6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019da:	2200      	movs	r2, #0
 80019dc:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019de:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80019e2:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019e6:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80019e8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80019ea:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80019ee:	8522      	strh	r2, [r4, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019f6:	601a      	str	r2, [r3, #0]
  if((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME)  || (hi2c->XferOptions == I2C_NO_OPTION_FRAME))
 80019f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80019fa:	2a04      	cmp	r2, #4
 80019fc:	d006      	beq.n	8001a0c <HAL_I2C_Master_Receive+0xa0>
 80019fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a00:	2a01      	cmp	r2, #1
 8001a02:	d003      	beq.n	8001a0c <HAL_I2C_Master_Receive+0xa0>
 8001a04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a06:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001a0a:	d104      	bne.n	8001a16 <HAL_I2C_Master_Receive+0xaa>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	e002      	b.n	8001a1c <HAL_I2C_Master_Receive+0xb0>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001a16:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a18:	2a11      	cmp	r2, #17
 8001a1a:	d0f7      	beq.n	8001a0c <HAL_I2C_Master_Receive+0xa0>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a1c:	9600      	str	r6, [sp, #0]
 8001a1e:	463b      	mov	r3, r7
 8001a20:	2200      	movs	r2, #0
 8001a22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a26:	4620      	mov	r0, r4
 8001a28:	f7ff fd94 	bl	8001554 <I2C_WaitOnFlagUntilTimeout>
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	d14a      	bne.n	8001ac6 <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a30:	6923      	ldr	r3, [r4, #16]
 8001a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a36:	6823      	ldr	r3, [r4, #0]
 8001a38:	d136      	bne.n	8001aa8 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001a3a:	f045 0501 	orr.w	r5, r5, #1
 8001a3e:	b2ed      	uxtb	r5, r5
 8001a40:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a42:	4633      	mov	r3, r6
 8001a44:	463a      	mov	r2, r7
 8001a46:	4982      	ldr	r1, [pc, #520]	; (8001c50 <HAL_I2C_Master_Receive+0x2e4>)
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f7ff fd43 	bl	80014d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a4e:	4605      	mov	r5, r0
 8001a50:	2800      	cmp	r0, #0
 8001a52:	d137      	bne.n	8001ac4 <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 8001a54:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	2a00      	cmp	r2, #0
 8001a5a:	d066      	beq.n	8001b2a <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 8001a5c:	2a01      	cmp	r2, #1
 8001a5e:	d177      	bne.n	8001b50 <HAL_I2C_Master_Receive+0x1e4>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a66:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a68:	9504      	str	r5, [sp, #16]
 8001a6a:	695a      	ldr	r2, [r3, #20]
 8001a6c:	9204      	str	r2, [sp, #16]
 8001a6e:	699a      	ldr	r2, [r3, #24]
 8001a70:	9204      	str	r2, [sp, #16]
 8001a72:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a7a:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a7c:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8001c58 <HAL_I2C_Master_Receive+0x2ec>
    while(hi2c->XferSize > 0U)
 8001a80:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d05b      	beq.n	8001b3e <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	f200 80c3 	bhi.w	8001c12 <HAL_I2C_Master_Receive+0x2a6>
        if(hi2c->XferSize == 1U)
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d17a      	bne.n	8001b86 <HAL_I2C_Master_Receive+0x21a>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001a90:	4632      	mov	r2, r6
 8001a92:	4639      	mov	r1, r7
 8001a94:	4620      	mov	r0, r4
 8001a96:	f7ff fdb1 	bl	80015fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	f000 8090 	beq.w	8001bc0 <HAL_I2C_Master_Receive+0x254>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001aa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001aa2:	2b20      	cmp	r3, #32
 8001aa4:	d116      	bne.n	8001ad4 <HAL_I2C_Master_Receive+0x168>
 8001aa6:	e03e      	b.n	8001b26 <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001aa8:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001aac:	f008 0806 	and.w	r8, r8, #6
 8001ab0:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001ab4:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ab6:	4967      	ldr	r1, [pc, #412]	; (8001c54 <HAL_I2C_Master_Receive+0x2e8>)
 8001ab8:	4633      	mov	r3, r6
 8001aba:	463a      	mov	r2, r7
 8001abc:	4620      	mov	r0, r4
 8001abe:	f7ff fd09 	bl	80014d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ac2:	b148      	cbz	r0, 8001ad8 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ac4:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	d128      	bne.n	8001b22 <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 8001ad0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8001ad4:	2501      	movs	r5, #1
 8001ad6:	e759      	b.n	800198c <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	b2ed      	uxtb	r5, r5
 8001adc:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ade:	463a      	mov	r2, r7
 8001ae0:	4633      	mov	r3, r6
 8001ae2:	495b      	ldr	r1, [pc, #364]	; (8001c50 <HAL_I2C_Master_Receive+0x2e4>)
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	f7ff fcf5 	bl	80014d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001aea:	4602      	mov	r2, r0
 8001aec:	2800      	cmp	r0, #0
 8001aee:	d1e9      	bne.n	8001ac4 <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	9007      	str	r0, [sp, #28]
 8001af4:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001af6:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af8:	9107      	str	r1, [sp, #28]
 8001afa:	6999      	ldr	r1, [r3, #24]
 8001afc:	9107      	str	r1, [sp, #28]
 8001afe:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b00:	6819      	ldr	r1, [r3, #0]
 8001b02:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001b06:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b08:	9600      	str	r6, [sp, #0]
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b10:	f7ff fd20 	bl	8001554 <I2C_WaitOnFlagUntilTimeout>
 8001b14:	2800      	cmp	r0, #0
 8001b16:	d1d6      	bne.n	8001ac6 <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001b18:	6822      	ldr	r2, [r4, #0]
 8001b1a:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8001b1e:	6113      	str	r3, [r2, #16]
 8001b20:	e78f      	b.n	8001a42 <HAL_I2C_Master_Receive+0xd6>
        __HAL_UNLOCK(hi2c);
 8001b22:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 8001b26:	2503      	movs	r5, #3
 8001b28:	e730      	b.n	800198c <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b2a:	9503      	str	r5, [sp, #12]
 8001b2c:	695a      	ldr	r2, [r3, #20]
 8001b2e:	9203      	str	r2, [sp, #12]
 8001b30:	699a      	ldr	r2, [r3, #24]
 8001b32:	9203      	str	r2, [sp, #12]
 8001b34:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b3c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b3e:	2320      	movs	r3, #32
 8001b40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001b4a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001b4e:	e71d      	b.n	800198c <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 8001b50:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b52:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8001b54:	d10d      	bne.n	8001b72 <HAL_I2C_Master_Receive+0x206>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b5a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b62:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b64:	9505      	str	r5, [sp, #20]
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	9205      	str	r2, [sp, #20]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	9305      	str	r3, [sp, #20]
 8001b6e:	9b05      	ldr	r3, [sp, #20]
 8001b70:	e784      	b.n	8001a7c <HAL_I2C_Master_Receive+0x110>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b76:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b78:	9506      	str	r5, [sp, #24]
 8001b7a:	695a      	ldr	r2, [r3, #20]
 8001b7c:	9206      	str	r2, [sp, #24]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	9306      	str	r3, [sp, #24]
 8001b82:	9b06      	ldr	r3, [sp, #24]
 8001b84:	e77a      	b.n	8001a7c <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 8001b86:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b88:	9600      	str	r6, [sp, #0]
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	4641      	mov	r1, r8
 8001b92:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001b94:	d122      	bne.n	8001bdc <HAL_I2C_Master_Receive+0x270>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b96:	f7ff fcdd 	bl	8001554 <I2C_WaitOnFlagUntilTimeout>
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	d1c3      	bne.n	8001b26 <HAL_I2C_Master_Receive+0x1ba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ba6:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ba8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	1c51      	adds	r1, r2, #1
 8001bae:	6261      	str	r1, [r4, #36]	; 0x24
 8001bb0:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001bb2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001bb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	6262      	str	r2, [r4, #36]	; 0x24
 8001bc6:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001bc8:	6912      	ldr	r2, [r2, #16]
 8001bca:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001bcc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001bd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001bda:	e751      	b.n	8001a80 <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bdc:	f7ff fcba 	bl	8001554 <I2C_WaitOnFlagUntilTimeout>
 8001be0:	4602      	mov	r2, r0
 8001be2:	2800      	cmp	r0, #0
 8001be4:	d19f      	bne.n	8001b26 <HAL_I2C_Master_Receive+0x1ba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	6819      	ldr	r1, [r3, #0]
 8001bea:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001bee:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001bf0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	1c48      	adds	r0, r1, #1
 8001bf6:	6260      	str	r0, [r4, #36]	; 0x24
 8001bf8:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 8001bfa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bfc:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001c02:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c04:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	463b      	mov	r3, r7
 8001c10:	e7c1      	b.n	8001b96 <HAL_I2C_Master_Receive+0x22a>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001c12:	4632      	mov	r2, r6
 8001c14:	4639      	mov	r1, r7
 8001c16:	4620      	mov	r0, r4
 8001c18:	f7ff fcf0 	bl	80015fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c1c:	2800      	cmp	r0, #0
 8001c1e:	f47f af3f 	bne.w	8001aa0 <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	6262      	str	r2, [r4, #36]	; 0x24
 8001c28:	6822      	ldr	r2, [r4, #0]
 8001c2a:	6912      	ldr	r2, [r2, #16]
 8001c2c:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001c2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c30:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001c32:	3b01      	subs	r3, #1
 8001c34:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001c36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c3e:	6953      	ldr	r3, [r2, #20]
 8001c40:	075b      	lsls	r3, r3, #29
 8001c42:	f57f af1d 	bpl.w	8001a80 <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c48:	1c59      	adds	r1, r3, #1
 8001c4a:	6261      	str	r1, [r4, #36]	; 0x24
 8001c4c:	e7bc      	b.n	8001bc8 <HAL_I2C_Master_Receive+0x25c>
 8001c4e:	bf00      	nop
 8001c50:	00010002 	.word	0x00010002
 8001c54:	00010008 	.word	0x00010008
 8001c58:	00010004 	.word	0x00010004

08001c5c <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8001c5e:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8001c66:	d00c      	beq.n	8001c82 <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8001c68:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8001c6a:	491a      	ldr	r1, [pc, #104]	; (8001cd4 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8001c6c:	680b      	ldr	r3, [r1, #0]
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001c76:	6808      	ldr	r0, [r1, #0]
 8001c78:	f000 0001 	and.w	r0, r0, #1
 8001c7c:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8001c7e:	b002      	add	sp, #8
 8001c80:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c84:	4914      	ldr	r1, [pc, #80]	; (8001cd8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001c86:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001c8a:	d00f      	beq.n	8001cac <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001c8c:	680a      	ldr	r2, [r1, #0]
 8001c8e:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001c92:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8001c96:	d1e7      	bne.n	8001c68 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8001c98:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8001c9c:	d1e4      	bne.n	8001c68 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8001c9e:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8001ca0:	6813      	ldr	r3, [r2, #0]
 8001ca2:	f043 0304 	orr.w	r3, r3, #4
 8001ca6:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8001ca8:	2201      	movs	r2, #1
 8001caa:	e7de      	b.n	8001c6a <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24
 8001cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cb6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001cba:	9201      	str	r2, [sp, #4]
 8001cbc:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001cbe:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc0:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001cc2:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc6:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8001cca:	6259      	str	r1, [r3, #36]	; 0x24
 8001ccc:	e7e1      	b.n	8001c92 <RCC_SetFlashLatencyFromMSIRange+0x36>
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40023c00 	.word	0x40023c00
 8001cd8:	40007000 	.word	0x40007000

08001cdc <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cdc:	6803      	ldr	r3, [r0, #0]
{
 8001cde:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce2:	07d9      	lsls	r1, r3, #31
{
 8001ce4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce6:	d46a      	bmi.n	8001dbe <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce8:	6823      	ldr	r3, [r4, #0]
 8001cea:	079a      	lsls	r2, r3, #30
 8001cec:	f100 80e6 	bmi.w	8001ebc <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	06de      	lsls	r6, r3, #27
 8001cf4:	d555      	bpl.n	8001da2 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001cf6:	4dc1      	ldr	r5, [pc, #772]	; (8001ffc <HAL_RCC_OscConfig+0x320>)
 8001cf8:	68ab      	ldr	r3, [r5, #8]
 8001cfa:	f013 0f0c 	tst.w	r3, #12
 8001cfe:	f040 8183 	bne.w	8002008 <HAL_RCC_OscConfig+0x32c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d06:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d0a:	6829      	ldr	r1, [r5, #0]
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	2201      	movs	r2, #1
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	420b      	tst	r3, r1
 8001d20:	d002      	beq.n	8001d28 <HAL_RCC_OscConfig+0x4c>
 8001d22:	69a3      	ldr	r3, [r4, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d06e      	beq.n	8001e06 <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d28:	4db4      	ldr	r5, [pc, #720]	; (8001ffc <HAL_RCC_OscConfig+0x320>)
 8001d2a:	6a20      	ldr	r0, [r4, #32]
 8001d2c:	686b      	ldr	r3, [r5, #4]
 8001d2e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001d32:	4298      	cmp	r0, r3
 8001d34:	f240 814a 	bls.w	8001fcc <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d38:	f7ff ff90 	bl	8001c5c <RCC_SetFlashLatencyFromMSIRange>
 8001d3c:	2800      	cmp	r0, #0
 8001d3e:	d162      	bne.n	8001e06 <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d40:	686b      	ldr	r3, [r5, #4]
 8001d42:	6a22      	ldr	r2, [r4, #32]
 8001d44:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d4c:	6869      	ldr	r1, [r5, #4]
 8001d4e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	fab3 f283 	clz	r2, r3
 8001d5a:	69e3      	ldr	r3, [r4, #28]
 8001d5c:	4093      	lsls	r3, r2
 8001d5e:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001d62:	4313      	orrs	r3, r2
 8001d64:	606b      	str	r3, [r5, #4]
 8001d66:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d6a:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001d6e:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8001d72:	4ba2      	ldr	r3, [pc, #648]	; (8001ffc <HAL_RCC_OscConfig+0x320>)
 8001d74:	21f0      	movs	r1, #240	; 0xf0
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	fa91 f1a1 	rbit	r1, r1
 8001d7c:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001d80:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8001d82:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001d86:	40c3      	lsrs	r3, r0
 8001d88:	1c58      	adds	r0, r3, #1
 8001d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8001d8e:	40ca      	lsrs	r2, r1
 8001d90:	499b      	ldr	r1, [pc, #620]	; (8002000 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001d92:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8001d94:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 8001d96:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8001d98:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001d9a:	4a9a      	ldr	r2, [pc, #616]	; (8002004 <HAL_RCC_OscConfig+0x328>)
 8001d9c:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8001d9e:	f7ff f9fb 	bl	8001198 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	071d      	lsls	r5, r3, #28
 8001da6:	f100 8191 	bmi.w	80020cc <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	0758      	lsls	r0, r3, #29
 8001dae:	f100 81d3 	bmi.w	8002158 <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001db4:	2a00      	cmp	r2, #0
 8001db6:	f040 8257 	bne.w	8002268 <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 8001dba:	2000      	movs	r0, #0
 8001dbc:	e024      	b.n	8001e08 <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001dbe:	4b8f      	ldr	r3, [pc, #572]	; (8001ffc <HAL_RCC_OscConfig+0x320>)
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	f002 020c 	and.w	r2, r2, #12
 8001dc6:	2a08      	cmp	r2, #8
 8001dc8:	d007      	beq.n	8001dda <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	f002 020c 	and.w	r2, r2, #12
 8001dd0:	2a0c      	cmp	r2, #12
 8001dd2:	d11c      	bne.n	8001e0e <HAL_RCC_OscConfig+0x132>
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	03db      	lsls	r3, r3, #15
 8001dd8:	d519      	bpl.n	8001e0e <HAL_RCC_OscConfig+0x132>
 8001dda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dde:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de2:	4a86      	ldr	r2, [pc, #536]	; (8001ffc <HAL_RCC_OscConfig+0x320>)
 8001de4:	6811      	ldr	r1, [r2, #0]
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	2201      	movs	r2, #1
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	420b      	tst	r3, r1
 8001dfa:	f43f af75 	beq.w	8001ce8 <HAL_RCC_OscConfig+0xc>
 8001dfe:	6863      	ldr	r3, [r4, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f47f af71 	bne.w	8001ce8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001e06:	2001      	movs	r0, #1
}
 8001e08:	b003      	add	sp, #12
 8001e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e0e:	6863      	ldr	r3, [r4, #4]
 8001e10:	4d7a      	ldr	r5, [pc, #488]	; (8001ffc <HAL_RCC_OscConfig+0x320>)
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d120      	bne.n	8001e58 <HAL_RCC_OscConfig+0x17c>
 8001e16:	682b      	ldr	r3, [r5, #0]
 8001e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e1e:	f7ff f9e3 	bl	80011e8 <HAL_GetTick>
 8001e22:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8001e26:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e28:	2601      	movs	r6, #1
 8001e2a:	4f74      	ldr	r7, [pc, #464]	; (8001ffc <HAL_RCC_OscConfig+0x320>)
 8001e2c:	fa95 f3a5 	rbit	r3, r5
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	fa95 f3a5 	rbit	r3, r5
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	fa06 f303 	lsl.w	r3, r6, r3
 8001e42:	4213      	tst	r3, r2
 8001e44:	f47f af50 	bne.w	8001ce8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e48:	f7ff f9ce 	bl	80011e8 <HAL_GetTick>
 8001e4c:	eba0 0008 	sub.w	r0, r0, r8
 8001e50:	2864      	cmp	r0, #100	; 0x64
 8001e52:	d9eb      	bls.n	8001e2c <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8001e54:	2003      	movs	r0, #3
 8001e56:	e7d7      	b.n	8001e08 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e58:	bb13      	cbnz	r3, 8001ea0 <HAL_RCC_OscConfig+0x1c4>
 8001e5a:	682b      	ldr	r3, [r5, #0]
 8001e5c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e64:	602b      	str	r3, [r5, #0]
 8001e66:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e68:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e70:	f7ff f9ba 	bl	80011e8 <HAL_GetTick>
 8001e74:	4680      	mov	r8, r0
 8001e76:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7a:	682a      	ldr	r2, [r5, #0]
 8001e7c:	fa96 f3a6 	rbit	r3, r6
 8001e80:	fab3 f383 	clz	r3, r3
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	fa07 f303 	lsl.w	r3, r7, r3
 8001e8c:	4213      	tst	r3, r2
 8001e8e:	f43f af2b 	beq.w	8001ce8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e92:	f7ff f9a9 	bl	80011e8 <HAL_GetTick>
 8001e96:	eba0 0008 	sub.w	r0, r0, r8
 8001e9a:	2864      	cmp	r0, #100	; 0x64
 8001e9c:	d9eb      	bls.n	8001e76 <HAL_RCC_OscConfig+0x19a>
 8001e9e:	e7d9      	b.n	8001e54 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea0:	2b05      	cmp	r3, #5
 8001ea2:	682b      	ldr	r3, [r5, #0]
 8001ea4:	d103      	bne.n	8001eae <HAL_RCC_OscConfig+0x1d2>
 8001ea6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eaa:	602b      	str	r3, [r5, #0]
 8001eac:	e7b3      	b.n	8001e16 <HAL_RCC_OscConfig+0x13a>
 8001eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb2:	602b      	str	r3, [r5, #0]
 8001eb4:	682b      	ldr	r3, [r5, #0]
 8001eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eba:	e7af      	b.n	8001e1c <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ebc:	4b4f      	ldr	r3, [pc, #316]	; (8001ffc <HAL_RCC_OscConfig+0x320>)
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	f002 020c 	and.w	r2, r2, #12
 8001ec4:	2a04      	cmp	r2, #4
 8001ec6:	d007      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	f002 020c 	and.w	r2, r2, #12
 8001ece:	2a0c      	cmp	r2, #12
 8001ed0:	d124      	bne.n	8001f1c <HAL_RCC_OscConfig+0x240>
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	03df      	lsls	r7, r3, #15
 8001ed6:	d421      	bmi.n	8001f1c <HAL_RCC_OscConfig+0x240>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ede:	4a47      	ldr	r2, [pc, #284]	; (8001ffc <HAL_RCC_OscConfig+0x320>)
 8001ee0:	6810      	ldr	r0, [r2, #0]
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	2101      	movs	r1, #1
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	4203      	tst	r3, r0
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	d002      	beq.n	8001f00 <HAL_RCC_OscConfig+0x224>
 8001efa:	68e2      	ldr	r2, [r4, #12]
 8001efc:	428a      	cmp	r2, r1
 8001efe:	d182      	bne.n	8001e06 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f00:	6858      	ldr	r0, [r3, #4]
 8001f02:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8001f06:	fa92 f2a2 	rbit	r2, r2
 8001f0a:	fab2 f182 	clz	r1, r2
 8001f0e:	6922      	ldr	r2, [r4, #16]
 8001f10:	408a      	lsls	r2, r1
 8001f12:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 8001f16:	430a      	orrs	r2, r1
 8001f18:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1a:	e6e9      	b.n	8001cf0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f1c:	68e2      	ldr	r2, [r4, #12]
 8001f1e:	2501      	movs	r5, #1
 8001f20:	b382      	cbz	r2, 8001f84 <HAL_RCC_OscConfig+0x2a8>
 8001f22:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f2e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001f36:	f7ff f957 	bl	80011e8 <HAL_GetTick>
 8001f3a:	2702      	movs	r7, #2
 8001f3c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3e:	4e2f      	ldr	r6, [pc, #188]	; (8001ffc <HAL_RCC_OscConfig+0x320>)
 8001f40:	fa97 f3a7 	rbit	r3, r7
 8001f44:	6832      	ldr	r2, [r6, #0]
 8001f46:	fa97 f3a7 	rbit	r3, r7
 8001f4a:	fab3 f383 	clz	r3, r3
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	fa05 f303 	lsl.w	r3, r5, r3
 8001f56:	4213      	tst	r3, r2
 8001f58:	d00d      	beq.n	8001f76 <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5a:	6871      	ldr	r1, [r6, #4]
 8001f5c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	fab3 f283 	clz	r2, r3
 8001f68:	6923      	ldr	r3, [r4, #16]
 8001f6a:	4093      	lsls	r3, r2
 8001f6c:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 8001f70:	4313      	orrs	r3, r2
 8001f72:	6073      	str	r3, [r6, #4]
 8001f74:	e6bc      	b.n	8001cf0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f76:	f7ff f937 	bl	80011e8 <HAL_GetTick>
 8001f7a:	eba0 0008 	sub.w	r0, r0, r8
 8001f7e:	2802      	cmp	r0, #2
 8001f80:	d9de      	bls.n	8001f40 <HAL_RCC_OscConfig+0x264>
 8001f82:	e767      	b.n	8001e54 <HAL_RCC_OscConfig+0x178>
 8001f84:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8001f88:	fab3 f383 	clz	r3, r3
 8001f8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f90:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f98:	f7ff f926 	bl	80011e8 <HAL_GetTick>
 8001f9c:	2602      	movs	r6, #2
 8001f9e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa0:	4f16      	ldr	r7, [pc, #88]	; (8001ffc <HAL_RCC_OscConfig+0x320>)
 8001fa2:	fa96 f3a6 	rbit	r3, r6
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	fa96 f3a6 	rbit	r3, r6
 8001fac:	fab3 f383 	clz	r3, r3
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	fa05 f303 	lsl.w	r3, r5, r3
 8001fb8:	4213      	tst	r3, r2
 8001fba:	f43f ae99 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fbe:	f7ff f913 	bl	80011e8 <HAL_GetTick>
 8001fc2:	eba0 0008 	sub.w	r0, r0, r8
 8001fc6:	2802      	cmp	r0, #2
 8001fc8:	d9eb      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x2c6>
 8001fca:	e743      	b.n	8001e54 <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fcc:	686b      	ldr	r3, [r5, #4]
 8001fce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001fd2:	4303      	orrs	r3, r0
 8001fd4:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fd6:	6869      	ldr	r1, [r5, #4]
 8001fd8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001fdc:	fa93 f3a3 	rbit	r3, r3
 8001fe0:	fab3 f283 	clz	r2, r3
 8001fe4:	69e3      	ldr	r3, [r4, #28]
 8001fe6:	4093      	lsls	r3, r2
 8001fe8:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001fec:	4313      	orrs	r3, r2
 8001fee:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ff0:	f7ff fe34 	bl	8001c5c <RCC_SetFlashLatencyFromMSIRange>
 8001ff4:	2800      	cmp	r0, #0
 8001ff6:	f43f aeb6 	beq.w	8001d66 <HAL_RCC_OscConfig+0x8a>
 8001ffa:	e704      	b.n	8001e06 <HAL_RCC_OscConfig+0x12a>
 8001ffc:	40023800 	.word	0x40023800
 8002000:	0800877b 	.word	0x0800877b
 8002004:	20000004 	.word	0x20000004
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002008:	69a2      	ldr	r2, [r4, #24]
 800200a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800200e:	2a00      	cmp	r2, #0
 8002010:	d037      	beq.n	8002082 <HAL_RCC_OscConfig+0x3a6>
 8002012:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	2601      	movs	r6, #1
 800201c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002020:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8002028:	f7ff f8de 	bl	80011e8 <HAL_GetTick>
 800202c:	f44f 7700 	mov.w	r7, #512	; 0x200
 8002030:	4680      	mov	r8, r0
 8002032:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8002036:	682a      	ldr	r2, [r5, #0]
 8002038:	fa97 f3a7 	rbit	r3, r7
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	fa06 f303 	lsl.w	r3, r6, r3
 8002048:	4213      	tst	r3, r2
 800204a:	d013      	beq.n	8002074 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800204c:	686b      	ldr	r3, [r5, #4]
 800204e:	6a22      	ldr	r2, [r4, #32]
 8002050:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002054:	4313      	orrs	r3, r2
 8002056:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002058:	6869      	ldr	r1, [r5, #4]
 800205a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	fab3 f283 	clz	r2, r3
 8002066:	69e3      	ldr	r3, [r4, #28]
 8002068:	4093      	lsls	r3, r2
 800206a:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 800206e:	4313      	orrs	r3, r2
 8002070:	606b      	str	r3, [r5, #4]
 8002072:	e696      	b.n	8001da2 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002074:	f7ff f8b8 	bl	80011e8 <HAL_GetTick>
 8002078:	eba0 0008 	sub.w	r0, r0, r8
 800207c:	2802      	cmp	r0, #2
 800207e:	d9d8      	bls.n	8002032 <HAL_RCC_OscConfig+0x356>
 8002080:	e6e8      	b.n	8001e54 <HAL_RCC_OscConfig+0x178>
 8002082:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800208e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002096:	f7ff f8a7 	bl	80011e8 <HAL_GetTick>
 800209a:	f44f 7600 	mov.w	r6, #512	; 0x200
 800209e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80020a0:	2701      	movs	r7, #1
 80020a2:	fa96 f3a6 	rbit	r3, r6
 80020a6:	682a      	ldr	r2, [r5, #0]
 80020a8:	fa96 f3a6 	rbit	r3, r6
 80020ac:	fab3 f383 	clz	r3, r3
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	fa07 f303 	lsl.w	r3, r7, r3
 80020b8:	4213      	tst	r3, r2
 80020ba:	f43f ae72 	beq.w	8001da2 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020be:	f7ff f893 	bl	80011e8 <HAL_GetTick>
 80020c2:	eba0 0008 	sub.w	r0, r0, r8
 80020c6:	2802      	cmp	r0, #2
 80020c8:	d9eb      	bls.n	80020a2 <HAL_RCC_OscConfig+0x3c6>
 80020ca:	e6c3      	b.n	8001e54 <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020cc:	6962      	ldr	r2, [r4, #20]
 80020ce:	2501      	movs	r5, #1
 80020d0:	49a9      	ldr	r1, [pc, #676]	; (8002378 <HAL_RCC_OscConfig+0x69c>)
 80020d2:	b302      	cbz	r2, 8002116 <HAL_RCC_OscConfig+0x43a>
 80020d4:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	440b      	add	r3, r1
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 80020e2:	f7ff f881 	bl	80011e8 <HAL_GetTick>
 80020e6:	2602      	movs	r6, #2
 80020e8:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ea:	4fa4      	ldr	r7, [pc, #656]	; (800237c <HAL_RCC_OscConfig+0x6a0>)
 80020ec:	fa96 f3a6 	rbit	r3, r6
 80020f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020f2:	fa96 f3a6 	rbit	r3, r6
 80020f6:	fab3 f383 	clz	r3, r3
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	fa05 f303 	lsl.w	r3, r5, r3
 8002102:	4213      	tst	r3, r2
 8002104:	f47f ae51 	bne.w	8001daa <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002108:	f7ff f86e 	bl	80011e8 <HAL_GetTick>
 800210c:	eba0 0008 	sub.w	r0, r0, r8
 8002110:	2802      	cmp	r0, #2
 8002112:	d9eb      	bls.n	80020ec <HAL_RCC_OscConfig+0x410>
 8002114:	e69e      	b.n	8001e54 <HAL_RCC_OscConfig+0x178>
 8002116:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	440b      	add	r3, r1
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002124:	f7ff f860 	bl	80011e8 <HAL_GetTick>
 8002128:	2602      	movs	r6, #2
 800212a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212c:	4f93      	ldr	r7, [pc, #588]	; (800237c <HAL_RCC_OscConfig+0x6a0>)
 800212e:	fa96 f3a6 	rbit	r3, r6
 8002132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002134:	fa96 f3a6 	rbit	r3, r6
 8002138:	fab3 f383 	clz	r3, r3
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	fa05 f303 	lsl.w	r3, r5, r3
 8002144:	4213      	tst	r3, r2
 8002146:	f43f ae30 	beq.w	8001daa <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800214a:	f7ff f84d 	bl	80011e8 <HAL_GetTick>
 800214e:	eba0 0008 	sub.w	r0, r0, r8
 8002152:	2802      	cmp	r0, #2
 8002154:	d9eb      	bls.n	800212e <HAL_RCC_OscConfig+0x452>
 8002156:	e67d      	b.n	8001e54 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002158:	4b88      	ldr	r3, [pc, #544]	; (800237c <HAL_RCC_OscConfig+0x6a0>)
 800215a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800215c:	00d1      	lsls	r1, r2, #3
 800215e:	d434      	bmi.n	80021ca <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8002160:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002164:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002170:	9301      	str	r3, [sp, #4]
 8002172:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002174:	4d82      	ldr	r5, [pc, #520]	; (8002380 <HAL_RCC_OscConfig+0x6a4>)
 8002176:	682b      	ldr	r3, [r5, #0]
 8002178:	05da      	lsls	r2, r3, #23
 800217a:	d528      	bpl.n	80021ce <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217c:	68a3      	ldr	r3, [r4, #8]
 800217e:	4d7f      	ldr	r5, [pc, #508]	; (800237c <HAL_RCC_OscConfig+0x6a0>)
 8002180:	2b01      	cmp	r3, #1
 8002182:	d134      	bne.n	80021ee <HAL_RCC_OscConfig+0x512>
 8002184:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800218c:	f7ff f82c 	bl	80011e8 <HAL_GetTick>
 8002190:	f44f 7500 	mov.w	r5, #512	; 0x200
 8002194:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002196:	2701      	movs	r7, #1
 8002198:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 800237c <HAL_RCC_OscConfig+0x6a0>
 800219c:	fa95 f3a5 	rbit	r3, r5
 80021a0:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80021a4:	fa95 f3a5 	rbit	r3, r5
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	f003 031f 	and.w	r3, r3, #31
 80021b0:	fa07 f303 	lsl.w	r3, r7, r3
 80021b4:	4213      	tst	r3, r2
 80021b6:	d04e      	beq.n	8002256 <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 80021b8:	2e00      	cmp	r6, #0
 80021ba:	f43f adfa 	beq.w	8001db2 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80021be:	4a6f      	ldr	r2, [pc, #444]	; (800237c <HAL_RCC_OscConfig+0x6a0>)
 80021c0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80021c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c6:	6253      	str	r3, [r2, #36]	; 0x24
 80021c8:	e5f3      	b.n	8001db2 <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 80021ca:	2600      	movs	r6, #0
 80021cc:	e7d2      	b.n	8002174 <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ce:	682b      	ldr	r3, [r5, #0]
 80021d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80021d6:	f7ff f807 	bl	80011e8 <HAL_GetTick>
 80021da:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021dc:	682b      	ldr	r3, [r5, #0]
 80021de:	05db      	lsls	r3, r3, #23
 80021e0:	d4cc      	bmi.n	800217c <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e2:	f7ff f801 	bl	80011e8 <HAL_GetTick>
 80021e6:	1bc0      	subs	r0, r0, r7
 80021e8:	2864      	cmp	r0, #100	; 0x64
 80021ea:	d9f7      	bls.n	80021dc <HAL_RCC_OscConfig+0x500>
 80021ec:	e632      	b.n	8001e54 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ee:	bb23      	cbnz	r3, 800223a <HAL_RCC_OscConfig+0x55e>
 80021f0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80021f2:	f44f 7700 	mov.w	r7, #512	; 0x200
 80021f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021fa:	636b      	str	r3, [r5, #52]	; 0x34
 80021fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fe:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002202:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002206:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002208:	f7fe ffee 	bl	80011e8 <HAL_GetTick>
 800220c:	4681      	mov	r9, r0
 800220e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002212:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002214:	fa97 f3a7 	rbit	r3, r7
 8002218:	fab3 f383 	clz	r3, r3
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	fa08 f303 	lsl.w	r3, r8, r3
 8002224:	4213      	tst	r3, r2
 8002226:	d0c7      	beq.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002228:	f7fe ffde 	bl	80011e8 <HAL_GetTick>
 800222c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002230:	eba0 0009 	sub.w	r0, r0, r9
 8002234:	4298      	cmp	r0, r3
 8002236:	d9ea      	bls.n	800220e <HAL_RCC_OscConfig+0x532>
 8002238:	e60c      	b.n	8001e54 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223a:	2b05      	cmp	r3, #5
 800223c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800223e:	d103      	bne.n	8002248 <HAL_RCC_OscConfig+0x56c>
 8002240:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002244:	636b      	str	r3, [r5, #52]	; 0x34
 8002246:	e79d      	b.n	8002184 <HAL_RCC_OscConfig+0x4a8>
 8002248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800224c:	636b      	str	r3, [r5, #52]	; 0x34
 800224e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002250:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002254:	e799      	b.n	800218a <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002256:	f7fe ffc7 	bl	80011e8 <HAL_GetTick>
 800225a:	f241 3388 	movw	r3, #5000	; 0x1388
 800225e:	eba0 0009 	sub.w	r0, r0, r9
 8002262:	4298      	cmp	r0, r3
 8002264:	d99a      	bls.n	800219c <HAL_RCC_OscConfig+0x4c0>
 8002266:	e5f5      	b.n	8001e54 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002268:	4d44      	ldr	r5, [pc, #272]	; (800237c <HAL_RCC_OscConfig+0x6a0>)
 800226a:	68ab      	ldr	r3, [r5, #8]
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	2b0c      	cmp	r3, #12
 8002272:	f43f adc8 	beq.w	8001e06 <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002276:	2a02      	cmp	r2, #2
 8002278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800227c:	d156      	bne.n	800232c <HAL_RCC_OscConfig+0x650>
 800227e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	2200      	movs	r2, #0
 8002288:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800228c:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002294:	f7fe ffa8 	bl	80011e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002298:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 800229a:	4680      	mov	r8, r0
 800229c:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a0:	2501      	movs	r5, #1
 80022a2:	fa97 f3a7 	rbit	r3, r7
 80022a6:	6832      	ldr	r2, [r6, #0]
 80022a8:	fa97 f3a7 	rbit	r3, r7
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	fa05 f303 	lsl.w	r3, r5, r3
 80022b8:	4213      	tst	r3, r2
 80022ba:	d130      	bne.n	800231e <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022bc:	68b2      	ldr	r2, [r6, #8]
 80022be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80022c2:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80022c6:	430b      	orrs	r3, r1
 80022c8:	4313      	orrs	r3, r2
 80022ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60b3      	str	r3, [r6, #8]
 80022d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022d4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022e0:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80022e8:	f7fe ff7e 	bl	80011e8 <HAL_GetTick>
 80022ec:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80022f0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f2:	2501      	movs	r5, #1
 80022f4:	4e21      	ldr	r6, [pc, #132]	; (800237c <HAL_RCC_OscConfig+0x6a0>)
 80022f6:	fa94 f3a4 	rbit	r3, r4
 80022fa:	6832      	ldr	r2, [r6, #0]
 80022fc:	fa94 f3a4 	rbit	r3, r4
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	fa05 f303 	lsl.w	r3, r5, r3
 800230c:	4213      	tst	r3, r2
 800230e:	f47f ad54 	bne.w	8001dba <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002312:	f7fe ff69 	bl	80011e8 <HAL_GetTick>
 8002316:	1bc0      	subs	r0, r0, r7
 8002318:	2802      	cmp	r0, #2
 800231a:	d9ec      	bls.n	80022f6 <HAL_RCC_OscConfig+0x61a>
 800231c:	e59a      	b.n	8001e54 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231e:	f7fe ff63 	bl	80011e8 <HAL_GetTick>
 8002322:	eba0 0008 	sub.w	r0, r0, r8
 8002326:	2802      	cmp	r0, #2
 8002328:	d9bb      	bls.n	80022a2 <HAL_RCC_OscConfig+0x5c6>
 800232a:	e593      	b.n	8001e54 <HAL_RCC_OscConfig+0x178>
 800232c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	2200      	movs	r2, #0
 8002336:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800233a:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002342:	f7fe ff51 	bl	80011e8 <HAL_GetTick>
 8002346:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800234a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234c:	2601      	movs	r6, #1
 800234e:	fa94 f3a4 	rbit	r3, r4
 8002352:	682a      	ldr	r2, [r5, #0]
 8002354:	fa94 f3a4 	rbit	r3, r4
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	fa06 f303 	lsl.w	r3, r6, r3
 8002364:	4213      	tst	r3, r2
 8002366:	f43f ad28 	beq.w	8001dba <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800236a:	f7fe ff3d 	bl	80011e8 <HAL_GetTick>
 800236e:	1bc0      	subs	r0, r0, r7
 8002370:	2802      	cmp	r0, #2
 8002372:	d9ec      	bls.n	800234e <HAL_RCC_OscConfig+0x672>
 8002374:	e56e      	b.n	8001e54 <HAL_RCC_OscConfig+0x178>
 8002376:	bf00      	nop
 8002378:	1091c1a0 	.word	0x1091c1a0
 800237c:	40023800 	.word	0x40023800
 8002380:	40007000 	.word	0x40007000

08002384 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002384:	491e      	ldr	r1, [pc, #120]	; (8002400 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8002386:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8002388:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 800238a:	f003 020c 	and.w	r2, r3, #12
 800238e:	2a08      	cmp	r2, #8
 8002390:	d005      	beq.n	800239e <HAL_RCC_GetSysClockFreq+0x1a>
 8002392:	2a0c      	cmp	r2, #12
 8002394:	d005      	beq.n	80023a2 <HAL_RCC_GetSysClockFreq+0x1e>
 8002396:	2a04      	cmp	r2, #4
 8002398:	d122      	bne.n	80023e0 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 800239a:	481a      	ldr	r0, [pc, #104]	; (8002404 <HAL_RCC_GetSysClockFreq+0x80>)
}
 800239c:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 800239e:	481a      	ldr	r0, [pc, #104]	; (8002408 <HAL_RCC_GetSysClockFreq+0x84>)
 80023a0:	bd10      	pop	{r4, pc}
 80023a2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023a6:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80023aa:	fab2 f282 	clz	r2, r2
 80023ae:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 80023b2:	fa20 f202 	lsr.w	r2, r0, r2
 80023b6:	4815      	ldr	r0, [pc, #84]	; (800240c <HAL_RCC_GetSysClockFreq+0x88>)
 80023b8:	5c84      	ldrb	r4, [r0, r2]
 80023ba:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 80023be:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 80023c2:	fab0 f280 	clz	r2, r0
 80023c6:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ca:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 80023cc:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ce:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 80023d0:	bf4c      	ite	mi
 80023d2:	4b0d      	ldrmi	r3, [pc, #52]	; (8002408 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 80023d4:	4b0b      	ldrpl	r3, [pc, #44]	; (8002404 <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 80023d6:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 80023d8:	4363      	muls	r3, r4
 80023da:	fbb3 f0f0 	udiv	r0, r3, r0
 80023de:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 80023e0:	6848      	ldr	r0, [r1, #4]
 80023e2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 80023f2:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 80023f4:	1c43      	adds	r3, r0, #1
 80023f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80023fa:	4098      	lsls	r0, r3
 80023fc:	bd10      	pop	{r4, pc}
 80023fe:	bf00      	nop
 8002400:	40023800 	.word	0x40023800
 8002404:	00f42400 	.word	0x00f42400
 8002408:	007a1200 	.word	0x007a1200
 800240c:	08008793 	.word	0x08008793

08002410 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002410:	4b6a      	ldr	r3, [pc, #424]	; (80025bc <HAL_RCC_ClockConfig+0x1ac>)
{
 8002412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002416:	681a      	ldr	r2, [r3, #0]
{
 8002418:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800241a:	f002 0201 	and.w	r2, r2, #1
 800241e:	428a      	cmp	r2, r1
{
 8002420:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002422:	d330      	bcc.n	8002486 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002424:	6832      	ldr	r2, [r6, #0]
 8002426:	0794      	lsls	r4, r2, #30
 8002428:	d440      	bmi.n	80024ac <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242a:	07d0      	lsls	r0, r2, #31
 800242c:	d446      	bmi.n	80024bc <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800242e:	4b63      	ldr	r3, [pc, #396]	; (80025bc <HAL_RCC_ClockConfig+0x1ac>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	f002 0201 	and.w	r2, r2, #1
 8002436:	4295      	cmp	r5, r2
 8002438:	f0c0 80ae 	bcc.w	8002598 <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243c:	6832      	ldr	r2, [r6, #0]
 800243e:	0751      	lsls	r1, r2, #29
 8002440:	f100 80b3 	bmi.w	80025aa <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002444:	0713      	lsls	r3, r2, #28
 8002446:	d507      	bpl.n	8002458 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002448:	4a5d      	ldr	r2, [pc, #372]	; (80025c0 <HAL_RCC_ClockConfig+0x1b0>)
 800244a:	6931      	ldr	r1, [r6, #16]
 800244c:	6893      	ldr	r3, [r2, #8]
 800244e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002452:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002456:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002458:	f7ff ff94 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 800245c:	4b58      	ldr	r3, [pc, #352]	; (80025c0 <HAL_RCC_ClockConfig+0x1b0>)
 800245e:	22f0      	movs	r2, #240	; 0xf0
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	fa92 f2a2 	rbit	r2, r2
 8002466:	fab2 f282 	clz	r2, r2
 800246a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800246e:	40d3      	lsrs	r3, r2
 8002470:	4a54      	ldr	r2, [pc, #336]	; (80025c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	40d8      	lsrs	r0, r3
 8002476:	4b54      	ldr	r3, [pc, #336]	; (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002478:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800247a:	2000      	movs	r0, #0
 800247c:	f7fe fe8c 	bl	8001198 <HAL_InitTick>
  return HAL_OK;
 8002480:	2000      	movs	r0, #0
}
 8002482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	2901      	cmp	r1, #1
 8002488:	bf02      	ittt	eq
 800248a:	681a      	ldreq	r2, [r3, #0]
 800248c:	f042 0204 	orreq.w	r2, r2, #4
 8002490:	601a      	streq	r2, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	f022 0201 	bic.w	r2, r2, #1
 8002498:	430a      	orrs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	4299      	cmp	r1, r3
 80024a4:	d0be      	beq.n	8002424 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80024a6:	2001      	movs	r0, #1
 80024a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ac:	4944      	ldr	r1, [pc, #272]	; (80025c0 <HAL_RCC_ClockConfig+0x1b0>)
 80024ae:	68b0      	ldr	r0, [r6, #8]
 80024b0:	688b      	ldr	r3, [r1, #8]
 80024b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024b6:	4303      	orrs	r3, r0
 80024b8:	608b      	str	r3, [r1, #8]
 80024ba:	e7b6      	b.n	800242a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024bc:	6872      	ldr	r2, [r6, #4]
 80024be:	4940      	ldr	r1, [pc, #256]	; (80025c0 <HAL_RCC_ClockConfig+0x1b0>)
 80024c0:	2a02      	cmp	r2, #2
 80024c2:	d10f      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xd4>
 80024c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c8:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80024cc:	6808      	ldr	r0, [r1, #0]
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	2101      	movs	r1, #1
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	4203      	tst	r3, r0
 80024e2:	e013      	b.n	800250c <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e4:	2a03      	cmp	r2, #3
 80024e6:	d102      	bne.n	80024ee <HAL_RCC_ClockConfig+0xde>
 80024e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ec:	e7ec      	b.n	80024c8 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024ee:	2a01      	cmp	r2, #1
 80024f0:	d129      	bne.n	8002546 <HAL_RCC_ClockConfig+0x136>
 80024f2:	2302      	movs	r3, #2
 80024f4:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f8:	6809      	ldr	r1, [r1, #0]
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800250c:	d0cb      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800250e:	4c2c      	ldr	r4, [pc, #176]	; (80025c0 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002514:	68a3      	ldr	r3, [r4, #8]
 8002516:	f023 0303 	bic.w	r3, r3, #3
 800251a:	431a      	orrs	r2, r3
 800251c:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800251e:	f7fe fe63 	bl	80011e8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002522:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002524:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002526:	2b02      	cmp	r3, #2
 8002528:	d110      	bne.n	800254c <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800252a:	68a3      	ldr	r3, [r4, #8]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b08      	cmp	r3, #8
 8002532:	f43f af7c 	beq.w	800242e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002536:	f7fe fe57 	bl	80011e8 <HAL_GetTick>
 800253a:	1bc0      	subs	r0, r0, r7
 800253c:	4540      	cmp	r0, r8
 800253e:	d9f4      	bls.n	800252a <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8002540:	2003      	movs	r0, #3
 8002542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800254a:	e7bd      	b.n	80024c8 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800254c:	2b03      	cmp	r3, #3
 800254e:	d10b      	bne.n	8002568 <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002550:	68a3      	ldr	r3, [r4, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b0c      	cmp	r3, #12
 8002558:	f43f af69 	beq.w	800242e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255c:	f7fe fe44 	bl	80011e8 <HAL_GetTick>
 8002560:	1bc0      	subs	r0, r0, r7
 8002562:	4540      	cmp	r0, r8
 8002564:	d9f4      	bls.n	8002550 <HAL_RCC_ClockConfig+0x140>
 8002566:	e7eb      	b.n	8002540 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002568:	2b01      	cmp	r3, #1
 800256a:	d110      	bne.n	800258e <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800256c:	68a3      	ldr	r3, [r4, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b04      	cmp	r3, #4
 8002574:	f43f af5b 	beq.w	800242e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002578:	f7fe fe36 	bl	80011e8 <HAL_GetTick>
 800257c:	1bc0      	subs	r0, r0, r7
 800257e:	4540      	cmp	r0, r8
 8002580:	d9f4      	bls.n	800256c <HAL_RCC_ClockConfig+0x15c>
 8002582:	e7dd      	b.n	8002540 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002584:	f7fe fe30 	bl	80011e8 <HAL_GetTick>
 8002588:	1bc0      	subs	r0, r0, r7
 800258a:	4540      	cmp	r0, r8
 800258c:	d8d8      	bhi.n	8002540 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800258e:	68a3      	ldr	r3, [r4, #8]
 8002590:	f013 0f0c 	tst.w	r3, #12
 8002594:	d1f6      	bne.n	8002584 <HAL_RCC_ClockConfig+0x174>
 8002596:	e74a      	b.n	800242e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	07da      	lsls	r2, r3, #31
 80025a4:	f53f af7f 	bmi.w	80024a6 <HAL_RCC_ClockConfig+0x96>
 80025a8:	e748      	b.n	800243c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025aa:	4905      	ldr	r1, [pc, #20]	; (80025c0 <HAL_RCC_ClockConfig+0x1b0>)
 80025ac:	68f0      	ldr	r0, [r6, #12]
 80025ae:	688b      	ldr	r3, [r1, #8]
 80025b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025b4:	4303      	orrs	r3, r0
 80025b6:	608b      	str	r3, [r1, #8]
 80025b8:	e744      	b.n	8002444 <HAL_RCC_ClockConfig+0x34>
 80025ba:	bf00      	nop
 80025bc:	40023c00 	.word	0x40023c00
 80025c0:	40023800 	.word	0x40023800
 80025c4:	0800877b 	.word	0x0800877b
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_RCC_GetHCLKFreq>:
}
 80025cc:	4b01      	ldr	r3, [pc, #4]	; (80025d4 <HAL_RCC_GetHCLKFreq+0x8>)
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000004 	.word	0x20000004

080025d8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	fa92 f2a2 	rbit	r2, r2
 80025e4:	fab2 f282 	clz	r2, r2
 80025e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025ec:	40d3      	lsrs	r3, r2
 80025ee:	4a04      	ldr	r2, [pc, #16]	; (8002600 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025f0:	5cd3      	ldrb	r3, [r2, r3]
 80025f2:	4a04      	ldr	r2, [pc, #16]	; (8002604 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80025f4:	6810      	ldr	r0, [r2, #0]
}    
 80025f6:	40d8      	lsrs	r0, r3
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	0800878b 	.word	0x0800878b
 8002604:	20000004 	.word	0x20000004

08002608 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <HAL_RCC_GetPCLK2Freq+0x24>)
 800260a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	fa92 f2a2 	rbit	r2, r2
 8002614:	fab2 f282 	clz	r2, r2
 8002618:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800261c:	40d3      	lsrs	r3, r2
 800261e:	4a04      	ldr	r2, [pc, #16]	; (8002630 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002620:	5cd3      	ldrb	r3, [r2, r3]
 8002622:	4a04      	ldr	r2, [pc, #16]	; (8002634 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8002624:	6810      	ldr	r0, [r2, #0]
} 
 8002626:	40d8      	lsrs	r0, r3
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800
 8002630:	0800878b 	.word	0x0800878b
 8002634:	20000004 	.word	0x20000004

08002638 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002638:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 800263c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800263e:	d00e      	beq.n	800265e <TIM_Base_SetConfig+0x26>
 8002640:	4a1c      	ldr	r2, [pc, #112]	; (80026b4 <TIM_Base_SetConfig+0x7c>)
 8002642:	4290      	cmp	r0, r2
 8002644:	d00b      	beq.n	800265e <TIM_Base_SetConfig+0x26>
 8002646:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800264a:	4290      	cmp	r0, r2
 800264c:	d007      	beq.n	800265e <TIM_Base_SetConfig+0x26>
 800264e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002652:	4290      	cmp	r0, r2
 8002654:	d003      	beq.n	800265e <TIM_Base_SetConfig+0x26>
 8002656:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 800265a:	4290      	cmp	r0, r2
 800265c:	d116      	bne.n	800268c <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800265e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002664:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 8002668:	ea43 0302 	orr.w	r3, r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800266c:	d015      	beq.n	800269a <TIM_Base_SetConfig+0x62>
 800266e:	4a11      	ldr	r2, [pc, #68]	; (80026b4 <TIM_Base_SetConfig+0x7c>)
 8002670:	4290      	cmp	r0, r2
 8002672:	d012      	beq.n	800269a <TIM_Base_SetConfig+0x62>
 8002674:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002678:	4290      	cmp	r0, r2
 800267a:	d00e      	beq.n	800269a <TIM_Base_SetConfig+0x62>
 800267c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002680:	4290      	cmp	r0, r2
 8002682:	d00a      	beq.n	800269a <TIM_Base_SetConfig+0x62>
 8002684:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8002688:	4290      	cmp	r0, r2
 800268a:	d006      	beq.n	800269a <TIM_Base_SetConfig+0x62>
 800268c:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <TIM_Base_SetConfig+0x80>)
 800268e:	4290      	cmp	r0, r2
 8002690:	d003      	beq.n	800269a <TIM_Base_SetConfig+0x62>
 8002692:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002696:	4290      	cmp	r0, r2
 8002698:	d103      	bne.n	80026a2 <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800269a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800269c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026a0:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80026a2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a4:	688b      	ldr	r3, [r1, #8]
 80026a6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80026a8:	680b      	ldr	r3, [r1, #0]
 80026aa:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler */
  TIMx->EGR = TIM_EGR_UG;
 80026ac:	2301      	movs	r3, #1
 80026ae:	6143      	str	r3, [r0, #20]
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40000400 	.word	0x40000400
 80026b8:	40010c00 	.word	0x40010c00

080026bc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026bc:	6a03      	ldr	r3, [r0, #32]
{
 80026be:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026c6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026c8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026ca:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026cc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026ce:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80026d2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026d4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80026d6:	f023 0302 	bic.w	r3, r3, #2

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026da:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026dc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026de:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 80026e0:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 80026e2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026e4:	6203      	str	r3, [r0, #32]
 80026e6:	bd30      	pop	{r4, r5, pc}

080026e8 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026e8:	6a03      	ldr	r3, [r0, #32]
{
 80026ea:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ec:	f023 0310 	bic.w	r3, r3, #16
 80026f0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026f2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026f6:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80026f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026fa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 80026fe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002702:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002704:	f023 0320 	bic.w	r3, r3, #32

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002708:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800270a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800270c:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4);
 800270e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCR2 = OC_Config->Pulse;
 8002712:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002714:	6203      	str	r3, [r0, #32]
 8002716:	bd30      	pop	{r4, r5, pc}

08002718 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002718:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800271a:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800271c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002720:	f024 0401 	bic.w	r4, r4, #1
 8002724:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002726:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002728:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800272a:	d00e      	beq.n	800274a <TIM_TI1_SetConfig+0x32>
 800272c:	4e10      	ldr	r6, [pc, #64]	; (8002770 <TIM_TI1_SetConfig+0x58>)
 800272e:	42b0      	cmp	r0, r6
 8002730:	d00b      	beq.n	800274a <TIM_TI1_SetConfig+0x32>
 8002732:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002736:	42b0      	cmp	r0, r6
 8002738:	d007      	beq.n	800274a <TIM_TI1_SetConfig+0x32>
 800273a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800273e:	42b0      	cmp	r0, r6
 8002740:	d003      	beq.n	800274a <TIM_TI1_SetConfig+0x32>
 8002742:	f506 467c 	add.w	r6, r6, #64512	; 0xfc00
 8002746:	42b0      	cmp	r0, r6
 8002748:	d10f      	bne.n	800276a <TIM_TI1_SetConfig+0x52>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800274a:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800274e:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 8002750:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002752:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 8002756:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002758:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800275c:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 8002760:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002762:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002764:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002766:	6201      	str	r1, [r0, #32]
}
 8002768:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800276a:	f044 0201 	orr.w	r2, r4, #1
 800276e:	e7ef      	b.n	8002750 <TIM_TI1_SetConfig+0x38>
 8002770:	40000400 	.word	0x40000400

08002774 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002774:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002776:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002778:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 800277a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800277c:	ea23 0304 	bic.w	r3, r3, r4
 8002780:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002782:	6a03      	ldr	r3, [r0, #32]
 8002784:	408a      	lsls	r2, r1
 8002786:	431a      	orrs	r2, r3
 8002788:	6202      	str	r2, [r0, #32]
 800278a:	bd10      	pop	{r4, pc}

0800278c <HAL_TIM_Base_Init>:
{
 800278c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800278e:	4604      	mov	r4, r0
 8002790:	b1a0      	cbz	r0, 80027bc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002792:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002796:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800279a:	b91b      	cbnz	r3, 80027a4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800279c:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_Base_MspInit(htim);
 80027a0:	f002 faa6 	bl	8004cf0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80027a4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80027a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ac:	1d21      	adds	r1, r4, #4
 80027ae:	f7ff ff43 	bl	8002638 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80027b2:	2301      	movs	r3, #1
  return HAL_OK;
 80027b4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80027b6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80027ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80027bc:	2001      	movs	r0, #1
}
 80027be:	bd10      	pop	{r4, pc}

080027c0 <HAL_TIM_PWM_MspInit>:
 80027c0:	4770      	bx	lr

080027c2 <HAL_TIM_PWM_Init>:
{
 80027c2:	b510      	push	{r4, lr}
  if(htim == NULL)
 80027c4:	4604      	mov	r4, r0
 80027c6:	b1a0      	cbz	r0, 80027f2 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80027c8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80027cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027d0:	b91b      	cbnz	r3, 80027da <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80027d2:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_PWM_MspInit(htim);
 80027d6:	f7ff fff3 	bl	80027c0 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80027da:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027dc:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80027de:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e2:	1d21      	adds	r1, r4, #4
 80027e4:	f7ff ff28 	bl	8002638 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80027e8:	2301      	movs	r3, #1
  return HAL_OK;
 80027ea:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80027ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80027f0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80027f2:	2001      	movs	r0, #1
}
 80027f4:	bd10      	pop	{r4, pc}

080027f6 <HAL_TIM_IC_MspInit>:
 80027f6:	4770      	bx	lr

080027f8 <HAL_TIM_IC_Init>:
{
 80027f8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80027fa:	4604      	mov	r4, r0
 80027fc:	b1a0      	cbz	r0, 8002828 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80027fe:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002802:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002806:	b91b      	cbnz	r3, 8002810 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002808:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_IC_MspInit(htim);
 800280c:	f7ff fff3 	bl	80027f6 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002810:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002812:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002814:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002818:	1d21      	adds	r1, r4, #4
 800281a:	f7ff ff0d 	bl	8002638 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800281e:	2301      	movs	r3, #1
  return HAL_OK;
 8002820:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002822:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002826:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002828:	2001      	movs	r0, #1
}
 800282a:	bd10      	pop	{r4, pc}

0800282c <HAL_TIM_IC_Start>:
{
 800282c:	b510      	push	{r4, lr}
 800282e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002830:	2201      	movs	r2, #1
 8002832:	6800      	ldr	r0, [r0, #0]
 8002834:	f7ff ff9e 	bl	8002774 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8002838:	6822      	ldr	r2, [r4, #0]
}
 800283a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800283c:	6813      	ldr	r3, [r2, #0]
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6013      	str	r3, [r2, #0]
}
 8002844:	bd10      	pop	{r4, pc}

08002846 <HAL_TIM_PWM_Start>:
 8002846:	f7ff bff1 	b.w	800282c <HAL_TIM_IC_Start>

0800284a <HAL_TIM_IC_Start_IT>:
{
 800284a:	b510      	push	{r4, lr}
 800284c:	4604      	mov	r4, r0
  switch (Channel)
 800284e:	290c      	cmp	r1, #12
 8002850:	d80d      	bhi.n	800286e <HAL_TIM_IC_Start_IT+0x24>
 8002852:	e8df f001 	tbb	[pc, r1]
 8002856:	0c07      	.short	0x0c07
 8002858:	0c170c0c 	.word	0x0c170c0c
 800285c:	0c1c0c0c 	.word	0x0c1c0c0c
 8002860:	0c0c      	.short	0x0c0c
 8002862:	21          	.byte	0x21
 8002863:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002864:	6802      	ldr	r2, [r0, #0]
 8002866:	68d3      	ldr	r3, [r2, #12]
 8002868:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800286c:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800286e:	6820      	ldr	r0, [r4, #0]
 8002870:	2201      	movs	r2, #1
 8002872:	f7ff ff7f 	bl	8002774 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8002876:	6822      	ldr	r2, [r4, #0]
}
 8002878:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800287a:	6813      	ldr	r3, [r2, #0]
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6013      	str	r3, [r2, #0]
}
 8002882:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002884:	6802      	ldr	r2, [r0, #0]
 8002886:	68d3      	ldr	r3, [r2, #12]
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	e7ee      	b.n	800286c <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800288e:	6802      	ldr	r2, [r0, #0]
 8002890:	68d3      	ldr	r3, [r2, #12]
 8002892:	f043 0308 	orr.w	r3, r3, #8
 8002896:	e7e9      	b.n	800286c <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002898:	6802      	ldr	r2, [r0, #0]
 800289a:	68d3      	ldr	r3, [r2, #12]
 800289c:	f043 0310 	orr.w	r3, r3, #16
 80028a0:	e7e4      	b.n	800286c <HAL_TIM_IC_Start_IT+0x22>

080028a2 <HAL_TIM_Encoder_Init>:
{
 80028a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a4:	460c      	mov	r4, r1
  if(htim == NULL)
 80028a6:	4605      	mov	r5, r0
 80028a8:	2800      	cmp	r0, #0
 80028aa:	d041      	beq.n	8002930 <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 80028ac:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80028b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028b4:	b91b      	cbnz	r3, 80028be <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 80028b6:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_Encoder_MspInit(htim);
 80028ba:	f002 f9d7 	bl	8004c6c <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80028be:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;
 80028c0:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80028c2:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;
 80028c6:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80028ca:	6883      	ldr	r3, [r0, #8]
 80028cc:	f023 0307 	bic.w	r3, r3, #7
 80028d0:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d2:	f7ff feb1 	bl	8002638 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 80028d6:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 80028d8:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 80028da:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 80028dc:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 80028de:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 80028e0:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 80028e2:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80028e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028e8:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 80028ec:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 80028f0:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80028f2:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80028f6:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
 80028f8:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002900:	68e1      	ldr	r1, [r4, #12]
  tmpccer = htim->Instance->CCER;
 8002902:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 8002904:	430b      	orrs	r3, r1
 8002906:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002908:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 800290c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002910:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 8002912:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002914:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 8002918:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 800291a:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800291c:	6183      	str	r3, [r0, #24]
  htim->State= HAL_TIM_STATE_READY;
 800291e:	2301      	movs	r3, #1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 8002920:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 8002924:	4317      	orrs	r7, r2
  htim->Instance->CCER = tmpccer;
 8002926:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 8002928:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  return HAL_OK;
 800292c:	2000      	movs	r0, #0
 800292e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002930:	2001      	movs	r0, #1
}
 8002932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002934 <HAL_TIM_Encoder_Start>:
{
 8002934:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8002936:	b189      	cbz	r1, 800295c <HAL_TIM_Encoder_Start+0x28>
 8002938:	2904      	cmp	r1, #4
 800293a:	d007      	beq.n	800294c <HAL_TIM_Encoder_Start+0x18>
  TIMx->CCER &= ~tmp;
 800293c:	6a1a      	ldr	r2, [r3, #32]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002944:	6a1a      	ldr	r2, [r3, #32]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 800294c:	6a1a      	ldr	r2, [r3, #32]
 800294e:	f022 0210 	bic.w	r2, r2, #16
 8002952:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002954:	6a1a      	ldr	r2, [r3, #32]
 8002956:	f042 0210 	orr.w	r2, r2, #16
 800295a:	e006      	b.n	800296a <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 800295c:	6a1a      	ldr	r2, [r3, #32]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002964:	6a1a      	ldr	r2, [r3, #32]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 800296c:	681a      	ldr	r2, [r3, #0]
}
 800296e:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8002970:	f042 0201 	orr.w	r2, r2, #1
 8002974:	601a      	str	r2, [r3, #0]
}
 8002976:	4770      	bx	lr

08002978 <HAL_TIM_IC_ConfigChannel>:
{
 8002978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800297a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 800297e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002980:	2b01      	cmp	r3, #1
{
 8002982:	460d      	mov	r5, r1
 8002984:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002988:	d019      	beq.n	80029be <HAL_TIM_IC_ConfigChannel+0x46>
 800298a:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  __HAL_LOCK(htim);
 8002990:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (Channel == TIM_CHANNEL_1)
 8002994:	b9a2      	cbnz	r2, 80029c0 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8002996:	68cb      	ldr	r3, [r1, #12]
 8002998:	6820      	ldr	r0, [r4, #0]
 800299a:	c906      	ldmia	r1, {r1, r2}
 800299c:	f7ff febc 	bl	8002718 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80029a0:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80029a2:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	f022 020c 	bic.w	r2, r2, #12
 80029aa:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80029b2:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80029b4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80029b6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(htim);
 80029ba:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 80029be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 80029c0:	2a04      	cmp	r2, #4
 80029c2:	688e      	ldr	r6, [r1, #8]
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	c982      	ldmia	r1, {r1, r7}
 80029c8:	68e8      	ldr	r0, [r5, #12]
 80029ca:	d11f      	bne.n	8002a0c <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029cc:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 80029ce:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029d0:	f022 0210 	bic.w	r2, r2, #16
 80029d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d6:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 80029d8:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80029da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8);
 80029de:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 80029e2:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029e4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80029e8:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 80029ea:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80029ec:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029f0:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80029f4:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80029f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f8:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80029fa:	699a      	ldr	r2, [r3, #24]
 80029fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002a00:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8);
 8002a02:	699a      	ldr	r2, [r3, #24]
 8002a04:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002a08:	619e      	str	r6, [r3, #24]
 8002a0a:	e7d2      	b.n	80029b2 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8002a0c:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a0e:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8002a10:	d11c      	bne.n	8002a4c <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a16:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002a18:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 8002a1a:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002a1c:	f022 0203 	bic.w	r2, r2, #3
  tmpccer = TIMx->CCER;
 8002a20:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= TIM_ICSelection;
 8002a22:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 8002a24:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002a26:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002a2a:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 8002a2c:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002a2e:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002a32:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002a36:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8002a38:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002a3a:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002a3c:	69da      	ldr	r2, [r3, #28]
 8002a3e:	f022 020c 	bic.w	r2, r2, #12
 8002a42:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002a44:	69da      	ldr	r2, [r3, #28]
 8002a46:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
 8002a48:	61de      	str	r6, [r3, #28]
 8002a4a:	e7b2      	b.n	80029b2 <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002a52:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 8002a54:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002a56:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccer = TIMx->CCER;
 8002a5a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= (TIM_ICSelection << 8);
 8002a5c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002a60:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 8002a64:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002a66:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 8002a68:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002a6a:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002a6e:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002a72:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8002a74:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002a76:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002a78:	69da      	ldr	r2, [r3, #28]
 8002a7a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002a7e:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
 8002a80:	69da      	ldr	r2, [r3, #28]
 8002a82:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002a86:	e7df      	b.n	8002a48 <HAL_TIM_IC_ConfigChannel+0xd0>

08002a88 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8002a88:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8002a8c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002a8e:	2b01      	cmp	r3, #1
{
 8002a90:	4605      	mov	r5, r0
 8002a92:	460c      	mov	r4, r1
 8002a94:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002a98:	d025      	beq.n	8002ae6 <HAL_TIM_PWM_ConfigChannel+0x5e>
 8002a9a:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002a9c:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
  __HAL_LOCK(htim);
 8002aa0:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
  switch (Channel)
 8002aa4:	2a0c      	cmp	r2, #12
 8002aa6:	d818      	bhi.n	8002ada <HAL_TIM_PWM_ConfigChannel+0x52>
 8002aa8:	e8df f002 	tbb	[pc, r2]
 8002aac:	17171707 	.word	0x17171707
 8002ab0:	1717171e 	.word	0x1717171e
 8002ab4:	1717172f 	.word	0x1717172f
 8002ab8:	52          	.byte	0x52
 8002ab9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002aba:	6828      	ldr	r0, [r5, #0]
 8002abc:	f7ff fdfe 	bl	80026bc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ac0:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ac2:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ac4:	699a      	ldr	r2, [r3, #24]
 8002ac6:	f042 0208 	orr.w	r2, r2, #8
 8002aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	f022 0204 	bic.w	r2, r2, #4
 8002ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002ad8:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002ada:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002adc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002ade:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  __HAL_UNLOCK(htim);
 8002ae2:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
}
 8002ae6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ae8:	6828      	ldr	r0, [r5, #0]
 8002aea:	f7ff fdfd 	bl	80026e8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002aee:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002af0:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002af2:	699a      	ldr	r2, [r3, #24]
 8002af4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002af8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b00:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002b02:	699a      	ldr	r2, [r3, #24]
 8002b04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b08:	e7e6      	b.n	8002ad8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b0a:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= OC_Config->OCMode;
 8002b0c:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b0e:	6a1a      	ldr	r2, [r3, #32]
 8002b10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b14:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8002b16:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002b18:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002b1a:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8002b1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b20:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002b24:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002b26:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8002b28:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002b2a:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002b2c:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002b2e:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  TIMx->CCR3 = OC_Config->Pulse;
 8002b32:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8002b34:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b36:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b38:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b3a:	f042 0208 	orr.w	r2, r2, #8
 8002b3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b40:	69da      	ldr	r2, [r3, #28]
 8002b42:	f022 0204 	bic.w	r2, r2, #4
 8002b46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002b4c:	61da      	str	r2, [r3, #28]
    break;
 8002b4e:	e7c4      	b.n	8002ada <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b50:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002b52:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b54:	6a1a      	ldr	r2, [r3, #32]
 8002b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b5a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8002b5c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002b5e:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002b60:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8002b62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b66:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002b6a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 8002b6e:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8002b70:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002b72:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002b74:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12);
 8002b76:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 8002b7a:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8002b7c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b7e:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002b80:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b88:	69da      	ldr	r2, [r3, #28]
 8002b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b8e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002b90:	69da      	ldr	r2, [r3, #28]
 8002b92:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b96:	e7d9      	b.n	8002b4c <HAL_TIM_PWM_ConfigChannel+0xc4>

08002b98 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002b98:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8002b9c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	f04f 0302 	mov.w	r3, #2
 8002ba4:	d01c      	beq.n	8002be0 <HAL_TIM_ConfigClockSource+0x48>
 8002ba6:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  tmpsmcr = htim->Instance->SMCR;
 8002bac:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002bae:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  tmpsmcr = htim->Instance->SMCR;
 8002bb2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002bb8:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002bbc:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002bbe:	680a      	ldr	r2, [r1, #0]
 8002bc0:	2a40      	cmp	r2, #64	; 0x40
 8002bc2:	d079      	beq.n	8002cb8 <HAL_TIM_ConfigClockSource+0x120>
 8002bc4:	d819      	bhi.n	8002bfa <HAL_TIM_ConfigClockSource+0x62>
 8002bc6:	2a10      	cmp	r2, #16
 8002bc8:	f000 8093 	beq.w	8002cf2 <HAL_TIM_ConfigClockSource+0x15a>
 8002bcc:	d80a      	bhi.n	8002be4 <HAL_TIM_ConfigClockSource+0x4c>
 8002bce:	2a00      	cmp	r2, #0
 8002bd0:	f000 8089 	beq.w	8002ce6 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  __HAL_UNLOCK(htim);
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  __HAL_LOCK(htim);
 8002be0:	4618      	mov	r0, r3
}
 8002be2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002be4:	2a20      	cmp	r2, #32
 8002be6:	f000 808a 	beq.w	8002cfe <HAL_TIM_ConfigClockSource+0x166>
 8002bea:	2a30      	cmp	r2, #48	; 0x30
 8002bec:	d1f2      	bne.n	8002bd4 <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 8002bee:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002bf0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002bf4:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002bf8:	e036      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002bfa:	2a70      	cmp	r2, #112	; 0x70
 8002bfc:	d036      	beq.n	8002c6c <HAL_TIM_ConfigClockSource+0xd4>
 8002bfe:	d81b      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0xa0>
 8002c00:	2a50      	cmp	r2, #80	; 0x50
 8002c02:	d042      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0xf2>
 8002c04:	2a60      	cmp	r2, #96	; 0x60
 8002c06:	d1e5      	bne.n	8002bd4 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c08:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c0a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c0c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c10:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c12:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c14:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002c16:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c18:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8002c20:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12);
 8002c24:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002c28:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c2a:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002c2c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002c2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002c32:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002c36:	e017      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002c38:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002c3c:	d011      	beq.n	8002c62 <HAL_TIM_ConfigClockSource+0xca>
 8002c3e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002c42:	d1c7      	bne.n	8002bd4 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002c44:	688a      	ldr	r2, [r1, #8]
 8002c46:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002c48:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002c4a:	68c9      	ldr	r1, [r1, #12]
 8002c4c:	432a      	orrs	r2, r5
  tmpsmcr &= (uint32_t)(~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 8002c4e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002c52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c56:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002c58:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c60:	e002      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	e7b3      	b.n	8002bd4 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002c6c:	688a      	ldr	r2, [r1, #8]
 8002c6e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002c70:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002c72:	68c9      	ldr	r1, [r1, #12]
 8002c74:	432a      	orrs	r2, r5
  tmpsmcr &= (uint32_t)(~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 8002c76:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002c7a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c7e:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002c80:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002c82:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c84:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002c88:	e7ee      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8a:	684c      	ldr	r4, [r1, #4]
 8002c8c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002c8e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c90:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c92:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c96:	f025 0501 	bic.w	r5, r5, #1
 8002c9a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c9c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002c9e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ca0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002ca4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002ca8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002caa:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002cac:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002cae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002cb2:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002cb6:	e7d7      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cb8:	684c      	ldr	r4, [r1, #4]
 8002cba:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002cbc:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cbe:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cc0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cc4:	f025 0501 	bic.w	r5, r5, #1
 8002cc8:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cca:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002ccc:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002cd2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002cda:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002cdc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002ce0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002ce4:	e7c0      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002ce6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002ce8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002cec:	f042 0207 	orr.w	r2, r2, #7
 8002cf0:	e7ba      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002cf2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002cf4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002cf8:	f042 0217 	orr.w	r2, r2, #23
 8002cfc:	e7b4      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002cfe:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002d00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002d04:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002d08:	e7ae      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0xd0>

08002d0a <HAL_TIM_PeriodElapsedCallback>:
 8002d0a:	4770      	bx	lr

08002d0c <HAL_TIM_OC_DelayElapsedCallback>:
 8002d0c:	4770      	bx	lr

08002d0e <HAL_TIM_PWM_PulseFinishedCallback>:
 8002d0e:	4770      	bx	lr

08002d10 <HAL_TIM_TriggerCallback>:
 8002d10:	4770      	bx	lr

08002d12 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d12:	6803      	ldr	r3, [r0, #0]
{
 8002d14:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d16:	691a      	ldr	r2, [r3, #16]
{
 8002d18:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d1a:	0791      	lsls	r1, r2, #30
 8002d1c:	d50e      	bpl.n	8002d3c <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	0792      	lsls	r2, r2, #30
 8002d22:	d50b      	bpl.n	8002d3c <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d24:	f06f 0202 	mvn.w	r2, #2
 8002d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d2a:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002d2c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d2e:	7502      	strb	r2, [r0, #20]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002d30:	0799      	lsls	r1, r3, #30
 8002d32:	d05c      	beq.n	8002dee <HAL_TIM_IRQHandler+0xdc>
          HAL_TIM_IC_CaptureCallback(htim);
 8002d34:	f001 faba 	bl	80042ac <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	0752      	lsls	r2, r2, #29
 8002d42:	d510      	bpl.n	8002d66 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	0750      	lsls	r0, r2, #29
 8002d48:	d50d      	bpl.n	8002d66 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d4a:	f06f 0204 	mvn.w	r2, #4
 8002d4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d50:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002d52:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d54:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002d56:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002d5c:	d04d      	beq.n	8002dfa <HAL_TIM_IRQHandler+0xe8>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	f001 faa5 	bl	80042ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d62:	2300      	movs	r3, #0
 8002d64:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	0711      	lsls	r1, r2, #28
 8002d6c:	d50f      	bpl.n	8002d8e <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	0712      	lsls	r2, r2, #28
 8002d72:	d50c      	bpl.n	8002d8e <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d74:	f06f 0208 	mvn.w	r2, #8
 8002d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d7a:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002d7c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d7e:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002d80:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002d82:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002d84:	d03f      	beq.n	8002e06 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d86:	f001 fa91 	bl	80042ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	06d0      	lsls	r0, r2, #27
 8002d94:	d510      	bpl.n	8002db8 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	06d1      	lsls	r1, r2, #27
 8002d9a:	d50d      	bpl.n	8002db8 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d9c:	f06f 0210 	mvn.w	r2, #16
 8002da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002da2:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002da4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002da6:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002da8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002dac:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002dae:	d030      	beq.n	8002e12 <HAL_TIM_IRQHandler+0x100>
        HAL_TIM_IC_CaptureCallback(htim);
 8002db0:	f001 fa7c 	bl	80042ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db4:	2300      	movs	r3, #0
 8002db6:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	07d2      	lsls	r2, r2, #31
 8002dbe:	d508      	bpl.n	8002dd2 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	07d0      	lsls	r0, r2, #31
 8002dc4:	d505      	bpl.n	8002dd2 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dc6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dcc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dce:	f7ff ff9c 	bl	8002d0a <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	0651      	lsls	r1, r2, #25
 8002dd8:	d508      	bpl.n	8002dec <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	0652      	lsls	r2, r2, #25
 8002dde:	d505      	bpl.n	8002dec <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002de0:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002de4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002de6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002de8:	f7ff ff92 	bl	8002d10 <HAL_TIM_TriggerCallback>
 8002dec:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dee:	f7ff ff8d 	bl	8002d0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df2:	4620      	mov	r0, r4
 8002df4:	f7ff ff8b 	bl	8002d0e <HAL_TIM_PWM_PulseFinishedCallback>
 8002df8:	e79e      	b.n	8002d38 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfa:	f7ff ff87 	bl	8002d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfe:	4620      	mov	r0, r4
 8002e00:	f7ff ff85 	bl	8002d0e <HAL_TIM_PWM_PulseFinishedCallback>
 8002e04:	e7ad      	b.n	8002d62 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e06:	f7ff ff81 	bl	8002d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f7ff ff7f 	bl	8002d0e <HAL_TIM_PWM_PulseFinishedCallback>
 8002e10:	e7bb      	b.n	8002d8a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e12:	f7ff ff7b 	bl	8002d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e16:	4620      	mov	r0, r4
 8002e18:	f7ff ff79 	bl	8002d0e <HAL_TIM_PWM_PulseFinishedCallback>
 8002e1c:	e7ca      	b.n	8002db4 <HAL_TIM_IRQHandler+0xa2>

08002e1e <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002e1e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8002e22:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	f04f 0302 	mov.w	r3, #2
 8002e2a:	d018      	beq.n	8002e5e <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002e2c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002e30:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002e32:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002e34:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002e36:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002e38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e3c:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	4322      	orrs	r2, r4
 8002e42:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e4a:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002e52:	2301      	movs	r3, #1
 8002e54:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  __HAL_UNLOCK(htim);
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  __HAL_LOCK(htim);
 8002e5e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002e60:	bd10      	pop	{r4, pc}
	...

08002e64 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e68:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e6a:	6805      	ldr	r5, [r0, #0]
 8002e6c:	68c2      	ldr	r2, [r0, #12]
 8002e6e:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e70:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e76:	4313      	orrs	r3, r2
 8002e78:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e7a:	6883      	ldr	r3, [r0, #8]
 8002e7c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8002e7e:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e80:	4303      	orrs	r3, r0
 8002e82:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002e86:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e8a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 8002e8c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e90:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e96:	696b      	ldr	r3, [r5, #20]
 8002e98:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8002e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea0:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ea2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ea6:	616b      	str	r3, [r5, #20]
 8002ea8:	4b7e      	ldr	r3, [pc, #504]	; (80030a4 <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eaa:	d17f      	bne.n	8002fac <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8002eac:	429d      	cmp	r5, r3
 8002eae:	f04f 0419 	mov.w	r4, #25
 8002eb2:	d147      	bne.n	8002f44 <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002eb4:	f7ff fba8 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
 8002eb8:	fb04 f300 	mul.w	r3, r4, r0
 8002ebc:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8002ec0:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002ec4:	007f      	lsls	r7, r7, #1
 8002ec6:	fbb3 f3f7 	udiv	r3, r3, r7
 8002eca:	fbb3 f3f8 	udiv	r3, r3, r8
 8002ece:	011f      	lsls	r7, r3, #4
 8002ed0:	f7ff fb9a 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
 8002ed4:	4360      	muls	r0, r4
 8002ed6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fbb0 f6f3 	udiv	r6, r0, r3
 8002ee0:	f7ff fb92 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
 8002ee4:	4360      	muls	r0, r4
 8002ee6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef0:	fbb3 f3f8 	udiv	r3, r3, r8
 8002ef4:	fb08 6313 	mls	r3, r8, r3, r6
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	3332      	adds	r3, #50	; 0x32
 8002efc:	fbb3 f3f8 	udiv	r3, r3, r8
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8002f06:	f7ff fb7f 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
 8002f0a:	4360      	muls	r0, r4
 8002f0c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002f10:	0052      	lsls	r2, r2, #1
 8002f12:	fbb0 faf2 	udiv	sl, r0, r2
 8002f16:	f7ff fb77 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002f1a:	4360      	muls	r0, r4
 8002f1c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f26:	fbb3 f3f8 	udiv	r3, r3, r8
 8002f2a:	fb08 a313 	mls	r3, r8, r3, sl
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	3332      	adds	r3, #50	; 0x32
 8002f32:	fbb3 f3f8 	udiv	r3, r3, r8
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002f3c:	4433      	add	r3, r6
 8002f3e:	60ab      	str	r3, [r5, #8]
 8002f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002f44:	f7ff fb48 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8002f48:	fb04 f300 	mul.w	r3, r4, r0
 8002f4c:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8002f50:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002f54:	007f      	lsls	r7, r7, #1
 8002f56:	fbb3 f3f7 	udiv	r3, r3, r7
 8002f5a:	fbb3 f3f8 	udiv	r3, r3, r8
 8002f5e:	011f      	lsls	r7, r3, #4
 8002f60:	f7ff fb3a 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8002f64:	4360      	muls	r0, r4
 8002f66:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	fbb0 f6f3 	udiv	r6, r0, r3
 8002f70:	f7ff fb32 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8002f74:	4360      	muls	r0, r4
 8002f76:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f80:	fbb3 f3f8 	udiv	r3, r3, r8
 8002f84:	fb08 6313 	mls	r3, r8, r3, r6
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	3332      	adds	r3, #50	; 0x32
 8002f8c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8002f96:	f7ff fb1f 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8002f9a:	4360      	muls	r0, r4
 8002f9c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002fa0:	0052      	lsls	r2, r2, #1
 8002fa2:	fbb0 faf2 	udiv	sl, r0, r2
 8002fa6:	f7ff fb17 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8002faa:	e7b6      	b.n	8002f1a <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 8002fac:	429d      	cmp	r5, r3
 8002fae:	f04f 0419 	mov.w	r4, #25
 8002fb2:	d143      	bne.n	800303c <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002fb4:	f7ff fb28 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
 8002fb8:	fb04 f300 	mul.w	r3, r4, r0
 8002fbc:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002fc0:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002fc4:	00b6      	lsls	r6, r6, #2
 8002fc6:	fbb3 f3f6 	udiv	r3, r3, r6
 8002fca:	fbb3 f3f8 	udiv	r3, r3, r8
 8002fce:	011e      	lsls	r6, r3, #4
 8002fd0:	f7ff fb1a 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
 8002fd4:	4360      	muls	r0, r4
 8002fd6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	fbb0 f7f3 	udiv	r7, r0, r3
 8002fe0:	f7ff fb12 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
 8002fe4:	4360      	muls	r0, r4
 8002fe6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff0:	fbb3 f3f8 	udiv	r3, r3, r8
 8002ff4:	fb08 7313 	mls	r3, r8, r3, r7
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	3332      	adds	r3, #50	; 0x32
 8002ffc:	fbb3 f3f8 	udiv	r3, r3, r8
 8003000:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003004:	f7ff fb00 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
 8003008:	4360      	muls	r0, r4
 800300a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800300e:	0092      	lsls	r2, r2, #2
 8003010:	fbb0 faf2 	udiv	sl, r0, r2
 8003014:	f7ff faf8 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003018:	4360      	muls	r0, r4
 800301a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	fbb0 f3f3 	udiv	r3, r0, r3
 8003024:	fbb3 f3f8 	udiv	r3, r3, r8
 8003028:	fb08 a313 	mls	r3, r8, r3, sl
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	3332      	adds	r3, #50	; 0x32
 8003030:	fbb3 f3f8 	udiv	r3, r3, r8
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	433b      	orrs	r3, r7
 800303a:	e77f      	b.n	8002f3c <UART_SetConfig+0xd8>
 800303c:	f7ff facc 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8003040:	fb04 f300 	mul.w	r3, r4, r0
 8003044:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8003048:	f04f 0864 	mov.w	r8, #100	; 0x64
 800304c:	00b6      	lsls	r6, r6, #2
 800304e:	fbb3 f3f6 	udiv	r3, r3, r6
 8003052:	fbb3 f3f8 	udiv	r3, r3, r8
 8003056:	011e      	lsls	r6, r3, #4
 8003058:	f7ff fabe 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 800305c:	4360      	muls	r0, r4
 800305e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	fbb0 f7f3 	udiv	r7, r0, r3
 8003068:	f7ff fab6 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 800306c:	4360      	muls	r0, r4
 800306e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	fbb0 f3f3 	udiv	r3, r0, r3
 8003078:	fbb3 f3f8 	udiv	r3, r3, r8
 800307c:	fb08 7313 	mls	r3, r8, r3, r7
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	3332      	adds	r3, #50	; 0x32
 8003084:	fbb3 f3f8 	udiv	r3, r3, r8
 8003088:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800308c:	f7ff faa4 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8003090:	4360      	muls	r0, r4
 8003092:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003096:	0092      	lsls	r2, r2, #2
 8003098:	fbb0 faf2 	udiv	sl, r0, r2
 800309c:	f7ff fa9c 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 80030a0:	e7ba      	b.n	8003018 <UART_SetConfig+0x1b4>
 80030a2:	bf00      	nop
 80030a4:	40013800 	.word	0x40013800

080030a8 <UART_WaitOnFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	4604      	mov	r4, r0
 80030ac:	460e      	mov	r6, r1
 80030ae:	4615      	mov	r5, r2
  tickstart = HAL_GetTick();
 80030b0:	f7fe f89a 	bl	80011e8 <HAL_GetTick>
 80030b4:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80030b6:	6822      	ldr	r2, [r4, #0]
 80030b8:	6813      	ldr	r3, [r2, #0]
 80030ba:	ea36 0303 	bics.w	r3, r6, r3
 80030be:	d101      	bne.n	80030c4 <UART_WaitOnFlagUntilTimeout.constprop.1+0x1c>
  return HAL_OK;
 80030c0:	2000      	movs	r0, #0
}
 80030c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 80030c4:	1c6b      	adds	r3, r5, #1
 80030c6:	d0f7      	beq.n	80030b8 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80030c8:	b9c5      	cbnz	r5, 80030fc <UART_WaitOnFlagUntilTimeout.constprop.1+0x54>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030ca:	6823      	ldr	r3, [r4, #0]
          return HAL_TIMEOUT;
 80030cc:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030d4:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	f022 0220 	bic.w	r2, r2, #32
 80030dc:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030e4:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	f022 0201 	bic.w	r2, r2, #1
 80030ec:	615a      	str	r2, [r3, #20]
          huart->State= HAL_UART_STATE_READY;
 80030ee:	2301      	movs	r3, #1
 80030f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
          __HAL_UNLOCK(huart);
 80030f4:	2300      	movs	r3, #0
 80030f6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80030fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80030fc:	f7fe f874 	bl	80011e8 <HAL_GetTick>
 8003100:	1bc0      	subs	r0, r0, r7
 8003102:	4285      	cmp	r5, r0
 8003104:	d2d7      	bcs.n	80030b6 <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 8003106:	e7e0      	b.n	80030ca <UART_WaitOnFlagUntilTimeout.constprop.1+0x22>

08003108 <HAL_UART_Init>:
{
 8003108:	b510      	push	{r4, lr}
  if(huart == NULL)
 800310a:	4604      	mov	r4, r0
 800310c:	b330      	cbz	r0, 800315c <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 800310e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003112:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003116:	b91b      	cbnz	r3, 8003120 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003118:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800311c:	f001 ff8e 	bl	800503c <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 8003120:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 8003122:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8003124:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003128:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800312a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800312c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003130:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003132:	f7ff fe97 	bl	8002e64 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003136:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003138:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003142:	695a      	ldr	r2, [r3, #20]
 8003144:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003148:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003150:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 8003152:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003154:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8003156:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800315a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800315c:	2001      	movs	r0, #1
}
 800315e:	bd10      	pop	{r4, pc}

08003160 <HAL_UART_Transmit>:
{
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	460d      	mov	r5, r1
  tmp_state = huart->State;
 8003164:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
{
 8003168:	4604      	mov	r4, r0
  tmp_state = huart->State;
 800316a:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 800316c:	2901      	cmp	r1, #1
{
 800316e:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8003170:	d001      	beq.n	8003176 <HAL_UART_Transmit+0x16>
 8003172:	2922      	cmp	r1, #34	; 0x22
 8003174:	d14d      	bne.n	8003212 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0))
 8003176:	2d00      	cmp	r5, #0
 8003178:	d049      	beq.n	800320e <HAL_UART_Transmit+0xae>
 800317a:	2a00      	cmp	r2, #0
 800317c:	d047      	beq.n	800320e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 800317e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003182:	2b01      	cmp	r3, #1
 8003184:	d045      	beq.n	8003212 <HAL_UART_Transmit+0xb2>
 8003186:	2301      	movs	r3, #1
 8003188:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318c:	2300      	movs	r3, #0
 800318e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8003190:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 8003194:	84a2      	strh	r2, [r4, #36]	; 0x24
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8003196:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8003198:	bf0c      	ite	eq
 800319a:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 800319c:	2312      	movne	r3, #18
    huart->TxXferCount = Size;
 800319e:	84e2      	strh	r2, [r4, #38]	; 0x26
      huart->State = HAL_UART_STATE_BUSY_TX;
 80031a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    while(huart->TxXferCount > 0)
 80031a4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80031a6:	b98a      	cbnz	r2, 80031cc <HAL_UART_Transmit+0x6c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80031a8:	4632      	mov	r2, r6
 80031aa:	2140      	movs	r1, #64	; 0x40
 80031ac:	4620      	mov	r0, r4
 80031ae:	f7ff ff7b 	bl	80030a8 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80031b2:	b9c0      	cbnz	r0, 80031e6 <HAL_UART_Transmit+0x86>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80031b4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80031b8:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 80031ba:	bf0c      	ite	eq
 80031bc:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 80031be:	2301      	movne	r3, #1
 80031c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80031c4:	2300      	movs	r3, #0
 80031c6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 80031ca:	bd70      	pop	{r4, r5, r6, pc}
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031cc:	68a3      	ldr	r3, [r4, #8]
      huart->TxXferCount--;
 80031ce:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->TxXferCount--;
 80031d4:	84e2      	strh	r2, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80031d6:	f04f 0180 	mov.w	r1, #128	; 0x80
 80031da:	4632      	mov	r2, r6
 80031dc:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031de:	d10d      	bne.n	80031fc <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80031e0:	f7ff ff62 	bl	80030a8 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80031e4:	b108      	cbz	r0, 80031ea <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80031e6:	2003      	movs	r0, #3
 80031e8:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80031ea:	882b      	ldrh	r3, [r5, #0]
 80031ec:	6822      	ldr	r2, [r4, #0]
 80031ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f2:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80031f4:	6923      	ldr	r3, [r4, #16]
 80031f6:	b943      	cbnz	r3, 800320a <HAL_UART_Transmit+0xaa>
          pData +=2;
 80031f8:	3502      	adds	r5, #2
 80031fa:	e7d3      	b.n	80031a4 <HAL_UART_Transmit+0x44>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80031fc:	f7ff ff54 	bl	80030a8 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8003200:	2800      	cmp	r0, #0
 8003202:	d1f0      	bne.n	80031e6 <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	782a      	ldrb	r2, [r5, #0]
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	3501      	adds	r5, #1
 800320c:	e7ca      	b.n	80031a4 <HAL_UART_Transmit+0x44>
      return  HAL_ERROR;
 800320e:	2001      	movs	r0, #1
 8003210:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8003212:	2002      	movs	r0, #2
}
 8003214:	bd70      	pop	{r4, r5, r6, pc}

08003216 <HAL_UART_Receive_IT>:
  tmp_state = huart->State;
 8003216:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800321a:	b2db      	uxtb	r3, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 800321c:	2b01      	cmp	r3, #1
 800321e:	d001      	beq.n	8003224 <HAL_UART_Receive_IT+0xe>
 8003220:	2b12      	cmp	r3, #18
 8003222:	d128      	bne.n	8003276 <HAL_UART_Receive_IT+0x60>
    if((pData == NULL ) || (Size == 0))
 8003224:	b329      	cbz	r1, 8003272 <HAL_UART_Receive_IT+0x5c>
 8003226:	b322      	cbz	r2, 8003272 <HAL_UART_Receive_IT+0x5c>
    __HAL_LOCK(huart);
 8003228:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800322c:	2b01      	cmp	r3, #1
 800322e:	d022      	beq.n	8003276 <HAL_UART_Receive_IT+0x60>
 8003230:	2301      	movs	r3, #1
 8003232:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003236:	2300      	movs	r3, #0
 8003238:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxXferSize = Size;
 800323a:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 800323c:	85c2      	strh	r2, [r0, #46]	; 0x2e
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 800323e:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8003242:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8003246:	2a12      	cmp	r2, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8003248:	bf0c      	ite	eq
 800324a:	2232      	moveq	r2, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 800324c:	2222      	movne	r2, #34	; 0x22
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800324e:	6803      	ldr	r3, [r0, #0]
      huart->State = HAL_UART_STATE_BUSY_RX;
 8003250:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003254:	68da      	ldr	r2, [r3, #12]
    huart->pRxBuffPtr = pData;
 8003256:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800325c:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800325e:	695a      	ldr	r2, [r3, #20]
    return HAL_OK;
 8003260:	2000      	movs	r0, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	f042 0220 	orr.w	r2, r2, #32
 800326e:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8003270:	4770      	bx	lr
      return HAL_ERROR;
 8003272:	2001      	movs	r0, #1
 8003274:	4770      	bx	lr
    return HAL_BUSY;
 8003276:	2002      	movs	r0, #2
}
 8003278:	4770      	bx	lr

0800327a <HAL_UART_TxCpltCallback>:
 800327a:	4770      	bx	lr

0800327c <HAL_UART_ErrorCallback>:
{
 800327c:	4770      	bx	lr

0800327e <HAL_UART_IRQHandler>:
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 800327e:	6802      	ldr	r2, [r0, #0]
{
 8003280:	b513      	push	{r0, r1, r4, lr}
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8003282:	6811      	ldr	r1, [r2, #0]
{
 8003284:	4604      	mov	r4, r0
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003286:	07c9      	lsls	r1, r1, #31
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8003288:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800328a:	d505      	bpl.n	8003298 <HAL_UART_IRQHandler+0x1a>
 800328c:	05db      	lsls	r3, r3, #23
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 800328e:	bf42      	ittt	mi
 8003290:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 8003292:	f043 0301 	orrmi.w	r3, r3, #1
 8003296:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8003298:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800329a:	6953      	ldr	r3, [r2, #20]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800329c:	0788      	lsls	r0, r1, #30
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800329e:	f003 0301 	and.w	r3, r3, #1
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80032a2:	d504      	bpl.n	80032ae <HAL_UART_IRQHandler+0x30>
 80032a4:	b11b      	cbz	r3, 80032ae <HAL_UART_IRQHandler+0x30>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032a6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80032a8:	f041 0104 	orr.w	r1, r1, #4
 80032ac:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 80032ae:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80032b0:	0749      	lsls	r1, r1, #29
 80032b2:	d504      	bpl.n	80032be <HAL_UART_IRQHandler+0x40>
 80032b4:	b11b      	cbz	r3, 80032be <HAL_UART_IRQHandler+0x40>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032b6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80032b8:	f041 0102 	orr.w	r1, r1, #2
 80032bc:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80032be:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80032c0:	0708      	lsls	r0, r1, #28
 80032c2:	d504      	bpl.n	80032ce <HAL_UART_IRQHandler+0x50>
 80032c4:	b11b      	cbz	r3, 80032ce <HAL_UART_IRQHandler+0x50>
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80032c8:	f043 0308 	orr.w	r3, r3, #8
 80032cc:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 80032ce:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 80032d0:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80032d2:	0689      	lsls	r1, r1, #26
 80032d4:	d533      	bpl.n	800333e <HAL_UART_IRQHandler+0xc0>
 80032d6:	0698      	lsls	r0, r3, #26
 80032d8:	d531      	bpl.n	800333e <HAL_UART_IRQHandler+0xc0>
  tmp_state = huart->State; 
 80032da:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80032de:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80032e2:	2b22      	cmp	r3, #34	; 0x22
 80032e4:	d12b      	bne.n	800333e <HAL_UART_IRQHandler+0xc0>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032e6:	68a3      	ldr	r3, [r4, #8]
 80032e8:	6921      	ldr	r1, [r4, #16]
 80032ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80032f0:	d176      	bne.n	80033e0 <HAL_UART_IRQHandler+0x162>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032f2:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80032f4:	2900      	cmp	r1, #0
 80032f6:	d16f      	bne.n	80033d8 <HAL_UART_IRQHandler+0x15a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032fc:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1;
 8003300:	62a3      	str	r3, [r4, #40]	; 0x28
    if(--huart->RxXferCount == 0)
 8003302:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003304:	3b01      	subs	r3, #1
 8003306:	b29b      	uxth	r3, r3
 8003308:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800330a:	b9c3      	cbnz	r3, 800333e <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800330c:	6823      	ldr	r3, [r4, #0]
      HAL_UART_RxCpltCallback(huart);
 800330e:	4620      	mov	r0, r4
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	f022 0220 	bic.w	r2, r2, #32
 8003316:	60da      	str	r2, [r3, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8003318:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800331c:	2a32      	cmp	r2, #50	; 0x32
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800331e:	bf17      	itett	ne
 8003320:	68da      	ldrne	r2, [r3, #12]
        huart->State = HAL_UART_STATE_BUSY_TX;
 8003322:	2312      	moveq	r3, #18
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003324:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 8003328:	60da      	strne	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800332a:	bf1f      	itttt	ne
 800332c:	695a      	ldrne	r2, [r3, #20]
 800332e:	f022 0201 	bicne.w	r2, r2, #1
 8003332:	615a      	strne	r2, [r3, #20]
        huart->State = HAL_UART_STATE_READY;
 8003334:	2301      	movne	r3, #1
 8003336:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 800333a:	f000 f9c7 	bl	80036cc <HAL_UART_RxCpltCallback>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8003342:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003344:	0609      	lsls	r1, r1, #24
 8003346:	d522      	bpl.n	800338e <HAL_UART_IRQHandler+0x110>
 8003348:	0610      	lsls	r0, r2, #24
 800334a:	d520      	bpl.n	800338e <HAL_UART_IRQHandler+0x110>
  tmp_state = huart->State;
 800334c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8003350:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8003354:	2a12      	cmp	r2, #18
 8003356:	d11a      	bne.n	800338e <HAL_UART_IRQHandler+0x110>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003358:	68a2      	ldr	r2, [r4, #8]
 800335a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800335e:	6a22      	ldr	r2, [r4, #32]
 8003360:	d14c      	bne.n	80033fc <HAL_UART_IRQHandler+0x17e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003362:	8811      	ldrh	r1, [r2, #0]
 8003364:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003368:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800336a:	6921      	ldr	r1, [r4, #16]
 800336c:	2900      	cmp	r1, #0
 800336e:	d143      	bne.n	80033f8 <HAL_UART_IRQHandler+0x17a>
        huart->pTxBuffPtr += 2;
 8003370:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1;
 8003372:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0)
 8003374:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003376:	3a01      	subs	r2, #1
 8003378:	b292      	uxth	r2, r2
 800337a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800337c:	b93a      	cbnz	r2, 800338e <HAL_UART_IRQHandler+0x110>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003384:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800338c:	60da      	str	r2, [r3, #12]
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 800338e:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8003390:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003392:	0649      	lsls	r1, r1, #25
 8003394:	d510      	bpl.n	80033b8 <HAL_UART_IRQHandler+0x13a>
 8003396:	0652      	lsls	r2, r2, #25
 8003398:	d50e      	bpl.n	80033b8 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800339a:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800339c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800339e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033a2:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80033a4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80033a8:	2b32      	cmp	r3, #50	; 0x32
    huart->State = HAL_UART_STATE_BUSY_RX;
 80033aa:	bf0c      	ite	eq
 80033ac:	2322      	moveq	r3, #34	; 0x22
    huart->State = HAL_UART_STATE_READY;
 80033ae:	2301      	movne	r3, #1
 80033b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80033b4:	f7ff ff61 	bl	800327a <HAL_UART_TxCpltCallback>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033ba:	b15b      	cbz	r3, 80033d4 <HAL_UART_IRQHandler+0x156>
    __HAL_UART_CLEAR_PEFLAG(huart);
 80033bc:	6823      	ldr	r3, [r4, #0]
    HAL_UART_ErrorCallback(huart);
 80033be:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_PEFLAG(huart);
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	9201      	str	r2, [sp, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	9b01      	ldr	r3, [sp, #4]
    huart->State = HAL_UART_STATE_READY;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 80033d0:	f7ff ff54 	bl	800327c <HAL_UART_ErrorCallback>
}
 80033d4:	b002      	add	sp, #8
 80033d6:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	f823 2b01 	strh.w	r2, [r3], #1
 80033de:	e78f      	b.n	8003300 <HAL_UART_IRQHandler+0x82>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80033e0:	b921      	cbnz	r1, 80033ec <HAL_UART_IRQHandler+0x16e>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033e2:	1c59      	adds	r1, r3, #1
 80033e4:	6852      	ldr	r2, [r2, #4]
 80033e6:	62a1      	str	r1, [r4, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033e8:	701a      	strb	r2, [r3, #0]
 80033ea:	e78a      	b.n	8003302 <HAL_UART_IRQHandler+0x84>
 80033ec:	6852      	ldr	r2, [r2, #4]
 80033ee:	1c59      	adds	r1, r3, #1
 80033f0:	62a1      	str	r1, [r4, #40]	; 0x28
 80033f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033f6:	e7f7      	b.n	80033e8 <HAL_UART_IRQHandler+0x16a>
        huart->pTxBuffPtr += 1;
 80033f8:	3201      	adds	r2, #1
 80033fa:	e7ba      	b.n	8003372 <HAL_UART_IRQHandler+0xf4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033fc:	1c51      	adds	r1, r2, #1
 80033fe:	6221      	str	r1, [r4, #32]
 8003400:	7812      	ldrb	r2, [r2, #0]
 8003402:	605a      	str	r2, [r3, #4]
 8003404:	e7b6      	b.n	8003374 <HAL_UART_IRQHandler+0xf6>
	...

08003408 <EXE_CMD>:
		}
		//signal ready for new command
		Transfer_cplt = 0;
	}
}
void EXE_CMD(char*command, TIM_HandleTypeDef* Fan_TIM, UART_HandleTypeDef* huart){
 8003408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800340c:	b0b9      	sub	sp, #228	; 0xe4
 800340e:	460e      	mov	r6, r1
	char cleaningbuffer[100];
	//copy command into buffer
	strcpy(cleaningbuffer, command);
 8003410:	4601      	mov	r1, r0
 8003412:	a806      	add	r0, sp, #24
void EXE_CMD(char*command, TIM_HandleTypeDef* Fan_TIM, UART_HandleTypeDef* huart){
 8003414:	4615      	mov	r5, r2
	strcpy(cleaningbuffer, command);
 8003416:	f001 fedf 	bl	80051d8 <strcpy>

	char* tkpnt;
	//get first token
	tkpnt = strtok(cleaningbuffer, " ");
 800341a:	499c      	ldr	r1, [pc, #624]	; (800368c <EXE_CMD+0x284>)
 800341c:	a806      	add	r0, sp, #24
 800341e:	f002 fd21 	bl	8005e64 <strtok>
	if(strncmp(tkpnt, "s",1)==0){
 8003422:	7804      	ldrb	r4, [r0, #0]
	tkpnt = strtok(cleaningbuffer, " ");
 8003424:	4607      	mov	r7, r0
	if(strncmp(tkpnt, "s",1)==0){
 8003426:	2c73      	cmp	r4, #115	; 0x73
 8003428:	d107      	bne.n	800343a <EXE_CMD+0x32>
		/*
		 * Stop command, immediately stops all PWM, Brakes, and zeros all targets
		 */
		__HAL_TIM_SetCompare(Fan_TIM, TIM_CHANNEL_1, 0);
 800342a:	2200      	movs	r2, #0
 800342c:	6833      	ldr	r3, [r6, #0]
 800342e:	635a      	str	r2, [r3, #52]	; 0x34
		Stop_Motors();
	}else if(strncmp(tkpnt, "sm",2)==0){
		/*
		 * Stop motor command, immediately stops motor PWM, Brakes, and zeros all targets
		 */
		Stop_Motors();
 8003430:	f000 fd98 	bl	8003f64 <Stop_Motors>
	}else{
		char buffer[25];
		uint8_t len = sprintf(buffer,"Invalid Command\r\n"); //sprintf will return the length of 'buffer'
		HAL_UART_Transmit(huart, (unsigned char*)buffer, len, 1000);
	}
}
 8003434:	b039      	add	sp, #228	; 0xe4
 8003436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	}else if(strncmp(tkpnt, "sm",2)==0){
 800343a:	2202      	movs	r2, #2
 800343c:	4994      	ldr	r1, [pc, #592]	; (8003690 <EXE_CMD+0x288>)
 800343e:	f001 fed3 	bl	80051e8 <strncmp>
 8003442:	2800      	cmp	r0, #0
 8003444:	d0f4      	beq.n	8003430 <EXE_CMD+0x28>
	}else if(strncmp(tkpnt, "sf",2)==0){
 8003446:	2202      	movs	r2, #2
 8003448:	4992      	ldr	r1, [pc, #584]	; (8003694 <EXE_CMD+0x28c>)
 800344a:	4638      	mov	r0, r7
 800344c:	f001 fecc 	bl	80051e8 <strncmp>
 8003450:	b910      	cbnz	r0, 8003458 <EXE_CMD+0x50>
		__HAL_TIM_SetCompare(Fan_TIM, TIM_CHANNEL_1, 0);
 8003452:	6833      	ldr	r3, [r6, #0]
		__HAL_TIM_SetCompare(Fan_TIM, TIM_CHANNEL_1, pwm);
 8003454:	6358      	str	r0, [r3, #52]	; 0x34
 8003456:	e7ed      	b.n	8003434 <EXE_CMD+0x2c>
	}else if (strncmp(tkpnt, "r",1)==0){
 8003458:	2c72      	cmp	r4, #114	; 0x72
 800345a:	d11a      	bne.n	8003492 <EXE_CMD+0x8a>
		tkpnt = strtok(NULL, " ");
 800345c:	498b      	ldr	r1, [pc, #556]	; (800368c <EXE_CMD+0x284>)
 800345e:	2000      	movs	r0, #0
 8003460:	f002 fd00 	bl	8005e64 <strtok>
		float rotomega = atof(tkpnt);
 8003464:	f001 fe3d 	bl	80050e2 <atof>
 8003468:	4606      	mov	r6, r0
 800346a:	460f      	mov	r7, r1
		tkpnt = strtok(NULL, " ");
 800346c:	2000      	movs	r0, #0
 800346e:	4987      	ldr	r1, [pc, #540]	; (800368c <EXE_CMD+0x284>)
 8003470:	f002 fcf8 	bl	8005e64 <strtok>
		float rotphi = atof(tkpnt);
 8003474:	f001 fe35 	bl	80050e2 <atof>
 8003478:	f7fd fb24 	bl	8000ac4 <__aeabi_d2f>
		float rotomega = atof(tkpnt);
 800347c:	4639      	mov	r1, r7
		float rotphi = atof(tkpnt);
 800347e:	4604      	mov	r4, r0
		float rotomega = atof(tkpnt);
 8003480:	4630      	mov	r0, r6
 8003482:	f7fd fb1f 	bl	8000ac4 <__aeabi_d2f>
		setArc(rotR, rotomega, rotphi);
 8003486:	4622      	mov	r2, r4
 8003488:	4601      	mov	r1, r0
 800348a:	2000      	movs	r0, #0
		setArc(rotR, rotomega, rotphi);
 800348c:	f000 fa7c 	bl	8003988 <setArc>
 8003490:	e7d0      	b.n	8003434 <EXE_CMD+0x2c>
	}else if(strncmp(tkpnt, "f",1)==0){
 8003492:	2c66      	cmp	r4, #102	; 0x66
 8003494:	d108      	bne.n	80034a8 <EXE_CMD+0xa0>
		tkpnt = strtok(NULL, " ");
 8003496:	497d      	ldr	r1, [pc, #500]	; (800368c <EXE_CMD+0x284>)
 8003498:	2000      	movs	r0, #0
 800349a:	f002 fce3 	bl	8005e64 <strtok>
		int pwm = atoi(tkpnt);
 800349e:	f001 fe23 	bl	80050e8 <atoi>
		__HAL_TIM_SetCompare(Fan_TIM, TIM_CHANNEL_1, pwm);
 80034a2:	6833      	ldr	r3, [r6, #0]
		pwm = pwm + 255;
 80034a4:	30ff      	adds	r0, #255	; 0xff
 80034a6:	e7d5      	b.n	8003454 <EXE_CMD+0x4c>
	}else if(strncmp(tkpnt, "b",1)==0){
 80034a8:	2c62      	cmp	r4, #98	; 0x62
 80034aa:	d112      	bne.n	80034d2 <EXE_CMD+0xca>
		tkpnt = strtok(NULL, " ");
 80034ac:	4977      	ldr	r1, [pc, #476]	; (800368c <EXE_CMD+0x284>)
 80034ae:	2000      	movs	r0, #0
 80034b0:	f002 fcd8 	bl	8005e64 <strtok>
		int16_t pwm = atoi(tkpnt);
 80034b4:	f001 fe18 	bl	80050e8 <atoi>
		pwm = map(pwm, 0, 180, 125, 500);
 80034b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80034bc:	22b4      	movs	r2, #180	; 0xb4
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2100      	movs	r1, #0
 80034c2:	237d      	movs	r3, #125	; 0x7d
 80034c4:	b280      	uxth	r0, r0
 80034c6:	f000 fd83 	bl	8003fd0 <map>
		__HAL_TIM_SetCompare(Fan_TIM, TIM_CHANNEL_2, pwm);
 80034ca:	6833      	ldr	r3, [r6, #0]
 80034cc:	b200      	sxth	r0, r0
 80034ce:	6398      	str	r0, [r3, #56]	; 0x38
 80034d0:	e7b0      	b.n	8003434 <EXE_CMD+0x2c>
	}else if(strncmp(tkpnt, "p",1)==0){
 80034d2:	2c70      	cmp	r4, #112	; 0x70
 80034d4:	d102      	bne.n	80034dc <EXE_CMD+0xd4>
		startPP();
 80034d6:	f000 fd87 	bl	8003fe8 <startPP>
 80034da:	e7ab      	b.n	8003434 <EXE_CMD+0x2c>
	}else if(strncmp(tkpnt, "l",1)==0){
 80034dc:	2c6c      	cmp	r4, #108	; 0x6c
 80034de:	d118      	bne.n	8003512 <EXE_CMD+0x10a>
		tkpnt = strtok(NULL, " ");
 80034e0:	496a      	ldr	r1, [pc, #424]	; (800368c <EXE_CMD+0x284>)
 80034e2:	2000      	movs	r0, #0
 80034e4:	f002 fcbe 	bl	8005e64 <strtok>
		float lindis = atof(tkpnt);
 80034e8:	f001 fdfb 	bl	80050e2 <atof>
 80034ec:	4606      	mov	r6, r0
 80034ee:	460f      	mov	r7, r1
		tkpnt = strtok(NULL, " ");
 80034f0:	2000      	movs	r0, #0
 80034f2:	4966      	ldr	r1, [pc, #408]	; (800368c <EXE_CMD+0x284>)
 80034f4:	f002 fcb6 	bl	8005e64 <strtok>
		float linspd = atof(tkpnt);
 80034f8:	f001 fdf3 	bl	80050e2 <atof>
 80034fc:	f7fd fae2 	bl	8000ac4 <__aeabi_d2f>
 8003500:	4604      	mov	r4, r0
		float lindis = atof(tkpnt);
 8003502:	4639      	mov	r1, r7
 8003504:	4630      	mov	r0, r6
 8003506:	f7fd fadd 	bl	8000ac4 <__aeabi_d2f>
		setLin(lindis, linspd);
 800350a:	4621      	mov	r1, r4
 800350c:	f000 fb08 	bl	8003b20 <setLin>
 8003510:	e790      	b.n	8003434 <EXE_CMD+0x2c>
	}else if(strncmp(tkpnt, "a",1)==0){
 8003512:	2c61      	cmp	r4, #97	; 0x61
 8003514:	d124      	bne.n	8003560 <EXE_CMD+0x158>
		tkpnt = strtok(NULL, " ");
 8003516:	495d      	ldr	r1, [pc, #372]	; (800368c <EXE_CMD+0x284>)
 8003518:	2000      	movs	r0, #0
 800351a:	f002 fca3 	bl	8005e64 <strtok>
		float rotR = atof(tkpnt);
 800351e:	f001 fde0 	bl	80050e2 <atof>
 8003522:	4606      	mov	r6, r0
 8003524:	460f      	mov	r7, r1
		tkpnt = strtok(NULL, " ");
 8003526:	2000      	movs	r0, #0
 8003528:	4958      	ldr	r1, [pc, #352]	; (800368c <EXE_CMD+0x284>)
 800352a:	f002 fc9b 	bl	8005e64 <strtok>
		float rotomega = atof(tkpnt);
 800352e:	f001 fdd8 	bl	80050e2 <atof>
 8003532:	4680      	mov	r8, r0
 8003534:	4689      	mov	r9, r1
		tkpnt = strtok(NULL, " ");
 8003536:	2000      	movs	r0, #0
 8003538:	4954      	ldr	r1, [pc, #336]	; (800368c <EXE_CMD+0x284>)
 800353a:	f002 fc93 	bl	8005e64 <strtok>
		float rotphi = atof(tkpnt);
 800353e:	f001 fdd0 	bl	80050e2 <atof>
 8003542:	f7fd fabf 	bl	8000ac4 <__aeabi_d2f>
		float rotomega = atof(tkpnt);
 8003546:	4649      	mov	r1, r9
		float rotphi = atof(tkpnt);
 8003548:	4605      	mov	r5, r0
		float rotomega = atof(tkpnt);
 800354a:	4640      	mov	r0, r8
 800354c:	f7fd faba 	bl	8000ac4 <__aeabi_d2f>
 8003550:	4604      	mov	r4, r0
		float rotR = atof(tkpnt);
 8003552:	4639      	mov	r1, r7
 8003554:	4630      	mov	r0, r6
 8003556:	f7fd fab5 	bl	8000ac4 <__aeabi_d2f>
		setArc(rotR, rotomega, rotphi);
 800355a:	462a      	mov	r2, r5
 800355c:	4621      	mov	r1, r4
 800355e:	e795      	b.n	800348c <EXE_CMD+0x84>
	}else if(strncmp(tkpnt, "t",1)==0){
 8003560:	2c74      	cmp	r4, #116	; 0x74
 8003562:	d10c      	bne.n	800357e <EXE_CMD+0x176>
		uint8_t len=sprintf(buffer,"%i\r\n", (int)(HAL_GetTick())); //sprintf will return the length of 'buffer'
 8003564:	f7fd fe40 	bl	80011e8 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	494b      	ldr	r1, [pc, #300]	; (8003698 <EXE_CMD+0x290>)
		len = sprintf(buffer,"Left Encoder:%i\r\n", (int)(TIM2->CNT)); //sprintf will return the length of 'buffer'
 800356c:	a81f      	add	r0, sp, #124	; 0x7c
 800356e:	f001 fe0f 	bl	8005190 <siprintf>
		HAL_UART_Transmit(huart, (unsigned char*)buffer, len, 1000);
 8003572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003576:	b2c2      	uxtb	r2, r0
		HAL_UART_Transmit(huart, (unsigned char*)buffer, len, 1000);
 8003578:	a91f      	add	r1, sp, #124	; 0x7c
 800357a:	4628      	mov	r0, r5
 800357c:	e07b      	b.n	8003676 <EXE_CMD+0x26e>
	}else if(strncmp(tkpnt, "d",1)==0){
 800357e:	2c64      	cmp	r4, #100	; 0x64
 8003580:	d109      	bne.n	8003596 <EXE_CMD+0x18e>
		tkpnt = strtok(NULL, " ");
 8003582:	4942      	ldr	r1, [pc, #264]	; (800368c <EXE_CMD+0x284>)
 8003584:	2000      	movs	r0, #0
 8003586:	f002 fc6d 	bl	8005e64 <strtok>
		int16_t pwm = atoi(tkpnt);
 800358a:	f001 fdad 	bl	80050e8 <atoi>
		Run_MotorPWM(pwm);
 800358e:	b200      	sxth	r0, r0
 8003590:	f000 fcac 	bl	8003eec <Run_MotorPWM>
 8003594:	e74e      	b.n	8003434 <EXE_CMD+0x2c>
	}else if(strncmp(tkpnt, "i",1)==0){
 8003596:	2c69      	cmp	r4, #105	; 0x69
 8003598:	d129      	bne.n	80035ee <EXE_CMD+0x1e6>
		uint8_t id = checkIMUID();
 800359a:	f000 ff1b 	bl	80043d4 <checkIMUID>
		uint8_t len = sprintf(buffer,"ID :%x\r\n", id); //sprintf will return the length of 'buffer'
 800359e:	493f      	ldr	r1, [pc, #252]	; (800369c <EXE_CMD+0x294>)
 80035a0:	4602      	mov	r2, r0
 80035a2:	a81f      	add	r0, sp, #124	; 0x7c
 80035a4:	f001 fdf4 	bl	8005190 <siprintf>
		HAL_UART_Transmit(huart, (unsigned char*)buffer, len, 1000);
 80035a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ac:	b2c2      	uxtb	r2, r0
 80035ae:	a91f      	add	r1, sp, #124	; 0x7c
 80035b0:	4628      	mov	r0, r5
 80035b2:	f7ff fdd5 	bl	8003160 <HAL_UART_Transmit>
		write8(OPR_MODE_ADD, OPERATION_MODE_IMUPLUS);
 80035b6:	2108      	movs	r1, #8
 80035b8:	203d      	movs	r0, #61	; 0x3d
 80035ba:	f000 feef 	bl	800439c <write8>
		getEuler(euler);
 80035be:	a803      	add	r0, sp, #12
 80035c0:	f000 ff0b 	bl	80043da <getEuler>
		len = sprintf(buffer,"EulerX :%i\r\n", (int)(euler[0])); //sprintf will return the length of 'buffer'
 80035c4:	9803      	ldr	r0, [sp, #12]
 80035c6:	f7fd fda1 	bl	800110c <__aeabi_f2iz>
 80035ca:	4935      	ldr	r1, [pc, #212]	; (80036a0 <EXE_CMD+0x298>)
 80035cc:	4602      	mov	r2, r0
 80035ce:	a81f      	add	r0, sp, #124	; 0x7c
 80035d0:	f001 fdde 	bl	8005190 <siprintf>
		HAL_UART_Transmit(huart, (unsigned char*)buffer, len, 1000);
 80035d4:	a91f      	add	r1, sp, #124	; 0x7c
 80035d6:	b2c2      	uxtb	r2, r0
 80035d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035dc:	4628      	mov	r0, r5
 80035de:	f7ff fdbf 	bl	8003160 <HAL_UART_Transmit>
		len = sprintf(buffer,"Temp :%i\r\n", (int8_t)(read8(BNO055_TEMP_ADDR))); //sprintf will return the length of 'buffer'
 80035e2:	2034      	movs	r0, #52	; 0x34
 80035e4:	f000 fea2 	bl	800432c <read8>
 80035e8:	492e      	ldr	r1, [pc, #184]	; (80036a4 <EXE_CMD+0x29c>)
 80035ea:	b242      	sxtb	r2, r0
 80035ec:	e7be      	b.n	800356c <EXE_CMD+0x164>
	}else if(strncmp(tkpnt, "e",1)==0){
 80035ee:	2c65      	cmp	r4, #101	; 0x65
 80035f0:	d12d      	bne.n	800364e <EXE_CMD+0x246>
		uint8_t len = sprintf(buffer,"Right Encoder Delta :%i\r\n", Get_RightEncoderPos()); //sprintf will return the length of 'buffer'
 80035f2:	f000 faf1 	bl	8003bd8 <Get_RightEncoderPos>
 80035f6:	492c      	ldr	r1, [pc, #176]	; (80036a8 <EXE_CMD+0x2a0>)
 80035f8:	4602      	mov	r2, r0
 80035fa:	a81f      	add	r0, sp, #124	; 0x7c
 80035fc:	f001 fdc8 	bl	8005190 <siprintf>
		HAL_UART_Transmit(huart, (unsigned char*)buffer, len, 1000);
 8003600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003604:	b2c2      	uxtb	r2, r0
 8003606:	a91f      	add	r1, sp, #124	; 0x7c
 8003608:	4628      	mov	r0, r5
 800360a:	f7ff fda9 	bl	8003160 <HAL_UART_Transmit>
		len = sprintf(buffer,"Right Encoder:%i\r\n", (int)(TIM3->CNT)); //sprintf will return the length of 'buffer'
 800360e:	4b27      	ldr	r3, [pc, #156]	; (80036ac <EXE_CMD+0x2a4>)
 8003610:	4927      	ldr	r1, [pc, #156]	; (80036b0 <EXE_CMD+0x2a8>)
 8003612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003614:	a81f      	add	r0, sp, #124	; 0x7c
 8003616:	f001 fdbb 	bl	8005190 <siprintf>
		HAL_UART_Transmit(huart, (unsigned char*)buffer, len, 1000);
 800361a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800361e:	b2c2      	uxtb	r2, r0
 8003620:	a91f      	add	r1, sp, #124	; 0x7c
 8003622:	4628      	mov	r0, r5
 8003624:	f7ff fd9c 	bl	8003160 <HAL_UART_Transmit>
		len = sprintf(buffer,"Left Encoder Delta:%i\r\n", Get_LeftEncoderPos());
 8003628:	f000 fad0 	bl	8003bcc <Get_LeftEncoderPos>
 800362c:	4921      	ldr	r1, [pc, #132]	; (80036b4 <EXE_CMD+0x2ac>)
 800362e:	4602      	mov	r2, r0
 8003630:	a81f      	add	r0, sp, #124	; 0x7c
 8003632:	f001 fdad 	bl	8005190 <siprintf>
		HAL_UART_Transmit(huart, (unsigned char*)buffer, len, 1000);
 8003636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800363a:	b2c2      	uxtb	r2, r0
 800363c:	a91f      	add	r1, sp, #124	; 0x7c
 800363e:	4628      	mov	r0, r5
 8003640:	f7ff fd8e 	bl	8003160 <HAL_UART_Transmit>
		len = sprintf(buffer,"Left Encoder:%i\r\n", (int)(TIM2->CNT)); //sprintf will return the length of 'buffer'
 8003644:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003648:	491b      	ldr	r1, [pc, #108]	; (80036b8 <EXE_CMD+0x2b0>)
 800364a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800364c:	e78e      	b.n	800356c <EXE_CMD+0x164>
	}else if(strncmp(tkpnt, "u",1)==0){
 800364e:	2c75      	cmp	r4, #117	; 0x75
 8003650:	d114      	bne.n	800367c <EXE_CMD+0x274>
		double d_y = 10.0*GetUltrasonicY();
 8003652:	f000 fef7 	bl	8004444 <GetUltrasonicY>
 8003656:	4b19      	ldr	r3, [pc, #100]	; (80036bc <EXE_CMD+0x2b4>)
 8003658:	2200      	movs	r2, #0
 800365a:	f7fc ff51 	bl	8000500 <__aeabi_dmul>
		uint8_t len=sprintf(buffer,"dis:%i\r\n", (int)(d_y)); //sprintf will return the length of 'buffer'
 800365e:	f7fd f9e9 	bl	8000a34 <__aeabi_d2iz>
 8003662:	4917      	ldr	r1, [pc, #92]	; (80036c0 <EXE_CMD+0x2b8>)
 8003664:	4602      	mov	r2, r0
 8003666:	a81f      	add	r0, sp, #124	; 0x7c
 8003668:	f001 fd92 	bl	8005190 <siprintf>
		HAL_UART_Transmit(&huart1, (unsigned char*)buffer, len, 1000);
 800366c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003670:	b2c2      	uxtb	r2, r0
 8003672:	4814      	ldr	r0, [pc, #80]	; (80036c4 <EXE_CMD+0x2bc>)
 8003674:	a91f      	add	r1, sp, #124	; 0x7c
		HAL_UART_Transmit(huart, (unsigned char*)buffer, len, 1000);
 8003676:	f7ff fd73 	bl	8003160 <HAL_UART_Transmit>
}
 800367a:	e6db      	b.n	8003434 <EXE_CMD+0x2c>
		uint8_t len = sprintf(buffer,"Invalid Command\r\n"); //sprintf will return the length of 'buffer'
 800367c:	4912      	ldr	r1, [pc, #72]	; (80036c8 <EXE_CMD+0x2c0>)
 800367e:	a81f      	add	r0, sp, #124	; 0x7c
 8003680:	f001 fdaa 	bl	80051d8 <strcpy>
		HAL_UART_Transmit(huart, (unsigned char*)buffer, len, 1000);
 8003684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003688:	2211      	movs	r2, #17
 800368a:	e775      	b.n	8003578 <EXE_CMD+0x170>
 800368c:	08008920 	.word	0x08008920
 8003690:	08008680 	.word	0x08008680
 8003694:	08008683 	.word	0x08008683
 8003698:	08008697 	.word	0x08008697
 800369c:	08008686 	.word	0x08008686
 80036a0:	0800868f 	.word	0x0800868f
 80036a4:	0800869c 	.word	0x0800869c
 80036a8:	080086a7 	.word	0x080086a7
 80036ac:	40000400 	.word	0x40000400
 80036b0:	080086c1 	.word	0x080086c1
 80036b4:	080086d4 	.word	0x080086d4
 80036b8:	080086ec 	.word	0x080086ec
 80036bc:	40240000 	.word	0x40240000
 80036c0:	080086fe 	.word	0x080086fe
 80036c4:	200009bc 	.word	0x200009bc
 80036c8:	08008707 	.word	0x08008707

080036cc <HAL_UART_RxCpltCallback>:
//Interrupt callback routine
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	//when character received
    uint8_t i;
    if (huart->Instance == USART1)  //current UART
 80036cc:	6802      	ldr	r2, [r0, #0]
 80036ce:	4b11      	ldr	r3, [pc, #68]	; (8003714 <HAL_UART_RxCpltCallback+0x48>)
{
 80036d0:	b430      	push	{r4, r5}
    if (huart->Instance == USART1)  //current UART
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d11c      	bne.n	8003710 <HAL_UART_RxCpltCallback+0x44>
	{
		if (Rx_indx == 0) {
 80036d6:	4a10      	ldr	r2, [pc, #64]	; (8003718 <HAL_UART_RxCpltCallback+0x4c>)
 80036d8:	7813      	ldrb	r3, [r2, #0]
 80036da:	b143      	cbz	r3, 80036ee <HAL_UART_RxCpltCallback+0x22>
			//clear Rx_Buffer before receiving new data
			for (i=0;i<100;i++) Rx_Buffer[i]=0;
		}

		if (Rx_data[0] != 13) //if received data different from ASCII 13 (carriage return \r)
 80036dc:	490f      	ldr	r1, [pc, #60]	; (800371c <HAL_UART_RxCpltCallback+0x50>)
 80036de:	7809      	ldrb	r1, [r1, #0]
 80036e0:	290d      	cmp	r1, #13
 80036e2:	d10c      	bne.n	80036fe <HAL_UART_RxCpltCallback+0x32>
		{
			Rx_Buffer[Rx_indx++] = Rx_data[0];    //add data to Rx_Buffer
		}
		else            //if received data = 13
		{
			Transfer_cplt = Rx_indx;//transfer complete, data is ready to read
 80036e4:	490e      	ldr	r1, [pc, #56]	; (8003720 <HAL_UART_RxCpltCallback+0x54>)
 80036e6:	700b      	strb	r3, [r1, #0]
			Rx_indx=0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	7013      	strb	r3, [r2, #0]
 80036ec:	e00b      	b.n	8003706 <HAL_UART_RxCpltCallback+0x3a>
 80036ee:	4619      	mov	r1, r3
			for (i=0;i<100;i++) Rx_Buffer[i]=0;
 80036f0:	461d      	mov	r5, r3
 80036f2:	4c0c      	ldr	r4, [pc, #48]	; (8003724 <HAL_UART_RxCpltCallback+0x58>)
 80036f4:	550d      	strb	r5, [r1, r4]
 80036f6:	3101      	adds	r1, #1
 80036f8:	2964      	cmp	r1, #100	; 0x64
 80036fa:	d1fb      	bne.n	80036f4 <HAL_UART_RxCpltCallback+0x28>
 80036fc:	e7ee      	b.n	80036dc <HAL_UART_RxCpltCallback+0x10>
			Rx_Buffer[Rx_indx++] = Rx_data[0];    //add data to Rx_Buffer
 80036fe:	1c5c      	adds	r4, r3, #1
 8003700:	7014      	strb	r4, [r2, #0]
 8003702:	4a08      	ldr	r2, [pc, #32]	; (8003724 <HAL_UART_RxCpltCallback+0x58>)
 8003704:	54d1      	strb	r1, [r2, r3]
		}

		HAL_UART_Receive_IT(huart, Rx_data, 1);   //activate UART receive interrupt every time
 8003706:	2201      	movs	r2, #1
	}

}
 8003708:	bc30      	pop	{r4, r5}
		HAL_UART_Receive_IT(huart, Rx_data, 1);   //activate UART receive interrupt every time
 800370a:	4904      	ldr	r1, [pc, #16]	; (800371c <HAL_UART_RxCpltCallback+0x50>)
 800370c:	f7ff bd83 	b.w	8003216 <HAL_UART_Receive_IT>
}
 8003710:	bc30      	pop	{r4, r5}
 8003712:	4770      	bx	lr
 8003714:	40013800 	.word	0x40013800
 8003718:	20000215 	.word	0x20000215
 800371c:	20000216 	.word	0x20000216
 8003720:	20000214 	.word	0x20000214
 8003724:	20000218 	.word	0x20000218

08003728 <UART_ReadStart>:
//Wrapper function to force recieve interrupt start
void UART_ReadStart(UART_HandleTypeDef *huart){
	HAL_UART_Receive_IT(huart, Rx_data, 1);
 8003728:	2201      	movs	r2, #1
 800372a:	4901      	ldr	r1, [pc, #4]	; (8003730 <UART_ReadStart+0x8>)
 800372c:	f7ff bd73 	b.w	8003216 <HAL_UART_Receive_IT>
 8003730:	20000216 	.word	0x20000216

08003734 <Parse_CMD>:
void Parse_CMD(TIM_HandleTypeDef* Fan_TIM,UART_HandleTypeDef* huart){
 8003734:	b570      	push	{r4, r5, r6, lr}
	if(Transfer_cplt >= 1){
 8003736:	4c1f      	ldr	r4, [pc, #124]	; (80037b4 <Parse_CMD+0x80>)
void Parse_CMD(TIM_HandleTypeDef* Fan_TIM,UART_HandleTypeDef* huart){
 8003738:	b0a0      	sub	sp, #128	; 0x80
 800373a:	4606      	mov	r6, r0
	UART_ReadStart(huart);
 800373c:	4608      	mov	r0, r1
void Parse_CMD(TIM_HandleTypeDef* Fan_TIM,UART_HandleTypeDef* huart){
 800373e:	460d      	mov	r5, r1
	UART_ReadStart(huart);
 8003740:	f7ff fff2 	bl	8003728 <UART_ReadStart>
	if(Transfer_cplt >= 1){
 8003744:	7823      	ldrb	r3, [r4, #0]
 8003746:	b34b      	cbz	r3, 800379c <Parse_CMD+0x68>
		memset(cmd,0,sizeof cmd);
 8003748:	2264      	movs	r2, #100	; 0x64
 800374a:	2100      	movs	r1, #0
 800374c:	a807      	add	r0, sp, #28
 800374e:	f001 fd17 	bl	8005180 <memset>
		strcpy(cmd, Rx_Buffer);
 8003752:	4919      	ldr	r1, [pc, #100]	; (80037b8 <Parse_CMD+0x84>)
 8003754:	a807      	add	r0, sp, #28
 8003756:	f001 fd3f 	bl	80051d8 <strcpy>
		uint8_t len = sprintf(buffer,"string:%s\r\n", cmd); //sprintf will return the length of 'buffer'
 800375a:	aa07      	add	r2, sp, #28
 800375c:	4917      	ldr	r1, [pc, #92]	; (80037bc <Parse_CMD+0x88>)
 800375e:	4668      	mov	r0, sp
 8003760:	f001 fd16 	bl	8005190 <siprintf>
		HAL_UART_Transmit(huart, (unsigned char*)buffer, len, 1000);
 8003764:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003768:	b2c2      	uxtb	r2, r0
 800376a:	4669      	mov	r1, sp
 800376c:	4628      	mov	r0, r5
 800376e:	f7ff fcf7 	bl	8003160 <HAL_UART_Transmit>
		cmd[Transfer_cplt]='\0';
 8003772:	7823      	ldrb	r3, [r4, #0]
 8003774:	aa20      	add	r2, sp, #128	; 0x80
 8003776:	4413      	add	r3, r2
 8003778:	2200      	movs	r2, #0
 800377a:	f803 2c64 	strb.w	r2, [r3, #-100]
		if(/*true||*/(cmd[0] == 's')||(cmd[0]=='t')||(cmd[0]=='f')||(cmd[0]=='u')){
 800377e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8003782:	f1a3 0273 	sub.w	r2, r3, #115	; 0x73
 8003786:	2a02      	cmp	r2, #2
 8003788:	d901      	bls.n	800378e <Parse_CMD+0x5a>
 800378a:	2b66      	cmp	r3, #102	; 0x66
 800378c:	d108      	bne.n	80037a0 <Parse_CMD+0x6c>
			EXE_CMD(cmd, Fan_TIM, huart);
 800378e:	462a      	mov	r2, r5
 8003790:	4631      	mov	r1, r6
 8003792:	a807      	add	r0, sp, #28
 8003794:	f7ff fe38 	bl	8003408 <EXE_CMD>
		Transfer_cplt = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	7023      	strb	r3, [r4, #0]
}
 800379c:	b020      	add	sp, #128	; 0x80
 800379e:	bd70      	pop	{r4, r5, r6, pc}
			if (cmd[0]=='p'){
 80037a0:	2b70      	cmp	r3, #112	; 0x70
 80037a2:	d102      	bne.n	80037aa <Parse_CMD+0x76>
				startPP();
 80037a4:	f000 fc20 	bl	8003fe8 <startPP>
 80037a8:	e7f6      	b.n	8003798 <Parse_CMD+0x64>
				enq(cmd);
 80037aa:	a807      	add	r0, sp, #28
 80037ac:	f000 f85c 	bl	8003868 <enq>
 80037b0:	e7f2      	b.n	8003798 <Parse_CMD+0x64>
 80037b2:	bf00      	nop
 80037b4:	20000214 	.word	0x20000214
 80037b8:	20000218 	.word	0x20000218
 80037bc:	08008719 	.word	0x08008719

080037c0 <initCOM>:
struct cmdqueue COM;
//char** queue;
char buildqueue[QUEUESIZE][100];
char deqtemp[100];
void initCOM(){
	COM.back = QUEUESIZE-1;
 80037c0:	2304      	movs	r3, #4
 80037c2:	4a0a      	ldr	r2, [pc, #40]	; (80037ec <initCOM+0x2c>)
void initCOM(){
 80037c4:	b510      	push	{r4, lr}
	COM.back = QUEUESIZE-1;
 80037c6:	7053      	strb	r3, [r2, #1]
	COM.front = 0;
 80037c8:	2300      	movs	r3, #0
	COM.size = 0;
	COM.capacity = (uint8_t)QUEUESIZE;
 80037ca:	2105      	movs	r1, #5
	for(int i = 0; i<QUEUESIZE; i++){
		for(int j=0; j<100; j++){
			COM.cmds[i][j] = 0;
 80037cc:	461c      	mov	r4, r3
	COM.front = 0;
 80037ce:	7013      	strb	r3, [r2, #0]
	COM.size = 0;
 80037d0:	7093      	strb	r3, [r2, #2]
	COM.capacity = (uint8_t)QUEUESIZE;
 80037d2:	70d1      	strb	r1, [r2, #3]
void initCOM(){
 80037d4:	2100      	movs	r1, #0
			COM.cmds[i][j] = 0;
 80037d6:	18c8      	adds	r0, r1, r3
		for(int j=0; j<100; j++){
 80037d8:	3101      	adds	r1, #1
			COM.cmds[i][j] = 0;
 80037da:	4410      	add	r0, r2
		for(int j=0; j<100; j++){
 80037dc:	2964      	cmp	r1, #100	; 0x64
			COM.cmds[i][j] = 0;
 80037de:	7104      	strb	r4, [r0, #4]
		for(int j=0; j<100; j++){
 80037e0:	d1f9      	bne.n	80037d6 <initCOM+0x16>
 80037e2:	3364      	adds	r3, #100	; 0x64
	for(int i = 0; i<QUEUESIZE; i++){
 80037e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80037e8:	d1f4      	bne.n	80037d4 <initCOM+0x14>
 80037ea:	bd10      	pop	{r4, pc}
 80037ec:	20000470 	.word	0x20000470

080037f0 <isFull>:
		}
	}
	return;
}
int isFull(){
	if(COM.size == COM.capacity) return true;
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <isFull+0x10>)
 80037f2:	7898      	ldrb	r0, [r3, #2]
 80037f4:	78db      	ldrb	r3, [r3, #3]
	return false;

}
 80037f6:	1ac3      	subs	r3, r0, r3
 80037f8:	4258      	negs	r0, r3
 80037fa:	4158      	adcs	r0, r3
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20000470 	.word	0x20000470

08003804 <isEmpty>:
int isEmpty(){
	if (COM.size == 0) return true;
 8003804:	4b02      	ldr	r3, [pc, #8]	; (8003810 <isEmpty+0xc>)
 8003806:	7898      	ldrb	r0, [r3, #2]
	return false;
}
 8003808:	fab0 f080 	clz	r0, r0
 800380c:	0940      	lsrs	r0, r0, #5
 800380e:	4770      	bx	lr
 8003810:	20000470 	.word	0x20000470

08003814 <deq>:
char* deq(){
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(isEmpty()){
 8003816:	f7ff fff5 	bl	8003804 <isEmpty>
 800381a:	4606      	mov	r6, r0
 800381c:	b9d8      	cbnz	r0, 8003856 <deq+0x42>
		return "";
	}

	strcpy(deqtemp, COM.cmds[COM.front]);
 800381e:	2764      	movs	r7, #100	; 0x64
 8003820:	4c0e      	ldr	r4, [pc, #56]	; (800385c <deq+0x48>)
 8003822:	480f      	ldr	r0, [pc, #60]	; (8003860 <deq+0x4c>)
 8003824:	7825      	ldrb	r5, [r4, #0]
 8003826:	fb07 4505 	mla	r5, r7, r5, r4
 800382a:	3504      	adds	r5, #4
 800382c:	4629      	mov	r1, r5
 800382e:	f001 fcd3 	bl	80051d8 <strcpy>
	char*item = deqtemp;
	memset(COM.cmds[COM.front],0, sizeof COM.cmds[COM.front]);
 8003832:	463a      	mov	r2, r7
 8003834:	4631      	mov	r1, r6
 8003836:	4628      	mov	r0, r5
 8003838:	f001 fca2 	bl	8005180 <memset>
	COM.front = (COM.front + 1) % COM.capacity;
 800383c:	7823      	ldrb	r3, [r4, #0]
 800383e:	78e1      	ldrb	r1, [r4, #3]
 8003840:	3301      	adds	r3, #1
 8003842:	fb93 f2f1 	sdiv	r2, r3, r1
 8003846:	fb01 3312 	mls	r3, r1, r2, r3
 800384a:	7023      	strb	r3, [r4, #0]
	COM.size -=1;
 800384c:	78a3      	ldrb	r3, [r4, #2]
	return item;
 800384e:	4804      	ldr	r0, [pc, #16]	; (8003860 <deq+0x4c>)
	COM.size -=1;
 8003850:	3b01      	subs	r3, #1
 8003852:	70a3      	strb	r3, [r4, #2]
	return item;
 8003854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return "";
 8003856:	4803      	ldr	r0, [pc, #12]	; (8003864 <deq+0x50>)
}
 8003858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800385a:	bf00      	nop
 800385c:	20000470 	.word	0x20000470
 8003860:	20000668 	.word	0x20000668
 8003864:	08008718 	.word	0x08008718

08003868 <enq>:
int enq(char* str){
 8003868:	b530      	push	{r4, r5, lr}
 800386a:	b09b      	sub	sp, #108	; 0x6c
 800386c:	4604      	mov	r4, r0
	if(isFull()){
 800386e:	f7ff ffbf 	bl	80037f0 <isFull>
 8003872:	4601      	mov	r1, r0
 8003874:	b9e8      	cbnz	r0, 80038b2 <enq+0x4a>
		return false;
	}
	char temp[100];
	memset(temp, 0, sizeof temp);
 8003876:	2564      	movs	r5, #100	; 0x64
 8003878:	a801      	add	r0, sp, #4
 800387a:	462a      	mov	r2, r5
 800387c:	f001 fc80 	bl	8005180 <memset>
	strcpy(temp, str);
 8003880:	4621      	mov	r1, r4

	COM.back = (COM.back + 1) % COM.capacity;
 8003882:	4c0d      	ldr	r4, [pc, #52]	; (80038b8 <enq+0x50>)
	strcpy(temp, str);
 8003884:	a801      	add	r0, sp, #4
 8003886:	f001 fca7 	bl	80051d8 <strcpy>
	COM.back = (COM.back + 1) % COM.capacity;
 800388a:	7860      	ldrb	r0, [r4, #1]
 800388c:	78e2      	ldrb	r2, [r4, #3]
 800388e:	1c43      	adds	r3, r0, #1
 8003890:	fb93 f0f2 	sdiv	r0, r3, r2
 8003894:	fb02 3010 	mls	r0, r2, r0, r3
 8003898:	7060      	strb	r0, [r4, #1]
	strcpy(COM.cmds[COM.back], temp);
 800389a:	fb05 4000 	mla	r0, r5, r0, r4
 800389e:	a901      	add	r1, sp, #4
 80038a0:	3004      	adds	r0, #4
 80038a2:	f001 fc99 	bl	80051d8 <strcpy>
	COM.size += 1;
	return true;
 80038a6:	2001      	movs	r0, #1
	COM.size += 1;
 80038a8:	78a3      	ldrb	r3, [r4, #2]
 80038aa:	3301      	adds	r3, #1
 80038ac:	70a3      	strb	r3, [r4, #2]
}
 80038ae:	b01b      	add	sp, #108	; 0x6c
 80038b0:	bd30      	pop	{r4, r5, pc}
		return false;
 80038b2:	2000      	movs	r0, #0
 80038b4:	e7fb      	b.n	80038ae <enq+0x46>
 80038b6:	bf00      	nop
 80038b8:	20000470 	.word	0x20000470

080038bc <GetCurrentSize>:
int GetCurrentSize(){
	return COM.size;
}
 80038bc:	4b01      	ldr	r3, [pc, #4]	; (80038c4 <GetCurrentSize+0x8>)
 80038be:	7898      	ldrb	r0, [r3, #2]
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000470 	.word	0x20000470

080038c8 <initMot>:
#include "WW_Loc.h"
struct motor left;
struct motor right;
//initiate right and left motor data structures. Also initializes PID controllers.
void initMot(TIM_HandleTypeDef* TIM_RightEnc, TIM_HandleTypeDef* TIM_LeftEnc,
		TIM_HandleTypeDef* TIM_RightMot, TIM_HandleTypeDef* TIM_LeftMot){
 80038c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	right.prevcount = __HAL_TIM_GET_COUNTER(TIM_RightEnc);
 80038cc:	6804      	ldr	r4, [r0, #0]
 80038ce:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 8003970 <initMot+0xa8>
 80038d2:	6a64      	ldr	r4, [r4, #36]	; 0x24

	left.setRPM = 0.0;
	left.setDis = 0.0;
	left.distance_traveled = 0.0f;

	PIDInit(&right.PID, KP, KI, KD, .1, ((float)PID_PERIOD)/1000.0, 255, AUTOMATIC, DIRECT);
 80038d4:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8003974 <initMot+0xac>
	right.prevcount = __HAL_TIM_GET_COUNTER(TIM_RightEnc);
 80038d8:	f8ae 4010 	strh.w	r4, [lr, #16]
	left.prevcount = __HAL_TIM_GET_COUNTER(TIM_LeftEnc);
 80038dc:	680c      	ldr	r4, [r1, #0]
	PIDInit(&right.PID, KP, KI, KD, .1, ((float)PID_PERIOD)/1000.0, 255, AUTOMATIC, DIRECT);
 80038de:	4f21      	ldr	r7, [pc, #132]	; (8003964 <initMot+0x9c>)
	left.prevcount = __HAL_TIM_GET_COUNTER(TIM_LeftEnc);
 80038e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80038e2:	4c21      	ldr	r4, [pc, #132]	; (8003968 <initMot+0xa0>)
	PIDInit(&right.PID, KP, KI, KD, .1, ((float)PID_PERIOD)/1000.0, 255, AUTOMATIC, DIRECT);
 80038e4:	4e21      	ldr	r6, [pc, #132]	; (800396c <initMot+0xa4>)
	left.pwm = TIM_LeftMot;
 80038e6:	61a3      	str	r3, [r4, #24]
	right.setRPM = 0.0;
 80038e8:	2300      	movs	r3, #0
	left.prevcount = __HAL_TIM_GET_COUNTER(TIM_LeftEnc);
 80038ea:	8225      	strh	r5, [r4, #16]
	right.setRPM = 0.0;
 80038ec:	f8ce 3000 	str.w	r3, [lr]
	right.setDis = 0.0;
 80038f0:	f8ce 300c 	str.w	r3, [lr, #12]
	right.distance_traveled = 0.0f;
 80038f4:	f8ce 3008 	str.w	r3, [lr, #8]
	left.setRPM = 0.0;
 80038f8:	6023      	str	r3, [r4, #0]
	left.setDis = 0.0;
 80038fa:	60e3      	str	r3, [r4, #12]
	left.distance_traveled = 0.0f;
 80038fc:	60a3      	str	r3, [r4, #8]
	right.dir = false;
 80038fe:	2500      	movs	r5, #0
	PIDInit(&right.PID, KP, KI, KD, .1, ((float)PID_PERIOD)/1000.0, 255, AUTOMATIC, DIRECT);
 8003900:	2301      	movs	r3, #1
 8003902:	f8df a074 	ldr.w	sl, [pc, #116]	; 8003978 <initMot+0xb0>
 8003906:	f8df 9074 	ldr.w	r9, [pc, #116]	; 800397c <initMot+0xb4>
 800390a:	f8df b074 	ldr.w	fp, [pc, #116]	; 8003980 <initMot+0xb8>
		TIM_HandleTypeDef* TIM_RightMot, TIM_HandleTypeDef* TIM_LeftMot){
 800390e:	b087      	sub	sp, #28
	right.encoder = TIM_RightEnc;
 8003910:	f8ce 0014 	str.w	r0, [lr, #20]
	right.pwm = TIM_RightMot;
 8003914:	f8ce 2018 	str.w	r2, [lr, #24]
	left.encoder = TIM_LeftEnc;
 8003918:	6161      	str	r1, [r4, #20]
	right.dir = false;
 800391a:	f88e 5004 	strb.w	r5, [lr, #4]
	left.dir = false;
 800391e:	7125      	strb	r5, [r4, #4]
	PIDInit(&right.PID, KP, KI, KD, .1, ((float)PID_PERIOD)/1000.0, 255, AUTOMATIC, DIRECT);
 8003920:	f10e 001c 	add.w	r0, lr, #28
 8003924:	9303      	str	r3, [sp, #12]
 8003926:	463a      	mov	r2, r7
 8003928:	4643      	mov	r3, r8
 800392a:	4631      	mov	r1, r6
 800392c:	9504      	str	r5, [sp, #16]
 800392e:	f8cd a008 	str.w	sl, [sp, #8]
 8003932:	f8cd 9004 	str.w	r9, [sp, #4]
 8003936:	f8cd b000 	str.w	fp, [sp]
 800393a:	f000 ffef 	bl	800491c <PIDInit>
	PIDInit(&left.PID, KP, KI, KD, .1, ((float)PID_PERIOD)/1000.0, 255, AUTOMATIC, DIRECT);
 800393e:	2301      	movs	r3, #1
 8003940:	9504      	str	r5, [sp, #16]
 8003942:	9303      	str	r3, [sp, #12]
 8003944:	f8cd a008 	str.w	sl, [sp, #8]
 8003948:	f8cd 9004 	str.w	r9, [sp, #4]
 800394c:	f8cd b000 	str.w	fp, [sp]
 8003950:	4643      	mov	r3, r8
 8003952:	463a      	mov	r2, r7
 8003954:	4631      	mov	r1, r6
 8003956:	f104 001c 	add.w	r0, r4, #28
 800395a:	f000 ffdf 	bl	800491c <PIDInit>

}
 800395e:	b007      	add	sp, #28
 8003960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003964:	40533333 	.word	0x40533333
 8003968:	20000724 	.word	0x20000724
 800396c:	3f666666 	.word	0x3f666666
 8003970:	200006cc 	.word	0x200006cc
 8003974:	3d8f5c29 	.word	0x3d8f5c29
 8003978:	437f0000 	.word	0x437f0000
 800397c:	3ccccccd 	.word	0x3ccccccd
 8003980:	3dcccccd 	.word	0x3dcccccd
 8003984:	00000000 	.word	0x00000000

08003988 <setArc>:
//sets targets for arc move
void setArc(float R/*mm*/, float w/*degrees/s*/, float phi/*degrees*/){
 8003988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800398c:	4606      	mov	r6, r0
 800398e:	b085      	sub	sp, #20
	float scalingfactor = 60.0/360.0;//(seconds/minute)/(degrees/revolution)
	right.setRPM = (w*(R+CENTERDIS))*scalingfactor*(1/WHEELRAD);
 8003990:	4608      	mov	r0, r1
void setArc(float R/*mm*/, float w/*degrees/s*/, float phi/*degrees*/){
 8003992:	9203      	str	r2, [sp, #12]
	right.setRPM = (w*(R+CENTERDIS))*scalingfactor*(1/WHEELRAD);
 8003994:	f7fc fd60 	bl	8000458 <__aeabi_f2d>
 8003998:	e9cd 0100 	strd	r0, r1, [sp]
 800399c:	4630      	mov	r0, r6
 800399e:	f7fc fd5b 	bl	8000458 <__aeabi_f2d>
 80039a2:	a353      	add	r3, pc, #332	; (adr r3, 8003af0 <setArc+0x168>)
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	4606      	mov	r6, r0
 80039aa:	460f      	mov	r7, r1
 80039ac:	f7fc fbf6 	bl	800019c <__adddf3>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4680      	mov	r8, r0
 80039b6:	4689      	mov	r9, r1
 80039b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039bc:	f7fc fda0 	bl	8000500 <__aeabi_dmul>
 80039c0:	a34d      	add	r3, pc, #308	; (adr r3, 8003af8 <setArc+0x170>)
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	f7fc fd9b 	bl	8000500 <__aeabi_dmul>
 80039ca:	a34d      	add	r3, pc, #308	; (adr r3, 8003b00 <setArc+0x178>)
 80039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d0:	f7fc fd96 	bl	8000500 <__aeabi_dmul>
 80039d4:	f7fd f876 	bl	8000ac4 <__aeabi_d2f>
	left.setRPM = (w*(R-CENTERDIS))*scalingfactor*(1/WHEELRAD);
 80039d8:	a345      	add	r3, pc, #276	; (adr r3, 8003af0 <setArc+0x168>)
 80039da:	e9d3 2300 	ldrd	r2, r3, [r3]
	right.setRPM = (w*(R+CENTERDIS))*scalingfactor*(1/WHEELRAD);
 80039de:	4d4c      	ldr	r5, [pc, #304]	; (8003b10 <setArc+0x188>)
 80039e0:	4682      	mov	sl, r0
 80039e2:	6028      	str	r0, [r5, #0]
	left.setRPM = (w*(R-CENTERDIS))*scalingfactor*(1/WHEELRAD);
 80039e4:	4639      	mov	r1, r7
 80039e6:	4630      	mov	r0, r6
 80039e8:	f7fc fbd6 	bl	8000198 <__aeabi_dsub>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4606      	mov	r6, r0
 80039f2:	460f      	mov	r7, r1
 80039f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039f8:	f7fc fd82 	bl	8000500 <__aeabi_dmul>
 80039fc:	a33e      	add	r3, pc, #248	; (adr r3, 8003af8 <setArc+0x170>)
 80039fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a02:	f7fc fd7d 	bl	8000500 <__aeabi_dmul>
 8003a06:	a33e      	add	r3, pc, #248	; (adr r3, 8003b00 <setArc+0x178>)
 8003a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0c:	f7fc fd78 	bl	8000500 <__aeabi_dmul>
 8003a10:	f7fd f858 	bl	8000ac4 <__aeabi_d2f>
 8003a14:	4c3f      	ldr	r4, [pc, #252]	; (8003b14 <setArc+0x18c>)
 8003a16:	4683      	mov	fp, r0
 8003a18:	6020      	str	r0, [r4, #0]
	//set appropriate values for reverse operation
	if (right.setRPM < 0){
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4650      	mov	r0, sl
 8003a1e:	f7fd fb4d 	bl	80010bc <__aeabi_fcmplt>
 8003a22:	2800      	cmp	r0, #0
 8003a24:	d05e      	beq.n	8003ae4 <setArc+0x15c>
		right.setRPM = -1*right.setRPM;
		right.dir = true;
 8003a26:	2201      	movs	r2, #1
		right.setRPM = -1*right.setRPM;
 8003a28:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
 8003a2c:	f8c5 a000 	str.w	sl, [r5]
		right.dir = true;
 8003a30:	712a      	strb	r2, [r5, #4]
	else
	{
		right.dir = false;
	}

	if (left.setRPM < 0){
 8003a32:	2100      	movs	r1, #0
 8003a34:	4658      	mov	r0, fp
 8003a36:	f7fd fb41 	bl	80010bc <__aeabi_fcmplt>
 8003a3a:	2800      	cmp	r0, #0
 8003a3c:	d054      	beq.n	8003ae8 <setArc+0x160>
		left.setRPM = -1*left.setRPM;
 8003a3e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003a42:	6023      	str	r3, [r4, #0]
		left.dir = true;
 8003a44:	2301      	movs	r3, #1
 8003a46:	7123      	strb	r3, [r4, #4]
	else
	{
		left.dir = false;
	}
	//get arc length for distance target
	right.setDis = abs((R+CENTERDIS)*phi*M_PI/180);
 8003a48:	9803      	ldr	r0, [sp, #12]
 8003a4a:	f7fc fd05 	bl	8000458 <__aeabi_f2d>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4682      	mov	sl, r0
 8003a54:	468b      	mov	fp, r1
 8003a56:	4640      	mov	r0, r8
 8003a58:	4649      	mov	r1, r9
 8003a5a:	f7fc fd51 	bl	8000500 <__aeabi_dmul>
 8003a5e:	a32a      	add	r3, pc, #168	; (adr r3, 8003b08 <setArc+0x180>)
 8003a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a64:	f7fc fd4c 	bl	8000500 <__aeabi_dmul>
 8003a68:	2200      	movs	r2, #0
 8003a6a:	4b2b      	ldr	r3, [pc, #172]	; (8003b18 <setArc+0x190>)
 8003a6c:	f7fc fe72 	bl	8000754 <__aeabi_ddiv>
 8003a70:	f7fc ffe0 	bl	8000a34 <__aeabi_d2iz>
 8003a74:	2800      	cmp	r0, #0
 8003a76:	bfb8      	it	lt
 8003a78:	4240      	neglt	r0, r0
 8003a7a:	f7fd f92d 	bl	8000cd8 <__aeabi_i2f>
	left.setDis = abs((R-CENTERDIS)*phi*M_PI/180);
 8003a7e:	4652      	mov	r2, sl
	right.setDis = abs((R+CENTERDIS)*phi*M_PI/180);
 8003a80:	60e8      	str	r0, [r5, #12]
	left.setDis = abs((R-CENTERDIS)*phi*M_PI/180);
 8003a82:	465b      	mov	r3, fp
 8003a84:	4630      	mov	r0, r6
 8003a86:	4639      	mov	r1, r7
 8003a88:	f7fc fd3a 	bl	8000500 <__aeabi_dmul>
 8003a8c:	a31e      	add	r3, pc, #120	; (adr r3, 8003b08 <setArc+0x180>)
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	f7fc fd35 	bl	8000500 <__aeabi_dmul>
 8003a96:	2200      	movs	r2, #0
 8003a98:	4b1f      	ldr	r3, [pc, #124]	; (8003b18 <setArc+0x190>)
 8003a9a:	f7fc fe5b 	bl	8000754 <__aeabi_ddiv>
 8003a9e:	f7fc ffc9 	bl	8000a34 <__aeabi_d2iz>
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	bfb8      	it	lt
 8003aa6:	4240      	neglt	r0, r0
 8003aa8:	f7fd f916 	bl	8000cd8 <__aeabi_i2f>
	//adjust again for negative phi
	if (phi < 0){
 8003aac:	2100      	movs	r1, #0
	left.setDis = abs((R-CENTERDIS)*phi*M_PI/180);
 8003aae:	60e0      	str	r0, [r4, #12]
	if (phi < 0){
 8003ab0:	9803      	ldr	r0, [sp, #12]
 8003ab2:	f7fd fb03 	bl	80010bc <__aeabi_fcmplt>
 8003ab6:	b178      	cbz	r0, 8003ad8 <setArc+0x150>
		left.setRPM = -1*left.setRPM;
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003abe:	6023      	str	r3, [r4, #0]
		left.dir = !left.dir;
 8003ac0:	7923      	ldrb	r3, [r4, #4]
 8003ac2:	f083 0301 	eor.w	r3, r3, #1
 8003ac6:	7123      	strb	r3, [r4, #4]
		right.setRPM = -1*right.setRPM;
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003ace:	602b      	str	r3, [r5, #0]
		right.dir = !right.dir;
 8003ad0:	792b      	ldrb	r3, [r5, #4]
 8003ad2:	f083 0301 	eor.w	r3, r3, #1
 8003ad6:	712b      	strb	r3, [r5, #4]
	}
	//Re-initialize targeting to a rotation/distance
	right.distance_traveled = 0.0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60ab      	str	r3, [r5, #8]
	left.distance_traveled = 0.0;
 8003adc:	60a3      	str	r3, [r4, #8]
}
 8003ade:	b005      	add	sp, #20
 8003ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		right.dir = false;
 8003ae4:	7128      	strb	r0, [r5, #4]
 8003ae6:	e7a4      	b.n	8003a32 <setArc+0xaa>
		left.dir = false;
 8003ae8:	7120      	strb	r0, [r4, #4]
 8003aea:	e7ad      	b.n	8003a48 <setArc+0xc0>
 8003aec:	f3af 8000 	nop.w
 8003af0:	00000000 	.word	0x00000000
 8003af4:	406bc800 	.word	0x406bc800
 8003af8:	60000000 	.word	0x60000000
 8003afc:	3fc55555 	.word	0x3fc55555
 8003b00:	b84c05c2 	.word	0xb84c05c2
 8003b04:	3f970980 	.word	0x3f970980
 8003b08:	54442d18 	.word	0x54442d18
 8003b0c:	400921fb 	.word	0x400921fb
 8003b10:	200006cc 	.word	0x200006cc
 8003b14:	20000724 	.word	0x20000724
 8003b18:	40668000 	.word	0x40668000
 8003b1c:	00000000 	.word	0x00000000

08003b20 <setLin>:
//sets targets for linear move
void setLin(float dis/*mm*/, float spd/*mm/s*/){
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	4607      	mov	r7, r0
	//calculate rpm
	right.setRPM = (spd/(2.0*M_PI*WHEELRAD))*60.0;
 8003b24:	4608      	mov	r0, r1
 8003b26:	f7fc fc97 	bl	8000458 <__aeabi_f2d>
 8003b2a:	a313      	add	r3, pc, #76	; (adr r3, 8003b78 <setLin+0x58>)
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	f7fc fe10 	bl	8000754 <__aeabi_ddiv>
 8003b34:	2200      	movs	r2, #0
 8003b36:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <setLin+0x60>)
 8003b38:	f7fc fce2 	bl	8000500 <__aeabi_dmul>
 8003b3c:	f7fc ffc2 	bl	8000ac4 <__aeabi_d2f>
 8003b40:	4d10      	ldr	r5, [pc, #64]	; (8003b84 <setLin+0x64>)
	left.setRPM = right.setRPM;
 8003b42:	4c11      	ldr	r4, [pc, #68]	; (8003b88 <setLin+0x68>)
	right.setRPM = (spd/(2.0*M_PI*WHEELRAD))*60.0;
 8003b44:	6028      	str	r0, [r5, #0]
	left.setRPM = right.setRPM;
 8003b46:	6020      	str	r0, [r4, #0]
	//reverse if rpm negative
	if (right.setRPM < 0){
 8003b48:	2100      	movs	r1, #0
	right.setRPM = (spd/(2.0*M_PI*WHEELRAD))*60.0;
 8003b4a:	4606      	mov	r6, r0
	if (right.setRPM < 0){
 8003b4c:	f7fd fab6 	bl	80010bc <__aeabi_fcmplt>
 8003b50:	462a      	mov	r2, r5
 8003b52:	4623      	mov	r3, r4
 8003b54:	b160      	cbz	r0, 8003b70 <setLin+0x50>
		right.setRPM = -1.0*right.setRPM;
		left.setRPM = -1.0*left.setRPM;
		right.dir = true;
 8003b56:	2101      	movs	r1, #1
		right.setRPM = -1.0*right.setRPM;
 8003b58:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8003b5c:	602e      	str	r6, [r5, #0]
		left.setRPM = -1.0*left.setRPM;
 8003b5e:	6026      	str	r6, [r4, #0]
		right.dir = true;
 8003b60:	7129      	strb	r1, [r5, #4]
		left.dir = true;
 8003b62:	7121      	strb	r1, [r4, #4]
	}
	//set distance
	right.setDis = dis;
	left.setDis = dis;
	//Re-initialize targeting to a rotation/distance
	right.distance_traveled = 0.0;
 8003b64:	2100      	movs	r1, #0
	right.setDis = dis;
 8003b66:	60d7      	str	r7, [r2, #12]
	left.setDis = dis;
 8003b68:	60df      	str	r7, [r3, #12]
	right.distance_traveled = 0.0;
 8003b6a:	6091      	str	r1, [r2, #8]
	left.distance_traveled = 0.0;
 8003b6c:	6099      	str	r1, [r3, #8]
 8003b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		right.dir = false;
 8003b70:	7128      	strb	r0, [r5, #4]
		left.dir = false;
 8003b72:	7120      	strb	r0, [r4, #4]
 8003b74:	e7f6      	b.n	8003b64 <setLin+0x44>
 8003b76:	bf00      	nop
 8003b78:	f4b9c01f 	.word	0xf4b9c01f
 8003b7c:	40717499 	.word	0x40717499
 8003b80:	404e0000 	.word	0x404e0000
 8003b84:	200006cc 	.word	0x200006cc
 8003b88:	20000724 	.word	0x20000724

08003b8c <Get_EncoderPos>:
}
//get Absolute difference in count of requested encoder since last call of Get_EncoderPos(), accounting for over/underflow
uint16_t Get_EncoderPos(struct motor* Mot){
	uint16_t newposition;
	//establish one master value of count
	uint16_t currentcount = __HAL_TIM_GET_COUNTER(Mot->encoder);
 8003b8c:	6943      	ldr	r3, [r0, #20]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(Mot->encoder)){
 8003b92:	681b      	ldr	r3, [r3, #0]
	uint16_t currentcount = __HAL_TIM_GET_COUNTER(Mot->encoder);
 8003b94:	b291      	uxth	r1, r2
	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(Mot->encoder)){
 8003b96:	f013 0f10 	tst.w	r3, #16
 8003b9a:	8a03      	ldrh	r3, [r0, #16]
 8003b9c:	d00d      	beq.n	8003bba <Get_EncoderPos+0x2e>
		if(Mot->prevcount < currentcount){
 8003b9e:	4299      	cmp	r1, r3
 8003ba0:	d905      	bls.n	8003bae <Get_EncoderPos+0x22>
			//underflow condition
			newposition = 65535 - currentcount + Mot->prevcount;
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	1a5b      	subs	r3, r3, r1
	}else{
		if(Mot->prevcount > currentcount){
			//overflow condition
			newposition = currentcount + 65535 - Mot->prevcount;
		}else{
			newposition = abs(currentcount - Mot->prevcount);
 8003ba6:	b29b      	uxth	r3, r3
		}
	}
	Mot->prevcount = currentcount;
 8003ba8:	8201      	strh	r1, [r0, #16]
	return newposition;
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	4770      	bx	lr
			newposition = abs(Mot->prevcount-currentcount);
 8003bae:	b292      	uxth	r2, r2
 8003bb0:	1a9b      	subs	r3, r3, r2
			newposition = abs(currentcount - Mot->prevcount);
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bfb8      	it	lt
 8003bb6:	425b      	neglt	r3, r3
 8003bb8:	e7f5      	b.n	8003ba6 <Get_EncoderPos+0x1a>
		if(Mot->prevcount > currentcount){
 8003bba:	4299      	cmp	r1, r3
 8003bbc:	d202      	bcs.n	8003bc4 <Get_EncoderPos+0x38>
			newposition = currentcount + 65535 - Mot->prevcount;
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	440b      	add	r3, r1
 8003bc2:	e7f0      	b.n	8003ba6 <Get_EncoderPos+0x1a>
			newposition = abs(currentcount - Mot->prevcount);
 8003bc4:	b292      	uxth	r2, r2
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	e7f3      	b.n	8003bb2 <Get_EncoderPos+0x26>
	...

08003bcc <Get_LeftEncoderPos>:
//wrapper
uint16_t Get_LeftEncoderPos(){
	return Get_EncoderPos(&left);
 8003bcc:	4801      	ldr	r0, [pc, #4]	; (8003bd4 <Get_LeftEncoderPos+0x8>)
 8003bce:	f7ff bfdd 	b.w	8003b8c <Get_EncoderPos>
 8003bd2:	bf00      	nop
 8003bd4:	20000724 	.word	0x20000724

08003bd8 <Get_RightEncoderPos>:
}
//wrapper
uint16_t Get_RightEncoderPos(){
	return Get_EncoderPos(&right);
 8003bd8:	4801      	ldr	r0, [pc, #4]	; (8003be0 <Get_RightEncoderPos+0x8>)
 8003bda:	f7ff bfd7 	b.w	8003b8c <Get_EncoderPos>
 8003bde:	bf00      	nop
 8003be0:	200006cc 	.word	0x200006cc

08003be4 <Set_MotorDir>:
}
//sets GPIOS for requested motor direction/break for L298 driver based on motor's data structure values
void Set_MotorDir(){
 8003be4:	b538      	push	{r3, r4, r5, lr}
	if (right.setRPM == 0.0) {
 8003be6:	4d1b      	ldr	r5, [pc, #108]	; (8003c54 <Set_MotorDir+0x70>)
 8003be8:	2100      	movs	r1, #0
 8003bea:	6828      	ldr	r0, [r5, #0]
 8003bec:	f7fd fa5c 	bl	80010a8 <__aeabi_fcmpeq>
 8003bf0:	b1d8      	cbz	r0, 8003c2a <Set_MotorDir+0x46>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	4818      	ldr	r0, [pc, #96]	; (8003c58 <Set_MotorDir+0x74>)
 8003bf8:	f7fd fc52 	bl	80014a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8003bfc:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
	}
	if (left.setRPM == 0.0) {
 8003bfe:	4d17      	ldr	r5, [pc, #92]	; (8003c5c <Set_MotorDir+0x78>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8003c00:	2102      	movs	r1, #2
 8003c02:	4815      	ldr	r0, [pc, #84]	; (8003c58 <Set_MotorDir+0x74>)
 8003c04:	f7fd fc4c 	bl	80014a0 <HAL_GPIO_WritePin>
	if (left.setRPM == 0.0) {
 8003c08:	2100      	movs	r1, #0
 8003c0a:	6828      	ldr	r0, [r5, #0]
 8003c0c:	f7fd fa4c 	bl	80010a8 <__aeabi_fcmpeq>
 8003c10:	b1a8      	cbz	r0, 8003c3e <Set_MotorDir+0x5a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8003c12:	2200      	movs	r2, #0
 8003c14:	2104      	movs	r1, #4
 8003c16:	4810      	ldr	r0, [pc, #64]	; (8003c58 <Set_MotorDir+0x74>)
 8003c18:	f7fd fc42 	bl	80014a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8003c1c:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
	}
}
 8003c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8003c22:	2108      	movs	r1, #8
 8003c24:	480c      	ldr	r0, [pc, #48]	; (8003c58 <Set_MotorDir+0x74>)
 8003c26:	f7fd bc3b 	b.w	80014a0 <HAL_GPIO_WritePin>
	} else if(right.dir == true) {
 8003c2a:	792a      	ldrb	r2, [r5, #4]
 8003c2c:	b10a      	cbz	r2, 8003c32 <Set_MotorDir+0x4e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003c2e:	2201      	movs	r2, #1
 8003c30:	e7e0      	b.n	8003bf4 <Set_MotorDir+0x10>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8003c32:	2101      	movs	r1, #1
 8003c34:	4808      	ldr	r0, [pc, #32]	; (8003c58 <Set_MotorDir+0x74>)
 8003c36:	f7fd fc33 	bl	80014a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	e7df      	b.n	8003bfe <Set_MotorDir+0x1a>
	}else if(left.dir == true) {
 8003c3e:	792a      	ldrb	r2, [r5, #4]
 8003c40:	b10a      	cbz	r2, 8003c46 <Set_MotorDir+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8003c42:	2201      	movs	r2, #1
 8003c44:	e7e6      	b.n	8003c14 <Set_MotorDir+0x30>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8003c46:	2104      	movs	r1, #4
 8003c48:	4803      	ldr	r0, [pc, #12]	; (8003c58 <Set_MotorDir+0x74>)
 8003c4a:	f7fd fc29 	bl	80014a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8003c4e:	2201      	movs	r2, #1
 8003c50:	e7e5      	b.n	8003c1e <Set_MotorDir+0x3a>
 8003c52:	bf00      	nop
 8003c54:	200006cc 	.word	0x200006cc
 8003c58:	40020800 	.word	0x40020800
 8003c5c:	20000724 	.word	0x20000724

08003c60 <Set_PIDOut>:
//updates left and right PID setpoints and Inputs, computes new output and updates PWM
void Set_PIDOut(float rpm1, float rpm2, UART_HandleTypeDef* huart){
 8003c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
//      setpoint - The desired setpoint the PID controller will try to obtain.
// Returns:
//      Nothing.
// 
inline void 
PIDSetpointSet(PIDControl *pid, float setpoint) { pid->setpoint = setpoint; }
 8003c64:	4e17      	ldr	r6, [pc, #92]	; (8003cc4 <Set_PIDOut+0x64>)
 8003c66:	4f18      	ldr	r7, [pc, #96]	; (8003cc8 <Set_PIDOut+0x68>)
 8003c68:	6833      	ldr	r3, [r6, #0]
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	6533      	str	r3, [r6, #80]	; 0x50
//      input - The value the controller will work with.
// Returns:
//      Nothing.
// 
inline void 
PIDInputSet(PIDControl *pid, float input) { pid->input = input; }
 8003c6e:	4633      	mov	r3, r6
 8003c70:	f843 0f1c 	str.w	r0, [r3, #28]!
	PIDSetpointSet(&right.PID,right.setRPM);
	PIDInputSet(&right.PID,rpm1);
	PIDCompute(&right.PID);
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fda4 	bl	80047c2 <PIDCompute>
 8003c7a:	4638      	mov	r0, r7
PIDSetpointSet(PIDControl *pid, float setpoint) { pid->setpoint = setpoint; }
 8003c7c:	683b      	ldr	r3, [r7, #0]
PIDInputSet(PIDControl *pid, float input) { pid->input = input; }
 8003c7e:	f840 4f1c 	str.w	r4, [r0, #28]!
PIDSetpointSet(PIDControl *pid, float setpoint) { pid->setpoint = setpoint; }
 8003c82:	653b      	str	r3, [r7, #80]	; 0x50
	PIDSetpointSet(&left.PID,left.setRPM);
	PIDInputSet(&left.PID,rpm2);
	PIDCompute(&left.PID);
 8003c84:	f000 fd9d 	bl	80047c2 <PIDCompute>
	uint16_t speed1 = (uint16_t)PIDOutputGet(&right.PID);
	//uint16_t speed1 = 0;
	uint16_t speed2 = (uint16_t)PIDOutputGet(&left.PID);
 8003c88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c8a:	f7fd fa65 	bl	8001158 <__aeabi_f2uiz>
	speed1 = map(speed1, 0, 255, 0, 2000);
	speed2 = map(speed2, 0, 255, 0, 2000);
//	char buffer[25];
//	uint8_t len = sprintf(buffer,"pwm:%i\r\n", speed1); //sprintf will return the length of 'buffer'
//	HAL_UART_Transmit(huart, buffer, len, 1000);
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, speed1);
 8003c8e:	69b3      	ldr	r3, [r6, #24]
	return;
}
//Arduino map function
uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003c90:	b285      	uxth	r5, r0
	uint16_t speed1 = (uint16_t)PIDOutputGet(&right.PID);
 8003c92:	6a70      	ldr	r0, [r6, #36]	; 0x24
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, speed1);
 8003c94:	f8d3 9000 	ldr.w	r9, [r3]
	uint16_t speed1 = (uint16_t)PIDOutputGet(&right.PID);
 8003c98:	f7fd fa5e 	bl	8001158 <__aeabi_f2uiz>
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003c9c:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 8003ca0:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8003ca4:	b280      	uxth	r0, r0
 8003ca6:	4365      	muls	r5, r4
 8003ca8:	4344      	muls	r4, r0
 8003caa:	fb95 f5f8 	sdiv	r5, r5, r8
 8003cae:	fb94 f4f8 	sdiv	r4, r4, r8
	__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, speed2);
 8003cb2:	69bb      	ldr	r3, [r7, #24]
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, speed1);
 8003cb4:	b2a4      	uxth	r4, r4
	__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, speed2);
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	b2ad      	uxth	r5, r5
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, speed1);
 8003cba:	f8c9 4034 	str.w	r4, [r9, #52]	; 0x34
	__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, speed2);
 8003cbe:	635d      	str	r5, [r3, #52]	; 0x34
 8003cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cc4:	200006cc 	.word	0x200006cc
 8003cc8:	20000724 	.word	0x20000724
 8003ccc:	00000000 	.word	0x00000000

08003cd0 <Run_PID>:
void Run_PID(UART_HandleTypeDef* huart){
 8003cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cd4:	b085      	sub	sp, #20
 8003cd6:	4606      	mov	r6, r0
	volatile uint64_t tim = HAL_GetTick();
 8003cd8:	f7fd fa86 	bl	80011e8 <HAL_GetTick>
 8003cdc:	2100      	movs	r1, #0
	volatile uint32_t deltat = (uint32_t)(tim - prevtim);
 8003cde:	4c7a      	ldr	r4, [pc, #488]	; (8003ec8 <Run_PID+0x1f8>)
	volatile uint64_t tim = HAL_GetTick();
 8003ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
	volatile uint32_t deltat = (uint32_t)(tim - prevtim);
 8003ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ce8:	6823      	ldr	r3, [r4, #0]
 8003cea:	1ad2      	subs	r2, r2, r3
 8003cec:	9201      	str	r2, [sp, #4]
	if(deltat < PID_PERIOD){
 8003cee:	9b01      	ldr	r3, [sp, #4]
 8003cf0:	2b18      	cmp	r3, #24
 8003cf2:	f240 80d8 	bls.w	8003ea6 <Run_PID+0x1d6>
	Set_MotorDir();
 8003cf6:	f7ff ff75 	bl	8003be4 <Set_MotorDir>
	uint16_t newposition1 = Get_RightEncoderPos();
 8003cfa:	f7ff ff6d 	bl	8003bd8 <Get_RightEncoderPos>
 8003cfe:	4605      	mov	r5, r0
	uint16_t newposition2 = Get_LeftEncoderPos();
 8003d00:	f7ff ff64 	bl	8003bcc <Get_LeftEncoderPos>
	prevtim = tim;
 8003d04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	uint16_t newposition2 = Get_LeftEncoderPos();
 8003d08:	4607      	mov	r7, r0
	prevtim = tim;
 8003d0a:	e9c4 2300 	strd	r2, r3, [r4]
	float vel1 = ((float)newposition1) * 10; //encoder pulses per second
 8003d0e:	4628      	mov	r0, r5
 8003d10:	f7fc ffde 	bl	8000cd0 <__aeabi_ui2f>
 8003d14:	496d      	ldr	r1, [pc, #436]	; (8003ecc <Run_PID+0x1fc>)
 8003d16:	f7fd f833 	bl	8000d80 <__aeabi_fmul>
	float rpm1 = ((vel1 * 60)/750); //Measured motor RPM
 8003d1a:	496d      	ldr	r1, [pc, #436]	; (8003ed0 <Run_PID+0x200>)
 8003d1c:	f7fd f830 	bl	8000d80 <__aeabi_fmul>
 8003d20:	496c      	ldr	r1, [pc, #432]	; (8003ed4 <Run_PID+0x204>)
 8003d22:	f7fd f8e1 	bl	8000ee8 <__aeabi_fdiv>
 8003d26:	4605      	mov	r5, r0
	float vel2 = ((float)newposition2) * 10; //encoder pulses per second
 8003d28:	4638      	mov	r0, r7
 8003d2a:	f7fc ffd1 	bl	8000cd0 <__aeabi_ui2f>
 8003d2e:	4967      	ldr	r1, [pc, #412]	; (8003ecc <Run_PID+0x1fc>)
 8003d30:	f7fd f826 	bl	8000d80 <__aeabi_fmul>
	float rpm2 = ((vel2 * 60)/750);
 8003d34:	4966      	ldr	r1, [pc, #408]	; (8003ed0 <Run_PID+0x200>)
 8003d36:	f7fd f823 	bl	8000d80 <__aeabi_fmul>
 8003d3a:	4966      	ldr	r1, [pc, #408]	; (8003ed4 <Run_PID+0x204>)
 8003d3c:	f7fd f8d4 	bl	8000ee8 <__aeabi_fdiv>
	Set_PIDOut(rpm1, rpm2, huart);
 8003d40:	4632      	mov	r2, r6
	float rpm2 = ((vel2 * 60)/750);
 8003d42:	4604      	mov	r4, r0
	Set_PIDOut(rpm1, rpm2, huart);
 8003d44:	4601      	mov	r1, r0
 8003d46:	4628      	mov	r0, r5
 8003d48:	f7ff ff8a 	bl	8003c60 <Set_PIDOut>
	float realspeed1 = (rpm1 * 2.0 * M_PI * WHEELRAD)/60; //Linear speed in mm/s
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	f7fc fb83 	bl	8000458 <__aeabi_f2d>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	f7fc fa21 	bl	800019c <__adddf3>
 8003d5a:	a355      	add	r3, pc, #340	; (adr r3, 8003eb0 <Run_PID+0x1e0>)
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	f7fc fbce 	bl	8000500 <__aeabi_dmul>
 8003d64:	a354      	add	r3, pc, #336	; (adr r3, 8003eb8 <Run_PID+0x1e8>)
 8003d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6a:	f7fc fbc9 	bl	8000500 <__aeabi_dmul>
 8003d6e:	2200      	movs	r2, #0
 8003d70:	4b59      	ldr	r3, [pc, #356]	; (8003ed8 <Run_PID+0x208>)
 8003d72:	f7fc fcef 	bl	8000754 <__aeabi_ddiv>
 8003d76:	f7fc fea5 	bl	8000ac4 <__aeabi_d2f>
	right.distance_traveled = right.distance_traveled + (realspeed1*deltat*1e-3); //integrate linear velocity to obtain distance
 8003d7a:	9e01      	ldr	r6, [sp, #4]
	float realspeed1 = (rpm1 * 2.0 * M_PI * WHEELRAD)/60; //Linear speed in mm/s
 8003d7c:	4605      	mov	r5, r0
	right.distance_traveled = right.distance_traveled + (realspeed1*deltat*1e-3); //integrate linear velocity to obtain distance
 8003d7e:	4630      	mov	r0, r6
 8003d80:	f7fc ffa6 	bl	8000cd0 <__aeabi_ui2f>
 8003d84:	4601      	mov	r1, r0
 8003d86:	4628      	mov	r0, r5
 8003d88:	f7fc fffa 	bl	8000d80 <__aeabi_fmul>
 8003d8c:	f7fc fb64 	bl	8000458 <__aeabi_f2d>
 8003d90:	a34b      	add	r3, pc, #300	; (adr r3, 8003ec0 <Run_PID+0x1f0>)
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f7fc fbb3 	bl	8000500 <__aeabi_dmul>
 8003d9a:	4d50      	ldr	r5, [pc, #320]	; (8003edc <Run_PID+0x20c>)
 8003d9c:	4606      	mov	r6, r0
 8003d9e:	68a8      	ldr	r0, [r5, #8]
 8003da0:	460f      	mov	r7, r1
 8003da2:	f7fc fb59 	bl	8000458 <__aeabi_f2d>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4630      	mov	r0, r6
 8003dac:	4639      	mov	r1, r7
 8003dae:	f7fc f9f5 	bl	800019c <__adddf3>
 8003db2:	f7fc fe87 	bl	8000ac4 <__aeabi_d2f>
 8003db6:	60a8      	str	r0, [r5, #8]
 8003db8:	4680      	mov	r8, r0
	float realspeed2 = (rpm2 * 2.0 * M_PI * WHEELRAD)/60; //Linear speed in mm/s
 8003dba:	4620      	mov	r0, r4
 8003dbc:	f7fc fb4c 	bl	8000458 <__aeabi_f2d>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	f7fc f9ea 	bl	800019c <__adddf3>
 8003dc8:	a339      	add	r3, pc, #228	; (adr r3, 8003eb0 <Run_PID+0x1e0>)
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	f7fc fb97 	bl	8000500 <__aeabi_dmul>
 8003dd2:	a339      	add	r3, pc, #228	; (adr r3, 8003eb8 <Run_PID+0x1e8>)
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	f7fc fb92 	bl	8000500 <__aeabi_dmul>
 8003ddc:	2200      	movs	r2, #0
 8003dde:	4b3e      	ldr	r3, [pc, #248]	; (8003ed8 <Run_PID+0x208>)
 8003de0:	f7fc fcb8 	bl	8000754 <__aeabi_ddiv>
 8003de4:	f7fc fe6e 	bl	8000ac4 <__aeabi_d2f>
	left.distance_traveled = left.distance_traveled + (realspeed2*deltat*1e-3); //integrate linear velocity to obtain distance
 8003de8:	9e01      	ldr	r6, [sp, #4]
	float realspeed2 = (rpm2 * 2.0 * M_PI * WHEELRAD)/60; //Linear speed in mm/s
 8003dea:	4604      	mov	r4, r0
	left.distance_traveled = left.distance_traveled + (realspeed2*deltat*1e-3); //integrate linear velocity to obtain distance
 8003dec:	4630      	mov	r0, r6
 8003dee:	f7fc ff6f 	bl	8000cd0 <__aeabi_ui2f>
 8003df2:	4601      	mov	r1, r0
 8003df4:	4620      	mov	r0, r4
 8003df6:	f7fc ffc3 	bl	8000d80 <__aeabi_fmul>
 8003dfa:	f7fc fb2d 	bl	8000458 <__aeabi_f2d>
 8003dfe:	a330      	add	r3, pc, #192	; (adr r3, 8003ec0 <Run_PID+0x1f0>)
 8003e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e04:	f7fc fb7c 	bl	8000500 <__aeabi_dmul>
 8003e08:	4c35      	ldr	r4, [pc, #212]	; (8003ee0 <Run_PID+0x210>)
 8003e0a:	4606      	mov	r6, r0
 8003e0c:	68a0      	ldr	r0, [r4, #8]
 8003e0e:	460f      	mov	r7, r1
 8003e10:	f7fc fb22 	bl	8000458 <__aeabi_f2d>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4630      	mov	r0, r6
 8003e1a:	4639      	mov	r1, r7
 8003e1c:	f7fc f9be 	bl	800019c <__adddf3>
 8003e20:	f7fc fe50 	bl	8000ac4 <__aeabi_d2f>
	if ((right.setDis==0 && left.setDis == 0)||(abs(right.distance_traveled-right.setDis) <= TOLERANCE)||(abs(left.distance_traveled-left.setDis) <= TOLERANCE) ){
 8003e24:	f8d5 900c 	ldr.w	r9, [r5, #12]
	left.distance_traveled = left.distance_traveled + (realspeed2*deltat*1e-3); //integrate linear velocity to obtain distance
 8003e28:	60a0      	str	r0, [r4, #8]
 8003e2a:	4607      	mov	r7, r0
	if ((right.setDis==0 && left.setDis == 0)||(abs(right.distance_traveled-right.setDis) <= TOLERANCE)||(abs(left.distance_traveled-left.setDis) <= TOLERANCE) ){
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4648      	mov	r0, r9
 8003e30:	f7fd f93a 	bl	80010a8 <__aeabi_fcmpeq>
 8003e34:	2600      	movs	r6, #0
 8003e36:	b120      	cbz	r0, 8003e42 <Run_PID+0x172>
 8003e38:	4631      	mov	r1, r6
 8003e3a:	68e0      	ldr	r0, [r4, #12]
 8003e3c:	f7fd f934 	bl	80010a8 <__aeabi_fcmpeq>
 8003e40:	b988      	cbnz	r0, 8003e66 <Run_PID+0x196>
 8003e42:	4649      	mov	r1, r9
 8003e44:	4640      	mov	r0, r8
 8003e46:	f7fc fe91 	bl	8000b6c <__aeabi_fsub>
 8003e4a:	f7fd f95f 	bl	800110c <__aeabi_f2iz>
 8003e4e:	300a      	adds	r0, #10
 8003e50:	2814      	cmp	r0, #20
 8003e52:	d908      	bls.n	8003e66 <Run_PID+0x196>
 8003e54:	68e1      	ldr	r1, [r4, #12]
 8003e56:	4638      	mov	r0, r7
 8003e58:	f7fc fe88 	bl	8000b6c <__aeabi_fsub>
 8003e5c:	f7fd f956 	bl	800110c <__aeabi_f2iz>
 8003e60:	300a      	adds	r0, #10
 8003e62:	2814      	cmp	r0, #20
 8003e64:	d81f      	bhi.n	8003ea6 <Run_PID+0x1d6>
		__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, 0);
 8003e66:	69ab      	ldr	r3, [r5, #24]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	6353      	str	r3, [r2, #52]	; 0x34
		__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, 0);
 8003e6e:	69a2      	ldr	r2, [r4, #24]
 8003e70:	6812      	ldr	r2, [r2, #0]
		right.dir = false;
 8003e72:	712b      	strb	r3, [r5, #4]
		__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, 0);
 8003e74:	6353      	str	r3, [r2, #52]	; 0x34
		left.dir = false;
 8003e76:	7123      	strb	r3, [r4, #4]
		right.setRPM = 0.0; //Brake
 8003e78:	602e      	str	r6, [r5, #0]
		left.setRPM = 0.0; //Brake
 8003e7a:	6026      	str	r6, [r4, #0]
		right.setDis = 0.0;
 8003e7c:	60ee      	str	r6, [r5, #12]
		left.setDis = 0.0;
 8003e7e:	60e6      	str	r6, [r4, #12]
		right.distance_traveled = 0.0;
 8003e80:	60ae      	str	r6, [r5, #8]
		left.distance_traveled = 0.0;
 8003e82:	60a6      	str	r6, [r4, #8]
		Set_MotorDir();
 8003e84:	f7ff feae 	bl	8003be4 <Set_MotorDir>
		if(!isEmpty()){
 8003e88:	f7ff fcbc 	bl	8003804 <isEmpty>
 8003e8c:	b928      	cbnz	r0, 8003e9a <Run_PID+0x1ca>
			EXE_CMD(deq(), &htim9, &huart1);
 8003e8e:	f7ff fcc1 	bl	8003814 <deq>
 8003e92:	4a14      	ldr	r2, [pc, #80]	; (8003ee4 <Run_PID+0x214>)
 8003e94:	4914      	ldr	r1, [pc, #80]	; (8003ee8 <Run_PID+0x218>)
 8003e96:	f7ff fab7 	bl	8003408 <EXE_CMD>
		Get_EncoderPos(&right);
 8003e9a:	4810      	ldr	r0, [pc, #64]	; (8003edc <Run_PID+0x20c>)
 8003e9c:	f7ff fe76 	bl	8003b8c <Get_EncoderPos>
		Get_EncoderPos(&left);
 8003ea0:	480f      	ldr	r0, [pc, #60]	; (8003ee0 <Run_PID+0x210>)
 8003ea2:	f7ff fe73 	bl	8003b8c <Get_EncoderPos>
}
 8003ea6:	b005      	add	sp, #20
 8003ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003eac:	f3af 8000 	nop.w
 8003eb0:	54442d18 	.word	0x54442d18
 8003eb4:	400921fb 	.word	0x400921fb
 8003eb8:	9999999a 	.word	0x9999999a
 8003ebc:	40463999 	.word	0x40463999
 8003ec0:	d2f1a9fc 	.word	0xd2f1a9fc
 8003ec4:	3f50624d 	.word	0x3f50624d
 8003ec8:	200001f8 	.word	0x200001f8
 8003ecc:	41200000 	.word	0x41200000
 8003ed0:	42700000 	.word	0x42700000
 8003ed4:	443b8000 	.word	0x443b8000
 8003ed8:	404e0000 	.word	0x404e0000
 8003edc:	200006cc 	.word	0x200006cc
 8003ee0:	20000724 	.word	0x20000724
 8003ee4:	200009bc 	.word	0x200009bc
 8003ee8:	2000094c 	.word	0x2000094c

08003eec <Run_MotorPWM>:
void Run_MotorPWM(int16_t pwm){
 8003eec:	b508      	push	{r3, lr}
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, abs(pwm));
 8003eee:	4b1a      	ldr	r3, [pc, #104]	; (8003f58 <Run_MotorPWM+0x6c>)
	if(pwm >= 0){
 8003ef0:	2800      	cmp	r0, #0
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, abs(pwm));
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8003efa:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8003efe:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, abs(pwm));
 8003f00:	4a16      	ldr	r2, [pc, #88]	; (8003f5c <Run_MotorPWM+0x70>)
 8003f02:	6992      	ldr	r2, [r2, #24]
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	6353      	str	r3, [r2, #52]	; 0x34
	if(pwm >= 0){
 8003f08:	db15      	blt.n	8003f36 <Run_MotorPWM+0x4a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2104      	movs	r1, #4
 8003f0e:	4814      	ldr	r0, [pc, #80]	; (8003f60 <Run_MotorPWM+0x74>)
 8003f10:	f7fd fac6 	bl	80014a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8003f14:	2201      	movs	r2, #1
 8003f16:	2108      	movs	r1, #8
 8003f18:	4811      	ldr	r0, [pc, #68]	; (8003f60 <Run_MotorPWM+0x74>)
 8003f1a:	f7fd fac1 	bl	80014a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2101      	movs	r1, #1
 8003f22:	480f      	ldr	r0, [pc, #60]	; (8003f60 <Run_MotorPWM+0x74>)
 8003f24:	f7fd fabc 	bl	80014a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8003f28:	2201      	movs	r2, #1
}
 8003f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8003f2e:	2102      	movs	r1, #2
 8003f30:	480b      	ldr	r0, [pc, #44]	; (8003f60 <Run_MotorPWM+0x74>)
 8003f32:	f7fd bab5 	b.w	80014a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8003f36:	2201      	movs	r2, #1
 8003f38:	2104      	movs	r1, #4
 8003f3a:	4809      	ldr	r0, [pc, #36]	; (8003f60 <Run_MotorPWM+0x74>)
 8003f3c:	f7fd fab0 	bl	80014a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8003f40:	2200      	movs	r2, #0
 8003f42:	2108      	movs	r1, #8
 8003f44:	4806      	ldr	r0, [pc, #24]	; (8003f60 <Run_MotorPWM+0x74>)
 8003f46:	f7fd faab 	bl	80014a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	4804      	ldr	r0, [pc, #16]	; (8003f60 <Run_MotorPWM+0x74>)
 8003f4e:	4611      	mov	r1, r2
 8003f50:	f7fd faa6 	bl	80014a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8003f54:	2200      	movs	r2, #0
 8003f56:	e7e8      	b.n	8003f2a <Run_MotorPWM+0x3e>
 8003f58:	200006cc 	.word	0x200006cc
 8003f5c:	20000724 	.word	0x20000724
 8003f60:	40020800 	.word	0x40020800

08003f64 <Stop_Motors>:
void Stop_Motors(){
 8003f64:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8003f66:	4c17      	ldr	r4, [pc, #92]	; (8003fc4 <Stop_Motors+0x60>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	f7fd fa97 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8003f72:	4620      	mov	r0, r4
 8003f74:	2200      	movs	r2, #0
 8003f76:	2102      	movs	r1, #2
 8003f78:	f7fd fa92 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2104      	movs	r1, #4
 8003f82:	f7fd fa8d 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8003f86:	4620      	mov	r0, r4
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2108      	movs	r1, #8
 8003f8c:	f7fd fa88 	bl	80014a0 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, 0);
 8003f90:	2200      	movs	r2, #0
 8003f92:	480d      	ldr	r0, [pc, #52]	; (8003fc8 <Stop_Motors+0x64>)
	__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, 0);
 8003f94:	4c0d      	ldr	r4, [pc, #52]	; (8003fcc <Stop_Motors+0x68>)
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, 0);
 8003f96:	6983      	ldr	r3, [r0, #24]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, 0);
 8003f9c:	69a3      	ldr	r3, [r4, #24]
 8003f9e:	681b      	ldr	r3, [r3, #0]
	left.dir = false;
 8003fa0:	7122      	strb	r2, [r4, #4]
	__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, 0);
 8003fa2:	635a      	str	r2, [r3, #52]	; 0x34
	right.setRPM = 0.0; //Brake
 8003fa4:	2300      	movs	r3, #0
	right.dir = false;
 8003fa6:	7102      	strb	r2, [r0, #4]
	left.setRPM = 0.0; //Brake
 8003fa8:	6023      	str	r3, [r4, #0]
	left.setDis = 0.0;
 8003faa:	60e3      	str	r3, [r4, #12]
	left.distance_traveled = 0.0;
 8003fac:	60a3      	str	r3, [r4, #8]
	right.setRPM = 0.0; //Brake
 8003fae:	6003      	str	r3, [r0, #0]
	right.setDis = 0.0;
 8003fb0:	60c3      	str	r3, [r0, #12]
	right.distance_traveled = 0.0;
 8003fb2:	6083      	str	r3, [r0, #8]
	Get_EncoderPos(&right);
 8003fb4:	f7ff fdea 	bl	8003b8c <Get_EncoderPos>
	Get_EncoderPos(&left);
 8003fb8:	4620      	mov	r0, r4
}
 8003fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Get_EncoderPos(&left);
 8003fbe:	f7ff bde5 	b.w	8003b8c <Get_EncoderPos>
 8003fc2:	bf00      	nop
 8003fc4:	40020800 	.word	0x40020800
 8003fc8:	200006cc 	.word	0x200006cc
 8003fcc:	20000724 	.word	0x20000724

08003fd0 <map>:
{
 8003fd0:	b510      	push	{r4, lr}
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003fd2:	1a44      	subs	r4, r0, r1
 8003fd4:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8003fd8:	1a52      	subs	r2, r2, r1
 8003fda:	1ac0      	subs	r0, r0, r3
 8003fdc:	4360      	muls	r0, r4
 8003fde:	fb90 f0f2 	sdiv	r0, r0, r2
 8003fe2:	4418      	add	r0, r3
}
 8003fe4:	b280      	uxth	r0, r0
 8003fe6:	bd10      	pop	{r4, pc}

08003fe8 <startPP>:
float lin_dis;
float theta = ROTATIONANGLE;
double d_y;
bool running = false;
void startPP(){
	running = !running;
 8003fe8:	4a02      	ldr	r2, [pc, #8]	; (8003ff4 <startPP+0xc>)
 8003fea:	7813      	ldrb	r3, [r2, #0]
 8003fec:	f083 0301 	eor.w	r3, r3, #1
 8003ff0:	7013      	strb	r3, [r2, #0]
 8003ff2:	4770      	bx	lr
 8003ff4:	20000201 	.word	0x20000201

08003ff8 <RunMotionPlanning>:
	return;
}

void RunMotionPlanning(float End_of_Window_Threshold){
 8003ff8:	b570      	push	{r4, r5, r6, lr}
	//only operate if path planning is running
	if(!running){
 8003ffa:	4b5f      	ldr	r3, [pc, #380]	; (8004178 <RunMotionPlanning+0x180>)
void RunMotionPlanning(float End_of_Window_Threshold){
 8003ffc:	b08e      	sub	sp, #56	; 0x38
	if(!running){
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 808a 	beq.w	800411a <RunMotionPlanning+0x122>
		return;
	}
	//if queue is full
	if (GetCurrentSize()+QUEUESIZE>QUEUESIZE){
 8004006:	f7ff fc59 	bl	80038bc <GetCurrentSize>
 800400a:	2800      	cmp	r0, #0
 800400c:	f300 8085 	bgt.w	800411a <RunMotionPlanning+0x122>
	    return;
	}
	//double d_x = Get_Ultrasonic_Reading(&x);
	//get ultrasonic y distance
	d_y = 10.0*GetUltrasonicY();
 8004010:	f000 fa18 	bl	8004444 <GetUltrasonicY>
 8004014:	4b59      	ldr	r3, [pc, #356]	; (800417c <RunMotionPlanning+0x184>)
 8004016:	2200      	movs	r2, #0
 8004018:	f7fc fa72 	bl	8000500 <__aeabi_dmul>
 800401c:	4c58      	ldr	r4, [pc, #352]	; (8004180 <RunMotionPlanning+0x188>)
 800401e:	e9c4 0100 	strd	r0, r1, [r4]
	char buffer[25];
	uint8_t len=sprintf(buffer,"distance:%i\r\n", (int)(d_y)); //sprintf will return the length of 'buffer'
 8004022:	f7fc fd07 	bl	8000a34 <__aeabi_d2iz>
 8004026:	4957      	ldr	r1, [pc, #348]	; (8004184 <RunMotionPlanning+0x18c>)
 8004028:	4602      	mov	r2, r0
 800402a:	a807      	add	r0, sp, #28
 800402c:	f001 f8b0 	bl	8005190 <siprintf>
	HAL_UART_Transmit(&huart1, (unsigned char*)buffer, len, 1000);
 8004030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004034:	b2c2      	uxtb	r2, r0
 8004036:	a907      	add	r1, sp, #28
 8004038:	4853      	ldr	r0, [pc, #332]	; (8004188 <RunMotionPlanning+0x190>)
 800403a:	f7ff f891 	bl	8003160 <HAL_UART_Transmit>
	//if closer than 38mm to barrier, stop and back up 1 inch
	if (d_y <= BARRIERTHRESHOLD){
 800403e:	a346      	add	r3, pc, #280	; (adr r3, 8004158 <RunMotionPlanning+0x160>)
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004048:	f7fc fcd6 	bl	80009f8 <__aeabi_dcmple>
 800404c:	b120      	cbz	r0, 8004058 <RunMotionPlanning+0x60>
		Stop_Motors();
 800404e:	f7ff ff89 	bl	8003f64 <Stop_Motors>
		enq("l 25.4 -200");
 8004052:	484e      	ldr	r0, [pc, #312]	; (800418c <RunMotionPlanning+0x194>)
 8004054:	f7ff fc08 	bl	8003868 <enq>
		enq("l 991 500");
		BarrierCrossed = true;
	}
	//otherwise
	else {
		lin_dis = d_y - WINDOWBOTTOMMARGIN - UltrasonicYPLACEMENT;
 8004058:	e9d4 0100 	ldrd	r0, r1, [r4]
 800405c:	a340      	add	r3, pc, #256	; (adr r3, 8004160 <RunMotionPlanning+0x168>)
 800405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004062:	f7fc f899 	bl	8000198 <__aeabi_dsub>
 8004066:	a340      	add	r3, pc, #256	; (adr r3, 8004168 <RunMotionPlanning+0x170>)
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	f7fc f894 	bl	8000198 <__aeabi_dsub>
 8004070:	f7fc fd28 	bl	8000ac4 <__aeabi_d2f>
 8004074:	4e46      	ldr	r6, [pc, #280]	; (8004190 <RunMotionPlanning+0x198>)
		char* out;
		out = gcvt(lin_dis,5, temp);
		sprintf(buffer,"l %s 200\n",out);
		enq(buffer);
		//if barrier not crossed traverse one way, switch directions once crossed
		if (!BarrierCrossed){
 8004076:	4d47      	ldr	r5, [pc, #284]	; (8004194 <RunMotionPlanning+0x19c>)
		lin_dis = d_y - WINDOWBOTTOMMARGIN - UltrasonicYPLACEMENT;
 8004078:	6030      	str	r0, [r6, #0]
		out = gcvt(lin_dis,5, temp);
 800407a:	f7fc f9ed 	bl	8000458 <__aeabi_f2d>
 800407e:	ab01      	add	r3, sp, #4
 8004080:	2205      	movs	r2, #5
 8004082:	f001 f835 	bl	80050f0 <gcvt>
		sprintf(buffer,"l %s 200\n",out);
 8004086:	4944      	ldr	r1, [pc, #272]	; (8004198 <RunMotionPlanning+0x1a0>)
 8004088:	4602      	mov	r2, r0
 800408a:	a803      	add	r0, sp, #12
 800408c:	f001 f880 	bl	8005190 <siprintf>
		enq(buffer);
 8004090:	a803      	add	r0, sp, #12
 8004092:	f7ff fbe9 	bl	8003868 <enq>
		if (!BarrierCrossed){
 8004096:	7829      	ldrb	r1, [r5, #0]
 8004098:	4c40      	ldr	r4, [pc, #256]	; (800419c <RunMotionPlanning+0x1a4>)
			memset(buffer, 0, 15);
 800409a:	220f      	movs	r2, #15
		if (!BarrierCrossed){
 800409c:	2900      	cmp	r1, #0
 800409e:	d13e      	bne.n	800411e <RunMotionPlanning+0x126>
			memset(buffer, 0, 15);
 80040a0:	a803      	add	r0, sp, #12
 80040a2:	f001 f86d 	bl	8005180 <memset>
			out = gcvt(theta,5, temp);
 80040a6:	6820      	ldr	r0, [r4, #0]
 80040a8:	f7fc f9d6 	bl	8000458 <__aeabi_f2d>
 80040ac:	2205      	movs	r2, #5
 80040ae:	ab01      	add	r3, sp, #4
 80040b0:	f001 f81e 	bl	80050f0 <gcvt>
			sprintf(buffer,"r 15 %s\n",out);
 80040b4:	4602      	mov	r2, r0
 80040b6:	493a      	ldr	r1, [pc, #232]	; (80041a0 <RunMotionPlanning+0x1a8>)
			enq(buffer);
		}
		else {
			memset(buffer, 0, 15);
			out = gcvt(theta,5, temp);
			sprintf(buffer,"r -15 %s\n",out);
 80040b8:	a803      	add	r0, sp, #12
 80040ba:	f001 f869 	bl	8005190 <siprintf>
			enq(buffer);
 80040be:	a803      	add	r0, sp, #12
 80040c0:	f7ff fbd2 	bl	8003868 <enq>
		}

		lin_dis = WINDOWANGLEDDISTANCE;
 80040c4:	4b37      	ldr	r3, [pc, #220]	; (80041a4 <RunMotionPlanning+0x1ac>)
		memset(buffer, 0, 15);
 80040c6:	220f      	movs	r2, #15
 80040c8:	2100      	movs	r1, #0
 80040ca:	a803      	add	r0, sp, #12
		lin_dis = WINDOWANGLEDDISTANCE;
 80040cc:	6033      	str	r3, [r6, #0]
		memset(buffer, 0, 15);
 80040ce:	f001 f857 	bl	8005180 <memset>
		out = gcvt(lin_dis,5, temp);
 80040d2:	a127      	add	r1, pc, #156	; (adr r1, 8004170 <RunMotionPlanning+0x178>)
 80040d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040d8:	ab01      	add	r3, sp, #4
 80040da:	2205      	movs	r2, #5
 80040dc:	f001 f808 	bl	80050f0 <gcvt>
		sprintf(buffer,"l %s -200\n",out);
 80040e0:	4931      	ldr	r1, [pc, #196]	; (80041a8 <RunMotionPlanning+0x1b0>)
 80040e2:	4602      	mov	r2, r0
 80040e4:	a803      	add	r0, sp, #12
 80040e6:	f001 f853 	bl	8005190 <siprintf>
		enq(buffer);
 80040ea:	a803      	add	r0, sp, #12
 80040ec:	f7ff fbbc 	bl	8003868 <enq>

		if (!BarrierCrossed){
 80040f0:	7829      	ldrb	r1, [r5, #0]
 80040f2:	bb11      	cbnz	r1, 800413a <RunMotionPlanning+0x142>
			memset(buffer, 0, 15);
 80040f4:	220f      	movs	r2, #15
 80040f6:	a803      	add	r0, sp, #12
 80040f8:	f001 f842 	bl	8005180 <memset>
			out = gcvt(theta,5, temp);
 80040fc:	6820      	ldr	r0, [r4, #0]
 80040fe:	f7fc f9ab 	bl	8000458 <__aeabi_f2d>
 8004102:	2205      	movs	r2, #5
 8004104:	ab01      	add	r3, sp, #4
 8004106:	f000 fff3 	bl	80050f0 <gcvt>
			sprintf(buffer,"r -15 %s\n",out);
 800410a:	4602      	mov	r2, r0
 800410c:	4927      	ldr	r1, [pc, #156]	; (80041ac <RunMotionPlanning+0x1b4>)
			enq(buffer);
		}
		else {
			memset(buffer, 0, 100);
			out = gcvt(theta,5, temp);
			sprintf(buffer,"r 15 %s\n",out);
 800410e:	a803      	add	r0, sp, #12
 8004110:	f001 f83e 	bl	8005190 <siprintf>
			enq(buffer);
 8004114:	a803      	add	r0, sp, #12
 8004116:	f7ff fba7 	bl	8003868 <enq>
	}
	//if finished, return
	if ((BarrierCrossed)/*&&(d_x<=WINDOWBOTTOMMARGIN)*/&&(d_y<=WINDOWBOTTOMMARGIN)){
		return;
	}
}
 800411a:	b00e      	add	sp, #56	; 0x38
 800411c:	bd70      	pop	{r4, r5, r6, pc}
			memset(buffer, 0, 15);
 800411e:	2100      	movs	r1, #0
 8004120:	a803      	add	r0, sp, #12
 8004122:	f001 f82d 	bl	8005180 <memset>
			out = gcvt(theta,5, temp);
 8004126:	6820      	ldr	r0, [r4, #0]
 8004128:	f7fc f996 	bl	8000458 <__aeabi_f2d>
 800412c:	2205      	movs	r2, #5
 800412e:	ab01      	add	r3, sp, #4
 8004130:	f000 ffde 	bl	80050f0 <gcvt>
			sprintf(buffer,"r -15 %s\n",out);
 8004134:	491d      	ldr	r1, [pc, #116]	; (80041ac <RunMotionPlanning+0x1b4>)
 8004136:	4602      	mov	r2, r0
 8004138:	e7be      	b.n	80040b8 <RunMotionPlanning+0xc0>
			memset(buffer, 0, 100);
 800413a:	2264      	movs	r2, #100	; 0x64
 800413c:	2100      	movs	r1, #0
 800413e:	a803      	add	r0, sp, #12
 8004140:	f001 f81e 	bl	8005180 <memset>
			out = gcvt(theta,5, temp);
 8004144:	6820      	ldr	r0, [r4, #0]
 8004146:	f7fc f987 	bl	8000458 <__aeabi_f2d>
 800414a:	2205      	movs	r2, #5
 800414c:	ab01      	add	r3, sp, #4
 800414e:	f000 ffcf 	bl	80050f0 <gcvt>
			sprintf(buffer,"r 15 %s\n",out);
 8004152:	4913      	ldr	r1, [pc, #76]	; (80041a0 <RunMotionPlanning+0x1a8>)
 8004154:	4602      	mov	r2, r0
 8004156:	e7da      	b.n	800410e <RunMotionPlanning+0x116>
 8004158:	00000000 	.word	0x00000000
 800415c:	4062c000 	.word	0x4062c000
 8004160:	cccccccd 	.word	0xcccccccd
 8004164:	40480ccc 	.word	0x40480ccc
 8004168:	66666666 	.word	0x66666666
 800416c:	40296666 	.word	0x40296666
 8004170:	a0000000 	.word	0xa0000000
 8004174:	40801199 	.word	0x40801199
 8004178:	20000201 	.word	0x20000201
 800417c:	40240000 	.word	0x40240000
 8004180:	20000790 	.word	0x20000790
 8004184:	08008725 	.word	0x08008725
 8004188:	200009bc 	.word	0x200009bc
 800418c:	08008733 	.word	0x08008733
 8004190:	20000784 	.word	0x20000784
 8004194:	20000200 	.word	0x20000200
 8004198:	0800873f 	.word	0x0800873f
 800419c:	20000000 	.word	0x20000000
 80041a0:	08008749 	.word	0x08008749
 80041a4:	44008ccd 	.word	0x44008ccd
 80041a8:	0800875c 	.word	0x0800875c
 80041ac:	08008752 	.word	0x08008752

080041b0 <Ping_Ultrasonic>:
#include <WW_Sen.h>
struct imu accel;
struct ultrasonic x;
struct ultrasonic y;

void Ping_Ultrasonic(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 80041b0:	b538      	push	{r3, r4, r5, lr}
 80041b2:	4604      	mov	r4, r0
 80041b4:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80041b6:	2201      	movs	r2, #1
 80041b8:	f7fd f972 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80041bc:	2001      	movs	r0, #1
 80041be:	f7fd f819 	bl	80011f4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80041c2:	4620      	mov	r0, r4
 80041c4:	4629      	mov	r1, r5
 80041c6:	2200      	movs	r2, #0
 80041c8:	f7fd f96a 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
	return;
}
 80041cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay(5);
 80041d0:	2005      	movs	r0, #5
 80041d2:	f7fd b80f 	b.w	80011f4 <HAL_Delay>
	...

080041d8 <Get_Ultrasonic_Reading>:
double Get_Ultrasonic_Reading(struct ultrasonic* ult){
 80041d8:	b508      	push	{r3, lr}
	double d;
	d = (((ult->echo_pulse_width_count)*(1/SYSCLK))/(1e-6))*(0.034/2);
 80041da:	6880      	ldr	r0, [r0, #8]
 80041dc:	f7fc fd78 	bl	8000cd0 <__aeabi_ui2f>
 80041e0:	4919      	ldr	r1, [pc, #100]	; (8004248 <Get_Ultrasonic_Reading+0x70>)
 80041e2:	f7fc fdcd 	bl	8000d80 <__aeabi_fmul>
 80041e6:	f7fc f937 	bl	8000458 <__aeabi_f2d>
 80041ea:	a30d      	add	r3, pc, #52	; (adr r3, 8004220 <Get_Ultrasonic_Reading+0x48>)
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f7fc fab0 	bl	8000754 <__aeabi_ddiv>
 80041f4:	a30c      	add	r3, pc, #48	; (adr r3, 8004228 <Get_Ultrasonic_Reading+0x50>)
 80041f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fa:	f7fc f981 	bl	8000500 <__aeabi_dmul>
	d = (0.997889*d)-0.26247 + 1.466;
 80041fe:	a30c      	add	r3, pc, #48	; (adr r3, 8004230 <Get_Ultrasonic_Reading+0x58>)
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	f7fc f97c 	bl	8000500 <__aeabi_dmul>
 8004208:	a30b      	add	r3, pc, #44	; (adr r3, 8004238 <Get_Ultrasonic_Reading+0x60>)
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f7fb ffc3 	bl	8000198 <__aeabi_dsub>
 8004212:	a30b      	add	r3, pc, #44	; (adr r3, 8004240 <Get_Ultrasonic_Reading+0x68>)
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f7fb ffc0 	bl	800019c <__adddf3>
	return d;
}
 800421c:	bd08      	pop	{r3, pc}
 800421e:	bf00      	nop
 8004220:	a0b5ed8d 	.word	0xa0b5ed8d
 8004224:	3eb0c6f7 	.word	0x3eb0c6f7
 8004228:	b020c49c 	.word	0xb020c49c
 800422c:	3f916872 	.word	0x3f916872
 8004230:	e981387a 	.word	0xe981387a
 8004234:	3fefeeb4 	.word	0x3fefeeb4
 8004238:	f88b9778 	.word	0xf88b9778
 800423c:	3fd0cc4e 	.word	0x3fd0cc4e
 8004240:	6a7ef9db 	.word	0x6a7ef9db
 8004244:	3ff774bc 	.word	0x3ff774bc
 8004248:	330637bd 	.word	0x330637bd

0800424c <initUltrasonics>:
void initUltrasonics(TIM_HandleTypeDef* htim){
 800424c:	b570      	push	{r4, r5, r6, lr}
	x.GPIO_PingBank = GPIOA;
	x.GPIO_PingPin = GPIO_PIN_9;
	x.echo_falling_count = 0;
 800424e:	2400      	movs	r4, #0
	x.GPIO_PingPin = GPIO_PIN_9;
 8004250:	f44f 7100 	mov.w	r1, #512	; 0x200
	x.GPIO_PingBank = GPIOA;
 8004254:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <initUltrasonics+0x54>)
 8004256:	4d13      	ldr	r5, [pc, #76]	; (80042a4 <initUltrasonics+0x58>)
	x.echo_pulse_width_count = 0;
	x.echo_rising_count = 0;
	x.edge_detect = false;
	x.IC = htim;
 8004258:	6198      	str	r0, [r3, #24]
	HAL_GPIO_WritePin(x.GPIO_PingBank,x.GPIO_PingPin,GPIO_PIN_RESET);
 800425a:	4622      	mov	r2, r4
void initUltrasonics(TIM_HandleTypeDef* htim){
 800425c:	4606      	mov	r6, r0
	HAL_GPIO_WritePin(x.GPIO_PingBank,x.GPIO_PingPin,GPIO_PIN_RESET);
 800425e:	4628      	mov	r0, r5
	x.GPIO_PingBank = GPIOA;
 8004260:	611d      	str	r5, [r3, #16]
	x.GPIO_PingPin = GPIO_PIN_9;
 8004262:	8299      	strh	r1, [r3, #20]
	x.echo_falling_count = 0;
 8004264:	605c      	str	r4, [r3, #4]
	x.echo_pulse_width_count = 0;
 8004266:	609c      	str	r4, [r3, #8]
	x.echo_rising_count = 0;
 8004268:	601c      	str	r4, [r3, #0]
	x.edge_detect = false;
 800426a:	731c      	strb	r4, [r3, #12]
	HAL_GPIO_WritePin(x.GPIO_PingBank,x.GPIO_PingPin,GPIO_PIN_RESET);
 800426c:	f7fd f918 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8004270:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004274:	f7fc ffbe 	bl	80011f4 <HAL_Delay>

	y.GPIO_PingBank = GPIOA;
	y.GPIO_PingPin = GPIO_PIN_8;
 8004278:	f44f 7180 	mov.w	r1, #256	; 0x100
	y.GPIO_PingBank = GPIOA;
 800427c:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <initUltrasonics+0x5c>)
	y.echo_falling_count = 0;
	y.echo_pulse_width_count = 0;
	y.echo_rising_count = 0;
	y.edge_detect = false;
	y.IC = htim;
	HAL_GPIO_WritePin(y.GPIO_PingBank, y.GPIO_PingPin, GPIO_PIN_RESET);
 800427e:	4628      	mov	r0, r5
 8004280:	4622      	mov	r2, r4
	y.GPIO_PingBank = GPIOA;
 8004282:	611d      	str	r5, [r3, #16]
	y.echo_falling_count = 0;
 8004284:	605c      	str	r4, [r3, #4]
	y.echo_pulse_width_count = 0;
 8004286:	609c      	str	r4, [r3, #8]
	y.echo_rising_count = 0;
 8004288:	601c      	str	r4, [r3, #0]
	y.edge_detect = false;
 800428a:	731c      	strb	r4, [r3, #12]
	y.IC = htim;
 800428c:	619e      	str	r6, [r3, #24]
	y.GPIO_PingPin = GPIO_PIN_8;
 800428e:	8299      	strh	r1, [r3, #20]
	HAL_GPIO_WritePin(y.GPIO_PingBank, y.GPIO_PingPin, GPIO_PIN_RESET);
 8004290:	f7fd f906 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
	return;
}
 8004294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(500);
 8004298:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800429c:	f7fc bfaa 	b.w	80011f4 <HAL_Delay>
 80042a0:	200007a0 	.word	0x200007a0
 80042a4:	40020000 	.word	0x40020000
 80042a8:	200007c4 	.word	0x200007c4

080042ac <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
	if (htim->Instance == TIM5)
 80042ac:	6802      	ldr	r2, [r0, #0]
 80042ae:	4b18      	ldr	r3, [pc, #96]	; (8004310 <HAL_TIM_IC_CaptureCallback+0x64>)
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80042b0:	b510      	push	{r4, lr}
	if (htim->Instance == TIM5)
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d11b      	bne.n	80042ee <HAL_TIM_IC_CaptureCallback+0x42>
	{
		if ((htim->Channel) == HAL_TIM_ACTIVE_CHANNEL_3){
 80042b6:	7d03      	ldrb	r3, [r0, #20]
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d119      	bne.n	80042f0 <HAL_TIM_IC_CaptureCallback+0x44>
			y.edge_detect = !(y.edge_detect);
 80042bc:	4a15      	ldr	r2, [pc, #84]	; (8004314 <HAL_TIM_IC_CaptureCallback+0x68>)
 80042be:	7b11      	ldrb	r1, [r2, #12]
			//__HAL_TIM_SET_CAPTUREPOLARITY()
			if (y.edge_detect){
				y.echo_rising_count = __HAL_TIM_GET_COMPARE(y.IC, TIM_CHANNEL_3);    //read TIM2 channel 1 capture value
 80042c0:	6993      	ldr	r3, [r2, #24]
			y.edge_detect = !(y.edge_detect);
 80042c2:	f081 0101 	eor.w	r1, r1, #1
 80042c6:	7311      	strb	r1, [r2, #12]
			if (y.edge_detect){
 80042c8:	b119      	cbz	r1, 80042d2 <HAL_TIM_IC_CaptureCallback+0x26>
				y.echo_rising_count = __HAL_TIM_GET_COMPARE(y.IC, TIM_CHANNEL_3);    //read TIM2 channel 1 capture value
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			}
		} else if((htim->Channel) == HAL_TIM_ACTIVE_CHANNEL_4){
			x.edge_detect = !(x.edge_detect);
			//__HAL_TIM_SET_CAPTUREPOLARITY()
			if (x.edge_detect){
				x.echo_rising_count = __HAL_TIM_GET_COMPARE(x.IC, TIM_CHANNEL_4);    //read TIM2 channel 1 capture value
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	bd10      	pop	{r4, pc}
				y.echo_falling_count = __HAL_TIM_GET_COMPARE(y.IC, TIM_CHANNEL_3);
 80042d2:	681c      	ldr	r4, [r3, #0]
 80042d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				//__HAL_TIM_SET_CAPTUREPOLARITY(x.IC,TIM_CHANNEL_3,TIM_INPUTCHANNELPOLARITY_FALLING);
			}
			else {
				x.echo_falling_count = __HAL_TIM_GET_COMPARE(x.IC, TIM_CHANNEL_4);
				if(x.echo_falling_count > x.echo_rising_count){
 80042d6:	6810      	ldr	r0, [r2, #0]
				x.echo_falling_count = __HAL_TIM_GET_COMPARE(x.IC, TIM_CHANNEL_4);
 80042d8:	6053      	str	r3, [r2, #4]
				if(x.echo_falling_count > x.echo_rising_count){
 80042da:	4283      	cmp	r3, r0
					__HAL_TIM_SetCounter(x.IC, 0);    //reset counter after input capture interrupt occurs
					x.echo_pulse_width_count = x.echo_falling_count - x.echo_rising_count;
				}
				else {
					x.echo_falling_count += 1048575;
 80042dc:	bf9e      	ittt	ls
 80042de:	f503 237f 	addls.w	r3, r3, #1044480	; 0xff000
 80042e2:	f603 73ff 	addwls	r3, r3, #4095	; 0xfff
 80042e6:	6053      	strls	r3, [r2, #4]
					__HAL_TIM_SetCounter(x.IC, 0);
					x.echo_pulse_width_count = x.echo_falling_count - x.echo_rising_count;
 80042e8:	1a1b      	subs	r3, r3, r0
					__HAL_TIM_SetCounter(x.IC, 0);
 80042ea:	6261      	str	r1, [r4, #36]	; 0x24
					x.echo_pulse_width_count = x.echo_falling_count - x.echo_rising_count;
 80042ec:	6093      	str	r3, [r2, #8]
 80042ee:	bd10      	pop	{r4, pc}
		} else if((htim->Channel) == HAL_TIM_ACTIVE_CHANNEL_4){
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d1fc      	bne.n	80042ee <HAL_TIM_IC_CaptureCallback+0x42>
			x.edge_detect = !(x.edge_detect);
 80042f4:	4a08      	ldr	r2, [pc, #32]	; (8004318 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80042f6:	7b11      	ldrb	r1, [r2, #12]
				x.echo_rising_count = __HAL_TIM_GET_COMPARE(x.IC, TIM_CHANNEL_4);    //read TIM2 channel 1 capture value
 80042f8:	6993      	ldr	r3, [r2, #24]
			x.edge_detect = !(x.edge_detect);
 80042fa:	f081 0101 	eor.w	r1, r1, #1
 80042fe:	7311      	strb	r1, [r2, #12]
			if (x.edge_detect){
 8004300:	b111      	cbz	r1, 8004308 <HAL_TIM_IC_CaptureCallback+0x5c>
				x.echo_rising_count = __HAL_TIM_GET_COMPARE(x.IC, TIM_CHANNEL_4);    //read TIM2 channel 1 capture value
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	e7e2      	b.n	80042ce <HAL_TIM_IC_CaptureCallback+0x22>
				x.echo_falling_count = __HAL_TIM_GET_COMPARE(x.IC, TIM_CHANNEL_4);
 8004308:	681c      	ldr	r4, [r3, #0]
 800430a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800430c:	e7e3      	b.n	80042d6 <HAL_TIM_IC_CaptureCallback+0x2a>
 800430e:	bf00      	nop
 8004310:	40000c00 	.word	0x40000c00
 8004314:	200007c4 	.word	0x200007c4
 8004318:	200007a0 	.word	0x200007a0

0800431c <initIMU>:
		}
	}
}
void initIMU(I2C_HandleTypeDef* hi2c){
	accel.I2C = hi2c;
	accel.address = DEV_ADD;
 800431c:	2250      	movs	r2, #80	; 0x50
	accel.I2C = hi2c;
 800431e:	4b02      	ldr	r3, [pc, #8]	; (8004328 <initIMU+0xc>)
 8004320:	6018      	str	r0, [r3, #0]
	accel.address = DEV_ADD;
 8004322:	711a      	strb	r2, [r3, #4]
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	200007bc 	.word	0x200007bc

0800432c <read8>:
	return;
}
uint8_t read8(uint8_t regid){
 800432c:	b530      	push	{r4, r5, lr}
	uint8_t result = 0;
 800432e:	2300      	movs	r3, #0
	HAL_I2C_Master_Transmit(accel.I2C, DEV_ADD, &regid, 1, 100);
 8004330:	2564      	movs	r5, #100	; 0x64
 8004332:	4c0d      	ldr	r4, [pc, #52]	; (8004368 <read8+0x3c>)
uint8_t read8(uint8_t regid){
 8004334:	b087      	sub	sp, #28
 8004336:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t result = 0;
 800433a:	f88d 3017 	strb.w	r3, [sp, #23]
	HAL_I2C_Master_Transmit(accel.I2C, DEV_ADD, &regid, 1, 100);
 800433e:	f10d 020f 	add.w	r2, sp, #15
 8004342:	9500      	str	r5, [sp, #0]
 8004344:	2301      	movs	r3, #1
 8004346:	2150      	movs	r1, #80	; 0x50
 8004348:	6820      	ldr	r0, [r4, #0]
 800434a:	f7fd fa39 	bl	80017c0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(accel.I2C, DEV_ADD, &result, 1, 100);
 800434e:	9500      	str	r5, [sp, #0]
 8004350:	2301      	movs	r3, #1
 8004352:	f10d 0217 	add.w	r2, sp, #23
 8004356:	2150      	movs	r1, #80	; 0x50
 8004358:	6820      	ldr	r0, [r4, #0]
 800435a:	f7fd fb07 	bl	800196c <HAL_I2C_Master_Receive>
	return result;
}
 800435e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8004362:	b007      	add	sp, #28
 8004364:	bd30      	pop	{r4, r5, pc}
 8004366:	bf00      	nop
 8004368:	200007bc 	.word	0x200007bc

0800436c <readLen>:
void readLen(uint8_t regid, uint8_t* buffer, uint8_t len){
 800436c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Master_Transmit(accel.I2C, DEV_ADD, &regid, 1, 100);
 800436e:	2564      	movs	r5, #100	; 0x64
void readLen(uint8_t regid, uint8_t* buffer, uint8_t len){
 8004370:	460e      	mov	r6, r1
	HAL_I2C_Master_Transmit(accel.I2C, DEV_ADD, &regid, 1, 100);
 8004372:	4c09      	ldr	r4, [pc, #36]	; (8004398 <readLen+0x2c>)
void readLen(uint8_t regid, uint8_t* buffer, uint8_t len){
 8004374:	aa04      	add	r2, sp, #16
 8004376:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Master_Transmit(accel.I2C, DEV_ADD, &regid, 1, 100);
 800437a:	2301      	movs	r3, #1
 800437c:	9500      	str	r5, [sp, #0]
 800437e:	2150      	movs	r1, #80	; 0x50
 8004380:	6820      	ldr	r0, [r4, #0]
 8004382:	f7fd fa1d 	bl	80017c0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(accel.I2C, DEV_ADD, buffer, 1, 100);
 8004386:	9500      	str	r5, [sp, #0]
 8004388:	2301      	movs	r3, #1
 800438a:	4632      	mov	r2, r6
 800438c:	2150      	movs	r1, #80	; 0x50
 800438e:	6820      	ldr	r0, [r4, #0]
 8004390:	f7fd faec 	bl	800196c <HAL_I2C_Master_Receive>
	return;
}
 8004394:	b004      	add	sp, #16
 8004396:	bd70      	pop	{r4, r5, r6, pc}
 8004398:	200007bc 	.word	0x200007bc

0800439c <write8>:
void write8(uint8_t regid, uint8_t val){
 800439c:	b530      	push	{r4, r5, lr}
	HAL_I2C_Master_Transmit(accel.I2C, DEV_ADD, &regid, 1, 100);
 800439e:	2564      	movs	r5, #100	; 0x64
 80043a0:	4c0b      	ldr	r4, [pc, #44]	; (80043d0 <write8+0x34>)
void write8(uint8_t regid, uint8_t val){
 80043a2:	b085      	sub	sp, #20
 80043a4:	f88d 000f 	strb.w	r0, [sp, #15]
 80043a8:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit(accel.I2C, DEV_ADD, &regid, 1, 100);
 80043ac:	f10d 020f 	add.w	r2, sp, #15
 80043b0:	9500      	str	r5, [sp, #0]
 80043b2:	2301      	movs	r3, #1
 80043b4:	2150      	movs	r1, #80	; 0x50
 80043b6:	6820      	ldr	r0, [r4, #0]
 80043b8:	f7fd fa02 	bl	80017c0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(accel.I2C, DEV_ADD, &val, 1, 100);
 80043bc:	9500      	str	r5, [sp, #0]
 80043be:	2301      	movs	r3, #1
 80043c0:	f10d 020e 	add.w	r2, sp, #14
 80043c4:	2150      	movs	r1, #80	; 0x50
 80043c6:	6820      	ldr	r0, [r4, #0]
 80043c8:	f7fd f9fa 	bl	80017c0 <HAL_I2C_Master_Transmit>
	return;
}
 80043cc:	b005      	add	sp, #20
 80043ce:	bd30      	pop	{r4, r5, pc}
 80043d0:	200007bc 	.word	0x200007bc

080043d4 <checkIMUID>:
uint8_t checkIMUID(){
	return read8(REG_CHIP_ID);
 80043d4:	2000      	movs	r0, #0
 80043d6:	f7ff bfa9 	b.w	800432c <read8>

080043da <getEuler>:
}
void getEuler(float* result){
 80043da:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t recieved[6];
	int16_t buffer[3];
	readLen(BNO055_EULER_H_LSB_ADDR, recieved, 6);
 80043dc:	2206      	movs	r2, #6
void getEuler(float* result){
 80043de:	4606      	mov	r6, r0
	readLen(BNO055_EULER_H_LSB_ADDR, recieved, 6);
 80043e0:	4669      	mov	r1, sp
 80043e2:	201a      	movs	r0, #26
 80043e4:	f7ff ffc2 	bl	800436c <readLen>
	buffer[0] = ((int16_t)recieved[0]) | (((int16_t)recieved[1]) << 8);
	buffer[1] = ((int16_t)recieved[2]) | (((int16_t)recieved[3]) << 8);
 80043e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80043ec:	f89d 5002 	ldrb.w	r5, [sp, #2]
	buffer[2] = ((int16_t)recieved[4]) | (((int16_t)recieved[5]) << 8);
 80043f0:	f89d 4004 	ldrb.w	r4, [sp, #4]
	buffer[1] = ((int16_t)recieved[2]) | (((int16_t)recieved[3]) << 8);
 80043f4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	buffer[2] = ((int16_t)recieved[4]) | (((int16_t)recieved[5]) << 8);
 80043f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
	buffer[0] = ((int16_t)recieved[0]) | (((int16_t)recieved[1]) << 8);
 80043fc:	f89d 0000 	ldrb.w	r0, [sp]
	buffer[2] = ((int16_t)recieved[4]) | (((int16_t)recieved[5]) << 8);
 8004400:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
	buffer[0] = ((int16_t)recieved[0]) | (((int16_t)recieved[1]) << 8);
 8004404:	f89d 3001 	ldrb.w	r3, [sp, #1]
	buffer[1] = ((int16_t)recieved[2]) | (((int16_t)recieved[3]) << 8);
 8004408:	b22d      	sxth	r5, r5
	buffer[0] = ((int16_t)recieved[0]) | (((int16_t)recieved[1]) << 8);
 800440a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	result[0] = (float)(buffer[0])/16.0;
 800440e:	b200      	sxth	r0, r0
 8004410:	f7fc fc62 	bl	8000cd8 <__aeabi_i2f>
 8004414:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8004418:	f7fc fcb2 	bl	8000d80 <__aeabi_fmul>
 800441c:	6030      	str	r0, [r6, #0]
	result[1] = (float)(buffer[1])/16.0;
 800441e:	4628      	mov	r0, r5
 8004420:	f7fc fc5a 	bl	8000cd8 <__aeabi_i2f>
 8004424:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8004428:	f7fc fcaa 	bl	8000d80 <__aeabi_fmul>
	buffer[2] = ((int16_t)recieved[4]) | (((int16_t)recieved[5]) << 8);
 800442c:	b224      	sxth	r4, r4
	result[1] = (float)(buffer[1])/16.0;
 800442e:	6070      	str	r0, [r6, #4]
	result[2] = (float)(buffer[2])/16.0;
 8004430:	4620      	mov	r0, r4
 8004432:	f7fc fc51 	bl	8000cd8 <__aeabi_i2f>
 8004436:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 800443a:	f7fc fca1 	bl	8000d80 <__aeabi_fmul>
 800443e:	60b0      	str	r0, [r6, #8]
	return;
}
 8004440:	b002      	add	sp, #8
 8004442:	bd70      	pop	{r4, r5, r6, pc}

08004444 <GetUltrasonicY>:
double GetUltrasonicY(){
 8004444:	b510      	push	{r4, lr}
	Ping_Ultrasonic(y.GPIO_PingBank,y.GPIO_PingPin);
 8004446:	4c05      	ldr	r4, [pc, #20]	; (800445c <GetUltrasonicY+0x18>)
 8004448:	6920      	ldr	r0, [r4, #16]
 800444a:	8aa1      	ldrh	r1, [r4, #20]
 800444c:	f7ff feb0 	bl	80041b0 <Ping_Ultrasonic>
	return Get_Ultrasonic_Reading(&y);
 8004450:	4620      	mov	r0, r4
}
 8004452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return Get_Ultrasonic_Reading(&y);
 8004456:	f7ff bebf 	b.w	80041d8 <Get_Ultrasonic_Reading>
 800445a:	bf00      	nop
 800445c:	200007c4 	.word	0x200007c4

08004460 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004460:	4b48      	ldr	r3, [pc, #288]	; (8004584 <MX_GPIO_Init+0x124>)
{
 8004462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004466:	69da      	ldr	r2, [r3, #28]
{
 8004468:	b088      	sub	sp, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800446a:	f042 0204 	orr.w	r2, r2, #4
 800446e:	61da      	str	r2, [r3, #28]
 8004470:	69da      	ldr	r2, [r3, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8004472:	4f45      	ldr	r7, [pc, #276]	; (8004588 <MX_GPIO_Init+0x128>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004474:	f002 0204 	and.w	r2, r2, #4
 8004478:	9200      	str	r2, [sp, #0]
 800447a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800447c:	69da      	ldr	r2, [r3, #28]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800447e:	4d43      	ldr	r5, [pc, #268]	; (800458c <MX_GPIO_Init+0x12c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004480:	f042 0201 	orr.w	r2, r2, #1
 8004484:	61da      	str	r2, [r3, #28]
 8004486:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8004488:	4638      	mov	r0, r7
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800448a:	f002 0201 	and.w	r2, r2, #1
 800448e:	9201      	str	r2, [sp, #4]
 8004490:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004492:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8004494:	210f      	movs	r1, #15
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004496:	f042 0202 	orr.w	r2, r2, #2
 800449a:	61da      	str	r2, [r3, #28]
 800449c:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800449e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	9302      	str	r3, [sp, #8]
 80044a6:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80044a8:	f7fc fffa 	bl	80014a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80044ac:	2200      	movs	r2, #0
 80044ae:	4628      	mov	r0, r5
 80044b0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80044b4:	f7fc fff4 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b8:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044ba:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80044be:	230f      	movs	r3, #15
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044c0:	a903      	add	r1, sp, #12
 80044c2:	4638      	mov	r0, r7

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IDD_Measurement_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044c4:	2603      	movs	r6, #3
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80044c6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044c8:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044cc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ce:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044d0:	f7fc ff18 	bl	8001304 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 80044d4:	2310      	movs	r3, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 80044d6:	a903      	add	r1, sp, #12
 80044d8:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 80044da:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044dc:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044de:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 80044e0:	f7fc ff10 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GRP2_Sampling_Pin|GRP2_Ground_Pin;
 80044e4:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e6:	a903      	add	r1, sp, #12
 80044e8:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GRP2_Sampling_Pin|GRP2_Ground_Pin;
 80044ea:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044ec:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ee:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f0:	f7fc ff08 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GRP9_Sampling_Pin|GRP9_Ground_Pin;
 80044f4:	2330      	movs	r3, #48	; 0x30

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GRP3_Sampling_Pin|GRP3_Ground_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044f6:	f8df a098 	ldr.w	sl, [pc, #152]	; 8004590 <MX_GPIO_Init+0x130>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044fa:	a903      	add	r1, sp, #12
 80044fc:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GRP9_Sampling_Pin|GRP9_Ground_Pin;
 80044fe:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004500:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004502:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004504:	f7fc fefe 	bl	8001304 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004508:	a903      	add	r1, sp, #12
 800450a:	4650      	mov	r0, sl

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SEG8_Pin|SEG11_Pin|SEG5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450c:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pin = GRP3_Sampling_Pin|GRP3_Ground_Pin;
 8004510:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004512:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004514:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8004516:	260b      	movs	r6, #11
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004518:	f7fc fef4 	bl	8001304 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SEG8_Pin|SEG11_Pin|SEG5_Pin;
 800451c:	f249 0320 	movw	r3, #36896	; 0x9020
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004520:	a903      	add	r1, sp, #12
 8004522:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = SEG8_Pin|SEG11_Pin|SEG5_Pin;
 8004524:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004526:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800452c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800452e:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004530:	f7fc fee8 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SEG20_Pin|SEG21_Pin|SEG22_Pin|SEG23_Pin;
 8004534:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004538:	a903      	add	r1, sp, #12
 800453a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = SEG20_Pin|SEG21_Pin|SEG22_Pin|SEG23_Pin;
 800453c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453e:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004542:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004544:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8004546:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004548:	f7fc fedc 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800454c:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004550:	a903      	add	r1, sp, #12
 8004552:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004554:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004556:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800455c:	f8cd 9018 	str.w	r9, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004560:	f7fc fed0 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COM2_Pin;
 8004564:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
  HAL_GPIO_Init(COM2_GPIO_Port, &GPIO_InitStruct);
 8004568:	a903      	add	r1, sp, #12
 800456a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = COM2_Pin;
 800456c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456e:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004572:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004574:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8004576:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(COM2_GPIO_Port, &GPIO_InitStruct);
 8004578:	f7fc fec4 	bl	8001304 <HAL_GPIO_Init>

}
 800457c:	b008      	add	sp, #32
 800457e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004582:	bf00      	nop
 8004584:	40023800 	.word	0x40023800
 8004588:	40020800 	.word	0x40020800
 800458c:	40020000 	.word	0x40020000
 8004590:	40020400 	.word	0x40020400

08004594 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004594:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8004596:	480d      	ldr	r0, [pc, #52]	; (80045cc <MX_I2C2_Init+0x38>)
  hi2c2.Init.ClockSpeed = 100000;
 8004598:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <MX_I2C2_Init+0x3c>)
 800459a:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80045d8 <MX_I2C2_Init+0x44>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800459e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 100000;
 80045a2:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80045a6:	2300      	movs	r3, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045a8:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80045aa:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80045ac:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80045ae:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80045b0:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80045b2:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80045b4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80045b6:	f7fd f875 	bl	80016a4 <HAL_I2C_Init>
 80045ba:	b128      	cbz	r0, 80045c8 <MX_I2C2_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 80045bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80045c0:	2142      	movs	r1, #66	; 0x42
 80045c2:	4804      	ldr	r0, [pc, #16]	; (80045d4 <MX_I2C2_Init+0x40>)
 80045c4:	f000 b8fc 	b.w	80047c0 <_Error_Handler>
 80045c8:	bd08      	pop	{r3, pc}
 80045ca:	bf00      	nop
 80045cc:	200007e0 	.word	0x200007e0
 80045d0:	40005800 	.word	0x40005800
 80045d4:	08008767 	.word	0x08008767
 80045d8:	000186a0 	.word	0x000186a0

080045dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80045dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C2)
 80045de:	6802      	ldr	r2, [r0, #0]
 80045e0:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <HAL_I2C_MspInit+0x44>)
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d119      	bne.n	800461a <HAL_I2C_MspInit+0x3e>
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80045e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80045ea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045ec:	2312      	movs	r3, #18
 80045ee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045f0:	2301      	movs	r3, #1
 80045f2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f4:	2303      	movs	r3, #3
 80045f6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80045f8:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045fa:	480a      	ldr	r0, [pc, #40]	; (8004624 <HAL_I2C_MspInit+0x48>)
 80045fc:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004600:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004602:	f7fc fe7f 	bl	8001304 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004606:	4b08      	ldr	r3, [pc, #32]	; (8004628 <HAL_I2C_MspInit+0x4c>)
 8004608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800460a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800460e:	625a      	str	r2, [r3, #36]	; 0x24
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800461a:	b007      	add	sp, #28
 800461c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004620:	40005800 	.word	0x40005800
 8004624:	40020400 	.word	0x40020400
 8004628:	40023800 	.word	0x40023800

0800462c <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800462c:	4a1e      	ldr	r2, [pc, #120]	; (80046a8 <SystemClock_Config+0x7c>)
{
 800462e:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004630:	6813      	ldr	r3, [r2, #0]
{
 8004632:	b092      	sub	sp, #72	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004634:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8004638:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800463c:	6013      	str	r3, [r2, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800463e:	2302      	movs	r3, #2
 8004640:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004642:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004644:	2300      	movs	r3, #0
 8004646:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004648:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800464c:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800464e:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004650:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8004652:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004656:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004658:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800465a:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800465c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800465e:	f7fd fb3d 	bl	8001cdc <HAL_RCC_OscConfig>
 8004662:	b100      	cbz	r0, 8004666 <SystemClock_Config+0x3a>
 8004664:	e7fe      	b.n	8004664 <SystemClock_Config+0x38>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004666:	220f      	movs	r2, #15
 8004668:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800466a:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800466c:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800466e:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004670:	4621      	mov	r1, r4
 8004672:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004674:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004678:	f7fd feca 	bl	8002410 <HAL_RCC_ClockConfig>
 800467c:	4604      	mov	r4, r0
 800467e:	b100      	cbz	r0, 8004682 <SystemClock_Config+0x56>
 8004680:	e7fe      	b.n	8004680 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004682:	f7fd ffa3 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 8004686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800468a:	fbb0 f0f3 	udiv	r0, r0, r3
 800468e:	f7fc fe11 	bl	80012b4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004692:	2004      	movs	r0, #4
 8004694:	f7fc fe24 	bl	80012e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004698:	4622      	mov	r2, r4
 800469a:	4621      	mov	r1, r4
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	f7fc fdc8 	bl	8001234 <HAL_NVIC_SetPriority>
}
 80046a4:	b012      	add	sp, #72	; 0x48
 80046a6:	bd10      	pop	{r4, pc}
 80046a8:	40007000 	.word	0x40007000

080046ac <setup>:

/* USER CODE BEGIN 4 */
void setup(){
 80046ac:	b5f0      	push	{r4, r5, r6, r7, lr}

	//start PWM clocks
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80046ae:	4c23      	ldr	r4, [pc, #140]	; (800473c <setup+0x90>)
void setup(){
 80046b0:	b089      	sub	sp, #36	; 0x24
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80046b2:	4f23      	ldr	r7, [pc, #140]	; (8004740 <setup+0x94>)
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80046b4:	2100      	movs	r1, #0
 80046b6:	4620      	mov	r0, r4
 80046b8:	f7fe f8c5 	bl	8002846 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80046bc:	4e21      	ldr	r6, [pc, #132]	; (8004744 <setup+0x98>)
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 80046be:	2104      	movs	r1, #4
 80046c0:	4620      	mov	r0, r4
 80046c2:	f7fe f8c0 	bl	8002846 <HAL_TIM_PWM_Start>

	//init motor data structures
	initMot(&htim3, &htim2, &htim11, &htim10);
 80046c6:	4d20      	ldr	r5, [pc, #128]	; (8004748 <setup+0x9c>)
 80046c8:	4c20      	ldr	r4, [pc, #128]	; (800474c <setup+0xa0>)
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80046ca:	2100      	movs	r1, #0
 80046cc:	4638      	mov	r0, r7
 80046ce:	f7fe f8ba 	bl	8002846 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80046d2:	2100      	movs	r1, #0
 80046d4:	4630      	mov	r0, r6
 80046d6:	f7fe f8b6 	bl	8002846 <HAL_TIM_PWM_Start>
	initMot(&htim3, &htim2, &htim11, &htim10);
 80046da:	463b      	mov	r3, r7
 80046dc:	4632      	mov	r2, r6
 80046de:	4629      	mov	r1, r5
 80046e0:	4620      	mov	r0, r4
 80046e2:	f7ff f8f1 	bl	80038c8 <initMot>

	//init command queue data structure
	initCOM();
 80046e6:	f7ff f86b 	bl	80037c0 <initCOM>

	//init IMU data Structure
	initIMU(&hi2c2);
 80046ea:	4819      	ldr	r0, [pc, #100]	; (8004750 <setup+0xa4>)
 80046ec:	f7ff fe16 	bl	800431c <initIMU>

	//start encoder tracking
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80046f0:	2118      	movs	r1, #24
 80046f2:	4628      	mov	r0, r5
 80046f4:	f7fe f91e 	bl	8002934 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80046f8:	4620      	mov	r0, r4

	//Init Ultrasonic Data Structures and interrupts
	initUltrasonics(&htim5);
 80046fa:	4c16      	ldr	r4, [pc, #88]	; (8004754 <setup+0xa8>)
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80046fc:	2118      	movs	r1, #24
 80046fe:	f7fe f919 	bl	8002934 <HAL_TIM_Encoder_Start>
	initUltrasonics(&htim5);
 8004702:	4620      	mov	r0, r4
 8004704:	f7ff fda2 	bl	800424c <initUltrasonics>
	HAL_TIM_IC_Start_IT(&htim5,TIM_CHANNEL_3);
 8004708:	2108      	movs	r1, #8
 800470a:	4620      	mov	r0, r4
 800470c:	f7fe f89d 	bl	800284a <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim5,TIM_CHANNEL_4);
 8004710:	4620      	mov	r0, r4

	//start UART receive interrupt
	UART_ReadStart(&huart1);
 8004712:	4c11      	ldr	r4, [pc, #68]	; (8004758 <setup+0xac>)
	HAL_TIM_IC_Start_IT(&htim5,TIM_CHANNEL_4);
 8004714:	210c      	movs	r1, #12
 8004716:	f7fe f898 	bl	800284a <HAL_TIM_IC_Start_IT>
	UART_ReadStart(&huart1);
 800471a:	4620      	mov	r0, r4
 800471c:	f7ff f804 	bl	8003728 <UART_ReadStart>

	//start code initiation
	char buffer[25];
	uint8_t len=sprintf(buffer,"Init\r\n"); //sprintf will return the length of 'buffer'
 8004720:	490e      	ldr	r1, [pc, #56]	; (800475c <setup+0xb0>)
 8004722:	a801      	add	r0, sp, #4
 8004724:	f000 fd58 	bl	80051d8 <strcpy>
	HAL_UART_Transmit(&huart1, (unsigned char*)buffer, len, 1000);
 8004728:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800472c:	2206      	movs	r2, #6
 800472e:	a901      	add	r1, sp, #4
 8004730:	4620      	mov	r0, r4
 8004732:	f7fe fd15 	bl	8003160 <HAL_UART_Transmit>
	return;
}
 8004736:	b009      	add	sp, #36	; 0x24
 8004738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800473a:	bf00      	nop
 800473c:	2000094c 	.word	0x2000094c
 8004740:	20000834 	.word	0x20000834
 8004744:	200008dc 	.word	0x200008dc
 8004748:	20000984 	.word	0x20000984
 800474c:	200008a4 	.word	0x200008a4
 8004750:	200007e0 	.word	0x200007e0
 8004754:	2000086c 	.word	0x2000086c
 8004758:	200009bc 	.word	0x200009bc
 800475c:	08008774 	.word	0x08008774

08004760 <main>:
{
 8004760:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 8004762:	f7fc fd2d 	bl	80011c0 <HAL_Init>
  SystemClock_Config();
 8004766:	f7ff ff61 	bl	800462c <SystemClock_Config>
  MX_GPIO_Init();
 800476a:	f7ff fe79 	bl	8004460 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800476e:	f000 fc45 	bl	8004ffc <MX_USART1_UART_Init>
  MX_TIM9_Init();
 8004772:	f000 fb59 	bl	8004e28 <MX_TIM9_Init>
  MX_TIM10_Init();
 8004776:	f000 fbb1 	bl	8004edc <MX_TIM10_Init>
  MX_TIM11_Init();
 800477a:	f000 fbf7 	bl	8004f6c <MX_TIM11_Init>
  MX_TIM3_Init();
 800477e:	f000 f9c3 	bl	8004b08 <MX_TIM3_Init>
  MX_TIM2_Init();
 8004782:	f000 f98f 	bl	8004aa4 <MX_TIM2_Init>
  MX_TIM6_Init();
 8004786:	f000 fa4b 	bl	8004c20 <MX_TIM6_Init>
  MX_TIM5_Init();
 800478a:	f000 f9ef 	bl	8004b6c <MX_TIM5_Init>
  MX_I2C2_Init();
 800478e:	f7ff ff01 	bl	8004594 <MX_I2C2_Init>
  setup();
 8004792:	f7ff ff8b 	bl	80046ac <setup>
	  Parse_CMD(&htim9, &huart1);
 8004796:	4c07      	ldr	r4, [pc, #28]	; (80047b4 <main+0x54>)
 8004798:	4e07      	ldr	r6, [pc, #28]	; (80047b8 <main+0x58>)
	  RunMotionPlanning(End_of_Window_Threshold);
 800479a:	4d08      	ldr	r5, [pc, #32]	; (80047bc <main+0x5c>)
	  Parse_CMD(&htim9, &huart1);
 800479c:	4621      	mov	r1, r4
 800479e:	4630      	mov	r0, r6
 80047a0:	f7fe ffc8 	bl	8003734 <Parse_CMD>
	  RunMotionPlanning(End_of_Window_Threshold);
 80047a4:	4628      	mov	r0, r5
 80047a6:	f7ff fc27 	bl	8003ff8 <RunMotionPlanning>
	  Run_PID(&huart1);
 80047aa:	4620      	mov	r0, r4
 80047ac:	f7ff fa90 	bl	8003cd0 <Run_PID>
 80047b0:	e7f4      	b.n	800479c <main+0x3c>
 80047b2:	bf00      	nop
 80047b4:	200009bc 	.word	0x200009bc
 80047b8:	2000094c 	.word	0x2000094c
 80047bc:	44b82666 	.word	0x44b82666

080047c0 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80047c0:	e7fe      	b.n	80047c0 <_Error_Handler>

080047c2 <PIDCompute>:
    PIDTuningsSet(pid, kp, ki, kd);
}
        
bool
PIDCompute(PIDControl *pid) 
{
 80047c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047c6:	4604      	mov	r4, r0
    float error, dInput;

    if(pid->mode == MANUAL)
 80047c8:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d03d      	beq.n	800484c <PIDCompute+0x8a>
    {
        return false;
    }
    
    // The classic PID error term
    error = (pid->setpoint) - (pid->input);
 80047d0:	6827      	ldr	r7, [r4, #0]
 80047d2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80047d4:	4639      	mov	r1, r7
 80047d6:	f7fc f9c9 	bl	8000b6c <__aeabi_fsub>
    
    // Compute the integral term separately ahead of time
    pid->iTerm += (pid->alteredKi) * error;
 80047da:	69e1      	ldr	r1, [r4, #28]
    error = (pid->setpoint) - (pid->input);
 80047dc:	4681      	mov	r9, r0
    pid->iTerm += (pid->alteredKi) * error;
 80047de:	f7fc facf 	bl	8000d80 <__aeabi_fmul>
 80047e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80047e4:	f7fc f9c4 	bl	8000b70 <__addsf3>
    
    // Constrain the integrator to make sure it does not exceed output bounds
    pid->iTerm = CONSTRAIN( (pid->iTerm), (pid->outMin), (pid->outMax) );
 80047e8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    pid->iTerm += (pid->alteredKi) * error;
 80047ea:	4680      	mov	r8, r0
    pid->iTerm = CONSTRAIN( (pid->iTerm), (pid->outMin), (pid->outMax) );
 80047ec:	4629      	mov	r1, r5
 80047ee:	f7fc fc65 	bl	80010bc <__aeabi_fcmplt>
 80047f2:	2800      	cmp	r0, #0
 80047f4:	d12c      	bne.n	8004850 <PIDCompute+0x8e>
 80047f6:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80047f8:	4640      	mov	r0, r8
 80047fa:	4631      	mov	r1, r6
 80047fc:	f7fc fc7c 	bl	80010f8 <__aeabi_fcmpgt>
 8004800:	b900      	cbnz	r0, 8004804 <PIDCompute+0x42>
 8004802:	4646      	mov	r6, r8
 8004804:	6266      	str	r6, [r4, #36]	; 0x24
    
    // Take the "derivative on measurement" instead of "derivative on error"
    dInput = (pid->input) - (pid->lastInput);
    
    // Run all the terms together to get the overall output
    pid->output = (pid->alteredKp) * error + (pid->iTerm) - (pid->alteredKd) * dInput;
 8004806:	69a1      	ldr	r1, [r4, #24]
 8004808:	4648      	mov	r0, r9
 800480a:	f7fc fab9 	bl	8000d80 <__aeabi_fmul>
 800480e:	4631      	mov	r1, r6
 8004810:	f7fc f9ae 	bl	8000b70 <__addsf3>
    dInput = (pid->input) - (pid->lastInput);
 8004814:	6861      	ldr	r1, [r4, #4]
    pid->output = (pid->alteredKp) * error + (pid->iTerm) - (pid->alteredKd) * dInput;
 8004816:	4606      	mov	r6, r0
    dInput = (pid->input) - (pid->lastInput);
 8004818:	4638      	mov	r0, r7
 800481a:	f7fc f9a7 	bl	8000b6c <__aeabi_fsub>
    pid->output = (pid->alteredKp) * error + (pid->iTerm) - (pid->alteredKd) * dInput;
 800481e:	6a21      	ldr	r1, [r4, #32]
 8004820:	f7fc faae 	bl	8000d80 <__aeabi_fmul>
 8004824:	4601      	mov	r1, r0
 8004826:	4630      	mov	r0, r6
 8004828:	f7fc f9a0 	bl	8000b6c <__aeabi_fsub>
 800482c:	4606      	mov	r6, r0
    
    // Bound the output
    pid->output = CONSTRAIN( (pid->output), (pid->outMin), (pid->outMax) );
 800482e:	4601      	mov	r1, r0
 8004830:	4628      	mov	r0, r5
 8004832:	f7fc fc61 	bl	80010f8 <__aeabi_fcmpgt>
 8004836:	b930      	cbnz	r0, 8004846 <PIDCompute+0x84>
 8004838:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800483a:	4630      	mov	r0, r6
 800483c:	4629      	mov	r1, r5
 800483e:	f7fc fc5b 	bl	80010f8 <__aeabi_fcmpgt>
 8004842:	b900      	cbnz	r0, 8004846 <PIDCompute+0x84>
 8004844:	4635      	mov	r5, r6
    
    // Make the current input the former input
    pid->lastInput = pid->input;
    
    return true;
 8004846:	2001      	movs	r0, #1
    pid->output = CONSTRAIN( (pid->output), (pid->outMin), (pid->outMax) );
 8004848:	60a5      	str	r5, [r4, #8]
    pid->lastInput = pid->input;
 800484a:	6067      	str	r7, [r4, #4]
}
 800484c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pid->iTerm = CONSTRAIN( (pid->iTerm), (pid->outMin), (pid->outMax) );
 8004850:	462e      	mov	r6, r5
 8004852:	e7d7      	b.n	8004804 <PIDCompute+0x42>

08004854 <PIDOutputLimitsSet>:
    pid->mode = mode;
}

void 
PIDOutputLimitsSet(PIDControl *pid, float min, float max) 							  							  
{
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	460c      	mov	r4, r1
 8004858:	4605      	mov	r5, r0
    // Check if the parameters are valid
    if(min >= max)
 800485a:	4611      	mov	r1, r2
 800485c:	4620      	mov	r0, r4
{
 800485e:	4616      	mov	r6, r2
    if(min >= max)
 8004860:	f7fc fc40 	bl	80010e4 <__aeabi_fcmpge>
 8004864:	b9f0      	cbnz	r0, 80048a4 <PIDOutputLimitsSet+0x50>
    // Save the parameters
    pid->outMin = min;
    pid->outMax = max;
    
    // If in automatic, apply the new constraints
    if(pid->mode == AUTOMATIC)
 8004866:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    pid->outMin = min;
 800486a:	62ec      	str	r4, [r5, #44]	; 0x2c
    if(pid->mode == AUTOMATIC)
 800486c:	2b01      	cmp	r3, #1
    pid->outMax = max;
 800486e:	632e      	str	r6, [r5, #48]	; 0x30
    if(pid->mode == AUTOMATIC)
 8004870:	d118      	bne.n	80048a4 <PIDOutputLimitsSet+0x50>
    {
        pid->output = CONSTRAIN(pid->output, min, max);
 8004872:	68af      	ldr	r7, [r5, #8]
 8004874:	4620      	mov	r0, r4
 8004876:	4639      	mov	r1, r7
 8004878:	f7fc fc3e 	bl	80010f8 <__aeabi_fcmpgt>
 800487c:	b998      	cbnz	r0, 80048a6 <PIDOutputLimitsSet+0x52>
 800487e:	4639      	mov	r1, r7
 8004880:	4630      	mov	r0, r6
 8004882:	f7fc fc1b 	bl	80010bc <__aeabi_fcmplt>
 8004886:	b980      	cbnz	r0, 80048aa <PIDOutputLimitsSet+0x56>
 8004888:	60af      	str	r7, [r5, #8]
        pid->iTerm  = CONSTRAIN(pid->iTerm,  min, max);
 800488a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800488c:	4620      	mov	r0, r4
 800488e:	4639      	mov	r1, r7
 8004890:	f7fc fc32 	bl	80010f8 <__aeabi_fcmpgt>
 8004894:	b928      	cbnz	r0, 80048a2 <PIDOutputLimitsSet+0x4e>
 8004896:	4639      	mov	r1, r7
 8004898:	4630      	mov	r0, r6
 800489a:	f7fc fc0f 	bl	80010bc <__aeabi_fcmplt>
 800489e:	b930      	cbnz	r0, 80048ae <PIDOutputLimitsSet+0x5a>
 80048a0:	463c      	mov	r4, r7
 80048a2:	626c      	str	r4, [r5, #36]	; 0x24
 80048a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pid->output = CONSTRAIN(pid->output, min, max);
 80048a6:	4627      	mov	r7, r4
 80048a8:	e7ee      	b.n	8004888 <PIDOutputLimitsSet+0x34>
 80048aa:	4637      	mov	r7, r6
 80048ac:	e7ec      	b.n	8004888 <PIDOutputLimitsSet+0x34>
        pid->iTerm  = CONSTRAIN(pid->iTerm,  min, max);
 80048ae:	4634      	mov	r4, r6
 80048b0:	e7f7      	b.n	80048a2 <PIDOutputLimitsSet+0x4e>

080048b2 <PIDTuningsSet>:
    }
}

void 
PIDTuningsSet(PIDControl *pid, float kp, float ki, float kd)         	                                         
{
 80048b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b6:	460d      	mov	r5, r1
 80048b8:	4604      	mov	r4, r0
    // Check if the parameters are valid
    if(kp < 0.0f || ki < 0.0f || kd < 0.0f)
 80048ba:	2100      	movs	r1, #0
 80048bc:	4628      	mov	r0, r5
{
 80048be:	4616      	mov	r6, r2
 80048c0:	461f      	mov	r7, r3
    if(kp < 0.0f || ki < 0.0f || kd < 0.0f)
 80048c2:	f7fc fbfb 	bl	80010bc <__aeabi_fcmplt>
 80048c6:	bb38      	cbnz	r0, 8004918 <PIDTuningsSet+0x66>
 80048c8:	2100      	movs	r1, #0
 80048ca:	4630      	mov	r0, r6
 80048cc:	f7fc fbf6 	bl	80010bc <__aeabi_fcmplt>
 80048d0:	bb10      	cbnz	r0, 8004918 <PIDTuningsSet+0x66>
 80048d2:	2100      	movs	r1, #0
 80048d4:	4638      	mov	r0, r7
 80048d6:	f7fc fbf1 	bl	80010bc <__aeabi_fcmplt>
 80048da:	b9e8      	cbnz	r0, 8004918 <PIDTuningsSet+0x66>
    pid->dispKi = ki;
    pid->dispKd = kd;
    
    // Alter the parameters for PID
    pid->alteredKp = kp;
    pid->alteredKi = ki * pid->sampleTime;
 80048dc:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
    pid->dispKi = ki;
 80048e0:	6126      	str	r6, [r4, #16]
    pid->alteredKi = ki * pid->sampleTime;
 80048e2:	4641      	mov	r1, r8
 80048e4:	4630      	mov	r0, r6
    pid->dispKp = kp;
 80048e6:	60e5      	str	r5, [r4, #12]
    pid->dispKd = kd;
 80048e8:	6167      	str	r7, [r4, #20]
    pid->alteredKp = kp;
 80048ea:	61a5      	str	r5, [r4, #24]
    pid->alteredKi = ki * pid->sampleTime;
 80048ec:	f7fc fa48 	bl	8000d80 <__aeabi_fmul>
    pid->alteredKd = kd / pid->sampleTime;
 80048f0:	4641      	mov	r1, r8
    pid->alteredKi = ki * pid->sampleTime;
 80048f2:	61e0      	str	r0, [r4, #28]
 80048f4:	4606      	mov	r6, r0
    pid->alteredKd = kd / pid->sampleTime;
 80048f6:	4638      	mov	r0, r7
 80048f8:	f7fc faf6 	bl	8000ee8 <__aeabi_fdiv>
    
    // Apply reverse direction to the altered values if necessary
    if(pid->controllerDirection == REVERSE)
 80048fc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    pid->alteredKd = kd / pid->sampleTime;
 8004900:	6220      	str	r0, [r4, #32]
    if(pid->controllerDirection == REVERSE)
 8004902:	2b01      	cmp	r3, #1
 8004904:	d108      	bne.n	8004918 <PIDTuningsSet+0x66>
    {
        pid->alteredKp = -(pid->alteredKp);
 8004906:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        pid->alteredKi = -(pid->alteredKi);
 800490a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
        pid->alteredKd = -(pid->alteredKd);
 800490e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
        pid->alteredKp = -(pid->alteredKp);
 8004912:	61a5      	str	r5, [r4, #24]
        pid->alteredKi = -(pid->alteredKi);
 8004914:	61e6      	str	r6, [r4, #28]
        pid->alteredKd = -(pid->alteredKd);
 8004916:	6220      	str	r0, [r4, #32]
 8004918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800491c <PIDInit>:
{
 800491c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004920:	460e      	mov	r6, r1
    pid->iTerm = 0.0f;
 8004922:	2100      	movs	r1, #0
{
 8004924:	4617      	mov	r7, r2
 8004926:	4698      	mov	r8, r3
 8004928:	9d08      	ldr	r5, [sp, #32]
 800492a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800492e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8004932:	4604      	mov	r4, r0
    pid->controllerDirection = controllerDirection;
 8004934:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    pid->mode = mode;
 8004938:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    pid->iTerm = 0.0f;
 800493c:	6241      	str	r1, [r0, #36]	; 0x24
    pid->input = 0.0f;
 800493e:	6001      	str	r1, [r0, #0]
    pid->lastInput = 0.0f;
 8004940:	6041      	str	r1, [r0, #4]
    pid->output = 0.0f;
 8004942:	6081      	str	r1, [r0, #8]
    pid->setpoint = 0.0f;
 8004944:	6341      	str	r1, [r0, #52]	; 0x34
    if(sampleTimeSeconds > 0.0f)
 8004946:	4628      	mov	r0, r5
{
 8004948:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800494c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    if(sampleTimeSeconds > 0.0f)
 8004950:	f7fc fbd2 	bl	80010f8 <__aeabi_fcmpgt>
 8004954:	b168      	cbz	r0, 8004972 <PIDInit+0x56>
        pid->sampleTime = sampleTimeSeconds;
 8004956:	62a5      	str	r5, [r4, #40]	; 0x28
    PIDOutputLimitsSet(pid, minOutput, maxOutput);
 8004958:	4652      	mov	r2, sl
 800495a:	4649      	mov	r1, r9
 800495c:	4620      	mov	r0, r4
 800495e:	f7ff ff79 	bl	8004854 <PIDOutputLimitsSet>
    PIDTuningsSet(pid, kp, ki, kd);
 8004962:	4643      	mov	r3, r8
 8004964:	463a      	mov	r2, r7
 8004966:	4631      	mov	r1, r6
 8004968:	4620      	mov	r0, r4
}
 800496a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    PIDTuningsSet(pid, kp, ki, kd);
 800496e:	f7ff bfa0 	b.w	80048b2 <PIDTuningsSet>
        pid->sampleTime = 1.0f;
 8004972:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004976:	62a3      	str	r3, [r4, #40]	; 0x28
 8004978:	e7ee      	b.n	8004958 <PIDInit+0x3c>
	...

0800497c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800497c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800497e:	4b28      	ldr	r3, [pc, #160]	; (8004a20 <HAL_MspInit+0xa4>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004980:	2007      	movs	r0, #7
  __HAL_RCC_COMP_CLK_ENABLE();
 8004982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004984:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004988:	625a      	str	r2, [r3, #36]	; 0x24
 800498a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800498c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004990:	9201      	str	r2, [sp, #4]
 8004992:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004994:	6a1a      	ldr	r2, [r3, #32]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	621a      	str	r2, [r3, #32]
 800499c:	6a1a      	ldr	r2, [r3, #32]
 800499e:	f002 0201 	and.w	r2, r2, #1
 80049a2:	9202      	str	r2, [sp, #8]
 80049a4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80049ac:	625a      	str	r2, [r3, #36]	; 0x24
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b4:	9303      	str	r3, [sp, #12]
 80049b6:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80049b8:	f7fc fc2a 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80049bc:	2200      	movs	r2, #0
 80049be:	f06f 000b 	mvn.w	r0, #11
 80049c2:	4611      	mov	r1, r2
 80049c4:	f7fc fc36 	bl	8001234 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80049c8:	2200      	movs	r2, #0
 80049ca:	f06f 000a 	mvn.w	r0, #10
 80049ce:	4611      	mov	r1, r2
 80049d0:	f7fc fc30 	bl	8001234 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80049d4:	2200      	movs	r2, #0
 80049d6:	f06f 0009 	mvn.w	r0, #9
 80049da:	4611      	mov	r1, r2
 80049dc:	f7fc fc2a 	bl	8001234 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80049e0:	2200      	movs	r2, #0
 80049e2:	f06f 0004 	mvn.w	r0, #4
 80049e6:	4611      	mov	r1, r2
 80049e8:	f7fc fc24 	bl	8001234 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80049ec:	2200      	movs	r2, #0
 80049ee:	f06f 0003 	mvn.w	r0, #3
 80049f2:	4611      	mov	r1, r2
 80049f4:	f7fc fc1e 	bl	8001234 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80049f8:	2200      	movs	r2, #0
 80049fa:	f06f 0001 	mvn.w	r0, #1
 80049fe:	4611      	mov	r1, r2
 8004a00:	f7fc fc18 	bl	8001234 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004a04:	2200      	movs	r2, #0
 8004a06:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	f7fc fc12 	bl	8001234 <HAL_NVIC_SetPriority>

    /**Enables the output of internal reference voltage 
    */
  __HAL_SYSCFG_VREFINT_OUT_ENABLE();
 8004a10:	4a04      	ldr	r2, [pc, #16]	; (8004a24 <HAL_MspInit+0xa8>)
 8004a12:	6813      	ldr	r3, [r2, #0]
 8004a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a18:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a1a:	b005      	add	sp, #20
 8004a1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40007c00 	.word	0x40007c00

08004a28 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004a28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a2a:	f7fc fbd5 	bl	80011d8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8004a32:	f7fc bc62 	b.w	80012fa <HAL_SYSTICK_IRQHandler>
	...

08004a38 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a38:	4801      	ldr	r0, [pc, #4]	; (8004a40 <USART1_IRQHandler+0x8>)
 8004a3a:	f7fe bc20 	b.w	800327e <HAL_UART_IRQHandler>
 8004a3e:	bf00      	nop
 8004a40:	200009bc 	.word	0x200009bc

08004a44 <TIM6_IRQHandler>:
void TIM6_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004a44:	4801      	ldr	r0, [pc, #4]	; (8004a4c <TIM6_IRQHandler+0x8>)
 8004a46:	f7fe b964 	b.w	8002d12 <HAL_TIM_IRQHandler>
 8004a4a:	bf00      	nop
 8004a4c:	20000914 	.word	0x20000914

08004a50 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004a50:	4801      	ldr	r0, [pc, #4]	; (8004a58 <TIM5_IRQHandler+0x8>)
 8004a52:	f7fe b95e 	b.w	8002d12 <HAL_TIM_IRQHandler>
 8004a56:	bf00      	nop
 8004a58:	2000086c 	.word	0x2000086c

08004a5c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8004a5c:	4b0e      	ldr	r3, [pc, #56]	; (8004a98 <SystemInit+0x3c>)
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a64:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8004a66:	6899      	ldr	r1, [r3, #8]
 8004a68:	4a0c      	ldr	r2, [pc, #48]	; (8004a9c <SystemInit+0x40>)
 8004a6a:	400a      	ands	r2, r1
 8004a6c:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8004a74:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8004a78:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a80:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8004a88:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004a8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a92:	4b03      	ldr	r3, [pc, #12]	; (8004aa0 <SystemInit+0x44>)
 8004a94:	609a      	str	r2, [r3, #8]
 8004a96:	4770      	bx	lr
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	88ffc00c 	.word	0x88ffc00c
 8004aa0:	e000ed00 	.word	0xe000ed00

08004aa4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004aa4:	b510      	push	{r4, lr}
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
 8004aa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004aaa:	2400      	movs	r4, #0
  htim2.Instance = TIM2;
 8004aac:	4814      	ldr	r0, [pc, #80]	; (8004b00 <MX_TIM2_Init+0x5c>)
{
 8004aae:	b08c      	sub	sp, #48	; 0x30
  htim2.Init.Prescaler = 0;
 8004ab0:	e880 0018 	stmia.w	r0, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
 8004ab4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ab8:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004aba:	2303      	movs	r3, #3
 8004abc:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004abe:	2301      	movs	r3, #1
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004ac0:	a903      	add	r1, sp, #12
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ac2:	6084      	str	r4, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ac4:	6104      	str	r4, [r0, #16]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004ac6:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004ac8:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004aca:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 8004acc:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004ace:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004ad0:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004ad2:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004ad4:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004ad6:	f7fd fee4 	bl	80028a2 <HAL_TIM_Encoder_Init>
 8004ada:	b118      	cbz	r0, 8004ae4 <MX_TIM2_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004adc:	214f      	movs	r1, #79	; 0x4f
 8004ade:	4809      	ldr	r0, [pc, #36]	; (8004b04 <MX_TIM2_Init+0x60>)
 8004ae0:	f7ff fe6e 	bl	80047c0 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004ae4:	a901      	add	r1, sp, #4
 8004ae6:	4806      	ldr	r0, [pc, #24]	; (8004b00 <MX_TIM2_Init+0x5c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ae8:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004aea:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004aec:	f7fe f997 	bl	8002e1e <HAL_TIMEx_MasterConfigSynchronization>
 8004af0:	b118      	cbz	r0, 8004afa <MX_TIM2_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004af2:	2156      	movs	r1, #86	; 0x56
 8004af4:	4803      	ldr	r0, [pc, #12]	; (8004b04 <MX_TIM2_Init+0x60>)
 8004af6:	f7ff fe63 	bl	80047c0 <_Error_Handler>
  }

}
 8004afa:	b00c      	add	sp, #48	; 0x30
 8004afc:	bd10      	pop	{r4, pc}
 8004afe:	bf00      	nop
 8004b00:	20000984 	.word	0x20000984
 8004b04:	0800879c 	.word	0x0800879c

08004b08 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004b08:	b510      	push	{r4, lr}
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
 8004b0a:	2400      	movs	r4, #0
  htim3.Instance = TIM3;
 8004b0c:	4814      	ldr	r0, [pc, #80]	; (8004b60 <MX_TIM3_Init+0x58>)
  htim3.Init.Prescaler = 0;
 8004b0e:	4b15      	ldr	r3, [pc, #84]	; (8004b64 <MX_TIM3_Init+0x5c>)
{
 8004b10:	b08c      	sub	sp, #48	; 0x30
  htim3.Init.Prescaler = 0;
 8004b12:	e880 0018 	stmia.w	r0, {r3, r4}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
 8004b16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b1a:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004b20:	2301      	movs	r3, #1
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004b22:	a903      	add	r1, sp, #12
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b24:	6084      	str	r4, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b26:	6104      	str	r4, [r0, #16]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004b28:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004b2a:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004b2c:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 8004b2e:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004b30:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004b32:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004b34:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004b36:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004b38:	f7fd feb3 	bl	80028a2 <HAL_TIM_Encoder_Init>
 8004b3c:	b118      	cbz	r0, 8004b46 <MX_TIM3_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004b3e:	2170      	movs	r1, #112	; 0x70
 8004b40:	4809      	ldr	r0, [pc, #36]	; (8004b68 <MX_TIM3_Init+0x60>)
 8004b42:	f7ff fe3d 	bl	80047c0 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b46:	a901      	add	r1, sp, #4
 8004b48:	4805      	ldr	r0, [pc, #20]	; (8004b60 <MX_TIM3_Init+0x58>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b4a:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b4c:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b4e:	f7fe f966 	bl	8002e1e <HAL_TIMEx_MasterConfigSynchronization>
 8004b52:	b118      	cbz	r0, 8004b5c <MX_TIM3_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004b54:	2177      	movs	r1, #119	; 0x77
 8004b56:	4804      	ldr	r0, [pc, #16]	; (8004b68 <MX_TIM3_Init+0x60>)
 8004b58:	f7ff fe32 	bl	80047c0 <_Error_Handler>
  }

}
 8004b5c:	b00c      	add	sp, #48	; 0x30
 8004b5e:	bd10      	pop	{r4, pc}
 8004b60:	200008a4 	.word	0x200008a4
 8004b64:	40000400 	.word	0x40000400
 8004b68:	0800879c 	.word	0x0800879c

08004b6c <MX_TIM5_Init>:
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim5.Instance = TIM5;
 8004b6c:	4828      	ldr	r0, [pc, #160]	; (8004c10 <MX_TIM5_Init+0xa4>)
 8004b6e:	4b29      	ldr	r3, [pc, #164]	; (8004c14 <MX_TIM5_Init+0xa8>)
{
 8004b70:	b500      	push	{lr}
  htim5.Instance = TIM5;
 8004b72:	6003      	str	r3, [r0, #0]
  htim5.Init.Prescaler = 0;
 8004b74:	2300      	movs	r3, #0
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 1048575;
 8004b76:	4a28      	ldr	r2, [pc, #160]	; (8004c18 <MX_TIM5_Init+0xac>)
{
 8004b78:	b08b      	sub	sp, #44	; 0x2c
  htim5.Init.Prescaler = 0;
 8004b7a:	6043      	str	r3, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b7c:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 1048575;
 8004b7e:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b80:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004b82:	f7fd fe03 	bl	800278c <HAL_TIM_Base_Init>
 8004b86:	b118      	cbz	r0, 8004b90 <MX_TIM5_Init+0x24>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004b88:	2189      	movs	r1, #137	; 0x89
 8004b8a:	4824      	ldr	r0, [pc, #144]	; (8004c1c <MX_TIM5_Init+0xb0>)
 8004b8c:	f7ff fe18 	bl	80047c0 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b94:	a90a      	add	r1, sp, #40	; 0x28
 8004b96:	f841 3d20 	str.w	r3, [r1, #-32]!
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004b9a:	481d      	ldr	r0, [pc, #116]	; (8004c10 <MX_TIM5_Init+0xa4>)
 8004b9c:	f7fd fffc 	bl	8002b98 <HAL_TIM_ConfigClockSource>
 8004ba0:	b118      	cbz	r0, 8004baa <MX_TIM5_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004ba2:	218f      	movs	r1, #143	; 0x8f
 8004ba4:	481d      	ldr	r0, [pc, #116]	; (8004c1c <MX_TIM5_Init+0xb0>)
 8004ba6:	f7ff fe0b 	bl	80047c0 <_Error_Handler>
  }

  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8004baa:	4819      	ldr	r0, [pc, #100]	; (8004c10 <MX_TIM5_Init+0xa4>)
 8004bac:	f7fd fe24 	bl	80027f8 <HAL_TIM_IC_Init>
 8004bb0:	b118      	cbz	r0, 8004bba <MX_TIM5_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004bb2:	2194      	movs	r1, #148	; 0x94
 8004bb4:	4819      	ldr	r0, [pc, #100]	; (8004c1c <MX_TIM5_Init+0xb0>)
 8004bb6:	f7ff fe03 	bl	80047c0 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bba:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004bbc:	4669      	mov	r1, sp
 8004bbe:	4814      	ldr	r0, [pc, #80]	; (8004c10 <MX_TIM5_Init+0xa4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bc0:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bc2:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004bc4:	f7fe f92b 	bl	8002e1e <HAL_TIMEx_MasterConfigSynchronization>
 8004bc8:	b118      	cbz	r0, 8004bd2 <MX_TIM5_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004bca:	219b      	movs	r1, #155	; 0x9b
 8004bcc:	4813      	ldr	r0, [pc, #76]	; (8004c1c <MX_TIM5_Init+0xb0>)
 8004bce:	f7ff fdf7 	bl	80047c0 <_Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004bd2:	230a      	movs	r3, #10
 8004bd4:	9306      	str	r3, [sp, #24]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	9307      	str	r3, [sp, #28]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004bda:	2300      	movs	r3, #0
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004bdc:	2208      	movs	r2, #8
 8004bde:	a906      	add	r1, sp, #24
 8004be0:	480b      	ldr	r0, [pc, #44]	; (8004c10 <MX_TIM5_Init+0xa4>)
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004be2:	9308      	str	r3, [sp, #32]
  sConfigIC.ICFilter = 0;
 8004be4:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004be6:	f7fd fec7 	bl	8002978 <HAL_TIM_IC_ConfigChannel>
 8004bea:	b118      	cbz	r0, 8004bf4 <MX_TIM5_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004bec:	21a4      	movs	r1, #164	; 0xa4
 8004bee:	480b      	ldr	r0, [pc, #44]	; (8004c1c <MX_TIM5_Init+0xb0>)
 8004bf0:	f7ff fde6 	bl	80047c0 <_Error_Handler>
  }

  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004bf4:	220c      	movs	r2, #12
 8004bf6:	a906      	add	r1, sp, #24
 8004bf8:	4805      	ldr	r0, [pc, #20]	; (8004c10 <MX_TIM5_Init+0xa4>)
 8004bfa:	f7fd febd 	bl	8002978 <HAL_TIM_IC_ConfigChannel>
 8004bfe:	b118      	cbz	r0, 8004c08 <MX_TIM5_Init+0x9c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004c00:	21a9      	movs	r1, #169	; 0xa9
 8004c02:	4806      	ldr	r0, [pc, #24]	; (8004c1c <MX_TIM5_Init+0xb0>)
 8004c04:	f7ff fddc 	bl	80047c0 <_Error_Handler>
  }

}
 8004c08:	b00b      	add	sp, #44	; 0x2c
 8004c0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c0e:	bf00      	nop
 8004c10:	2000086c 	.word	0x2000086c
 8004c14:	40000c00 	.word	0x40000c00
 8004c18:	000fffff 	.word	0x000fffff
 8004c1c:	0800879c 	.word	0x0800879c

08004c20 <MX_TIM6_Init>:
void MX_TIM6_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 31999;
 8004c20:	f647 4cff 	movw	ip, #31999	; 0x7cff
{
 8004c24:	b513      	push	{r0, r1, r4, lr}
  htim6.Init.Prescaler = 31999;
 8004c26:	4b0e      	ldr	r3, [pc, #56]	; (8004c60 <MX_TIM6_Init+0x40>)
  htim6.Instance = TIM6;
 8004c28:	480e      	ldr	r0, [pc, #56]	; (8004c64 <MX_TIM6_Init+0x44>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c2a:	2400      	movs	r4, #0
  htim6.Init.Prescaler = 31999;
 8004c2c:	e880 1008 	stmia.w	r0, {r3, ip}
  htim6.Init.Period = 1;
 8004c30:	2301      	movs	r3, #1
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c32:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 1;
 8004c34:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004c36:	f7fd fda9 	bl	800278c <HAL_TIM_Base_Init>
 8004c3a:	b118      	cbz	r0, 8004c44 <MX_TIM6_Init+0x24>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004c3c:	21b8      	movs	r1, #184	; 0xb8
 8004c3e:	480a      	ldr	r0, [pc, #40]	; (8004c68 <MX_TIM6_Init+0x48>)
 8004c40:	f7ff fdbe 	bl	80047c0 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004c44:	4669      	mov	r1, sp
 8004c46:	4807      	ldr	r0, [pc, #28]	; (8004c64 <MX_TIM6_Init+0x44>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c48:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c4a:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004c4c:	f7fe f8e7 	bl	8002e1e <HAL_TIMEx_MasterConfigSynchronization>
 8004c50:	b118      	cbz	r0, 8004c5a <MX_TIM6_Init+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004c52:	21bf      	movs	r1, #191	; 0xbf
 8004c54:	4804      	ldr	r0, [pc, #16]	; (8004c68 <MX_TIM6_Init+0x48>)
 8004c56:	f7ff fdb3 	bl	80047c0 <_Error_Handler>
  }

}
 8004c5a:	b002      	add	sp, #8
 8004c5c:	bd10      	pop	{r4, pc}
 8004c5e:	bf00      	nop
 8004c60:	40001000 	.word	0x40001000
 8004c64:	20000914 	.word	0x20000914
 8004c68:	0800879c 	.word	0x0800879c

08004c6c <HAL_TIM_Encoder_MspInit>:
  HAL_TIM_MspPostInit(&htim11);

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004c6c:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_encoderHandle->Instance==TIM2)
 8004c6e:	6803      	ldr	r3, [r0, #0]
{
 8004c70:	b089      	sub	sp, #36	; 0x24
  if(tim_encoderHandle->Instance==TIM2)
 8004c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c76:	d11a      	bne.n	8004cae <HAL_TIM_Encoder_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c78:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8004c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c7e:	4818      	ldr	r0, [pc, #96]	; (8004ce0 <HAL_TIM_Encoder_MspInit+0x74>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c80:	f042 0201 	orr.w	r2, r2, #1
 8004c84:	625a      	str	r2, [r3, #36]	; 0x24
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c88:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	9301      	str	r3, [sp, #4]
 8004c90:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8004c92:	2322      	movs	r3, #34	; 0x22
 8004c94:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c96:	2302      	movs	r3, #2
 8004c98:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c9e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ca4:	f7fc fb2e 	bl	8001304 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004ca8:	b009      	add	sp, #36	; 0x24
 8004caa:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_encoderHandle->Instance==TIM3)
 8004cae:	4a0d      	ldr	r2, [pc, #52]	; (8004ce4 <HAL_TIM_Encoder_MspInit+0x78>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d1f9      	bne.n	8004ca8 <HAL_TIM_Encoder_MspInit+0x3c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <HAL_TIM_Encoder_MspInit+0x7c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cb6:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cba:	480c      	ldr	r0, [pc, #48]	; (8004cec <HAL_TIM_Encoder_MspInit+0x80>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cbc:	f042 0202 	orr.w	r2, r2, #2
 8004cc0:	625a      	str	r2, [r3, #36]	; 0x24
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc4:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	9302      	str	r3, [sp, #8]
 8004ccc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004cce:	23c0      	movs	r3, #192	; 0xc0
 8004cd0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cd2:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd4:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cd6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cd8:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004cda:	9307      	str	r3, [sp, #28]
 8004cdc:	e7e2      	b.n	8004ca4 <HAL_TIM_Encoder_MspInit+0x38>
 8004cde:	bf00      	nop
 8004ce0:	40020000 	.word	0x40020000
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	40020800 	.word	0x40020800

08004cf0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004cf0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_baseHandle->Instance==TIM5)
 8004cf2:	6803      	ldr	r3, [r0, #0]
 8004cf4:	4a30      	ldr	r2, [pc, #192]	; (8004db8 <HAL_TIM_Base_MspInit+0xc8>)
{
 8004cf6:	b08a      	sub	sp, #40	; 0x28
  if(tim_baseHandle->Instance==TIM5)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d11f      	bne.n	8004d3c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004cfc:	4b2f      	ldr	r3, [pc, #188]	; (8004dbc <HAL_TIM_Base_MspInit+0xcc>)
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cfe:	2400      	movs	r4, #0
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d02:	a905      	add	r1, sp, #20
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d04:	f042 0208 	orr.w	r2, r2, #8
 8004d08:	625a      	str	r2, [r3, #36]	; 0x24
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d0c:	482c      	ldr	r0, [pc, #176]	; (8004dc0 <HAL_TIM_Base_MspInit+0xd0>)
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	9301      	str	r3, [sp, #4]
 8004d14:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004d16:	230c      	movs	r3, #12
 8004d18:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d1a:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d1c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d1e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004d20:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d22:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d24:	f7fc faee 	bl	8001304 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004d28:	202e      	movs	r0, #46	; 0x2e
 8004d2a:	4622      	mov	r2, r4
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	f7fc fa81 	bl	8001234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004d32:	202e      	movs	r0, #46	; 0x2e
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004d34:	f7fc fab2 	bl	800129c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8004d38:	b00a      	add	sp, #40	; 0x28
 8004d3a:	bd10      	pop	{r4, pc}
  else if(tim_baseHandle->Instance==TIM6)
 8004d3c:	4a21      	ldr	r2, [pc, #132]	; (8004dc4 <HAL_TIM_Base_MspInit+0xd4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d110      	bne.n	8004d64 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004d42:	4b1e      	ldr	r3, [pc, #120]	; (8004dbc <HAL_TIM_Base_MspInit+0xcc>)
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8004d44:	202b      	movs	r0, #43	; 0x2b
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d48:	f042 0210 	orr.w	r2, r2, #16
 8004d4c:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8004d4e:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8004d52:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	9302      	str	r3, [sp, #8]
 8004d5a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8004d5c:	f7fc fa6a 	bl	8001234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004d60:	202b      	movs	r0, #43	; 0x2b
 8004d62:	e7e7      	b.n	8004d34 <HAL_TIM_Base_MspInit+0x44>
  else if(tim_baseHandle->Instance==TIM9)
 8004d64:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <HAL_TIM_Base_MspInit+0xd8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d10a      	bne.n	8004d80 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004d6a:	4b14      	ldr	r3, [pc, #80]	; (8004dbc <HAL_TIM_Base_MspInit+0xcc>)
 8004d6c:	6a1a      	ldr	r2, [r3, #32]
 8004d6e:	f042 0204 	orr.w	r2, r2, #4
 8004d72:	621a      	str	r2, [r3, #32]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	9303      	str	r3, [sp, #12]
 8004d7c:	9b03      	ldr	r3, [sp, #12]
 8004d7e:	e7db      	b.n	8004d38 <HAL_TIM_Base_MspInit+0x48>
  else if(tim_baseHandle->Instance==TIM10)
 8004d80:	4a12      	ldr	r2, [pc, #72]	; (8004dcc <HAL_TIM_Base_MspInit+0xdc>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d10a      	bne.n	8004d9c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <HAL_TIM_Base_MspInit+0xcc>)
 8004d88:	6a1a      	ldr	r2, [r3, #32]
 8004d8a:	f042 0208 	orr.w	r2, r2, #8
 8004d8e:	621a      	str	r2, [r3, #32]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	9304      	str	r3, [sp, #16]
 8004d98:	9b04      	ldr	r3, [sp, #16]
 8004d9a:	e7cd      	b.n	8004d38 <HAL_TIM_Base_MspInit+0x48>
  else if(tim_baseHandle->Instance==TIM11)
 8004d9c:	4a0c      	ldr	r2, [pc, #48]	; (8004dd0 <HAL_TIM_Base_MspInit+0xe0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d1ca      	bne.n	8004d38 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004da2:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <HAL_TIM_Base_MspInit+0xcc>)
 8004da4:	6a1a      	ldr	r2, [r3, #32]
 8004da6:	f042 0210 	orr.w	r2, r2, #16
 8004daa:	621a      	str	r2, [r3, #32]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	9305      	str	r3, [sp, #20]
 8004db4:	9b05      	ldr	r3, [sp, #20]
}
 8004db6:	e7bf      	b.n	8004d38 <HAL_TIM_Base_MspInit+0x48>
 8004db8:	40000c00 	.word	0x40000c00
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	40020000 	.word	0x40020000
 8004dc4:	40001000 	.word	0x40001000
 8004dc8:	40010800 	.word	0x40010800
 8004dcc:	40010c00 	.word	0x40010c00
 8004dd0:	40011000 	.word	0x40011000

08004dd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004dd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM9)
 8004dd6:	6803      	ldr	r3, [r0, #0]
 8004dd8:	4a0f      	ldr	r2, [pc, #60]	; (8004e18 <HAL_TIM_MspPostInit+0x44>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d110      	bne.n	8004e00 <HAL_TIM_MspPostInit+0x2c>
  /* USER CODE END TIM9_MspPostInit 0 */
    /**TIM9 GPIO Configuration    
    PB13     ------> TIM9_CH1
    PB14     ------> TIM9_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004dde:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  /* USER CODE END TIM11_MspPostInit 0 */
  
    /**TIM11 GPIO Configuration    
    PB9     ------> TIM11_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004de2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de4:	2302      	movs	r3, #2
 8004de6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dec:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8004dee:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004df0:	a901      	add	r1, sp, #4
 8004df2:	480a      	ldr	r0, [pc, #40]	; (8004e1c <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8004df4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004df6:	f7fc fa85 	bl	8001304 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8004dfa:	b007      	add	sp, #28
 8004dfc:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(timHandle->Instance==TIM10)
 8004e00:	4a07      	ldr	r2, [pc, #28]	; (8004e20 <HAL_TIM_MspPostInit+0x4c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d102      	bne.n	8004e0c <HAL_TIM_MspPostInit+0x38>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e0a:	e7ea      	b.n	8004de2 <HAL_TIM_MspPostInit+0xe>
  else if(timHandle->Instance==TIM11)
 8004e0c:	4a05      	ldr	r2, [pc, #20]	; (8004e24 <HAL_TIM_MspPostInit+0x50>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d1f3      	bne.n	8004dfa <HAL_TIM_MspPostInit+0x26>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e16:	e7e4      	b.n	8004de2 <HAL_TIM_MspPostInit+0xe>
 8004e18:	40010800 	.word	0x40010800
 8004e1c:	40020400 	.word	0x40020400
 8004e20:	40010c00 	.word	0x40010c00
 8004e24:	40011000 	.word	0x40011000

08004e28 <MX_TIM9_Init>:
  htim9.Init.Prescaler = 125;
 8004e28:	237d      	movs	r3, #125	; 0x7d
  htim9.Instance = TIM9;
 8004e2a:	4829      	ldr	r0, [pc, #164]	; (8004ed0 <MX_TIM9_Init+0xa8>)
  htim9.Init.Prescaler = 125;
 8004e2c:	4929      	ldr	r1, [pc, #164]	; (8004ed4 <MX_TIM9_Init+0xac>)
{
 8004e2e:	b500      	push	{lr}
  htim9.Init.Period = 1024;
 8004e30:	f44f 6280 	mov.w	r2, #1024	; 0x400
  htim9.Init.Prescaler = 125;
 8004e34:	e880 000a 	stmia.w	r0, {r1, r3}
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e38:	2300      	movs	r3, #0
{
 8004e3a:	b08d      	sub	sp, #52	; 0x34
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e3c:	6083      	str	r3, [r0, #8]
  htim9.Init.Period = 1024;
 8004e3e:	60c2      	str	r2, [r0, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e40:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8004e42:	f7fd fca3 	bl	800278c <HAL_TIM_Base_Init>
 8004e46:	b118      	cbz	r0, 8004e50 <MX_TIM9_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 8004e48:	21d1      	movs	r1, #209	; 0xd1
 8004e4a:	4823      	ldr	r0, [pc, #140]	; (8004ed8 <MX_TIM9_Init+0xb0>)
 8004e4c:	f7ff fcb8 	bl	80047c0 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e54:	a90c      	add	r1, sp, #48	; 0x30
 8004e56:	f841 3d24 	str.w	r3, [r1, #-36]!
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8004e5a:	481d      	ldr	r0, [pc, #116]	; (8004ed0 <MX_TIM9_Init+0xa8>)
 8004e5c:	f7fd fe9c 	bl	8002b98 <HAL_TIM_ConfigClockSource>
 8004e60:	b118      	cbz	r0, 8004e6a <MX_TIM9_Init+0x42>
    _Error_Handler(__FILE__, __LINE__);
 8004e62:	21d7      	movs	r1, #215	; 0xd7
 8004e64:	481c      	ldr	r0, [pc, #112]	; (8004ed8 <MX_TIM9_Init+0xb0>)
 8004e66:	f7ff fcab 	bl	80047c0 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8004e6a:	4819      	ldr	r0, [pc, #100]	; (8004ed0 <MX_TIM9_Init+0xa8>)
 8004e6c:	f7fd fca9 	bl	80027c2 <HAL_TIM_PWM_Init>
 8004e70:	b118      	cbz	r0, 8004e7a <MX_TIM9_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
 8004e72:	21dc      	movs	r1, #220	; 0xdc
 8004e74:	4818      	ldr	r0, [pc, #96]	; (8004ed8 <MX_TIM9_Init+0xb0>)
 8004e76:	f7ff fca3 	bl	80047c0 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e7a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8004e7c:	a901      	add	r1, sp, #4
 8004e7e:	4814      	ldr	r0, [pc, #80]	; (8004ed0 <MX_TIM9_Init+0xa8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e80:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e82:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8004e84:	f7fd ffcb 	bl	8002e1e <HAL_TIMEx_MasterConfigSynchronization>
 8004e88:	b118      	cbz	r0, 8004e92 <MX_TIM9_Init+0x6a>
    _Error_Handler(__FILE__, __LINE__);
 8004e8a:	21e3      	movs	r1, #227	; 0xe3
 8004e8c:	4812      	ldr	r0, [pc, #72]	; (8004ed8 <MX_TIM9_Init+0xb0>)
 8004e8e:	f7ff fc97 	bl	80047c0 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8004e92:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e94:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e96:	a907      	add	r1, sp, #28
 8004e98:	480d      	ldr	r0, [pc, #52]	; (8004ed0 <MX_TIM9_Init+0xa8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e9a:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8004e9c:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e9e:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ea0:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ea2:	f7fd fdf1 	bl	8002a88 <HAL_TIM_PWM_ConfigChannel>
 8004ea6:	b118      	cbz	r0, 8004eb0 <MX_TIM9_Init+0x88>
    _Error_Handler(__FILE__, __LINE__);
 8004ea8:	21ec      	movs	r1, #236	; 0xec
 8004eaa:	480b      	ldr	r0, [pc, #44]	; (8004ed8 <MX_TIM9_Init+0xb0>)
 8004eac:	f7ff fc88 	bl	80047c0 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	a907      	add	r1, sp, #28
 8004eb4:	4806      	ldr	r0, [pc, #24]	; (8004ed0 <MX_TIM9_Init+0xa8>)
 8004eb6:	f7fd fde7 	bl	8002a88 <HAL_TIM_PWM_ConfigChannel>
 8004eba:	b118      	cbz	r0, 8004ec4 <MX_TIM9_Init+0x9c>
    _Error_Handler(__FILE__, __LINE__);
 8004ebc:	21f1      	movs	r1, #241	; 0xf1
 8004ebe:	4806      	ldr	r0, [pc, #24]	; (8004ed8 <MX_TIM9_Init+0xb0>)
 8004ec0:	f7ff fc7e 	bl	80047c0 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim9);
 8004ec4:	4802      	ldr	r0, [pc, #8]	; (8004ed0 <MX_TIM9_Init+0xa8>)
 8004ec6:	f7ff ff85 	bl	8004dd4 <HAL_TIM_MspPostInit>
}
 8004eca:	b00d      	add	sp, #52	; 0x34
 8004ecc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ed0:	2000094c 	.word	0x2000094c
 8004ed4:	40010800 	.word	0x40010800
 8004ed8:	0800879c 	.word	0x0800879c

08004edc <MX_TIM10_Init>:
  htim10.Init.Prescaler = 16;
 8004edc:	2310      	movs	r3, #16
  htim10.Instance = TIM10;
 8004ede:	4820      	ldr	r0, [pc, #128]	; (8004f60 <MX_TIM10_Init+0x84>)
  htim10.Init.Prescaler = 16;
 8004ee0:	4920      	ldr	r1, [pc, #128]	; (8004f64 <MX_TIM10_Init+0x88>)
{
 8004ee2:	b500      	push	{lr}
  htim10.Init.Period = 2000;
 8004ee4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  htim10.Init.Prescaler = 16;
 8004ee8:	e880 000a 	stmia.w	r0, {r1, r3}
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004eec:	2300      	movs	r3, #0
{
 8004eee:	b08b      	sub	sp, #44	; 0x2c
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ef0:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 2000;
 8004ef2:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ef4:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004ef6:	f7fd fc49 	bl	800278c <HAL_TIM_Base_Init>
 8004efa:	b120      	cbz	r0, 8004f06 <MX_TIM10_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 8004efc:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004f00:	4819      	ldr	r0, [pc, #100]	; (8004f68 <MX_TIM10_Init+0x8c>)
 8004f02:	f7ff fc5d 	bl	80047c0 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f0a:	a90a      	add	r1, sp, #40	; 0x28
 8004f0c:	f841 3d24 	str.w	r3, [r1, #-36]!
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8004f10:	4813      	ldr	r0, [pc, #76]	; (8004f60 <MX_TIM10_Init+0x84>)
 8004f12:	f7fd fe41 	bl	8002b98 <HAL_TIM_ConfigClockSource>
 8004f16:	b120      	cbz	r0, 8004f22 <MX_TIM10_Init+0x46>
    _Error_Handler(__FILE__, __LINE__);
 8004f18:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8004f1c:	4812      	ldr	r0, [pc, #72]	; (8004f68 <MX_TIM10_Init+0x8c>)
 8004f1e:	f7ff fc4f 	bl	80047c0 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8004f22:	480f      	ldr	r0, [pc, #60]	; (8004f60 <MX_TIM10_Init+0x84>)
 8004f24:	f7fd fc4d 	bl	80027c2 <HAL_TIM_PWM_Init>
 8004f28:	b120      	cbz	r0, 8004f34 <MX_TIM10_Init+0x58>
    _Error_Handler(__FILE__, __LINE__);
 8004f2a:	f240 110f 	movw	r1, #271	; 0x10f
 8004f2e:	480e      	ldr	r0, [pc, #56]	; (8004f68 <MX_TIM10_Init+0x8c>)
 8004f30:	f7ff fc46 	bl	80047c0 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8004f34:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f36:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f38:	a905      	add	r1, sp, #20
 8004f3a:	4809      	ldr	r0, [pc, #36]	; (8004f60 <MX_TIM10_Init+0x84>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f3c:	9305      	str	r3, [sp, #20]
  sConfigOC.Pulse = 0;
 8004f3e:	9206      	str	r2, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f40:	9207      	str	r2, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f42:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f44:	f7fd fda0 	bl	8002a88 <HAL_TIM_PWM_ConfigChannel>
 8004f48:	b120      	cbz	r0, 8004f54 <MX_TIM10_Init+0x78>
    _Error_Handler(__FILE__, __LINE__);
 8004f4a:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004f4e:	4806      	ldr	r0, [pc, #24]	; (8004f68 <MX_TIM10_Init+0x8c>)
 8004f50:	f7ff fc36 	bl	80047c0 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim10);
 8004f54:	4802      	ldr	r0, [pc, #8]	; (8004f60 <MX_TIM10_Init+0x84>)
 8004f56:	f7ff ff3d 	bl	8004dd4 <HAL_TIM_MspPostInit>
}
 8004f5a:	b00b      	add	sp, #44	; 0x2c
 8004f5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f60:	20000834 	.word	0x20000834
 8004f64:	40010c00 	.word	0x40010c00
 8004f68:	0800879c 	.word	0x0800879c

08004f6c <MX_TIM11_Init>:
  htim11.Init.Prescaler = 16;
 8004f6c:	2310      	movs	r3, #16
  htim11.Instance = TIM11;
 8004f6e:	4820      	ldr	r0, [pc, #128]	; (8004ff0 <MX_TIM11_Init+0x84>)
  htim11.Init.Prescaler = 16;
 8004f70:	4920      	ldr	r1, [pc, #128]	; (8004ff4 <MX_TIM11_Init+0x88>)
{
 8004f72:	b500      	push	{lr}
  htim11.Init.Period = 2000;
 8004f74:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  htim11.Init.Prescaler = 16;
 8004f78:	e880 000a 	stmia.w	r0, {r1, r3}
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f7c:	2300      	movs	r3, #0
{
 8004f7e:	b08b      	sub	sp, #44	; 0x2c
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f80:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 2000;
 8004f82:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f84:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004f86:	f7fd fc01 	bl	800278c <HAL_TIM_Base_Init>
 8004f8a:	b120      	cbz	r0, 8004f96 <MX_TIM11_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 8004f8c:	f240 112b 	movw	r1, #299	; 0x12b
 8004f90:	4819      	ldr	r0, [pc, #100]	; (8004ff8 <MX_TIM11_Init+0x8c>)
 8004f92:	f7ff fc15 	bl	80047c0 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f9a:	a90a      	add	r1, sp, #40	; 0x28
 8004f9c:	f841 3d24 	str.w	r3, [r1, #-36]!
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8004fa0:	4813      	ldr	r0, [pc, #76]	; (8004ff0 <MX_TIM11_Init+0x84>)
 8004fa2:	f7fd fdf9 	bl	8002b98 <HAL_TIM_ConfigClockSource>
 8004fa6:	b120      	cbz	r0, 8004fb2 <MX_TIM11_Init+0x46>
    _Error_Handler(__FILE__, __LINE__);
 8004fa8:	f240 1131 	movw	r1, #305	; 0x131
 8004fac:	4812      	ldr	r0, [pc, #72]	; (8004ff8 <MX_TIM11_Init+0x8c>)
 8004fae:	f7ff fc07 	bl	80047c0 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8004fb2:	480f      	ldr	r0, [pc, #60]	; (8004ff0 <MX_TIM11_Init+0x84>)
 8004fb4:	f7fd fc05 	bl	80027c2 <HAL_TIM_PWM_Init>
 8004fb8:	b120      	cbz	r0, 8004fc4 <MX_TIM11_Init+0x58>
    _Error_Handler(__FILE__, __LINE__);
 8004fba:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004fbe:	480e      	ldr	r0, [pc, #56]	; (8004ff8 <MX_TIM11_Init+0x8c>)
 8004fc0:	f7ff fbfe 	bl	80047c0 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8004fc4:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004fc6:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004fc8:	a905      	add	r1, sp, #20
 8004fca:	4809      	ldr	r0, [pc, #36]	; (8004ff0 <MX_TIM11_Init+0x84>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004fcc:	9305      	str	r3, [sp, #20]
  sConfigOC.Pulse = 0;
 8004fce:	9206      	str	r2, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fd0:	9207      	str	r2, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004fd2:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004fd4:	f7fd fd58 	bl	8002a88 <HAL_TIM_PWM_ConfigChannel>
 8004fd8:	b120      	cbz	r0, 8004fe4 <MX_TIM11_Init+0x78>
    _Error_Handler(__FILE__, __LINE__);
 8004fda:	f240 113f 	movw	r1, #319	; 0x13f
 8004fde:	4806      	ldr	r0, [pc, #24]	; (8004ff8 <MX_TIM11_Init+0x8c>)
 8004fe0:	f7ff fbee 	bl	80047c0 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim11);
 8004fe4:	4802      	ldr	r0, [pc, #8]	; (8004ff0 <MX_TIM11_Init+0x84>)
 8004fe6:	f7ff fef5 	bl	8004dd4 <HAL_TIM_MspPostInit>
}
 8004fea:	b00b      	add	sp, #44	; 0x2c
 8004fec:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ff0:	200008dc 	.word	0x200008dc
 8004ff4:	40011000 	.word	0x40011000
 8004ff8:	0800879c 	.word	0x0800879c

08004ffc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004ffc:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 8004ffe:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
  huart1.Instance = USART1;
 8005002:	480b      	ldr	r0, [pc, #44]	; (8005030 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 9600;
 8005004:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005006:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 9600;
 8005008:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800500c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800500e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005010:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005012:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005014:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005016:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005018:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800501a:	f7fe f875 	bl	8003108 <HAL_UART_Init>
 800501e:	b128      	cbz	r0, 800502c <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8005020:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005024:	2142      	movs	r1, #66	; 0x42
 8005026:	4804      	ldr	r0, [pc, #16]	; (8005038 <MX_USART1_UART_Init+0x3c>)
 8005028:	f7ff bbca 	b.w	80047c0 <_Error_Handler>
 800502c:	bd08      	pop	{r3, pc}
 800502e:	bf00      	nop
 8005030:	200009bc 	.word	0x200009bc
 8005034:	40013800 	.word	0x40013800
 8005038:	080087a9 	.word	0x080087a9

0800503c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800503c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 800503e:	6802      	ldr	r2, [r0, #0]
 8005040:	4b13      	ldr	r3, [pc, #76]	; (8005090 <HAL_UART_MspInit+0x54>)
 8005042:	429a      	cmp	r2, r3
 8005044:	d120      	bne.n	8005088 <HAL_UART_MspInit+0x4c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005046:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800504a:	6a1a      	ldr	r2, [r3, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800504c:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800504e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005052:	621a      	str	r2, [r3, #32]
 8005054:	6a1b      	ldr	r3, [r3, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005056:	480f      	ldr	r0, [pc, #60]	; (8005094 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005060:	23c0      	movs	r3, #192	; 0xc0
 8005062:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005064:	2302      	movs	r3, #2
 8005066:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005068:	2301      	movs	r3, #1
 800506a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800506c:	2303      	movs	r3, #3
 800506e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005070:	2307      	movs	r3, #7
 8005072:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005074:	f7fc f946 	bl	8001304 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005078:	2200      	movs	r2, #0
 800507a:	2025      	movs	r0, #37	; 0x25
 800507c:	4611      	mov	r1, r2
 800507e:	f7fc f8d9 	bl	8001234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005082:	2025      	movs	r0, #37	; 0x25
 8005084:	f7fc f90a 	bl	800129c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005088:	b007      	add	sp, #28
 800508a:	f85d fb04 	ldr.w	pc, [sp], #4
 800508e:	bf00      	nop
 8005090:	40013800 	.word	0x40013800
 8005094:	40020400 	.word	0x40020400

08005098 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005098:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800509a:	e003      	b.n	80050a4 <LoopCopyDataInit>

0800509c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800509c:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800509e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80050a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80050a2:	3104      	adds	r1, #4

080050a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80050a4:	480a      	ldr	r0, [pc, #40]	; (80050d0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80050a6:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80050a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80050aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80050ac:	d3f6      	bcc.n	800509c <CopyDataInit>
  ldr r2, =_sbss
 80050ae:	4a0a      	ldr	r2, [pc, #40]	; (80050d8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80050b0:	e002      	b.n	80050b8 <LoopFillZerobss>

080050b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80050b2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80050b4:	f842 3b04 	str.w	r3, [r2], #4

080050b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80050b8:	4b08      	ldr	r3, [pc, #32]	; (80050dc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80050ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 80050bc:	d3f9      	bcc.n	80050b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80050be:	f7ff fccd 	bl	8004a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050c2:	f000 f839 	bl	8005138 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80050c6:	f7ff fb4b 	bl	8004760 <main>
  bx lr
 80050ca:	4770      	bx	lr
  ldr r3, =_sidata
 80050cc:	08008a68 	.word	0x08008a68
  ldr r0, =_sdata
 80050d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80050d4:	200001d8 	.word	0x200001d8
  ldr r2, =_sbss
 80050d8:	200001d8 	.word	0x200001d8
  ldr r3, = _ebss
 80050dc:	20000a00 	.word	0x20000a00

080050e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80050e0:	e7fe      	b.n	80050e0 <ADC1_IRQHandler>

080050e2 <atof>:
 80050e2:	2100      	movs	r1, #0
 80050e4:	f000 beac 	b.w	8005e40 <strtod>

080050e8 <atoi>:
 80050e8:	220a      	movs	r2, #10
 80050ea:	2100      	movs	r1, #0
 80050ec:	f000 bf8e 	b.w	800600c <strtol>

080050f0 <gcvt>:
 80050f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050f2:	461c      	mov	r4, r3
 80050f4:	b085      	sub	sp, #20
 80050f6:	2300      	movs	r3, #0
 80050f8:	4615      	mov	r5, r2
 80050fa:	2200      	movs	r2, #0
 80050fc:	4606      	mov	r6, r0
 80050fe:	460f      	mov	r7, r1
 8005100:	f7fb fc70 	bl	80009e4 <__aeabi_dcmplt>
 8005104:	4623      	mov	r3, r4
 8005106:	b118      	cbz	r0, 8005110 <gcvt+0x20>
 8005108:	222d      	movs	r2, #45	; 0x2d
 800510a:	3d01      	subs	r5, #1
 800510c:	f803 2b01 	strb.w	r2, [r3], #1
 8005110:	2200      	movs	r2, #0
 8005112:	9203      	str	r2, [sp, #12]
 8005114:	2267      	movs	r2, #103	; 0x67
 8005116:	4907      	ldr	r1, [pc, #28]	; (8005134 <gcvt+0x44>)
 8005118:	9202      	str	r2, [sp, #8]
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	9500      	str	r5, [sp, #0]
 800511e:	4632      	mov	r2, r6
 8005120:	463b      	mov	r3, r7
 8005122:	6808      	ldr	r0, [r1, #0]
 8005124:	f001 f800 	bl	8006128 <_gcvt>
 8005128:	2800      	cmp	r0, #0
 800512a:	bf14      	ite	ne
 800512c:	4620      	movne	r0, r4
 800512e:	2000      	moveq	r0, #0
 8005130:	b005      	add	sp, #20
 8005132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005134:	20000008 	.word	0x20000008

08005138 <__libc_init_array>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	2500      	movs	r5, #0
 800513c:	4e0c      	ldr	r6, [pc, #48]	; (8005170 <__libc_init_array+0x38>)
 800513e:	4c0d      	ldr	r4, [pc, #52]	; (8005174 <__libc_init_array+0x3c>)
 8005140:	1ba4      	subs	r4, r4, r6
 8005142:	10a4      	asrs	r4, r4, #2
 8005144:	42a5      	cmp	r5, r4
 8005146:	d109      	bne.n	800515c <__libc_init_array+0x24>
 8005148:	f003 fa8c 	bl	8008664 <_init>
 800514c:	2500      	movs	r5, #0
 800514e:	4e0a      	ldr	r6, [pc, #40]	; (8005178 <__libc_init_array+0x40>)
 8005150:	4c0a      	ldr	r4, [pc, #40]	; (800517c <__libc_init_array+0x44>)
 8005152:	1ba4      	subs	r4, r4, r6
 8005154:	10a4      	asrs	r4, r4, #2
 8005156:	42a5      	cmp	r5, r4
 8005158:	d105      	bne.n	8005166 <__libc_init_array+0x2e>
 800515a:	bd70      	pop	{r4, r5, r6, pc}
 800515c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005160:	4798      	blx	r3
 8005162:	3501      	adds	r5, #1
 8005164:	e7ee      	b.n	8005144 <__libc_init_array+0xc>
 8005166:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800516a:	4798      	blx	r3
 800516c:	3501      	adds	r5, #1
 800516e:	e7f2      	b.n	8005156 <__libc_init_array+0x1e>
 8005170:	08008a60 	.word	0x08008a60
 8005174:	08008a60 	.word	0x08008a60
 8005178:	08008a60 	.word	0x08008a60
 800517c:	08008a64 	.word	0x08008a64

08005180 <memset>:
 8005180:	4603      	mov	r3, r0
 8005182:	4402      	add	r2, r0
 8005184:	4293      	cmp	r3, r2
 8005186:	d100      	bne.n	800518a <memset+0xa>
 8005188:	4770      	bx	lr
 800518a:	f803 1b01 	strb.w	r1, [r3], #1
 800518e:	e7f9      	b.n	8005184 <memset+0x4>

08005190 <siprintf>:
 8005190:	b40e      	push	{r1, r2, r3}
 8005192:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005196:	b500      	push	{lr}
 8005198:	b09c      	sub	sp, #112	; 0x70
 800519a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800519e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051a2:	9104      	str	r1, [sp, #16]
 80051a4:	9107      	str	r1, [sp, #28]
 80051a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80051aa:	ab1d      	add	r3, sp, #116	; 0x74
 80051ac:	9002      	str	r0, [sp, #8]
 80051ae:	9006      	str	r0, [sp, #24]
 80051b0:	4808      	ldr	r0, [pc, #32]	; (80051d4 <siprintf+0x44>)
 80051b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80051b6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80051ba:	6800      	ldr	r0, [r0, #0]
 80051bc:	a902      	add	r1, sp, #8
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	f002 f904 	bl	80073cc <_svfiprintf_r>
 80051c4:	2200      	movs	r2, #0
 80051c6:	9b02      	ldr	r3, [sp, #8]
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	b01c      	add	sp, #112	; 0x70
 80051cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80051d0:	b003      	add	sp, #12
 80051d2:	4770      	bx	lr
 80051d4:	20000008 	.word	0x20000008

080051d8 <strcpy>:
 80051d8:	4603      	mov	r3, r0
 80051da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051de:	f803 2b01 	strb.w	r2, [r3], #1
 80051e2:	2a00      	cmp	r2, #0
 80051e4:	d1f9      	bne.n	80051da <strcpy+0x2>
 80051e6:	4770      	bx	lr

080051e8 <strncmp>:
 80051e8:	b510      	push	{r4, lr}
 80051ea:	b16a      	cbz	r2, 8005208 <strncmp+0x20>
 80051ec:	3901      	subs	r1, #1
 80051ee:	1884      	adds	r4, r0, r2
 80051f0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80051f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d103      	bne.n	8005204 <strncmp+0x1c>
 80051fc:	42a0      	cmp	r0, r4
 80051fe:	d001      	beq.n	8005204 <strncmp+0x1c>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1f5      	bne.n	80051f0 <strncmp+0x8>
 8005204:	1a98      	subs	r0, r3, r2
 8005206:	bd10      	pop	{r4, pc}
 8005208:	4610      	mov	r0, r2
 800520a:	bd10      	pop	{r4, pc}

0800520c <sulp>:
 800520c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005210:	460f      	mov	r7, r1
 8005212:	4690      	mov	r8, r2
 8005214:	f001 fe5a 	bl	8006ecc <__ulp>
 8005218:	4604      	mov	r4, r0
 800521a:	460d      	mov	r5, r1
 800521c:	f1b8 0f00 	cmp.w	r8, #0
 8005220:	d011      	beq.n	8005246 <sulp+0x3a>
 8005222:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005226:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800522a:	2b00      	cmp	r3, #0
 800522c:	dd0b      	ble.n	8005246 <sulp+0x3a>
 800522e:	2400      	movs	r4, #0
 8005230:	051b      	lsls	r3, r3, #20
 8005232:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005236:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800523a:	4622      	mov	r2, r4
 800523c:	462b      	mov	r3, r5
 800523e:	f7fb f95f 	bl	8000500 <__aeabi_dmul>
 8005242:	4604      	mov	r4, r0
 8005244:	460d      	mov	r5, r1
 8005246:	4620      	mov	r0, r4
 8005248:	4629      	mov	r1, r5
 800524a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005250 <_strtod_l>:
 8005250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005254:	4699      	mov	r9, r3
 8005256:	2300      	movs	r3, #0
 8005258:	b09f      	sub	sp, #124	; 0x7c
 800525a:	4680      	mov	r8, r0
 800525c:	4648      	mov	r0, r9
 800525e:	460c      	mov	r4, r1
 8005260:	9215      	str	r2, [sp, #84]	; 0x54
 8005262:	931a      	str	r3, [sp, #104]	; 0x68
 8005264:	f001 fb4b 	bl	80068fe <__localeconv_l>
 8005268:	4607      	mov	r7, r0
 800526a:	6800      	ldr	r0, [r0, #0]
 800526c:	f7fa ff88 	bl	8000180 <strlen>
 8005270:	f04f 0a00 	mov.w	sl, #0
 8005274:	4605      	mov	r5, r0
 8005276:	f04f 0b00 	mov.w	fp, #0
 800527a:	9419      	str	r4, [sp, #100]	; 0x64
 800527c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800527e:	781a      	ldrb	r2, [r3, #0]
 8005280:	2a0d      	cmp	r2, #13
 8005282:	d833      	bhi.n	80052ec <_strtod_l+0x9c>
 8005284:	2a09      	cmp	r2, #9
 8005286:	d237      	bcs.n	80052f8 <_strtod_l+0xa8>
 8005288:	2a00      	cmp	r2, #0
 800528a:	d03f      	beq.n	800530c <_strtod_l+0xbc>
 800528c:	2300      	movs	r3, #0
 800528e:	9309      	str	r3, [sp, #36]	; 0x24
 8005290:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005292:	7833      	ldrb	r3, [r6, #0]
 8005294:	2b30      	cmp	r3, #48	; 0x30
 8005296:	f040 8101 	bne.w	800549c <_strtod_l+0x24c>
 800529a:	7873      	ldrb	r3, [r6, #1]
 800529c:	2b58      	cmp	r3, #88	; 0x58
 800529e:	d001      	beq.n	80052a4 <_strtod_l+0x54>
 80052a0:	2b78      	cmp	r3, #120	; 0x78
 80052a2:	d16b      	bne.n	800537c <_strtod_l+0x12c>
 80052a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80052aa:	9301      	str	r3, [sp, #4]
 80052ac:	ab1a      	add	r3, sp, #104	; 0x68
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	4aaa      	ldr	r2, [pc, #680]	; (800555c <_strtod_l+0x30c>)
 80052b2:	ab1b      	add	r3, sp, #108	; 0x6c
 80052b4:	a919      	add	r1, sp, #100	; 0x64
 80052b6:	4640      	mov	r0, r8
 80052b8:	f001 f84a 	bl	8006350 <__gethex>
 80052bc:	f010 0407 	ands.w	r4, r0, #7
 80052c0:	4605      	mov	r5, r0
 80052c2:	d005      	beq.n	80052d0 <_strtod_l+0x80>
 80052c4:	2c06      	cmp	r4, #6
 80052c6:	d12b      	bne.n	8005320 <_strtod_l+0xd0>
 80052c8:	2300      	movs	r3, #0
 80052ca:	3601      	adds	r6, #1
 80052cc:	9619      	str	r6, [sp, #100]	; 0x64
 80052ce:	9309      	str	r3, [sp, #36]	; 0x24
 80052d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f040 859d 	bne.w	8005e12 <_strtod_l+0xbc2>
 80052d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052da:	b1e3      	cbz	r3, 8005316 <_strtod_l+0xc6>
 80052dc:	4652      	mov	r2, sl
 80052de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80052e2:	4610      	mov	r0, r2
 80052e4:	4619      	mov	r1, r3
 80052e6:	b01f      	add	sp, #124	; 0x7c
 80052e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ec:	2a2b      	cmp	r2, #43	; 0x2b
 80052ee:	d006      	beq.n	80052fe <_strtod_l+0xae>
 80052f0:	2a2d      	cmp	r2, #45	; 0x2d
 80052f2:	d013      	beq.n	800531c <_strtod_l+0xcc>
 80052f4:	2a20      	cmp	r2, #32
 80052f6:	d1c9      	bne.n	800528c <_strtod_l+0x3c>
 80052f8:	3301      	adds	r3, #1
 80052fa:	9319      	str	r3, [sp, #100]	; 0x64
 80052fc:	e7be      	b.n	800527c <_strtod_l+0x2c>
 80052fe:	2200      	movs	r2, #0
 8005300:	9209      	str	r2, [sp, #36]	; 0x24
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	9219      	str	r2, [sp, #100]	; 0x64
 8005306:	785b      	ldrb	r3, [r3, #1]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1c1      	bne.n	8005290 <_strtod_l+0x40>
 800530c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800530e:	9419      	str	r4, [sp, #100]	; 0x64
 8005310:	2b00      	cmp	r3, #0
 8005312:	f040 857c 	bne.w	8005e0e <_strtod_l+0xbbe>
 8005316:	4652      	mov	r2, sl
 8005318:	465b      	mov	r3, fp
 800531a:	e7e2      	b.n	80052e2 <_strtod_l+0x92>
 800531c:	2201      	movs	r2, #1
 800531e:	e7ef      	b.n	8005300 <_strtod_l+0xb0>
 8005320:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005322:	b13a      	cbz	r2, 8005334 <_strtod_l+0xe4>
 8005324:	2135      	movs	r1, #53	; 0x35
 8005326:	a81c      	add	r0, sp, #112	; 0x70
 8005328:	f001 feda 	bl	80070e0 <__copybits>
 800532c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800532e:	4640      	mov	r0, r8
 8005330:	f001 fb41 	bl	80069b6 <_Bfree>
 8005334:	3c01      	subs	r4, #1
 8005336:	2c04      	cmp	r4, #4
 8005338:	d808      	bhi.n	800534c <_strtod_l+0xfc>
 800533a:	e8df f004 	tbb	[pc, r4]
 800533e:	030c      	.short	0x030c
 8005340:	1a17      	.short	0x1a17
 8005342:	0c          	.byte	0x0c
 8005343:	00          	.byte	0x00
 8005344:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8005348:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800534c:	0729      	lsls	r1, r5, #28
 800534e:	d5bf      	bpl.n	80052d0 <_strtod_l+0x80>
 8005350:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005354:	e7bc      	b.n	80052d0 <_strtod_l+0x80>
 8005356:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005358:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800535a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800535e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005362:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8005366:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800536a:	e7ef      	b.n	800534c <_strtod_l+0xfc>
 800536c:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8005568 <_strtod_l+0x318>
 8005370:	e7ec      	b.n	800534c <_strtod_l+0xfc>
 8005372:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005376:	f04f 3aff 	mov.w	sl, #4294967295
 800537a:	e7e7      	b.n	800534c <_strtod_l+0xfc>
 800537c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	9219      	str	r2, [sp, #100]	; 0x64
 8005382:	785b      	ldrb	r3, [r3, #1]
 8005384:	2b30      	cmp	r3, #48	; 0x30
 8005386:	d0f9      	beq.n	800537c <_strtod_l+0x12c>
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0a1      	beq.n	80052d0 <_strtod_l+0x80>
 800538c:	2301      	movs	r3, #1
 800538e:	9308      	str	r3, [sp, #32]
 8005390:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005392:	220a      	movs	r2, #10
 8005394:	930a      	str	r3, [sp, #40]	; 0x28
 8005396:	2300      	movs	r3, #0
 8005398:	9305      	str	r3, [sp, #20]
 800539a:	9306      	str	r3, [sp, #24]
 800539c:	9304      	str	r3, [sp, #16]
 800539e:	9819      	ldr	r0, [sp, #100]	; 0x64
 80053a0:	7806      	ldrb	r6, [r0, #0]
 80053a2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80053a6:	b2d9      	uxtb	r1, r3
 80053a8:	2909      	cmp	r1, #9
 80053aa:	d979      	bls.n	80054a0 <_strtod_l+0x250>
 80053ac:	462a      	mov	r2, r5
 80053ae:	6839      	ldr	r1, [r7, #0]
 80053b0:	f7ff ff1a 	bl	80051e8 <strncmp>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	f000 8085 	beq.w	80054c4 <_strtod_l+0x274>
 80053ba:	2000      	movs	r0, #0
 80053bc:	4633      	mov	r3, r6
 80053be:	4602      	mov	r2, r0
 80053c0:	4601      	mov	r1, r0
 80053c2:	9d04      	ldr	r5, [sp, #16]
 80053c4:	2b65      	cmp	r3, #101	; 0x65
 80053c6:	d002      	beq.n	80053ce <_strtod_l+0x17e>
 80053c8:	2b45      	cmp	r3, #69	; 0x45
 80053ca:	f040 80ef 	bne.w	80055ac <_strtod_l+0x35c>
 80053ce:	b925      	cbnz	r5, 80053da <_strtod_l+0x18a>
 80053d0:	b910      	cbnz	r0, 80053d8 <_strtod_l+0x188>
 80053d2:	9b08      	ldr	r3, [sp, #32]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d099      	beq.n	800530c <_strtod_l+0xbc>
 80053d8:	2500      	movs	r5, #0
 80053da:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80053dc:	1c63      	adds	r3, r4, #1
 80053de:	9319      	str	r3, [sp, #100]	; 0x64
 80053e0:	7863      	ldrb	r3, [r4, #1]
 80053e2:	2b2b      	cmp	r3, #43	; 0x2b
 80053e4:	f000 80cf 	beq.w	8005586 <_strtod_l+0x336>
 80053e8:	2b2d      	cmp	r3, #45	; 0x2d
 80053ea:	f000 80d2 	beq.w	8005592 <_strtod_l+0x342>
 80053ee:	2600      	movs	r6, #0
 80053f0:	9607      	str	r6, [sp, #28]
 80053f2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80053f6:	2e09      	cmp	r6, #9
 80053f8:	f200 80d7 	bhi.w	80055aa <_strtod_l+0x35a>
 80053fc:	2b30      	cmp	r3, #48	; 0x30
 80053fe:	f000 80ca 	beq.w	8005596 <_strtod_l+0x346>
 8005402:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 8005406:	2e08      	cmp	r6, #8
 8005408:	f200 80d0 	bhi.w	80055ac <_strtod_l+0x35c>
 800540c:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005410:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005412:	f04f 0c0a 	mov.w	ip, #10
 8005416:	461f      	mov	r7, r3
 8005418:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800541a:	1c5e      	adds	r6, r3, #1
 800541c:	9619      	str	r6, [sp, #100]	; 0x64
 800541e:	785b      	ldrb	r3, [r3, #1]
 8005420:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 8005424:	f1b9 0f09 	cmp.w	r9, #9
 8005428:	f240 80ba 	bls.w	80055a0 <_strtod_l+0x350>
 800542c:	1bf6      	subs	r6, r6, r7
 800542e:	2e08      	cmp	r6, #8
 8005430:	f644 691f 	movw	r9, #19999	; 0x4e1f
 8005434:	dc02      	bgt.n	800543c <_strtod_l+0x1ec>
 8005436:	45f1      	cmp	r9, lr
 8005438:	bfa8      	it	ge
 800543a:	46f1      	movge	r9, lr
 800543c:	9e07      	ldr	r6, [sp, #28]
 800543e:	b10e      	cbz	r6, 8005444 <_strtod_l+0x1f4>
 8005440:	f1c9 0900 	rsb	r9, r9, #0
 8005444:	2d00      	cmp	r5, #0
 8005446:	f040 80d7 	bne.w	80055f8 <_strtod_l+0x3a8>
 800544a:	2800      	cmp	r0, #0
 800544c:	f47f af40 	bne.w	80052d0 <_strtod_l+0x80>
 8005450:	9a08      	ldr	r2, [sp, #32]
 8005452:	2a00      	cmp	r2, #0
 8005454:	f47f af3c 	bne.w	80052d0 <_strtod_l+0x80>
 8005458:	2900      	cmp	r1, #0
 800545a:	f47f af57 	bne.w	800530c <_strtod_l+0xbc>
 800545e:	2b4e      	cmp	r3, #78	; 0x4e
 8005460:	f000 80ad 	beq.w	80055be <_strtod_l+0x36e>
 8005464:	f300 80a5 	bgt.w	80055b2 <_strtod_l+0x362>
 8005468:	2b49      	cmp	r3, #73	; 0x49
 800546a:	f47f af4f 	bne.w	800530c <_strtod_l+0xbc>
 800546e:	493c      	ldr	r1, [pc, #240]	; (8005560 <_strtod_l+0x310>)
 8005470:	a819      	add	r0, sp, #100	; 0x64
 8005472:	f001 f99e 	bl	80067b2 <__match>
 8005476:	2800      	cmp	r0, #0
 8005478:	f43f af48 	beq.w	800530c <_strtod_l+0xbc>
 800547c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800547e:	4939      	ldr	r1, [pc, #228]	; (8005564 <_strtod_l+0x314>)
 8005480:	3b01      	subs	r3, #1
 8005482:	a819      	add	r0, sp, #100	; 0x64
 8005484:	9319      	str	r3, [sp, #100]	; 0x64
 8005486:	f001 f994 	bl	80067b2 <__match>
 800548a:	b910      	cbnz	r0, 8005492 <_strtod_l+0x242>
 800548c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800548e:	3301      	adds	r3, #1
 8005490:	9319      	str	r3, [sp, #100]	; 0x64
 8005492:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8005568 <_strtod_l+0x318>
 8005496:	f04f 0a00 	mov.w	sl, #0
 800549a:	e719      	b.n	80052d0 <_strtod_l+0x80>
 800549c:	2300      	movs	r3, #0
 800549e:	e776      	b.n	800538e <_strtod_l+0x13e>
 80054a0:	9904      	ldr	r1, [sp, #16]
 80054a2:	3001      	adds	r0, #1
 80054a4:	2908      	cmp	r1, #8
 80054a6:	bfd5      	itete	le
 80054a8:	9906      	ldrle	r1, [sp, #24]
 80054aa:	9905      	ldrgt	r1, [sp, #20]
 80054ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80054b0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80054b4:	bfd4      	ite	le
 80054b6:	9306      	strle	r3, [sp, #24]
 80054b8:	9305      	strgt	r3, [sp, #20]
 80054ba:	9b04      	ldr	r3, [sp, #16]
 80054bc:	9019      	str	r0, [sp, #100]	; 0x64
 80054be:	3301      	adds	r3, #1
 80054c0:	9304      	str	r3, [sp, #16]
 80054c2:	e76c      	b.n	800539e <_strtod_l+0x14e>
 80054c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80054c6:	195a      	adds	r2, r3, r5
 80054c8:	9219      	str	r2, [sp, #100]	; 0x64
 80054ca:	9a04      	ldr	r2, [sp, #16]
 80054cc:	5d5b      	ldrb	r3, [r3, r5]
 80054ce:	2a00      	cmp	r2, #0
 80054d0:	d154      	bne.n	800557c <_strtod_l+0x32c>
 80054d2:	4610      	mov	r0, r2
 80054d4:	2b30      	cmp	r3, #48	; 0x30
 80054d6:	d02a      	beq.n	800552e <_strtod_l+0x2de>
 80054d8:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80054dc:	2a08      	cmp	r2, #8
 80054de:	f200 849d 	bhi.w	8005e1c <_strtod_l+0xbcc>
 80054e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80054e4:	920a      	str	r2, [sp, #40]	; 0x28
 80054e6:	4602      	mov	r2, r0
 80054e8:	2000      	movs	r0, #0
 80054ea:	4605      	mov	r5, r0
 80054ec:	3b30      	subs	r3, #48	; 0x30
 80054ee:	f100 0101 	add.w	r1, r0, #1
 80054f2:	d011      	beq.n	8005518 <_strtod_l+0x2c8>
 80054f4:	440a      	add	r2, r1
 80054f6:	260a      	movs	r6, #10
 80054f8:	4629      	mov	r1, r5
 80054fa:	eb00 0c05 	add.w	ip, r0, r5
 80054fe:	4561      	cmp	r1, ip
 8005500:	d11b      	bne.n	800553a <_strtod_l+0x2ea>
 8005502:	4428      	add	r0, r5
 8005504:	2808      	cmp	r0, #8
 8005506:	f100 0501 	add.w	r5, r0, #1
 800550a:	dc2f      	bgt.n	800556c <_strtod_l+0x31c>
 800550c:	210a      	movs	r1, #10
 800550e:	9806      	ldr	r0, [sp, #24]
 8005510:	fb01 3300 	mla	r3, r1, r0, r3
 8005514:	9306      	str	r3, [sp, #24]
 8005516:	2100      	movs	r1, #0
 8005518:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800551a:	1c58      	adds	r0, r3, #1
 800551c:	9019      	str	r0, [sp, #100]	; 0x64
 800551e:	4608      	mov	r0, r1
 8005520:	785b      	ldrb	r3, [r3, #1]
 8005522:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005526:	2909      	cmp	r1, #9
 8005528:	d9e0      	bls.n	80054ec <_strtod_l+0x29c>
 800552a:	2101      	movs	r1, #1
 800552c:	e74a      	b.n	80053c4 <_strtod_l+0x174>
 800552e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005530:	3001      	adds	r0, #1
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	9219      	str	r2, [sp, #100]	; 0x64
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	e7cc      	b.n	80054d4 <_strtod_l+0x284>
 800553a:	3101      	adds	r1, #1
 800553c:	f101 3eff 	add.w	lr, r1, #4294967295
 8005540:	f1be 0f08 	cmp.w	lr, #8
 8005544:	dc03      	bgt.n	800554e <_strtod_l+0x2fe>
 8005546:	9f06      	ldr	r7, [sp, #24]
 8005548:	4377      	muls	r7, r6
 800554a:	9706      	str	r7, [sp, #24]
 800554c:	e7d7      	b.n	80054fe <_strtod_l+0x2ae>
 800554e:	2910      	cmp	r1, #16
 8005550:	bfde      	ittt	le
 8005552:	9f05      	ldrle	r7, [sp, #20]
 8005554:	4377      	mulle	r7, r6
 8005556:	9705      	strle	r7, [sp, #20]
 8005558:	e7d1      	b.n	80054fe <_strtod_l+0x2ae>
 800555a:	bf00      	nop
 800555c:	080087c0 	.word	0x080087c0
 8005560:	080087b8 	.word	0x080087b8
 8005564:	08008a53 	.word	0x08008a53
 8005568:	7ff00000 	.word	0x7ff00000
 800556c:	2d10      	cmp	r5, #16
 800556e:	bfdf      	itttt	le
 8005570:	210a      	movle	r1, #10
 8005572:	9805      	ldrle	r0, [sp, #20]
 8005574:	fb01 3300 	mlale	r3, r1, r0, r3
 8005578:	9305      	strle	r3, [sp, #20]
 800557a:	e7cc      	b.n	8005516 <_strtod_l+0x2c6>
 800557c:	4602      	mov	r2, r0
 800557e:	9d04      	ldr	r5, [sp, #16]
 8005580:	e7cf      	b.n	8005522 <_strtod_l+0x2d2>
 8005582:	2101      	movs	r1, #1
 8005584:	e724      	b.n	80053d0 <_strtod_l+0x180>
 8005586:	2300      	movs	r3, #0
 8005588:	9307      	str	r3, [sp, #28]
 800558a:	1ca3      	adds	r3, r4, #2
 800558c:	9319      	str	r3, [sp, #100]	; 0x64
 800558e:	78a3      	ldrb	r3, [r4, #2]
 8005590:	e72f      	b.n	80053f2 <_strtod_l+0x1a2>
 8005592:	2301      	movs	r3, #1
 8005594:	e7f8      	b.n	8005588 <_strtod_l+0x338>
 8005596:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005598:	1c5e      	adds	r6, r3, #1
 800559a:	9619      	str	r6, [sp, #100]	; 0x64
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	e72d      	b.n	80053fc <_strtod_l+0x1ac>
 80055a0:	fb0c 3e0e 	mla	lr, ip, lr, r3
 80055a4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80055a8:	e736      	b.n	8005418 <_strtod_l+0x1c8>
 80055aa:	9419      	str	r4, [sp, #100]	; 0x64
 80055ac:	f04f 0900 	mov.w	r9, #0
 80055b0:	e748      	b.n	8005444 <_strtod_l+0x1f4>
 80055b2:	2b69      	cmp	r3, #105	; 0x69
 80055b4:	f43f af5b 	beq.w	800546e <_strtod_l+0x21e>
 80055b8:	2b6e      	cmp	r3, #110	; 0x6e
 80055ba:	f47f aea7 	bne.w	800530c <_strtod_l+0xbc>
 80055be:	498c      	ldr	r1, [pc, #560]	; (80057f0 <_strtod_l+0x5a0>)
 80055c0:	a819      	add	r0, sp, #100	; 0x64
 80055c2:	f001 f8f6 	bl	80067b2 <__match>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	f43f aea0 	beq.w	800530c <_strtod_l+0xbc>
 80055cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b28      	cmp	r3, #40	; 0x28
 80055d2:	d10e      	bne.n	80055f2 <_strtod_l+0x3a2>
 80055d4:	aa1c      	add	r2, sp, #112	; 0x70
 80055d6:	4987      	ldr	r1, [pc, #540]	; (80057f4 <_strtod_l+0x5a4>)
 80055d8:	a819      	add	r0, sp, #100	; 0x64
 80055da:	f001 f8fd 	bl	80067d8 <__hexnan>
 80055de:	2805      	cmp	r0, #5
 80055e0:	d107      	bne.n	80055f2 <_strtod_l+0x3a2>
 80055e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80055e4:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80055e8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80055ec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80055f0:	e66e      	b.n	80052d0 <_strtod_l+0x80>
 80055f2:	f8df b210 	ldr.w	fp, [pc, #528]	; 8005804 <_strtod_l+0x5b4>
 80055f6:	e74e      	b.n	8005496 <_strtod_l+0x246>
 80055f8:	9b04      	ldr	r3, [sp, #16]
 80055fa:	462c      	mov	r4, r5
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	bf08      	it	eq
 8005600:	462b      	moveq	r3, r5
 8005602:	2d10      	cmp	r5, #16
 8005604:	bfa8      	it	ge
 8005606:	2410      	movge	r4, #16
 8005608:	9806      	ldr	r0, [sp, #24]
 800560a:	eba9 0902 	sub.w	r9, r9, r2
 800560e:	9304      	str	r3, [sp, #16]
 8005610:	f7fa ff00 	bl	8000414 <__aeabi_ui2d>
 8005614:	2c09      	cmp	r4, #9
 8005616:	4682      	mov	sl, r0
 8005618:	468b      	mov	fp, r1
 800561a:	dd13      	ble.n	8005644 <_strtod_l+0x3f4>
 800561c:	4b76      	ldr	r3, [pc, #472]	; (80057f8 <_strtod_l+0x5a8>)
 800561e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005622:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005626:	f7fa ff6b 	bl	8000500 <__aeabi_dmul>
 800562a:	4606      	mov	r6, r0
 800562c:	9805      	ldr	r0, [sp, #20]
 800562e:	460f      	mov	r7, r1
 8005630:	f7fa fef0 	bl	8000414 <__aeabi_ui2d>
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4630      	mov	r0, r6
 800563a:	4639      	mov	r1, r7
 800563c:	f7fa fdae 	bl	800019c <__adddf3>
 8005640:	4682      	mov	sl, r0
 8005642:	468b      	mov	fp, r1
 8005644:	2d0f      	cmp	r5, #15
 8005646:	dc36      	bgt.n	80056b6 <_strtod_l+0x466>
 8005648:	f1b9 0f00 	cmp.w	r9, #0
 800564c:	f43f ae40 	beq.w	80052d0 <_strtod_l+0x80>
 8005650:	dd24      	ble.n	800569c <_strtod_l+0x44c>
 8005652:	f1b9 0f16 	cmp.w	r9, #22
 8005656:	dc0b      	bgt.n	8005670 <_strtod_l+0x420>
 8005658:	4652      	mov	r2, sl
 800565a:	465b      	mov	r3, fp
 800565c:	4d66      	ldr	r5, [pc, #408]	; (80057f8 <_strtod_l+0x5a8>)
 800565e:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 8005662:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005666:	f7fa ff4b 	bl	8000500 <__aeabi_dmul>
 800566a:	4682      	mov	sl, r0
 800566c:	468b      	mov	fp, r1
 800566e:	e62f      	b.n	80052d0 <_strtod_l+0x80>
 8005670:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005674:	4599      	cmp	r9, r3
 8005676:	dc1e      	bgt.n	80056b6 <_strtod_l+0x466>
 8005678:	4c5f      	ldr	r4, [pc, #380]	; (80057f8 <_strtod_l+0x5a8>)
 800567a:	f1c5 050f 	rsb	r5, r5, #15
 800567e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005682:	eba9 0505 	sub.w	r5, r9, r5
 8005686:	4652      	mov	r2, sl
 8005688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800568c:	465b      	mov	r3, fp
 800568e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005692:	f7fa ff35 	bl	8000500 <__aeabi_dmul>
 8005696:	e9d4 2300 	ldrd	r2, r3, [r4]
 800569a:	e7e4      	b.n	8005666 <_strtod_l+0x416>
 800569c:	f119 0f16 	cmn.w	r9, #22
 80056a0:	db09      	blt.n	80056b6 <_strtod_l+0x466>
 80056a2:	4d55      	ldr	r5, [pc, #340]	; (80057f8 <_strtod_l+0x5a8>)
 80056a4:	4650      	mov	r0, sl
 80056a6:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 80056aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80056ae:	4659      	mov	r1, fp
 80056b0:	f7fb f850 	bl	8000754 <__aeabi_ddiv>
 80056b4:	e7d9      	b.n	800566a <_strtod_l+0x41a>
 80056b6:	1b2c      	subs	r4, r5, r4
 80056b8:	444c      	add	r4, r9
 80056ba:	2c00      	cmp	r4, #0
 80056bc:	dd73      	ble.n	80057a6 <_strtod_l+0x556>
 80056be:	f014 030f 	ands.w	r3, r4, #15
 80056c2:	d00a      	beq.n	80056da <_strtod_l+0x48a>
 80056c4:	494c      	ldr	r1, [pc, #304]	; (80057f8 <_strtod_l+0x5a8>)
 80056c6:	4652      	mov	r2, sl
 80056c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80056cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056d0:	465b      	mov	r3, fp
 80056d2:	f7fa ff15 	bl	8000500 <__aeabi_dmul>
 80056d6:	4682      	mov	sl, r0
 80056d8:	468b      	mov	fp, r1
 80056da:	f034 040f 	bics.w	r4, r4, #15
 80056de:	d054      	beq.n	800578a <_strtod_l+0x53a>
 80056e0:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80056e4:	dd27      	ble.n	8005736 <_strtod_l+0x4e6>
 80056e6:	f04f 0900 	mov.w	r9, #0
 80056ea:	f8cd 9010 	str.w	r9, [sp, #16]
 80056ee:	f8cd 901c 	str.w	r9, [sp, #28]
 80056f2:	f8cd 9018 	str.w	r9, [sp, #24]
 80056f6:	2322      	movs	r3, #34	; 0x22
 80056f8:	f04f 0a00 	mov.w	sl, #0
 80056fc:	f8df b108 	ldr.w	fp, [pc, #264]	; 8005808 <_strtod_l+0x5b8>
 8005700:	f8c8 3000 	str.w	r3, [r8]
 8005704:	9b07      	ldr	r3, [sp, #28]
 8005706:	2b00      	cmp	r3, #0
 8005708:	f43f ade2 	beq.w	80052d0 <_strtod_l+0x80>
 800570c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800570e:	4640      	mov	r0, r8
 8005710:	f001 f951 	bl	80069b6 <_Bfree>
 8005714:	9906      	ldr	r1, [sp, #24]
 8005716:	4640      	mov	r0, r8
 8005718:	f001 f94d 	bl	80069b6 <_Bfree>
 800571c:	9904      	ldr	r1, [sp, #16]
 800571e:	4640      	mov	r0, r8
 8005720:	f001 f949 	bl	80069b6 <_Bfree>
 8005724:	9907      	ldr	r1, [sp, #28]
 8005726:	4640      	mov	r0, r8
 8005728:	f001 f945 	bl	80069b6 <_Bfree>
 800572c:	4649      	mov	r1, r9
 800572e:	4640      	mov	r0, r8
 8005730:	f001 f941 	bl	80069b6 <_Bfree>
 8005734:	e5cc      	b.n	80052d0 <_strtod_l+0x80>
 8005736:	2300      	movs	r3, #0
 8005738:	4650      	mov	r0, sl
 800573a:	4659      	mov	r1, fp
 800573c:	461f      	mov	r7, r3
 800573e:	4e2f      	ldr	r6, [pc, #188]	; (80057fc <_strtod_l+0x5ac>)
 8005740:	1124      	asrs	r4, r4, #4
 8005742:	2c01      	cmp	r4, #1
 8005744:	dc24      	bgt.n	8005790 <_strtod_l+0x540>
 8005746:	b10b      	cbz	r3, 800574c <_strtod_l+0x4fc>
 8005748:	4682      	mov	sl, r0
 800574a:	468b      	mov	fp, r1
 800574c:	4b2b      	ldr	r3, [pc, #172]	; (80057fc <_strtod_l+0x5ac>)
 800574e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005752:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005756:	4652      	mov	r2, sl
 8005758:	e9d7 0100 	ldrd	r0, r1, [r7]
 800575c:	465b      	mov	r3, fp
 800575e:	f7fa fecf 	bl	8000500 <__aeabi_dmul>
 8005762:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005766:	468b      	mov	fp, r1
 8005768:	460a      	mov	r2, r1
 800576a:	0d1b      	lsrs	r3, r3, #20
 800576c:	4924      	ldr	r1, [pc, #144]	; (8005800 <_strtod_l+0x5b0>)
 800576e:	051b      	lsls	r3, r3, #20
 8005770:	428b      	cmp	r3, r1
 8005772:	4682      	mov	sl, r0
 8005774:	d8b7      	bhi.n	80056e6 <_strtod_l+0x496>
 8005776:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800577a:	428b      	cmp	r3, r1
 800577c:	bf86      	itte	hi
 800577e:	f04f 3aff 	movhi.w	sl, #4294967295
 8005782:	f8df b088 	ldrhi.w	fp, [pc, #136]	; 800580c <_strtod_l+0x5bc>
 8005786:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800578a:	2300      	movs	r3, #0
 800578c:	9305      	str	r3, [sp, #20]
 800578e:	e070      	b.n	8005872 <_strtod_l+0x622>
 8005790:	07e2      	lsls	r2, r4, #31
 8005792:	d504      	bpl.n	800579e <_strtod_l+0x54e>
 8005794:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005798:	f7fa feb2 	bl	8000500 <__aeabi_dmul>
 800579c:	2301      	movs	r3, #1
 800579e:	3701      	adds	r7, #1
 80057a0:	1064      	asrs	r4, r4, #1
 80057a2:	3608      	adds	r6, #8
 80057a4:	e7cd      	b.n	8005742 <_strtod_l+0x4f2>
 80057a6:	d0f0      	beq.n	800578a <_strtod_l+0x53a>
 80057a8:	4264      	negs	r4, r4
 80057aa:	f014 020f 	ands.w	r2, r4, #15
 80057ae:	d00a      	beq.n	80057c6 <_strtod_l+0x576>
 80057b0:	4b11      	ldr	r3, [pc, #68]	; (80057f8 <_strtod_l+0x5a8>)
 80057b2:	4650      	mov	r0, sl
 80057b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057b8:	4659      	mov	r1, fp
 80057ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057be:	f7fa ffc9 	bl	8000754 <__aeabi_ddiv>
 80057c2:	4682      	mov	sl, r0
 80057c4:	468b      	mov	fp, r1
 80057c6:	1124      	asrs	r4, r4, #4
 80057c8:	d0df      	beq.n	800578a <_strtod_l+0x53a>
 80057ca:	2c1f      	cmp	r4, #31
 80057cc:	dd20      	ble.n	8005810 <_strtod_l+0x5c0>
 80057ce:	f04f 0900 	mov.w	r9, #0
 80057d2:	f8cd 9010 	str.w	r9, [sp, #16]
 80057d6:	f8cd 901c 	str.w	r9, [sp, #28]
 80057da:	f8cd 9018 	str.w	r9, [sp, #24]
 80057de:	2322      	movs	r3, #34	; 0x22
 80057e0:	f04f 0a00 	mov.w	sl, #0
 80057e4:	f04f 0b00 	mov.w	fp, #0
 80057e8:	f8c8 3000 	str.w	r3, [r8]
 80057ec:	e78a      	b.n	8005704 <_strtod_l+0x4b4>
 80057ee:	bf00      	nop
 80057f0:	080087bb 	.word	0x080087bb
 80057f4:	080087d4 	.word	0x080087d4
 80057f8:	08008848 	.word	0x08008848
 80057fc:	08008820 	.word	0x08008820
 8005800:	7ca00000 	.word	0x7ca00000
 8005804:	fff80000 	.word	0xfff80000
 8005808:	7ff00000 	.word	0x7ff00000
 800580c:	7fefffff 	.word	0x7fefffff
 8005810:	f014 0310 	ands.w	r3, r4, #16
 8005814:	bf18      	it	ne
 8005816:	236a      	movne	r3, #106	; 0x6a
 8005818:	4650      	mov	r0, sl
 800581a:	9305      	str	r3, [sp, #20]
 800581c:	4659      	mov	r1, fp
 800581e:	2300      	movs	r3, #0
 8005820:	4e9f      	ldr	r6, [pc, #636]	; (8005aa0 <_strtod_l+0x850>)
 8005822:	2c00      	cmp	r4, #0
 8005824:	f300 8109 	bgt.w	8005a3a <_strtod_l+0x7ea>
 8005828:	b10b      	cbz	r3, 800582e <_strtod_l+0x5de>
 800582a:	4682      	mov	sl, r0
 800582c:	468b      	mov	fp, r1
 800582e:	9b05      	ldr	r3, [sp, #20]
 8005830:	b1bb      	cbz	r3, 8005862 <_strtod_l+0x612>
 8005832:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005836:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800583a:	2b00      	cmp	r3, #0
 800583c:	4659      	mov	r1, fp
 800583e:	dd10      	ble.n	8005862 <_strtod_l+0x612>
 8005840:	2b1f      	cmp	r3, #31
 8005842:	f340 8104 	ble.w	8005a4e <_strtod_l+0x7fe>
 8005846:	2b34      	cmp	r3, #52	; 0x34
 8005848:	bfd8      	it	le
 800584a:	f04f 32ff 	movle.w	r2, #4294967295
 800584e:	f04f 0a00 	mov.w	sl, #0
 8005852:	bfcf      	iteee	gt
 8005854:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005858:	3b20      	suble	r3, #32
 800585a:	fa02 f303 	lslle.w	r3, r2, r3
 800585e:	ea03 0b01 	andle.w	fp, r3, r1
 8005862:	2200      	movs	r2, #0
 8005864:	2300      	movs	r3, #0
 8005866:	4650      	mov	r0, sl
 8005868:	4659      	mov	r1, fp
 800586a:	f7fb f8b1 	bl	80009d0 <__aeabi_dcmpeq>
 800586e:	2800      	cmp	r0, #0
 8005870:	d1ad      	bne.n	80057ce <_strtod_l+0x57e>
 8005872:	9b06      	ldr	r3, [sp, #24]
 8005874:	9a04      	ldr	r2, [sp, #16]
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	990a      	ldr	r1, [sp, #40]	; 0x28
 800587a:	462b      	mov	r3, r5
 800587c:	4640      	mov	r0, r8
 800587e:	f001 f8ec 	bl	8006a5a <__s2b>
 8005882:	9007      	str	r0, [sp, #28]
 8005884:	2800      	cmp	r0, #0
 8005886:	f43f af2e 	beq.w	80056e6 <_strtod_l+0x496>
 800588a:	f1b9 0f00 	cmp.w	r9, #0
 800588e:	f1c9 0300 	rsb	r3, r9, #0
 8005892:	bfa8      	it	ge
 8005894:	2300      	movge	r3, #0
 8005896:	930e      	str	r3, [sp, #56]	; 0x38
 8005898:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 800589c:	f04f 0900 	mov.w	r9, #0
 80058a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80058a2:	f8cd 9010 	str.w	r9, [sp, #16]
 80058a6:	9b07      	ldr	r3, [sp, #28]
 80058a8:	4640      	mov	r0, r8
 80058aa:	6859      	ldr	r1, [r3, #4]
 80058ac:	f001 f84f 	bl	800694e <_Balloc>
 80058b0:	9006      	str	r0, [sp, #24]
 80058b2:	2800      	cmp	r0, #0
 80058b4:	f43f af1f 	beq.w	80056f6 <_strtod_l+0x4a6>
 80058b8:	9b07      	ldr	r3, [sp, #28]
 80058ba:	300c      	adds	r0, #12
 80058bc:	691a      	ldr	r2, [r3, #16]
 80058be:	f103 010c 	add.w	r1, r3, #12
 80058c2:	3202      	adds	r2, #2
 80058c4:	0092      	lsls	r2, r2, #2
 80058c6:	f001 f837 	bl	8006938 <memcpy>
 80058ca:	ab1c      	add	r3, sp, #112	; 0x70
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	ab1b      	add	r3, sp, #108	; 0x6c
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	4652      	mov	r2, sl
 80058d4:	465b      	mov	r3, fp
 80058d6:	4640      	mov	r0, r8
 80058d8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80058dc:	f001 fb6c 	bl	8006fb8 <__d2b>
 80058e0:	901a      	str	r0, [sp, #104]	; 0x68
 80058e2:	2800      	cmp	r0, #0
 80058e4:	f43f af07 	beq.w	80056f6 <_strtod_l+0x4a6>
 80058e8:	2101      	movs	r1, #1
 80058ea:	4640      	mov	r0, r8
 80058ec:	f001 f941 	bl	8006b72 <__i2b>
 80058f0:	9004      	str	r0, [sp, #16]
 80058f2:	4603      	mov	r3, r0
 80058f4:	2800      	cmp	r0, #0
 80058f6:	f43f aefe 	beq.w	80056f6 <_strtod_l+0x4a6>
 80058fa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80058fc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80058fe:	2d00      	cmp	r5, #0
 8005900:	bfab      	itete	ge
 8005902:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005904:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 8005906:	195e      	addge	r6, r3, r5
 8005908:	1b5c      	sublt	r4, r3, r5
 800590a:	9b05      	ldr	r3, [sp, #20]
 800590c:	bfa8      	it	ge
 800590e:	9c0f      	ldrge	r4, [sp, #60]	; 0x3c
 8005910:	eba5 0503 	sub.w	r5, r5, r3
 8005914:	4415      	add	r5, r2
 8005916:	4b63      	ldr	r3, [pc, #396]	; (8005aa4 <_strtod_l+0x854>)
 8005918:	f105 35ff 	add.w	r5, r5, #4294967295
 800591c:	bfb8      	it	lt
 800591e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005920:	429d      	cmp	r5, r3
 8005922:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005926:	f280 80a4 	bge.w	8005a72 <_strtod_l+0x822>
 800592a:	1b5b      	subs	r3, r3, r5
 800592c:	2b1f      	cmp	r3, #31
 800592e:	eba2 0203 	sub.w	r2, r2, r3
 8005932:	f04f 0701 	mov.w	r7, #1
 8005936:	f300 8091 	bgt.w	8005a5c <_strtod_l+0x80c>
 800593a:	2500      	movs	r5, #0
 800593c:	fa07 f303 	lsl.w	r3, r7, r3
 8005940:	9314      	str	r3, [sp, #80]	; 0x50
 8005942:	18b7      	adds	r7, r6, r2
 8005944:	9b05      	ldr	r3, [sp, #20]
 8005946:	42be      	cmp	r6, r7
 8005948:	4414      	add	r4, r2
 800594a:	441c      	add	r4, r3
 800594c:	4633      	mov	r3, r6
 800594e:	bfa8      	it	ge
 8005950:	463b      	movge	r3, r7
 8005952:	42a3      	cmp	r3, r4
 8005954:	bfa8      	it	ge
 8005956:	4623      	movge	r3, r4
 8005958:	2b00      	cmp	r3, #0
 800595a:	bfc2      	ittt	gt
 800595c:	1aff      	subgt	r7, r7, r3
 800595e:	1ae4      	subgt	r4, r4, r3
 8005960:	1af6      	subgt	r6, r6, r3
 8005962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005964:	b1bb      	cbz	r3, 8005996 <_strtod_l+0x746>
 8005966:	461a      	mov	r2, r3
 8005968:	9904      	ldr	r1, [sp, #16]
 800596a:	4640      	mov	r0, r8
 800596c:	f001 f996 	bl	8006c9c <__pow5mult>
 8005970:	9004      	str	r0, [sp, #16]
 8005972:	2800      	cmp	r0, #0
 8005974:	f43f aebf 	beq.w	80056f6 <_strtod_l+0x4a6>
 8005978:	4601      	mov	r1, r0
 800597a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800597c:	4640      	mov	r0, r8
 800597e:	f001 f901 	bl	8006b84 <__multiply>
 8005982:	9008      	str	r0, [sp, #32]
 8005984:	2800      	cmp	r0, #0
 8005986:	f43f aeb6 	beq.w	80056f6 <_strtod_l+0x4a6>
 800598a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800598c:	4640      	mov	r0, r8
 800598e:	f001 f812 	bl	80069b6 <_Bfree>
 8005992:	9b08      	ldr	r3, [sp, #32]
 8005994:	931a      	str	r3, [sp, #104]	; 0x68
 8005996:	2f00      	cmp	r7, #0
 8005998:	dc6f      	bgt.n	8005a7a <_strtod_l+0x82a>
 800599a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800599c:	2b00      	cmp	r3, #0
 800599e:	d175      	bne.n	8005a8c <_strtod_l+0x83c>
 80059a0:	2c00      	cmp	r4, #0
 80059a2:	dd08      	ble.n	80059b6 <_strtod_l+0x766>
 80059a4:	4622      	mov	r2, r4
 80059a6:	9906      	ldr	r1, [sp, #24]
 80059a8:	4640      	mov	r0, r8
 80059aa:	f001 f9c5 	bl	8006d38 <__lshift>
 80059ae:	9006      	str	r0, [sp, #24]
 80059b0:	2800      	cmp	r0, #0
 80059b2:	f43f aea0 	beq.w	80056f6 <_strtod_l+0x4a6>
 80059b6:	2e00      	cmp	r6, #0
 80059b8:	dd08      	ble.n	80059cc <_strtod_l+0x77c>
 80059ba:	4632      	mov	r2, r6
 80059bc:	9904      	ldr	r1, [sp, #16]
 80059be:	4640      	mov	r0, r8
 80059c0:	f001 f9ba 	bl	8006d38 <__lshift>
 80059c4:	9004      	str	r0, [sp, #16]
 80059c6:	2800      	cmp	r0, #0
 80059c8:	f43f ae95 	beq.w	80056f6 <_strtod_l+0x4a6>
 80059cc:	9a06      	ldr	r2, [sp, #24]
 80059ce:	991a      	ldr	r1, [sp, #104]	; 0x68
 80059d0:	4640      	mov	r0, r8
 80059d2:	f001 fa1c 	bl	8006e0e <__mdiff>
 80059d6:	4681      	mov	r9, r0
 80059d8:	2800      	cmp	r0, #0
 80059da:	f43f ae8c 	beq.w	80056f6 <_strtod_l+0x4a6>
 80059de:	2400      	movs	r4, #0
 80059e0:	68c3      	ldr	r3, [r0, #12]
 80059e2:	9904      	ldr	r1, [sp, #16]
 80059e4:	60c4      	str	r4, [r0, #12]
 80059e6:	9308      	str	r3, [sp, #32]
 80059e8:	f001 f9f7 	bl	8006dda <__mcmp>
 80059ec:	42a0      	cmp	r0, r4
 80059ee:	da5b      	bge.n	8005aa8 <_strtod_l+0x858>
 80059f0:	9b08      	ldr	r3, [sp, #32]
 80059f2:	b9f3      	cbnz	r3, 8005a32 <_strtod_l+0x7e2>
 80059f4:	f1ba 0f00 	cmp.w	sl, #0
 80059f8:	d11b      	bne.n	8005a32 <_strtod_l+0x7e2>
 80059fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80059fe:	b9c3      	cbnz	r3, 8005a32 <_strtod_l+0x7e2>
 8005a00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005a04:	0d1b      	lsrs	r3, r3, #20
 8005a06:	051b      	lsls	r3, r3, #20
 8005a08:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005a0c:	d911      	bls.n	8005a32 <_strtod_l+0x7e2>
 8005a0e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005a12:	b91b      	cbnz	r3, 8005a1c <_strtod_l+0x7cc>
 8005a14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	dd0a      	ble.n	8005a32 <_strtod_l+0x7e2>
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	2201      	movs	r2, #1
 8005a20:	4640      	mov	r0, r8
 8005a22:	f001 f989 	bl	8006d38 <__lshift>
 8005a26:	9904      	ldr	r1, [sp, #16]
 8005a28:	4681      	mov	r9, r0
 8005a2a:	f001 f9d6 	bl	8006dda <__mcmp>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	dc6b      	bgt.n	8005b0a <_strtod_l+0x8ba>
 8005a32:	9b05      	ldr	r3, [sp, #20]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d175      	bne.n	8005b24 <_strtod_l+0x8d4>
 8005a38:	e668      	b.n	800570c <_strtod_l+0x4bc>
 8005a3a:	07e2      	lsls	r2, r4, #31
 8005a3c:	d504      	bpl.n	8005a48 <_strtod_l+0x7f8>
 8005a3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a42:	f7fa fd5d 	bl	8000500 <__aeabi_dmul>
 8005a46:	2301      	movs	r3, #1
 8005a48:	1064      	asrs	r4, r4, #1
 8005a4a:	3608      	adds	r6, #8
 8005a4c:	e6e9      	b.n	8005822 <_strtod_l+0x5d2>
 8005a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	ea03 0a0a 	and.w	sl, r3, sl
 8005a5a:	e702      	b.n	8005862 <_strtod_l+0x612>
 8005a5c:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005a60:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005a64:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005a68:	35e2      	adds	r5, #226	; 0xe2
 8005a6a:	fa07 f505 	lsl.w	r5, r7, r5
 8005a6e:	9714      	str	r7, [sp, #80]	; 0x50
 8005a70:	e767      	b.n	8005942 <_strtod_l+0x6f2>
 8005a72:	2301      	movs	r3, #1
 8005a74:	2500      	movs	r5, #0
 8005a76:	9314      	str	r3, [sp, #80]	; 0x50
 8005a78:	e763      	b.n	8005942 <_strtod_l+0x6f2>
 8005a7a:	463a      	mov	r2, r7
 8005a7c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005a7e:	4640      	mov	r0, r8
 8005a80:	f001 f95a 	bl	8006d38 <__lshift>
 8005a84:	901a      	str	r0, [sp, #104]	; 0x68
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d187      	bne.n	800599a <_strtod_l+0x74a>
 8005a8a:	e634      	b.n	80056f6 <_strtod_l+0x4a6>
 8005a8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a8e:	9906      	ldr	r1, [sp, #24]
 8005a90:	4640      	mov	r0, r8
 8005a92:	f001 f903 	bl	8006c9c <__pow5mult>
 8005a96:	9006      	str	r0, [sp, #24]
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d181      	bne.n	80059a0 <_strtod_l+0x750>
 8005a9c:	e62b      	b.n	80056f6 <_strtod_l+0x4a6>
 8005a9e:	bf00      	nop
 8005aa0:	080087e8 	.word	0x080087e8
 8005aa4:	fffffc02 	.word	0xfffffc02
 8005aa8:	f040 8086 	bne.w	8005bb8 <_strtod_l+0x968>
 8005aac:	9a08      	ldr	r2, [sp, #32]
 8005aae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ab2:	b332      	cbz	r2, 8005b02 <_strtod_l+0x8b2>
 8005ab4:	4aac      	ldr	r2, [pc, #688]	; (8005d68 <_strtod_l+0xb18>)
 8005ab6:	4659      	mov	r1, fp
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d152      	bne.n	8005b62 <_strtod_l+0x912>
 8005abc:	9b05      	ldr	r3, [sp, #20]
 8005abe:	4650      	mov	r0, sl
 8005ac0:	b1d3      	cbz	r3, 8005af8 <_strtod_l+0x8a8>
 8005ac2:	4aaa      	ldr	r2, [pc, #680]	; (8005d6c <_strtod_l+0xb1c>)
 8005ac4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ac8:	400a      	ands	r2, r1
 8005aca:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005ace:	d816      	bhi.n	8005afe <_strtod_l+0x8ae>
 8005ad0:	0d12      	lsrs	r2, r2, #20
 8005ad2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005ad6:	fa04 f303 	lsl.w	r3, r4, r3
 8005ada:	4283      	cmp	r3, r0
 8005adc:	d141      	bne.n	8005b62 <_strtod_l+0x912>
 8005ade:	4aa4      	ldr	r2, [pc, #656]	; (8005d70 <_strtod_l+0xb20>)
 8005ae0:	4291      	cmp	r1, r2
 8005ae2:	d102      	bne.n	8005aea <_strtod_l+0x89a>
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	f43f ae06 	beq.w	80056f6 <_strtod_l+0x4a6>
 8005aea:	4ba0      	ldr	r3, [pc, #640]	; (8005d6c <_strtod_l+0xb1c>)
 8005aec:	f04f 0a00 	mov.w	sl, #0
 8005af0:	400b      	ands	r3, r1
 8005af2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005af6:	e79c      	b.n	8005a32 <_strtod_l+0x7e2>
 8005af8:	f04f 33ff 	mov.w	r3, #4294967295
 8005afc:	e7ed      	b.n	8005ada <_strtod_l+0x88a>
 8005afe:	4623      	mov	r3, r4
 8005b00:	e7eb      	b.n	8005ada <_strtod_l+0x88a>
 8005b02:	bb73      	cbnz	r3, 8005b62 <_strtod_l+0x912>
 8005b04:	f1ba 0f00 	cmp.w	sl, #0
 8005b08:	d12b      	bne.n	8005b62 <_strtod_l+0x912>
 8005b0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005b0e:	9a05      	ldr	r2, [sp, #20]
 8005b10:	0d1b      	lsrs	r3, r3, #20
 8005b12:	051b      	lsls	r3, r3, #20
 8005b14:	b1e2      	cbz	r2, 8005b50 <_strtod_l+0x900>
 8005b16:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005b1a:	dc19      	bgt.n	8005b50 <_strtod_l+0x900>
 8005b1c:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8005b20:	f77f ae5d 	ble.w	80057de <_strtod_l+0x58e>
 8005b24:	4b93      	ldr	r3, [pc, #588]	; (8005d74 <_strtod_l+0xb24>)
 8005b26:	4650      	mov	r0, sl
 8005b28:	930d      	str	r3, [sp, #52]	; 0x34
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	930c      	str	r3, [sp, #48]	; 0x30
 8005b2e:	4659      	mov	r1, fp
 8005b30:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005b34:	f7fa fce4 	bl	8000500 <__aeabi_dmul>
 8005b38:	4682      	mov	sl, r0
 8005b3a:	468b      	mov	fp, r1
 8005b3c:	2900      	cmp	r1, #0
 8005b3e:	f47f ade5 	bne.w	800570c <_strtod_l+0x4bc>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	f47f ade2 	bne.w	800570c <_strtod_l+0x4bc>
 8005b48:	2322      	movs	r3, #34	; 0x22
 8005b4a:	f8c8 3000 	str.w	r3, [r8]
 8005b4e:	e5dd      	b.n	800570c <_strtod_l+0x4bc>
 8005b50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005b54:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005b58:	f04f 3aff 	mov.w	sl, #4294967295
 8005b5c:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005b60:	e767      	b.n	8005a32 <_strtod_l+0x7e2>
 8005b62:	b19d      	cbz	r5, 8005b8c <_strtod_l+0x93c>
 8005b64:	ea15 0f0b 	tst.w	r5, fp
 8005b68:	f43f af63 	beq.w	8005a32 <_strtod_l+0x7e2>
 8005b6c:	9b08      	ldr	r3, [sp, #32]
 8005b6e:	9a05      	ldr	r2, [sp, #20]
 8005b70:	4650      	mov	r0, sl
 8005b72:	4659      	mov	r1, fp
 8005b74:	b173      	cbz	r3, 8005b94 <_strtod_l+0x944>
 8005b76:	f7ff fb49 	bl	800520c <sulp>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b82:	f7fa fb0b 	bl	800019c <__adddf3>
 8005b86:	4682      	mov	sl, r0
 8005b88:	468b      	mov	fp, r1
 8005b8a:	e752      	b.n	8005a32 <_strtod_l+0x7e2>
 8005b8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b8e:	ea13 0f0a 	tst.w	r3, sl
 8005b92:	e7e9      	b.n	8005b68 <_strtod_l+0x918>
 8005b94:	f7ff fb3a 	bl	800520c <sulp>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ba0:	f7fa fafa 	bl	8000198 <__aeabi_dsub>
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	4682      	mov	sl, r0
 8005baa:	468b      	mov	fp, r1
 8005bac:	f7fa ff10 	bl	80009d0 <__aeabi_dcmpeq>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	f47f ae14 	bne.w	80057de <_strtod_l+0x58e>
 8005bb6:	e73c      	b.n	8005a32 <_strtod_l+0x7e2>
 8005bb8:	9904      	ldr	r1, [sp, #16]
 8005bba:	4648      	mov	r0, r9
 8005bbc:	f001 fa4b 	bl	8007056 <__ratio>
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	460f      	mov	r7, r1
 8005bca:	f7fa ff15 	bl	80009f8 <__aeabi_dcmple>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	d070      	beq.n	8005cb4 <_strtod_l+0xa64>
 8005bd2:	9b08      	ldr	r3, [sp, #32]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d043      	beq.n	8005c60 <_strtod_l+0xa10>
 8005bd8:	2600      	movs	r6, #0
 8005bda:	4f67      	ldr	r7, [pc, #412]	; (8005d78 <_strtod_l+0xb28>)
 8005bdc:	4d66      	ldr	r5, [pc, #408]	; (8005d78 <_strtod_l+0xb28>)
 8005bde:	4b63      	ldr	r3, [pc, #396]	; (8005d6c <_strtod_l+0xb1c>)
 8005be0:	ea0b 0303 	and.w	r3, fp, r3
 8005be4:	9314      	str	r3, [sp, #80]	; 0x50
 8005be6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005be8:	4b64      	ldr	r3, [pc, #400]	; (8005d7c <_strtod_l+0xb2c>)
 8005bea:	429a      	cmp	r2, r3
 8005bec:	f040 80ce 	bne.w	8005d8c <_strtod_l+0xb3c>
 8005bf0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005bf4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005bf8:	4650      	mov	r0, sl
 8005bfa:	4659      	mov	r1, fp
 8005bfc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005c00:	f001 f964 	bl	8006ecc <__ulp>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4630      	mov	r0, r6
 8005c0a:	4639      	mov	r1, r7
 8005c0c:	f7fa fc78 	bl	8000500 <__aeabi_dmul>
 8005c10:	4652      	mov	r2, sl
 8005c12:	465b      	mov	r3, fp
 8005c14:	f7fa fac2 	bl	800019c <__adddf3>
 8005c18:	4a54      	ldr	r2, [pc, #336]	; (8005d6c <_strtod_l+0xb1c>)
 8005c1a:	4b59      	ldr	r3, [pc, #356]	; (8005d80 <_strtod_l+0xb30>)
 8005c1c:	400a      	ands	r2, r1
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	4682      	mov	sl, r0
 8005c22:	d95d      	bls.n	8005ce0 <_strtod_l+0xa90>
 8005c24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c26:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d103      	bne.n	8005c36 <_strtod_l+0x9e6>
 8005c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c30:	3301      	adds	r3, #1
 8005c32:	f43f ad60 	beq.w	80056f6 <_strtod_l+0x4a6>
 8005c36:	f04f 3aff 	mov.w	sl, #4294967295
 8005c3a:	f8df b134 	ldr.w	fp, [pc, #308]	; 8005d70 <_strtod_l+0xb20>
 8005c3e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005c40:	4640      	mov	r0, r8
 8005c42:	f000 feb8 	bl	80069b6 <_Bfree>
 8005c46:	9906      	ldr	r1, [sp, #24]
 8005c48:	4640      	mov	r0, r8
 8005c4a:	f000 feb4 	bl	80069b6 <_Bfree>
 8005c4e:	9904      	ldr	r1, [sp, #16]
 8005c50:	4640      	mov	r0, r8
 8005c52:	f000 feb0 	bl	80069b6 <_Bfree>
 8005c56:	4649      	mov	r1, r9
 8005c58:	4640      	mov	r0, r8
 8005c5a:	f000 feac 	bl	80069b6 <_Bfree>
 8005c5e:	e622      	b.n	80058a6 <_strtod_l+0x656>
 8005c60:	f1ba 0f00 	cmp.w	sl, #0
 8005c64:	d118      	bne.n	8005c98 <_strtod_l+0xa48>
 8005c66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c6a:	b9e3      	cbnz	r3, 8005ca6 <_strtod_l+0xa56>
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	4b42      	ldr	r3, [pc, #264]	; (8005d78 <_strtod_l+0xb28>)
 8005c70:	4630      	mov	r0, r6
 8005c72:	4639      	mov	r1, r7
 8005c74:	f7fa feb6 	bl	80009e4 <__aeabi_dcmplt>
 8005c78:	b9c8      	cbnz	r0, 8005cae <_strtod_l+0xa5e>
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	4b41      	ldr	r3, [pc, #260]	; (8005d84 <_strtod_l+0xb34>)
 8005c7e:	4630      	mov	r0, r6
 8005c80:	4639      	mov	r1, r7
 8005c82:	f7fa fc3d 	bl	8000500 <__aeabi_dmul>
 8005c86:	4604      	mov	r4, r0
 8005c88:	460d      	mov	r5, r1
 8005c8a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005c8e:	9416      	str	r4, [sp, #88]	; 0x58
 8005c90:	9317      	str	r3, [sp, #92]	; 0x5c
 8005c92:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005c96:	e7a2      	b.n	8005bde <_strtod_l+0x98e>
 8005c98:	f1ba 0f01 	cmp.w	sl, #1
 8005c9c:	d103      	bne.n	8005ca6 <_strtod_l+0xa56>
 8005c9e:	f1bb 0f00 	cmp.w	fp, #0
 8005ca2:	f43f ad9c 	beq.w	80057de <_strtod_l+0x58e>
 8005ca6:	2600      	movs	r6, #0
 8005ca8:	4f37      	ldr	r7, [pc, #220]	; (8005d88 <_strtod_l+0xb38>)
 8005caa:	2400      	movs	r4, #0
 8005cac:	e796      	b.n	8005bdc <_strtod_l+0x98c>
 8005cae:	9c08      	ldr	r4, [sp, #32]
 8005cb0:	4d34      	ldr	r5, [pc, #208]	; (8005d84 <_strtod_l+0xb34>)
 8005cb2:	e7ea      	b.n	8005c8a <_strtod_l+0xa3a>
 8005cb4:	4b33      	ldr	r3, [pc, #204]	; (8005d84 <_strtod_l+0xb34>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	4630      	mov	r0, r6
 8005cba:	4639      	mov	r1, r7
 8005cbc:	f7fa fc20 	bl	8000500 <__aeabi_dmul>
 8005cc0:	9b08      	ldr	r3, [sp, #32]
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	460d      	mov	r5, r1
 8005cc6:	b933      	cbnz	r3, 8005cd6 <_strtod_l+0xa86>
 8005cc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ccc:	9010      	str	r0, [sp, #64]	; 0x40
 8005cce:	9311      	str	r3, [sp, #68]	; 0x44
 8005cd0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005cd4:	e783      	b.n	8005bde <_strtod_l+0x98e>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005cde:	e7f7      	b.n	8005cd0 <_strtod_l+0xa80>
 8005ce0:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 8005ce4:	9b05      	ldr	r3, [sp, #20]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1a9      	bne.n	8005c3e <_strtod_l+0x9ee>
 8005cea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005cee:	0d1b      	lsrs	r3, r3, #20
 8005cf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005cf2:	051b      	lsls	r3, r3, #20
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	465e      	mov	r6, fp
 8005cf8:	d1a1      	bne.n	8005c3e <_strtod_l+0x9ee>
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f7fa fe99 	bl	8000a34 <__aeabi_d2iz>
 8005d02:	f7fa fb97 	bl	8000434 <__aeabi_i2d>
 8005d06:	460b      	mov	r3, r1
 8005d08:	4602      	mov	r2, r0
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f7fa fa43 	bl	8000198 <__aeabi_dsub>
 8005d12:	9b08      	ldr	r3, [sp, #32]
 8005d14:	4604      	mov	r4, r0
 8005d16:	460d      	mov	r5, r1
 8005d18:	b933      	cbnz	r3, 8005d28 <_strtod_l+0xad8>
 8005d1a:	f1ba 0f00 	cmp.w	sl, #0
 8005d1e:	d103      	bne.n	8005d28 <_strtod_l+0xad8>
 8005d20:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005d24:	2e00      	cmp	r6, #0
 8005d26:	d06c      	beq.n	8005e02 <_strtod_l+0xbb2>
 8005d28:	a30b      	add	r3, pc, #44	; (adr r3, 8005d58 <_strtod_l+0xb08>)
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	4620      	mov	r0, r4
 8005d30:	4629      	mov	r1, r5
 8005d32:	f7fa fe57 	bl	80009e4 <__aeabi_dcmplt>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	f47f ace8 	bne.w	800570c <_strtod_l+0x4bc>
 8005d3c:	a308      	add	r3, pc, #32	; (adr r3, 8005d60 <_strtod_l+0xb10>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	4620      	mov	r0, r4
 8005d44:	4629      	mov	r1, r5
 8005d46:	f7fa fe6b 	bl	8000a20 <__aeabi_dcmpgt>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	f43f af77 	beq.w	8005c3e <_strtod_l+0x9ee>
 8005d50:	e4dc      	b.n	800570c <_strtod_l+0x4bc>
 8005d52:	bf00      	nop
 8005d54:	f3af 8000 	nop.w
 8005d58:	94a03595 	.word	0x94a03595
 8005d5c:	3fdfffff 	.word	0x3fdfffff
 8005d60:	35afe535 	.word	0x35afe535
 8005d64:	3fe00000 	.word	0x3fe00000
 8005d68:	000fffff 	.word	0x000fffff
 8005d6c:	7ff00000 	.word	0x7ff00000
 8005d70:	7fefffff 	.word	0x7fefffff
 8005d74:	39500000 	.word	0x39500000
 8005d78:	3ff00000 	.word	0x3ff00000
 8005d7c:	7fe00000 	.word	0x7fe00000
 8005d80:	7c9fffff 	.word	0x7c9fffff
 8005d84:	3fe00000 	.word	0x3fe00000
 8005d88:	bff00000 	.word	0xbff00000
 8005d8c:	9b05      	ldr	r3, [sp, #20]
 8005d8e:	b313      	cbz	r3, 8005dd6 <_strtod_l+0xb86>
 8005d90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d92:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005d96:	d81e      	bhi.n	8005dd6 <_strtod_l+0xb86>
 8005d98:	a325      	add	r3, pc, #148	; (adr r3, 8005e30 <_strtod_l+0xbe0>)
 8005d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9e:	4620      	mov	r0, r4
 8005da0:	4629      	mov	r1, r5
 8005da2:	f7fa fe29 	bl	80009f8 <__aeabi_dcmple>
 8005da6:	b190      	cbz	r0, 8005dce <_strtod_l+0xb7e>
 8005da8:	4629      	mov	r1, r5
 8005daa:	4620      	mov	r0, r4
 8005dac:	f7fa fe6a 	bl	8000a84 <__aeabi_d2uiz>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	bf08      	it	eq
 8005db4:	2001      	moveq	r0, #1
 8005db6:	f7fa fb2d 	bl	8000414 <__aeabi_ui2d>
 8005dba:	9b08      	ldr	r3, [sp, #32]
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	460d      	mov	r5, r1
 8005dc0:	b9d3      	cbnz	r3, 8005df8 <_strtod_l+0xba8>
 8005dc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dc6:	9012      	str	r0, [sp, #72]	; 0x48
 8005dc8:	9313      	str	r3, [sp, #76]	; 0x4c
 8005dca:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005dce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005dd0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005dd4:	1a9f      	subs	r7, r3, r2
 8005dd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005dda:	f001 f877 	bl	8006ecc <__ulp>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	4630      	mov	r0, r6
 8005de4:	4639      	mov	r1, r7
 8005de6:	f7fa fb8b 	bl	8000500 <__aeabi_dmul>
 8005dea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005dee:	f7fa f9d5 	bl	800019c <__adddf3>
 8005df2:	4682      	mov	sl, r0
 8005df4:	468b      	mov	fp, r1
 8005df6:	e775      	b.n	8005ce4 <_strtod_l+0xa94>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005e00:	e7e3      	b.n	8005dca <_strtod_l+0xb7a>
 8005e02:	a30d      	add	r3, pc, #52	; (adr r3, 8005e38 <_strtod_l+0xbe8>)
 8005e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e08:	f7fa fdec 	bl	80009e4 <__aeabi_dcmplt>
 8005e0c:	e79d      	b.n	8005d4a <_strtod_l+0xafa>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	9309      	str	r3, [sp, #36]	; 0x24
 8005e12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e14:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	f7ff ba5e 	b.w	80052d8 <_strtod_l+0x88>
 8005e1c:	2b65      	cmp	r3, #101	; 0x65
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	f43f abae 	beq.w	8005582 <_strtod_l+0x332>
 8005e26:	4615      	mov	r5, r2
 8005e28:	2101      	movs	r1, #1
 8005e2a:	f7ff bacd 	b.w	80053c8 <_strtod_l+0x178>
 8005e2e:	bf00      	nop
 8005e30:	ffc00000 	.word	0xffc00000
 8005e34:	41dfffff 	.word	0x41dfffff
 8005e38:	94a03595 	.word	0x94a03595
 8005e3c:	3fcfffff 	.word	0x3fcfffff

08005e40 <strtod>:
 8005e40:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <strtod+0x1c>)
 8005e42:	b410      	push	{r4}
 8005e44:	681c      	ldr	r4, [r3, #0]
 8005e46:	4a06      	ldr	r2, [pc, #24]	; (8005e60 <strtod+0x20>)
 8005e48:	6a23      	ldr	r3, [r4, #32]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	bf08      	it	eq
 8005e4e:	4613      	moveq	r3, r2
 8005e50:	460a      	mov	r2, r1
 8005e52:	4601      	mov	r1, r0
 8005e54:	4620      	mov	r0, r4
 8005e56:	bc10      	pop	{r4}
 8005e58:	f7ff b9fa 	b.w	8005250 <_strtod_l>
 8005e5c:	20000008 	.word	0x20000008
 8005e60:	2000006c 	.word	0x2000006c

08005e64 <strtok>:
 8005e64:	4b13      	ldr	r3, [pc, #76]	; (8005eb4 <strtok+0x50>)
 8005e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e6a:	681d      	ldr	r5, [r3, #0]
 8005e6c:	4606      	mov	r6, r0
 8005e6e:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8005e70:	460f      	mov	r7, r1
 8005e72:	b9b4      	cbnz	r4, 8005ea2 <strtok+0x3e>
 8005e74:	2050      	movs	r0, #80	; 0x50
 8005e76:	f000 fd45 	bl	8006904 <malloc>
 8005e7a:	65a8      	str	r0, [r5, #88]	; 0x58
 8005e7c:	6004      	str	r4, [r0, #0]
 8005e7e:	6044      	str	r4, [r0, #4]
 8005e80:	6084      	str	r4, [r0, #8]
 8005e82:	60c4      	str	r4, [r0, #12]
 8005e84:	6104      	str	r4, [r0, #16]
 8005e86:	6144      	str	r4, [r0, #20]
 8005e88:	6184      	str	r4, [r0, #24]
 8005e8a:	6284      	str	r4, [r0, #40]	; 0x28
 8005e8c:	62c4      	str	r4, [r0, #44]	; 0x2c
 8005e8e:	6304      	str	r4, [r0, #48]	; 0x30
 8005e90:	6344      	str	r4, [r0, #52]	; 0x34
 8005e92:	6384      	str	r4, [r0, #56]	; 0x38
 8005e94:	63c4      	str	r4, [r0, #60]	; 0x3c
 8005e96:	6404      	str	r4, [r0, #64]	; 0x40
 8005e98:	6444      	str	r4, [r0, #68]	; 0x44
 8005e9a:	6484      	str	r4, [r0, #72]	; 0x48
 8005e9c:	64c4      	str	r4, [r0, #76]	; 0x4c
 8005e9e:	7704      	strb	r4, [r0, #28]
 8005ea0:	6244      	str	r4, [r0, #36]	; 0x24
 8005ea2:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8005ea4:	4639      	mov	r1, r7
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eac:	2301      	movs	r3, #1
 8005eae:	f000 b803 	b.w	8005eb8 <__strtok_r>
 8005eb2:	bf00      	nop
 8005eb4:	20000008 	.word	0x20000008

08005eb8 <__strtok_r>:
 8005eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eba:	b918      	cbnz	r0, 8005ec4 <__strtok_r+0xc>
 8005ebc:	6810      	ldr	r0, [r2, #0]
 8005ebe:	b908      	cbnz	r0, 8005ec4 <__strtok_r+0xc>
 8005ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	460f      	mov	r7, r1
 8005ec8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005ecc:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005ed0:	b91e      	cbnz	r6, 8005eda <__strtok_r+0x22>
 8005ed2:	b965      	cbnz	r5, 8005eee <__strtok_r+0x36>
 8005ed4:	6015      	str	r5, [r2, #0]
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eda:	42b5      	cmp	r5, r6
 8005edc:	d1f6      	bne.n	8005ecc <__strtok_r+0x14>
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1ef      	bne.n	8005ec2 <__strtok_r+0xa>
 8005ee2:	6014      	str	r4, [r2, #0]
 8005ee4:	7003      	strb	r3, [r0, #0]
 8005ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee8:	461c      	mov	r4, r3
 8005eea:	e00c      	b.n	8005f06 <__strtok_r+0x4e>
 8005eec:	b915      	cbnz	r5, 8005ef4 <__strtok_r+0x3c>
 8005eee:	460e      	mov	r6, r1
 8005ef0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005ef4:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005ef8:	42ab      	cmp	r3, r5
 8005efa:	d1f7      	bne.n	8005eec <__strtok_r+0x34>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0f3      	beq.n	8005ee8 <__strtok_r+0x30>
 8005f00:	2300      	movs	r3, #0
 8005f02:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005f06:	6014      	str	r4, [r2, #0]
 8005f08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f0a <_strtol_l.isra.0>:
 8005f0a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0e:	4680      	mov	r8, r0
 8005f10:	4689      	mov	r9, r1
 8005f12:	4692      	mov	sl, r2
 8005f14:	461f      	mov	r7, r3
 8005f16:	468b      	mov	fp, r1
 8005f18:	465d      	mov	r5, fp
 8005f1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005f1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f20:	f000 fcea 	bl	80068f8 <__locale_ctype_ptr_l>
 8005f24:	4420      	add	r0, r4
 8005f26:	7846      	ldrb	r6, [r0, #1]
 8005f28:	f016 0608 	ands.w	r6, r6, #8
 8005f2c:	d10b      	bne.n	8005f46 <_strtol_l.isra.0+0x3c>
 8005f2e:	2c2d      	cmp	r4, #45	; 0x2d
 8005f30:	d10b      	bne.n	8005f4a <_strtol_l.isra.0+0x40>
 8005f32:	2601      	movs	r6, #1
 8005f34:	782c      	ldrb	r4, [r5, #0]
 8005f36:	f10b 0502 	add.w	r5, fp, #2
 8005f3a:	b167      	cbz	r7, 8005f56 <_strtol_l.isra.0+0x4c>
 8005f3c:	2f10      	cmp	r7, #16
 8005f3e:	d114      	bne.n	8005f6a <_strtol_l.isra.0+0x60>
 8005f40:	2c30      	cmp	r4, #48	; 0x30
 8005f42:	d00a      	beq.n	8005f5a <_strtol_l.isra.0+0x50>
 8005f44:	e011      	b.n	8005f6a <_strtol_l.isra.0+0x60>
 8005f46:	46ab      	mov	fp, r5
 8005f48:	e7e6      	b.n	8005f18 <_strtol_l.isra.0+0xe>
 8005f4a:	2c2b      	cmp	r4, #43	; 0x2b
 8005f4c:	bf04      	itt	eq
 8005f4e:	782c      	ldrbeq	r4, [r5, #0]
 8005f50:	f10b 0502 	addeq.w	r5, fp, #2
 8005f54:	e7f1      	b.n	8005f3a <_strtol_l.isra.0+0x30>
 8005f56:	2c30      	cmp	r4, #48	; 0x30
 8005f58:	d127      	bne.n	8005faa <_strtol_l.isra.0+0xa0>
 8005f5a:	782b      	ldrb	r3, [r5, #0]
 8005f5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005f60:	2b58      	cmp	r3, #88	; 0x58
 8005f62:	d14b      	bne.n	8005ffc <_strtol_l.isra.0+0xf2>
 8005f64:	2710      	movs	r7, #16
 8005f66:	786c      	ldrb	r4, [r5, #1]
 8005f68:	3502      	adds	r5, #2
 8005f6a:	2e00      	cmp	r6, #0
 8005f6c:	bf0c      	ite	eq
 8005f6e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005f72:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005f76:	2200      	movs	r2, #0
 8005f78:	fbb1 fef7 	udiv	lr, r1, r7
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	fb07 1c1e 	mls	ip, r7, lr, r1
 8005f82:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005f86:	2b09      	cmp	r3, #9
 8005f88:	d811      	bhi.n	8005fae <_strtol_l.isra.0+0xa4>
 8005f8a:	461c      	mov	r4, r3
 8005f8c:	42a7      	cmp	r7, r4
 8005f8e:	dd1d      	ble.n	8005fcc <_strtol_l.isra.0+0xc2>
 8005f90:	1c53      	adds	r3, r2, #1
 8005f92:	d007      	beq.n	8005fa4 <_strtol_l.isra.0+0x9a>
 8005f94:	4586      	cmp	lr, r0
 8005f96:	d316      	bcc.n	8005fc6 <_strtol_l.isra.0+0xbc>
 8005f98:	d101      	bne.n	8005f9e <_strtol_l.isra.0+0x94>
 8005f9a:	45a4      	cmp	ip, r4
 8005f9c:	db13      	blt.n	8005fc6 <_strtol_l.isra.0+0xbc>
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	fb00 4007 	mla	r0, r0, r7, r4
 8005fa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fa8:	e7eb      	b.n	8005f82 <_strtol_l.isra.0+0x78>
 8005faa:	270a      	movs	r7, #10
 8005fac:	e7dd      	b.n	8005f6a <_strtol_l.isra.0+0x60>
 8005fae:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005fb2:	2b19      	cmp	r3, #25
 8005fb4:	d801      	bhi.n	8005fba <_strtol_l.isra.0+0xb0>
 8005fb6:	3c37      	subs	r4, #55	; 0x37
 8005fb8:	e7e8      	b.n	8005f8c <_strtol_l.isra.0+0x82>
 8005fba:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005fbe:	2b19      	cmp	r3, #25
 8005fc0:	d804      	bhi.n	8005fcc <_strtol_l.isra.0+0xc2>
 8005fc2:	3c57      	subs	r4, #87	; 0x57
 8005fc4:	e7e2      	b.n	8005f8c <_strtol_l.isra.0+0x82>
 8005fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fca:	e7eb      	b.n	8005fa4 <_strtol_l.isra.0+0x9a>
 8005fcc:	1c53      	adds	r3, r2, #1
 8005fce:	d108      	bne.n	8005fe2 <_strtol_l.isra.0+0xd8>
 8005fd0:	2322      	movs	r3, #34	; 0x22
 8005fd2:	4608      	mov	r0, r1
 8005fd4:	f8c8 3000 	str.w	r3, [r8]
 8005fd8:	f1ba 0f00 	cmp.w	sl, #0
 8005fdc:	d107      	bne.n	8005fee <_strtol_l.isra.0+0xe4>
 8005fde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe2:	b106      	cbz	r6, 8005fe6 <_strtol_l.isra.0+0xdc>
 8005fe4:	4240      	negs	r0, r0
 8005fe6:	f1ba 0f00 	cmp.w	sl, #0
 8005fea:	d00c      	beq.n	8006006 <_strtol_l.isra.0+0xfc>
 8005fec:	b122      	cbz	r2, 8005ff8 <_strtol_l.isra.0+0xee>
 8005fee:	3d01      	subs	r5, #1
 8005ff0:	f8ca 5000 	str.w	r5, [sl]
 8005ff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff8:	464d      	mov	r5, r9
 8005ffa:	e7f9      	b.n	8005ff0 <_strtol_l.isra.0+0xe6>
 8005ffc:	2430      	movs	r4, #48	; 0x30
 8005ffe:	2f00      	cmp	r7, #0
 8006000:	d1b3      	bne.n	8005f6a <_strtol_l.isra.0+0x60>
 8006002:	2708      	movs	r7, #8
 8006004:	e7b1      	b.n	8005f6a <_strtol_l.isra.0+0x60>
 8006006:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800600c <strtol>:
 800600c:	4b08      	ldr	r3, [pc, #32]	; (8006030 <strtol+0x24>)
 800600e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006010:	681c      	ldr	r4, [r3, #0]
 8006012:	4d08      	ldr	r5, [pc, #32]	; (8006034 <strtol+0x28>)
 8006014:	6a23      	ldr	r3, [r4, #32]
 8006016:	2b00      	cmp	r3, #0
 8006018:	bf08      	it	eq
 800601a:	462b      	moveq	r3, r5
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	4613      	mov	r3, r2
 8006020:	460a      	mov	r2, r1
 8006022:	4601      	mov	r1, r0
 8006024:	4620      	mov	r0, r4
 8006026:	f7ff ff70 	bl	8005f0a <_strtol_l.isra.0>
 800602a:	b003      	add	sp, #12
 800602c:	bd30      	pop	{r4, r5, pc}
 800602e:	bf00      	nop
 8006030:	20000008 	.word	0x20000008
 8006034:	2000006c 	.word	0x2000006c

08006038 <print_e>:
 8006038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800603a:	b08b      	sub	sp, #44	; 0x2c
 800603c:	460f      	mov	r7, r1
 800603e:	a908      	add	r1, sp, #32
 8006040:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8006042:	9104      	str	r1, [sp, #16]
 8006044:	a907      	add	r1, sp, #28
 8006046:	9103      	str	r1, [sp, #12]
 8006048:	a909      	add	r1, sp, #36	; 0x24
 800604a:	9102      	str	r1, [sp, #8]
 800604c:	1c61      	adds	r1, r4, #1
 800604e:	9101      	str	r1, [sp, #4]
 8006050:	2102      	movs	r1, #2
 8006052:	9100      	str	r1, [sp, #0]
 8006054:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8006058:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800605a:	f001 fced 	bl	8007a38 <_dtoa_r>
 800605e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006062:	4601      	mov	r1, r0
 8006064:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006066:	4298      	cmp	r0, r3
 8006068:	d104      	bne.n	8006074 <print_e+0x3c>
 800606a:	4638      	mov	r0, r7
 800606c:	f7ff f8b4 	bl	80051d8 <strcpy>
 8006070:	b00b      	add	sp, #44	; 0x2c
 8006072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006074:	780b      	ldrb	r3, [r1, #0]
 8006076:	703b      	strb	r3, [r7, #0]
 8006078:	b945      	cbnz	r5, 800608c <print_e+0x54>
 800607a:	b93c      	cbnz	r4, 800608c <print_e+0x54>
 800607c:	1c7b      	adds	r3, r7, #1
 800607e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006082:	b93a      	cbnz	r2, 8006094 <print_e+0x5c>
 8006084:	2e67      	cmp	r6, #103	; 0x67
 8006086:	d10b      	bne.n	80060a0 <print_e+0x68>
 8006088:	2665      	movs	r6, #101	; 0x65
 800608a:	e014      	b.n	80060b6 <print_e+0x7e>
 800608c:	222e      	movs	r2, #46	; 0x2e
 800608e:	1cbb      	adds	r3, r7, #2
 8006090:	707a      	strb	r2, [r7, #1]
 8006092:	e7f4      	b.n	800607e <print_e+0x46>
 8006094:	2c00      	cmp	r4, #0
 8006096:	ddf5      	ble.n	8006084 <print_e+0x4c>
 8006098:	f803 2b01 	strb.w	r2, [r3], #1
 800609c:	3c01      	subs	r4, #1
 800609e:	e7ee      	b.n	800607e <print_e+0x46>
 80060a0:	2e47      	cmp	r6, #71	; 0x47
 80060a2:	d03d      	beq.n	8006120 <print_e+0xe8>
 80060a4:	4619      	mov	r1, r3
 80060a6:	2530      	movs	r5, #48	; 0x30
 80060a8:	1a62      	subs	r2, r4, r1
 80060aa:	441a      	add	r2, r3
 80060ac:	2a00      	cmp	r2, #0
 80060ae:	dc34      	bgt.n	800611a <print_e+0xe2>
 80060b0:	2c00      	cmp	r4, #0
 80060b2:	bfa8      	it	ge
 80060b4:	191b      	addge	r3, r3, r4
 80060b6:	1e41      	subs	r1, r0, #1
 80060b8:	2900      	cmp	r1, #0
 80060ba:	bfa8      	it	ge
 80060bc:	202b      	movge	r0, #43	; 0x2b
 80060be:	461a      	mov	r2, r3
 80060c0:	bfbc      	itt	lt
 80060c2:	242d      	movlt	r4, #45	; 0x2d
 80060c4:	f1c0 0001 	rsblt	r0, r0, #1
 80060c8:	9109      	str	r1, [sp, #36]	; 0x24
 80060ca:	bfb8      	it	lt
 80060cc:	9009      	strlt	r0, [sp, #36]	; 0x24
 80060ce:	f802 6b02 	strb.w	r6, [r2], #2
 80060d2:	bfa8      	it	ge
 80060d4:	7058      	strbge	r0, [r3, #1]
 80060d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060d8:	bfb8      	it	lt
 80060da:	705c      	strblt	r4, [r3, #1]
 80060dc:	2863      	cmp	r0, #99	; 0x63
 80060de:	4611      	mov	r1, r2
 80060e0:	dd0b      	ble.n	80060fa <print_e+0xc2>
 80060e2:	2364      	movs	r3, #100	; 0x64
 80060e4:	fb90 f3f3 	sdiv	r3, r0, r3
 80060e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80060ec:	7011      	strb	r1, [r2, #0]
 80060ee:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80060f2:	fb01 0303 	mla	r3, r1, r3, r0
 80060f6:	1c51      	adds	r1, r2, #1
 80060f8:	9309      	str	r3, [sp, #36]	; 0x24
 80060fa:	230a      	movs	r3, #10
 80060fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8006102:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006106:	7008      	strb	r0, [r1, #0]
 8006108:	f06f 0009 	mvn.w	r0, #9
 800610c:	fb00 2303 	mla	r3, r0, r3, r2
 8006110:	3330      	adds	r3, #48	; 0x30
 8006112:	704b      	strb	r3, [r1, #1]
 8006114:	2300      	movs	r3, #0
 8006116:	708b      	strb	r3, [r1, #2]
 8006118:	e7aa      	b.n	8006070 <print_e+0x38>
 800611a:	f801 5b01 	strb.w	r5, [r1], #1
 800611e:	e7c3      	b.n	80060a8 <print_e+0x70>
 8006120:	2645      	movs	r6, #69	; 0x45
 8006122:	e7c8      	b.n	80060b6 <print_e+0x7e>
 8006124:	0000      	movs	r0, r0
	...

08006128 <_gcvt>:
 8006128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800612c:	4616      	mov	r6, r2
 800612e:	461d      	mov	r5, r3
 8006130:	b08b      	sub	sp, #44	; 0x2c
 8006132:	4681      	mov	r9, r0
 8006134:	2200      	movs	r2, #0
 8006136:	2300      	movs	r3, #0
 8006138:	4630      	mov	r0, r6
 800613a:	4629      	mov	r1, r5
 800613c:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8006140:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006142:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8006144:	f7fa fc4e 	bl	80009e4 <__aeabi_dcmplt>
 8006148:	b108      	cbz	r0, 800614e <_gcvt+0x26>
 800614a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800614e:	2200      	movs	r2, #0
 8006150:	2300      	movs	r3, #0
 8006152:	4630      	mov	r0, r6
 8006154:	4629      	mov	r1, r5
 8006156:	f7fa fc3b 	bl	80009d0 <__aeabi_dcmpeq>
 800615a:	b138      	cbz	r0, 800616c <_gcvt+0x44>
 800615c:	2330      	movs	r3, #48	; 0x30
 800615e:	7023      	strb	r3, [r4, #0]
 8006160:	2300      	movs	r3, #0
 8006162:	7063      	strb	r3, [r4, #1]
 8006164:	4620      	mov	r0, r4
 8006166:	b00b      	add	sp, #44	; 0x2c
 8006168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800616c:	a350      	add	r3, pc, #320	; (adr r3, 80062b0 <_gcvt+0x188>)
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	4630      	mov	r0, r6
 8006174:	4629      	mov	r1, r5
 8006176:	f7fa fc3f 	bl	80009f8 <__aeabi_dcmple>
 800617a:	b168      	cbz	r0, 8006198 <_gcvt+0x70>
 800617c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8006180:	9702      	str	r7, [sp, #8]
 8006182:	9301      	str	r3, [sp, #4]
 8006184:	f108 33ff 	add.w	r3, r8, #4294967295
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	4632      	mov	r2, r6
 800618c:	462b      	mov	r3, r5
 800618e:	4621      	mov	r1, r4
 8006190:	4648      	mov	r0, r9
 8006192:	f7ff ff51 	bl	8006038 <print_e>
 8006196:	e7e5      	b.n	8006164 <_gcvt+0x3c>
 8006198:	4640      	mov	r0, r8
 800619a:	f000 ff85 	bl	80070a8 <_mprec_log10>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4630      	mov	r0, r6
 80061a4:	4629      	mov	r1, r5
 80061a6:	f7fa fc31 	bl	8000a0c <__aeabi_dcmpge>
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d1e6      	bne.n	800617c <_gcvt+0x54>
 80061ae:	2200      	movs	r2, #0
 80061b0:	4b41      	ldr	r3, [pc, #260]	; (80062b8 <_gcvt+0x190>)
 80061b2:	4629      	mov	r1, r5
 80061b4:	4630      	mov	r0, r6
 80061b6:	f7fa fc15 	bl	80009e4 <__aeabi_dcmplt>
 80061ba:	a909      	add	r1, sp, #36	; 0x24
 80061bc:	aa08      	add	r2, sp, #32
 80061be:	ab07      	add	r3, sp, #28
 80061c0:	9104      	str	r1, [sp, #16]
 80061c2:	9203      	str	r2, [sp, #12]
 80061c4:	9302      	str	r3, [sp, #8]
 80061c6:	f8cd 8004 	str.w	r8, [sp, #4]
 80061ca:	b1e8      	cbz	r0, 8006208 <_gcvt+0xe0>
 80061cc:	2303      	movs	r3, #3
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	4632      	mov	r2, r6
 80061d2:	462b      	mov	r3, r5
 80061d4:	4648      	mov	r0, r9
 80061d6:	f001 fc2f 	bl	8007a38 <_dtoa_r>
 80061da:	f242 730f 	movw	r3, #9999	; 0x270f
 80061de:	9a07      	ldr	r2, [sp, #28]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d013      	beq.n	800620c <_gcvt+0xe4>
 80061e4:	4623      	mov	r3, r4
 80061e6:	7801      	ldrb	r1, [r0, #0]
 80061e8:	eba8 0203 	sub.w	r2, r8, r3
 80061ec:	4605      	mov	r5, r0
 80061ee:	4422      	add	r2, r4
 80061f0:	3001      	adds	r0, #1
 80061f2:	9e07      	ldr	r6, [sp, #28]
 80061f4:	b9a1      	cbnz	r1, 8006220 <_gcvt+0xf8>
 80061f6:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80061fa:	1ab6      	subs	r6, r6, r2
 80061fc:	18b0      	adds	r0, r6, r2
 80061fe:	2800      	cmp	r0, #0
 8006200:	dc3a      	bgt.n	8006278 <_gcvt+0x150>
 8006202:	b179      	cbz	r1, 8006224 <_gcvt+0xfc>
 8006204:	9007      	str	r0, [sp, #28]
 8006206:	e00d      	b.n	8006224 <_gcvt+0xfc>
 8006208:	2302      	movs	r3, #2
 800620a:	e7e0      	b.n	80061ce <_gcvt+0xa6>
 800620c:	4601      	mov	r1, r0
 800620e:	4620      	mov	r0, r4
 8006210:	f7fe ffe2 	bl	80051d8 <strcpy>
 8006214:	e7a6      	b.n	8006164 <_gcvt+0x3c>
 8006216:	3e01      	subs	r6, #1
 8006218:	f803 1b01 	strb.w	r1, [r3], #1
 800621c:	9607      	str	r6, [sp, #28]
 800621e:	e7e2      	b.n	80061e6 <_gcvt+0xbe>
 8006220:	2e00      	cmp	r6, #0
 8006222:	dcf8      	bgt.n	8006216 <_gcvt+0xee>
 8006224:	b90f      	cbnz	r7, 800622a <_gcvt+0x102>
 8006226:	7829      	ldrb	r1, [r5, #0]
 8006228:	b319      	cbz	r1, 8006272 <_gcvt+0x14a>
 800622a:	429c      	cmp	r4, r3
 800622c:	bf04      	itt	eq
 800622e:	2130      	moveq	r1, #48	; 0x30
 8006230:	7021      	strbeq	r1, [r4, #0]
 8006232:	f04f 012e 	mov.w	r1, #46	; 0x2e
 8006236:	f04f 0000 	mov.w	r0, #0
 800623a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800623e:	bf08      	it	eq
 8006240:	1c63      	addeq	r3, r4, #1
 8006242:	7019      	strb	r1, [r3, #0]
 8006244:	9907      	ldr	r1, [sp, #28]
 8006246:	3301      	adds	r3, #1
 8006248:	2900      	cmp	r1, #0
 800624a:	460e      	mov	r6, r1
 800624c:	db20      	blt.n	8006290 <_gcvt+0x168>
 800624e:	b100      	cbz	r0, 8006252 <_gcvt+0x12a>
 8006250:	9107      	str	r1, [sp, #28]
 8006252:	3d01      	subs	r5, #1
 8006254:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8006258:	b109      	cbz	r1, 800625e <_gcvt+0x136>
 800625a:	2a00      	cmp	r2, #0
 800625c:	dc20      	bgt.n	80062a0 <_gcvt+0x178>
 800625e:	b147      	cbz	r7, 8006272 <_gcvt+0x14a>
 8006260:	4618      	mov	r0, r3
 8006262:	2530      	movs	r5, #48	; 0x30
 8006264:	1a11      	subs	r1, r2, r0
 8006266:	4419      	add	r1, r3
 8006268:	2900      	cmp	r1, #0
 800626a:	dc1d      	bgt.n	80062a8 <_gcvt+0x180>
 800626c:	2a00      	cmp	r2, #0
 800626e:	bfa8      	it	ge
 8006270:	189b      	addge	r3, r3, r2
 8006272:	2200      	movs	r2, #0
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	e775      	b.n	8006164 <_gcvt+0x3c>
 8006278:	2a00      	cmp	r2, #0
 800627a:	ddc2      	ble.n	8006202 <_gcvt+0xda>
 800627c:	f803 eb01 	strb.w	lr, [r3], #1
 8006280:	3a01      	subs	r2, #1
 8006282:	2101      	movs	r1, #1
 8006284:	e7ba      	b.n	80061fc <_gcvt+0xd4>
 8006286:	f803 eb01 	strb.w	lr, [r3], #1
 800628a:	3a01      	subs	r2, #1
 800628c:	2001      	movs	r0, #1
 800628e:	e7db      	b.n	8006248 <_gcvt+0x120>
 8006290:	2a00      	cmp	r2, #0
 8006292:	f101 0101 	add.w	r1, r1, #1
 8006296:	dcf6      	bgt.n	8006286 <_gcvt+0x15e>
 8006298:	2800      	cmp	r0, #0
 800629a:	d0da      	beq.n	8006252 <_gcvt+0x12a>
 800629c:	9607      	str	r6, [sp, #28]
 800629e:	e7d8      	b.n	8006252 <_gcvt+0x12a>
 80062a0:	f803 1b01 	strb.w	r1, [r3], #1
 80062a4:	3a01      	subs	r2, #1
 80062a6:	e7d5      	b.n	8006254 <_gcvt+0x12c>
 80062a8:	f800 5b01 	strb.w	r5, [r0], #1
 80062ac:	e7da      	b.n	8006264 <_gcvt+0x13c>
 80062ae:	bf00      	nop
 80062b0:	eb1c432d 	.word	0xeb1c432d
 80062b4:	3f1a36e2 	.word	0x3f1a36e2
 80062b8:	3ff00000 	.word	0x3ff00000

080062bc <rshift>:
 80062bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062be:	6906      	ldr	r6, [r0, #16]
 80062c0:	114b      	asrs	r3, r1, #5
 80062c2:	42b3      	cmp	r3, r6
 80062c4:	f100 0514 	add.w	r5, r0, #20
 80062c8:	da2b      	bge.n	8006322 <rshift+0x66>
 80062ca:	f011 011f 	ands.w	r1, r1, #31
 80062ce:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80062d2:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80062d6:	d108      	bne.n	80062ea <rshift+0x2e>
 80062d8:	4629      	mov	r1, r5
 80062da:	42b2      	cmp	r2, r6
 80062dc:	460b      	mov	r3, r1
 80062de:	d210      	bcs.n	8006302 <rshift+0x46>
 80062e0:	f852 3b04 	ldr.w	r3, [r2], #4
 80062e4:	f841 3b04 	str.w	r3, [r1], #4
 80062e8:	e7f7      	b.n	80062da <rshift+0x1e>
 80062ea:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 80062ee:	462b      	mov	r3, r5
 80062f0:	f1c1 0e20 	rsb	lr, r1, #32
 80062f4:	3204      	adds	r2, #4
 80062f6:	40cc      	lsrs	r4, r1
 80062f8:	42b2      	cmp	r2, r6
 80062fa:	d308      	bcc.n	800630e <rshift+0x52>
 80062fc:	601c      	str	r4, [r3, #0]
 80062fe:	b104      	cbz	r4, 8006302 <rshift+0x46>
 8006300:	3304      	adds	r3, #4
 8006302:	1b5b      	subs	r3, r3, r5
 8006304:	109b      	asrs	r3, r3, #2
 8006306:	6103      	str	r3, [r0, #16]
 8006308:	b903      	cbnz	r3, 800630c <rshift+0x50>
 800630a:	6143      	str	r3, [r0, #20]
 800630c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800630e:	6817      	ldr	r7, [r2, #0]
 8006310:	fa07 f70e 	lsl.w	r7, r7, lr
 8006314:	433c      	orrs	r4, r7
 8006316:	f843 4b04 	str.w	r4, [r3], #4
 800631a:	f852 4b04 	ldr.w	r4, [r2], #4
 800631e:	40cc      	lsrs	r4, r1
 8006320:	e7ea      	b.n	80062f8 <rshift+0x3c>
 8006322:	462b      	mov	r3, r5
 8006324:	e7ed      	b.n	8006302 <rshift+0x46>

08006326 <__hexdig_fun>:
 8006326:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800632a:	2b09      	cmp	r3, #9
 800632c:	d802      	bhi.n	8006334 <__hexdig_fun+0xe>
 800632e:	3820      	subs	r0, #32
 8006330:	b2c0      	uxtb	r0, r0
 8006332:	4770      	bx	lr
 8006334:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006338:	2b05      	cmp	r3, #5
 800633a:	d801      	bhi.n	8006340 <__hexdig_fun+0x1a>
 800633c:	3847      	subs	r0, #71	; 0x47
 800633e:	e7f7      	b.n	8006330 <__hexdig_fun+0xa>
 8006340:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006344:	2b05      	cmp	r3, #5
 8006346:	d801      	bhi.n	800634c <__hexdig_fun+0x26>
 8006348:	3827      	subs	r0, #39	; 0x27
 800634a:	e7f1      	b.n	8006330 <__hexdig_fun+0xa>
 800634c:	2000      	movs	r0, #0
 800634e:	4770      	bx	lr

08006350 <__gethex>:
 8006350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006354:	b08b      	sub	sp, #44	; 0x2c
 8006356:	9002      	str	r0, [sp, #8]
 8006358:	9816      	ldr	r0, [sp, #88]	; 0x58
 800635a:	468a      	mov	sl, r1
 800635c:	4690      	mov	r8, r2
 800635e:	9306      	str	r3, [sp, #24]
 8006360:	f000 facd 	bl	80068fe <__localeconv_l>
 8006364:	6803      	ldr	r3, [r0, #0]
 8006366:	f04f 0b00 	mov.w	fp, #0
 800636a:	4618      	mov	r0, r3
 800636c:	9303      	str	r3, [sp, #12]
 800636e:	f7f9 ff07 	bl	8000180 <strlen>
 8006372:	9b03      	ldr	r3, [sp, #12]
 8006374:	9001      	str	r0, [sp, #4]
 8006376:	4403      	add	r3, r0
 8006378:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800637c:	9307      	str	r3, [sp, #28]
 800637e:	f8da 3000 	ldr.w	r3, [sl]
 8006382:	3302      	adds	r3, #2
 8006384:	461f      	mov	r7, r3
 8006386:	f813 0b01 	ldrb.w	r0, [r3], #1
 800638a:	2830      	cmp	r0, #48	; 0x30
 800638c:	d06c      	beq.n	8006468 <__gethex+0x118>
 800638e:	f7ff ffca 	bl	8006326 <__hexdig_fun>
 8006392:	4604      	mov	r4, r0
 8006394:	2800      	cmp	r0, #0
 8006396:	d16a      	bne.n	800646e <__gethex+0x11e>
 8006398:	9a01      	ldr	r2, [sp, #4]
 800639a:	9903      	ldr	r1, [sp, #12]
 800639c:	4638      	mov	r0, r7
 800639e:	f7fe ff23 	bl	80051e8 <strncmp>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d166      	bne.n	8006474 <__gethex+0x124>
 80063a6:	9b01      	ldr	r3, [sp, #4]
 80063a8:	5cf8      	ldrb	r0, [r7, r3]
 80063aa:	18fe      	adds	r6, r7, r3
 80063ac:	f7ff ffbb 	bl	8006326 <__hexdig_fun>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d062      	beq.n	800647a <__gethex+0x12a>
 80063b4:	4633      	mov	r3, r6
 80063b6:	7818      	ldrb	r0, [r3, #0]
 80063b8:	461f      	mov	r7, r3
 80063ba:	2830      	cmp	r0, #48	; 0x30
 80063bc:	f103 0301 	add.w	r3, r3, #1
 80063c0:	d0f9      	beq.n	80063b6 <__gethex+0x66>
 80063c2:	f7ff ffb0 	bl	8006326 <__hexdig_fun>
 80063c6:	fab0 f580 	clz	r5, r0
 80063ca:	4634      	mov	r4, r6
 80063cc:	f04f 0b01 	mov.w	fp, #1
 80063d0:	096d      	lsrs	r5, r5, #5
 80063d2:	463a      	mov	r2, r7
 80063d4:	4616      	mov	r6, r2
 80063d6:	7830      	ldrb	r0, [r6, #0]
 80063d8:	3201      	adds	r2, #1
 80063da:	f7ff ffa4 	bl	8006326 <__hexdig_fun>
 80063de:	2800      	cmp	r0, #0
 80063e0:	d1f8      	bne.n	80063d4 <__gethex+0x84>
 80063e2:	9a01      	ldr	r2, [sp, #4]
 80063e4:	9903      	ldr	r1, [sp, #12]
 80063e6:	4630      	mov	r0, r6
 80063e8:	f7fe fefe 	bl	80051e8 <strncmp>
 80063ec:	b950      	cbnz	r0, 8006404 <__gethex+0xb4>
 80063ee:	b954      	cbnz	r4, 8006406 <__gethex+0xb6>
 80063f0:	9b01      	ldr	r3, [sp, #4]
 80063f2:	18f4      	adds	r4, r6, r3
 80063f4:	4622      	mov	r2, r4
 80063f6:	4616      	mov	r6, r2
 80063f8:	7830      	ldrb	r0, [r6, #0]
 80063fa:	3201      	adds	r2, #1
 80063fc:	f7ff ff93 	bl	8006326 <__hexdig_fun>
 8006400:	2800      	cmp	r0, #0
 8006402:	d1f8      	bne.n	80063f6 <__gethex+0xa6>
 8006404:	b10c      	cbz	r4, 800640a <__gethex+0xba>
 8006406:	1ba4      	subs	r4, r4, r6
 8006408:	00a4      	lsls	r4, r4, #2
 800640a:	7833      	ldrb	r3, [r6, #0]
 800640c:	2b50      	cmp	r3, #80	; 0x50
 800640e:	d001      	beq.n	8006414 <__gethex+0xc4>
 8006410:	2b70      	cmp	r3, #112	; 0x70
 8006412:	d140      	bne.n	8006496 <__gethex+0x146>
 8006414:	7873      	ldrb	r3, [r6, #1]
 8006416:	2b2b      	cmp	r3, #43	; 0x2b
 8006418:	d035      	beq.n	8006486 <__gethex+0x136>
 800641a:	2b2d      	cmp	r3, #45	; 0x2d
 800641c:	d02f      	beq.n	800647e <__gethex+0x12e>
 800641e:	f04f 0900 	mov.w	r9, #0
 8006422:	1c71      	adds	r1, r6, #1
 8006424:	7808      	ldrb	r0, [r1, #0]
 8006426:	f7ff ff7e 	bl	8006326 <__hexdig_fun>
 800642a:	1e43      	subs	r3, r0, #1
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b18      	cmp	r3, #24
 8006430:	d831      	bhi.n	8006496 <__gethex+0x146>
 8006432:	f1a0 0210 	sub.w	r2, r0, #16
 8006436:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800643a:	f7ff ff74 	bl	8006326 <__hexdig_fun>
 800643e:	1e43      	subs	r3, r0, #1
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b18      	cmp	r3, #24
 8006444:	d922      	bls.n	800648c <__gethex+0x13c>
 8006446:	f1b9 0f00 	cmp.w	r9, #0
 800644a:	d000      	beq.n	800644e <__gethex+0xfe>
 800644c:	4252      	negs	r2, r2
 800644e:	4414      	add	r4, r2
 8006450:	f8ca 1000 	str.w	r1, [sl]
 8006454:	b30d      	cbz	r5, 800649a <__gethex+0x14a>
 8006456:	f1bb 0f00 	cmp.w	fp, #0
 800645a:	bf14      	ite	ne
 800645c:	2700      	movne	r7, #0
 800645e:	2706      	moveq	r7, #6
 8006460:	4638      	mov	r0, r7
 8006462:	b00b      	add	sp, #44	; 0x2c
 8006464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006468:	f10b 0b01 	add.w	fp, fp, #1
 800646c:	e78a      	b.n	8006384 <__gethex+0x34>
 800646e:	2500      	movs	r5, #0
 8006470:	462c      	mov	r4, r5
 8006472:	e7ae      	b.n	80063d2 <__gethex+0x82>
 8006474:	463e      	mov	r6, r7
 8006476:	2501      	movs	r5, #1
 8006478:	e7c7      	b.n	800640a <__gethex+0xba>
 800647a:	4604      	mov	r4, r0
 800647c:	e7fb      	b.n	8006476 <__gethex+0x126>
 800647e:	f04f 0901 	mov.w	r9, #1
 8006482:	1cb1      	adds	r1, r6, #2
 8006484:	e7ce      	b.n	8006424 <__gethex+0xd4>
 8006486:	f04f 0900 	mov.w	r9, #0
 800648a:	e7fa      	b.n	8006482 <__gethex+0x132>
 800648c:	230a      	movs	r3, #10
 800648e:	fb03 0202 	mla	r2, r3, r2, r0
 8006492:	3a10      	subs	r2, #16
 8006494:	e7cf      	b.n	8006436 <__gethex+0xe6>
 8006496:	4631      	mov	r1, r6
 8006498:	e7da      	b.n	8006450 <__gethex+0x100>
 800649a:	4629      	mov	r1, r5
 800649c:	1bf3      	subs	r3, r6, r7
 800649e:	3b01      	subs	r3, #1
 80064a0:	2b07      	cmp	r3, #7
 80064a2:	dc49      	bgt.n	8006538 <__gethex+0x1e8>
 80064a4:	9802      	ldr	r0, [sp, #8]
 80064a6:	f000 fa52 	bl	800694e <_Balloc>
 80064aa:	f04f 0b00 	mov.w	fp, #0
 80064ae:	4605      	mov	r5, r0
 80064b0:	46da      	mov	sl, fp
 80064b2:	9b01      	ldr	r3, [sp, #4]
 80064b4:	f100 0914 	add.w	r9, r0, #20
 80064b8:	f1c3 0301 	rsb	r3, r3, #1
 80064bc:	f8cd 9010 	str.w	r9, [sp, #16]
 80064c0:	9308      	str	r3, [sp, #32]
 80064c2:	42b7      	cmp	r7, r6
 80064c4:	d33b      	bcc.n	800653e <__gethex+0x1ee>
 80064c6:	9804      	ldr	r0, [sp, #16]
 80064c8:	f840 ab04 	str.w	sl, [r0], #4
 80064cc:	eba0 0009 	sub.w	r0, r0, r9
 80064d0:	1080      	asrs	r0, r0, #2
 80064d2:	6128      	str	r0, [r5, #16]
 80064d4:	0147      	lsls	r7, r0, #5
 80064d6:	4650      	mov	r0, sl
 80064d8:	f000 fafd 	bl	8006ad6 <__hi0bits>
 80064dc:	f8d8 6000 	ldr.w	r6, [r8]
 80064e0:	1a3f      	subs	r7, r7, r0
 80064e2:	42b7      	cmp	r7, r6
 80064e4:	dd64      	ble.n	80065b0 <__gethex+0x260>
 80064e6:	1bbf      	subs	r7, r7, r6
 80064e8:	4639      	mov	r1, r7
 80064ea:	4628      	mov	r0, r5
 80064ec:	f000 fe12 	bl	8007114 <__any_on>
 80064f0:	4682      	mov	sl, r0
 80064f2:	b178      	cbz	r0, 8006514 <__gethex+0x1c4>
 80064f4:	f04f 0a01 	mov.w	sl, #1
 80064f8:	1e7b      	subs	r3, r7, #1
 80064fa:	1159      	asrs	r1, r3, #5
 80064fc:	f003 021f 	and.w	r2, r3, #31
 8006500:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006504:	fa0a f202 	lsl.w	r2, sl, r2
 8006508:	420a      	tst	r2, r1
 800650a:	d003      	beq.n	8006514 <__gethex+0x1c4>
 800650c:	4553      	cmp	r3, sl
 800650e:	dc46      	bgt.n	800659e <__gethex+0x24e>
 8006510:	f04f 0a02 	mov.w	sl, #2
 8006514:	4639      	mov	r1, r7
 8006516:	4628      	mov	r0, r5
 8006518:	f7ff fed0 	bl	80062bc <rshift>
 800651c:	443c      	add	r4, r7
 800651e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006522:	429c      	cmp	r4, r3
 8006524:	dd52      	ble.n	80065cc <__gethex+0x27c>
 8006526:	4629      	mov	r1, r5
 8006528:	9802      	ldr	r0, [sp, #8]
 800652a:	f000 fa44 	bl	80069b6 <_Bfree>
 800652e:	2300      	movs	r3, #0
 8006530:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006532:	27a3      	movs	r7, #163	; 0xa3
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	e793      	b.n	8006460 <__gethex+0x110>
 8006538:	3101      	adds	r1, #1
 800653a:	105b      	asrs	r3, r3, #1
 800653c:	e7b0      	b.n	80064a0 <__gethex+0x150>
 800653e:	1e73      	subs	r3, r6, #1
 8006540:	9305      	str	r3, [sp, #20]
 8006542:	9a07      	ldr	r2, [sp, #28]
 8006544:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006548:	4293      	cmp	r3, r2
 800654a:	d018      	beq.n	800657e <__gethex+0x22e>
 800654c:	f1bb 0f20 	cmp.w	fp, #32
 8006550:	d107      	bne.n	8006562 <__gethex+0x212>
 8006552:	9b04      	ldr	r3, [sp, #16]
 8006554:	f8c3 a000 	str.w	sl, [r3]
 8006558:	f04f 0a00 	mov.w	sl, #0
 800655c:	46d3      	mov	fp, sl
 800655e:	3304      	adds	r3, #4
 8006560:	9304      	str	r3, [sp, #16]
 8006562:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006566:	f7ff fede 	bl	8006326 <__hexdig_fun>
 800656a:	f000 000f 	and.w	r0, r0, #15
 800656e:	fa00 f00b 	lsl.w	r0, r0, fp
 8006572:	ea4a 0a00 	orr.w	sl, sl, r0
 8006576:	f10b 0b04 	add.w	fp, fp, #4
 800657a:	9b05      	ldr	r3, [sp, #20]
 800657c:	e00d      	b.n	800659a <__gethex+0x24a>
 800657e:	9b05      	ldr	r3, [sp, #20]
 8006580:	9a08      	ldr	r2, [sp, #32]
 8006582:	4413      	add	r3, r2
 8006584:	429f      	cmp	r7, r3
 8006586:	d8e1      	bhi.n	800654c <__gethex+0x1fc>
 8006588:	4618      	mov	r0, r3
 800658a:	9a01      	ldr	r2, [sp, #4]
 800658c:	9903      	ldr	r1, [sp, #12]
 800658e:	9309      	str	r3, [sp, #36]	; 0x24
 8006590:	f7fe fe2a 	bl	80051e8 <strncmp>
 8006594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006596:	2800      	cmp	r0, #0
 8006598:	d1d8      	bne.n	800654c <__gethex+0x1fc>
 800659a:	461e      	mov	r6, r3
 800659c:	e791      	b.n	80064c2 <__gethex+0x172>
 800659e:	1eb9      	subs	r1, r7, #2
 80065a0:	4628      	mov	r0, r5
 80065a2:	f000 fdb7 	bl	8007114 <__any_on>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	d0b2      	beq.n	8006510 <__gethex+0x1c0>
 80065aa:	f04f 0a03 	mov.w	sl, #3
 80065ae:	e7b1      	b.n	8006514 <__gethex+0x1c4>
 80065b0:	da09      	bge.n	80065c6 <__gethex+0x276>
 80065b2:	1bf7      	subs	r7, r6, r7
 80065b4:	4629      	mov	r1, r5
 80065b6:	463a      	mov	r2, r7
 80065b8:	9802      	ldr	r0, [sp, #8]
 80065ba:	f000 fbbd 	bl	8006d38 <__lshift>
 80065be:	4605      	mov	r5, r0
 80065c0:	1be4      	subs	r4, r4, r7
 80065c2:	f100 0914 	add.w	r9, r0, #20
 80065c6:	f04f 0a00 	mov.w	sl, #0
 80065ca:	e7a8      	b.n	800651e <__gethex+0x1ce>
 80065cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80065d0:	4284      	cmp	r4, r0
 80065d2:	da6b      	bge.n	80066ac <__gethex+0x35c>
 80065d4:	1b04      	subs	r4, r0, r4
 80065d6:	42a6      	cmp	r6, r4
 80065d8:	dc2e      	bgt.n	8006638 <__gethex+0x2e8>
 80065da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d022      	beq.n	8006628 <__gethex+0x2d8>
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d024      	beq.n	8006630 <__gethex+0x2e0>
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d115      	bne.n	8006616 <__gethex+0x2c6>
 80065ea:	42a6      	cmp	r6, r4
 80065ec:	d113      	bne.n	8006616 <__gethex+0x2c6>
 80065ee:	2e01      	cmp	r6, #1
 80065f0:	dc0b      	bgt.n	800660a <__gethex+0x2ba>
 80065f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80065f6:	9a06      	ldr	r2, [sp, #24]
 80065f8:	2762      	movs	r7, #98	; 0x62
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	2301      	movs	r3, #1
 80065fe:	612b      	str	r3, [r5, #16]
 8006600:	f8c9 3000 	str.w	r3, [r9]
 8006604:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006606:	601d      	str	r5, [r3, #0]
 8006608:	e72a      	b.n	8006460 <__gethex+0x110>
 800660a:	1e71      	subs	r1, r6, #1
 800660c:	4628      	mov	r0, r5
 800660e:	f000 fd81 	bl	8007114 <__any_on>
 8006612:	2800      	cmp	r0, #0
 8006614:	d1ed      	bne.n	80065f2 <__gethex+0x2a2>
 8006616:	4629      	mov	r1, r5
 8006618:	9802      	ldr	r0, [sp, #8]
 800661a:	f000 f9cc 	bl	80069b6 <_Bfree>
 800661e:	2300      	movs	r3, #0
 8006620:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006622:	2750      	movs	r7, #80	; 0x50
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	e71b      	b.n	8006460 <__gethex+0x110>
 8006628:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0e1      	beq.n	80065f2 <__gethex+0x2a2>
 800662e:	e7f2      	b.n	8006616 <__gethex+0x2c6>
 8006630:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1dd      	bne.n	80065f2 <__gethex+0x2a2>
 8006636:	e7ee      	b.n	8006616 <__gethex+0x2c6>
 8006638:	1e67      	subs	r7, r4, #1
 800663a:	f1ba 0f00 	cmp.w	sl, #0
 800663e:	d132      	bne.n	80066a6 <__gethex+0x356>
 8006640:	b127      	cbz	r7, 800664c <__gethex+0x2fc>
 8006642:	4639      	mov	r1, r7
 8006644:	4628      	mov	r0, r5
 8006646:	f000 fd65 	bl	8007114 <__any_on>
 800664a:	4682      	mov	sl, r0
 800664c:	2301      	movs	r3, #1
 800664e:	117a      	asrs	r2, r7, #5
 8006650:	f007 071f 	and.w	r7, r7, #31
 8006654:	fa03 f707 	lsl.w	r7, r3, r7
 8006658:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800665c:	4621      	mov	r1, r4
 800665e:	421f      	tst	r7, r3
 8006660:	f04f 0702 	mov.w	r7, #2
 8006664:	4628      	mov	r0, r5
 8006666:	bf18      	it	ne
 8006668:	f04a 0a02 	orrne.w	sl, sl, #2
 800666c:	1b36      	subs	r6, r6, r4
 800666e:	f7ff fe25 	bl	80062bc <rshift>
 8006672:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006676:	f1ba 0f00 	cmp.w	sl, #0
 800667a:	d045      	beq.n	8006708 <__gethex+0x3b8>
 800667c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006680:	2b02      	cmp	r3, #2
 8006682:	d015      	beq.n	80066b0 <__gethex+0x360>
 8006684:	2b03      	cmp	r3, #3
 8006686:	d017      	beq.n	80066b8 <__gethex+0x368>
 8006688:	2b01      	cmp	r3, #1
 800668a:	d109      	bne.n	80066a0 <__gethex+0x350>
 800668c:	f01a 0f02 	tst.w	sl, #2
 8006690:	d006      	beq.n	80066a0 <__gethex+0x350>
 8006692:	f8d9 3000 	ldr.w	r3, [r9]
 8006696:	ea4a 0a03 	orr.w	sl, sl, r3
 800669a:	f01a 0f01 	tst.w	sl, #1
 800669e:	d10e      	bne.n	80066be <__gethex+0x36e>
 80066a0:	f047 0710 	orr.w	r7, r7, #16
 80066a4:	e030      	b.n	8006708 <__gethex+0x3b8>
 80066a6:	f04f 0a01 	mov.w	sl, #1
 80066aa:	e7cf      	b.n	800664c <__gethex+0x2fc>
 80066ac:	2701      	movs	r7, #1
 80066ae:	e7e2      	b.n	8006676 <__gethex+0x326>
 80066b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066b2:	f1c3 0301 	rsb	r3, r3, #1
 80066b6:	9315      	str	r3, [sp, #84]	; 0x54
 80066b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0f0      	beq.n	80066a0 <__gethex+0x350>
 80066be:	2000      	movs	r0, #0
 80066c0:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80066c4:	f105 0314 	add.w	r3, r5, #20
 80066c8:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80066cc:	eb03 010a 	add.w	r1, r3, sl
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80066d6:	d01c      	beq.n	8006712 <__gethex+0x3c2>
 80066d8:	3201      	adds	r2, #1
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	2f02      	cmp	r7, #2
 80066de:	f105 0314 	add.w	r3, r5, #20
 80066e2:	d138      	bne.n	8006756 <__gethex+0x406>
 80066e4:	f8d8 2000 	ldr.w	r2, [r8]
 80066e8:	3a01      	subs	r2, #1
 80066ea:	4296      	cmp	r6, r2
 80066ec:	d10a      	bne.n	8006704 <__gethex+0x3b4>
 80066ee:	2201      	movs	r2, #1
 80066f0:	1171      	asrs	r1, r6, #5
 80066f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80066f6:	f006 061f 	and.w	r6, r6, #31
 80066fa:	fa02 f606 	lsl.w	r6, r2, r6
 80066fe:	421e      	tst	r6, r3
 8006700:	bf18      	it	ne
 8006702:	4617      	movne	r7, r2
 8006704:	f047 0720 	orr.w	r7, r7, #32
 8006708:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800670a:	601d      	str	r5, [r3, #0]
 800670c:	9b06      	ldr	r3, [sp, #24]
 800670e:	601c      	str	r4, [r3, #0]
 8006710:	e6a6      	b.n	8006460 <__gethex+0x110>
 8006712:	f843 0b04 	str.w	r0, [r3], #4
 8006716:	4299      	cmp	r1, r3
 8006718:	d8da      	bhi.n	80066d0 <__gethex+0x380>
 800671a:	68ab      	ldr	r3, [r5, #8]
 800671c:	4599      	cmp	r9, r3
 800671e:	db12      	blt.n	8006746 <__gethex+0x3f6>
 8006720:	6869      	ldr	r1, [r5, #4]
 8006722:	9802      	ldr	r0, [sp, #8]
 8006724:	3101      	adds	r1, #1
 8006726:	f000 f912 	bl	800694e <_Balloc>
 800672a:	4683      	mov	fp, r0
 800672c:	692a      	ldr	r2, [r5, #16]
 800672e:	f105 010c 	add.w	r1, r5, #12
 8006732:	3202      	adds	r2, #2
 8006734:	0092      	lsls	r2, r2, #2
 8006736:	300c      	adds	r0, #12
 8006738:	f000 f8fe 	bl	8006938 <memcpy>
 800673c:	4629      	mov	r1, r5
 800673e:	9802      	ldr	r0, [sp, #8]
 8006740:	f000 f939 	bl	80069b6 <_Bfree>
 8006744:	465d      	mov	r5, fp
 8006746:	692b      	ldr	r3, [r5, #16]
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	612a      	str	r2, [r5, #16]
 800674c:	2201      	movs	r2, #1
 800674e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006752:	615a      	str	r2, [r3, #20]
 8006754:	e7c2      	b.n	80066dc <__gethex+0x38c>
 8006756:	692a      	ldr	r2, [r5, #16]
 8006758:	4591      	cmp	r9, r2
 800675a:	da0b      	bge.n	8006774 <__gethex+0x424>
 800675c:	2101      	movs	r1, #1
 800675e:	4628      	mov	r0, r5
 8006760:	f7ff fdac 	bl	80062bc <rshift>
 8006764:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006768:	3401      	adds	r4, #1
 800676a:	429c      	cmp	r4, r3
 800676c:	f73f aedb 	bgt.w	8006526 <__gethex+0x1d6>
 8006770:	2701      	movs	r7, #1
 8006772:	e7c7      	b.n	8006704 <__gethex+0x3b4>
 8006774:	f016 061f 	ands.w	r6, r6, #31
 8006778:	d0fa      	beq.n	8006770 <__gethex+0x420>
 800677a:	449a      	add	sl, r3
 800677c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006780:	f000 f9a9 	bl	8006ad6 <__hi0bits>
 8006784:	f1c6 0620 	rsb	r6, r6, #32
 8006788:	42b0      	cmp	r0, r6
 800678a:	dbe7      	blt.n	800675c <__gethex+0x40c>
 800678c:	e7f0      	b.n	8006770 <__gethex+0x420>

0800678e <L_shift>:
 800678e:	f1c2 0208 	rsb	r2, r2, #8
 8006792:	0092      	lsls	r2, r2, #2
 8006794:	b570      	push	{r4, r5, r6, lr}
 8006796:	f1c2 0620 	rsb	r6, r2, #32
 800679a:	6843      	ldr	r3, [r0, #4]
 800679c:	6804      	ldr	r4, [r0, #0]
 800679e:	fa03 f506 	lsl.w	r5, r3, r6
 80067a2:	432c      	orrs	r4, r5
 80067a4:	40d3      	lsrs	r3, r2
 80067a6:	6004      	str	r4, [r0, #0]
 80067a8:	f840 3f04 	str.w	r3, [r0, #4]!
 80067ac:	4288      	cmp	r0, r1
 80067ae:	d3f4      	bcc.n	800679a <L_shift+0xc>
 80067b0:	bd70      	pop	{r4, r5, r6, pc}

080067b2 <__match>:
 80067b2:	b530      	push	{r4, r5, lr}
 80067b4:	6803      	ldr	r3, [r0, #0]
 80067b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ba:	3301      	adds	r3, #1
 80067bc:	b914      	cbnz	r4, 80067c4 <__match+0x12>
 80067be:	6003      	str	r3, [r0, #0]
 80067c0:	2001      	movs	r0, #1
 80067c2:	bd30      	pop	{r4, r5, pc}
 80067c4:	781a      	ldrb	r2, [r3, #0]
 80067c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80067ca:	2d19      	cmp	r5, #25
 80067cc:	bf98      	it	ls
 80067ce:	3220      	addls	r2, #32
 80067d0:	42a2      	cmp	r2, r4
 80067d2:	d0f0      	beq.n	80067b6 <__match+0x4>
 80067d4:	2000      	movs	r0, #0
 80067d6:	bd30      	pop	{r4, r5, pc}

080067d8 <__hexnan>:
 80067d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067dc:	2500      	movs	r5, #0
 80067de:	680b      	ldr	r3, [r1, #0]
 80067e0:	4682      	mov	sl, r0
 80067e2:	115f      	asrs	r7, r3, #5
 80067e4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80067e8:	f013 031f 	ands.w	r3, r3, #31
 80067ec:	bf18      	it	ne
 80067ee:	3704      	addne	r7, #4
 80067f0:	1f3e      	subs	r6, r7, #4
 80067f2:	4690      	mov	r8, r2
 80067f4:	46b1      	mov	r9, r6
 80067f6:	4634      	mov	r4, r6
 80067f8:	46ab      	mov	fp, r5
 80067fa:	b087      	sub	sp, #28
 80067fc:	6801      	ldr	r1, [r0, #0]
 80067fe:	9302      	str	r3, [sp, #8]
 8006800:	f847 5c04 	str.w	r5, [r7, #-4]
 8006804:	9501      	str	r5, [sp, #4]
 8006806:	784a      	ldrb	r2, [r1, #1]
 8006808:	1c4b      	adds	r3, r1, #1
 800680a:	9303      	str	r3, [sp, #12]
 800680c:	b342      	cbz	r2, 8006860 <__hexnan+0x88>
 800680e:	4610      	mov	r0, r2
 8006810:	9105      	str	r1, [sp, #20]
 8006812:	9204      	str	r2, [sp, #16]
 8006814:	f7ff fd87 	bl	8006326 <__hexdig_fun>
 8006818:	2800      	cmp	r0, #0
 800681a:	d143      	bne.n	80068a4 <__hexnan+0xcc>
 800681c:	9a04      	ldr	r2, [sp, #16]
 800681e:	9905      	ldr	r1, [sp, #20]
 8006820:	2a20      	cmp	r2, #32
 8006822:	d818      	bhi.n	8006856 <__hexnan+0x7e>
 8006824:	9b01      	ldr	r3, [sp, #4]
 8006826:	459b      	cmp	fp, r3
 8006828:	dd13      	ble.n	8006852 <__hexnan+0x7a>
 800682a:	454c      	cmp	r4, r9
 800682c:	d206      	bcs.n	800683c <__hexnan+0x64>
 800682e:	2d07      	cmp	r5, #7
 8006830:	dc04      	bgt.n	800683c <__hexnan+0x64>
 8006832:	462a      	mov	r2, r5
 8006834:	4649      	mov	r1, r9
 8006836:	4620      	mov	r0, r4
 8006838:	f7ff ffa9 	bl	800678e <L_shift>
 800683c:	4544      	cmp	r4, r8
 800683e:	d944      	bls.n	80068ca <__hexnan+0xf2>
 8006840:	2300      	movs	r3, #0
 8006842:	f1a4 0904 	sub.w	r9, r4, #4
 8006846:	f844 3c04 	str.w	r3, [r4, #-4]
 800684a:	461d      	mov	r5, r3
 800684c:	464c      	mov	r4, r9
 800684e:	f8cd b004 	str.w	fp, [sp, #4]
 8006852:	9903      	ldr	r1, [sp, #12]
 8006854:	e7d7      	b.n	8006806 <__hexnan+0x2e>
 8006856:	2a29      	cmp	r2, #41	; 0x29
 8006858:	d14a      	bne.n	80068f0 <__hexnan+0x118>
 800685a:	3102      	adds	r1, #2
 800685c:	f8ca 1000 	str.w	r1, [sl]
 8006860:	f1bb 0f00 	cmp.w	fp, #0
 8006864:	d044      	beq.n	80068f0 <__hexnan+0x118>
 8006866:	454c      	cmp	r4, r9
 8006868:	d206      	bcs.n	8006878 <__hexnan+0xa0>
 800686a:	2d07      	cmp	r5, #7
 800686c:	dc04      	bgt.n	8006878 <__hexnan+0xa0>
 800686e:	462a      	mov	r2, r5
 8006870:	4649      	mov	r1, r9
 8006872:	4620      	mov	r0, r4
 8006874:	f7ff ff8b 	bl	800678e <L_shift>
 8006878:	4544      	cmp	r4, r8
 800687a:	d928      	bls.n	80068ce <__hexnan+0xf6>
 800687c:	4643      	mov	r3, r8
 800687e:	f854 2b04 	ldr.w	r2, [r4], #4
 8006882:	42a6      	cmp	r6, r4
 8006884:	f843 2b04 	str.w	r2, [r3], #4
 8006888:	d2f9      	bcs.n	800687e <__hexnan+0xa6>
 800688a:	2200      	movs	r2, #0
 800688c:	f843 2b04 	str.w	r2, [r3], #4
 8006890:	429e      	cmp	r6, r3
 8006892:	d2fb      	bcs.n	800688c <__hexnan+0xb4>
 8006894:	6833      	ldr	r3, [r6, #0]
 8006896:	b91b      	cbnz	r3, 80068a0 <__hexnan+0xc8>
 8006898:	4546      	cmp	r6, r8
 800689a:	d127      	bne.n	80068ec <__hexnan+0x114>
 800689c:	2301      	movs	r3, #1
 800689e:	6033      	str	r3, [r6, #0]
 80068a0:	2005      	movs	r0, #5
 80068a2:	e026      	b.n	80068f2 <__hexnan+0x11a>
 80068a4:	3501      	adds	r5, #1
 80068a6:	2d08      	cmp	r5, #8
 80068a8:	f10b 0b01 	add.w	fp, fp, #1
 80068ac:	dd06      	ble.n	80068bc <__hexnan+0xe4>
 80068ae:	4544      	cmp	r4, r8
 80068b0:	d9cf      	bls.n	8006852 <__hexnan+0x7a>
 80068b2:	2300      	movs	r3, #0
 80068b4:	2501      	movs	r5, #1
 80068b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80068ba:	3c04      	subs	r4, #4
 80068bc:	6822      	ldr	r2, [r4, #0]
 80068be:	f000 000f 	and.w	r0, r0, #15
 80068c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80068c6:	6020      	str	r0, [r4, #0]
 80068c8:	e7c3      	b.n	8006852 <__hexnan+0x7a>
 80068ca:	2508      	movs	r5, #8
 80068cc:	e7c1      	b.n	8006852 <__hexnan+0x7a>
 80068ce:	9b02      	ldr	r3, [sp, #8]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d0df      	beq.n	8006894 <__hexnan+0xbc>
 80068d4:	f04f 32ff 	mov.w	r2, #4294967295
 80068d8:	f1c3 0320 	rsb	r3, r3, #32
 80068dc:	fa22 f303 	lsr.w	r3, r2, r3
 80068e0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80068e4:	401a      	ands	r2, r3
 80068e6:	f847 2c04 	str.w	r2, [r7, #-4]
 80068ea:	e7d3      	b.n	8006894 <__hexnan+0xbc>
 80068ec:	3e04      	subs	r6, #4
 80068ee:	e7d1      	b.n	8006894 <__hexnan+0xbc>
 80068f0:	2004      	movs	r0, #4
 80068f2:	b007      	add	sp, #28
 80068f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080068f8 <__locale_ctype_ptr_l>:
 80068f8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80068fc:	4770      	bx	lr

080068fe <__localeconv_l>:
 80068fe:	30f0      	adds	r0, #240	; 0xf0
 8006900:	4770      	bx	lr
	...

08006904 <malloc>:
 8006904:	4b02      	ldr	r3, [pc, #8]	; (8006910 <malloc+0xc>)
 8006906:	4601      	mov	r1, r0
 8006908:	6818      	ldr	r0, [r3, #0]
 800690a:	f000 bc7f 	b.w	800720c <_malloc_r>
 800690e:	bf00      	nop
 8006910:	20000008 	.word	0x20000008

08006914 <__ascii_mbtowc>:
 8006914:	b082      	sub	sp, #8
 8006916:	b901      	cbnz	r1, 800691a <__ascii_mbtowc+0x6>
 8006918:	a901      	add	r1, sp, #4
 800691a:	b142      	cbz	r2, 800692e <__ascii_mbtowc+0x1a>
 800691c:	b14b      	cbz	r3, 8006932 <__ascii_mbtowc+0x1e>
 800691e:	7813      	ldrb	r3, [r2, #0]
 8006920:	600b      	str	r3, [r1, #0]
 8006922:	7812      	ldrb	r2, [r2, #0]
 8006924:	1c10      	adds	r0, r2, #0
 8006926:	bf18      	it	ne
 8006928:	2001      	movne	r0, #1
 800692a:	b002      	add	sp, #8
 800692c:	4770      	bx	lr
 800692e:	4610      	mov	r0, r2
 8006930:	e7fb      	b.n	800692a <__ascii_mbtowc+0x16>
 8006932:	f06f 0001 	mvn.w	r0, #1
 8006936:	e7f8      	b.n	800692a <__ascii_mbtowc+0x16>

08006938 <memcpy>:
 8006938:	b510      	push	{r4, lr}
 800693a:	1e43      	subs	r3, r0, #1
 800693c:	440a      	add	r2, r1
 800693e:	4291      	cmp	r1, r2
 8006940:	d100      	bne.n	8006944 <memcpy+0xc>
 8006942:	bd10      	pop	{r4, pc}
 8006944:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006948:	f803 4f01 	strb.w	r4, [r3, #1]!
 800694c:	e7f7      	b.n	800693e <memcpy+0x6>

0800694e <_Balloc>:
 800694e:	b570      	push	{r4, r5, r6, lr}
 8006950:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006952:	4604      	mov	r4, r0
 8006954:	460e      	mov	r6, r1
 8006956:	b93d      	cbnz	r5, 8006968 <_Balloc+0x1a>
 8006958:	2010      	movs	r0, #16
 800695a:	f7ff ffd3 	bl	8006904 <malloc>
 800695e:	6260      	str	r0, [r4, #36]	; 0x24
 8006960:	6045      	str	r5, [r0, #4]
 8006962:	6085      	str	r5, [r0, #8]
 8006964:	6005      	str	r5, [r0, #0]
 8006966:	60c5      	str	r5, [r0, #12]
 8006968:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800696a:	68eb      	ldr	r3, [r5, #12]
 800696c:	b183      	cbz	r3, 8006990 <_Balloc+0x42>
 800696e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006976:	b9b8      	cbnz	r0, 80069a8 <_Balloc+0x5a>
 8006978:	2101      	movs	r1, #1
 800697a:	fa01 f506 	lsl.w	r5, r1, r6
 800697e:	1d6a      	adds	r2, r5, #5
 8006980:	0092      	lsls	r2, r2, #2
 8006982:	4620      	mov	r0, r4
 8006984:	f000 fbe7 	bl	8007156 <_calloc_r>
 8006988:	b160      	cbz	r0, 80069a4 <_Balloc+0x56>
 800698a:	6046      	str	r6, [r0, #4]
 800698c:	6085      	str	r5, [r0, #8]
 800698e:	e00e      	b.n	80069ae <_Balloc+0x60>
 8006990:	2221      	movs	r2, #33	; 0x21
 8006992:	2104      	movs	r1, #4
 8006994:	4620      	mov	r0, r4
 8006996:	f000 fbde 	bl	8007156 <_calloc_r>
 800699a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800699c:	60e8      	str	r0, [r5, #12]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1e4      	bne.n	800696e <_Balloc+0x20>
 80069a4:	2000      	movs	r0, #0
 80069a6:	bd70      	pop	{r4, r5, r6, pc}
 80069a8:	6802      	ldr	r2, [r0, #0]
 80069aa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80069ae:	2300      	movs	r3, #0
 80069b0:	6103      	str	r3, [r0, #16]
 80069b2:	60c3      	str	r3, [r0, #12]
 80069b4:	bd70      	pop	{r4, r5, r6, pc}

080069b6 <_Bfree>:
 80069b6:	b570      	push	{r4, r5, r6, lr}
 80069b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80069ba:	4606      	mov	r6, r0
 80069bc:	460d      	mov	r5, r1
 80069be:	b93c      	cbnz	r4, 80069d0 <_Bfree+0x1a>
 80069c0:	2010      	movs	r0, #16
 80069c2:	f7ff ff9f 	bl	8006904 <malloc>
 80069c6:	6270      	str	r0, [r6, #36]	; 0x24
 80069c8:	6044      	str	r4, [r0, #4]
 80069ca:	6084      	str	r4, [r0, #8]
 80069cc:	6004      	str	r4, [r0, #0]
 80069ce:	60c4      	str	r4, [r0, #12]
 80069d0:	b13d      	cbz	r5, 80069e2 <_Bfree+0x2c>
 80069d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80069d4:	686a      	ldr	r2, [r5, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069dc:	6029      	str	r1, [r5, #0]
 80069de:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80069e2:	bd70      	pop	{r4, r5, r6, pc}

080069e4 <__multadd>:
 80069e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e8:	461f      	mov	r7, r3
 80069ea:	4606      	mov	r6, r0
 80069ec:	460c      	mov	r4, r1
 80069ee:	2300      	movs	r3, #0
 80069f0:	690d      	ldr	r5, [r1, #16]
 80069f2:	f101 0e14 	add.w	lr, r1, #20
 80069f6:	f8de 0000 	ldr.w	r0, [lr]
 80069fa:	3301      	adds	r3, #1
 80069fc:	b281      	uxth	r1, r0
 80069fe:	fb02 7101 	mla	r1, r2, r1, r7
 8006a02:	0c00      	lsrs	r0, r0, #16
 8006a04:	0c0f      	lsrs	r7, r1, #16
 8006a06:	fb02 7000 	mla	r0, r2, r0, r7
 8006a0a:	b289      	uxth	r1, r1
 8006a0c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006a10:	429d      	cmp	r5, r3
 8006a12:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006a16:	f84e 1b04 	str.w	r1, [lr], #4
 8006a1a:	dcec      	bgt.n	80069f6 <__multadd+0x12>
 8006a1c:	b1d7      	cbz	r7, 8006a54 <__multadd+0x70>
 8006a1e:	68a3      	ldr	r3, [r4, #8]
 8006a20:	429d      	cmp	r5, r3
 8006a22:	db12      	blt.n	8006a4a <__multadd+0x66>
 8006a24:	6861      	ldr	r1, [r4, #4]
 8006a26:	4630      	mov	r0, r6
 8006a28:	3101      	adds	r1, #1
 8006a2a:	f7ff ff90 	bl	800694e <_Balloc>
 8006a2e:	4680      	mov	r8, r0
 8006a30:	6922      	ldr	r2, [r4, #16]
 8006a32:	f104 010c 	add.w	r1, r4, #12
 8006a36:	3202      	adds	r2, #2
 8006a38:	0092      	lsls	r2, r2, #2
 8006a3a:	300c      	adds	r0, #12
 8006a3c:	f7ff ff7c 	bl	8006938 <memcpy>
 8006a40:	4621      	mov	r1, r4
 8006a42:	4630      	mov	r0, r6
 8006a44:	f7ff ffb7 	bl	80069b6 <_Bfree>
 8006a48:	4644      	mov	r4, r8
 8006a4a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a4e:	3501      	adds	r5, #1
 8006a50:	615f      	str	r7, [r3, #20]
 8006a52:	6125      	str	r5, [r4, #16]
 8006a54:	4620      	mov	r0, r4
 8006a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006a5a <__s2b>:
 8006a5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a5e:	4615      	mov	r5, r2
 8006a60:	2209      	movs	r2, #9
 8006a62:	461f      	mov	r7, r3
 8006a64:	3308      	adds	r3, #8
 8006a66:	460c      	mov	r4, r1
 8006a68:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a6c:	4606      	mov	r6, r0
 8006a6e:	2201      	movs	r2, #1
 8006a70:	2100      	movs	r1, #0
 8006a72:	429a      	cmp	r2, r3
 8006a74:	db20      	blt.n	8006ab8 <__s2b+0x5e>
 8006a76:	4630      	mov	r0, r6
 8006a78:	f7ff ff69 	bl	800694e <_Balloc>
 8006a7c:	9b08      	ldr	r3, [sp, #32]
 8006a7e:	2d09      	cmp	r5, #9
 8006a80:	6143      	str	r3, [r0, #20]
 8006a82:	f04f 0301 	mov.w	r3, #1
 8006a86:	6103      	str	r3, [r0, #16]
 8006a88:	dd19      	ble.n	8006abe <__s2b+0x64>
 8006a8a:	f104 0909 	add.w	r9, r4, #9
 8006a8e:	46c8      	mov	r8, r9
 8006a90:	442c      	add	r4, r5
 8006a92:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006a96:	4601      	mov	r1, r0
 8006a98:	3b30      	subs	r3, #48	; 0x30
 8006a9a:	220a      	movs	r2, #10
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f7ff ffa1 	bl	80069e4 <__multadd>
 8006aa2:	45a0      	cmp	r8, r4
 8006aa4:	d1f5      	bne.n	8006a92 <__s2b+0x38>
 8006aa6:	f1a5 0408 	sub.w	r4, r5, #8
 8006aaa:	444c      	add	r4, r9
 8006aac:	1b2d      	subs	r5, r5, r4
 8006aae:	1963      	adds	r3, r4, r5
 8006ab0:	42bb      	cmp	r3, r7
 8006ab2:	db07      	blt.n	8006ac4 <__s2b+0x6a>
 8006ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ab8:	0052      	lsls	r2, r2, #1
 8006aba:	3101      	adds	r1, #1
 8006abc:	e7d9      	b.n	8006a72 <__s2b+0x18>
 8006abe:	340a      	adds	r4, #10
 8006ac0:	2509      	movs	r5, #9
 8006ac2:	e7f3      	b.n	8006aac <__s2b+0x52>
 8006ac4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006ac8:	4601      	mov	r1, r0
 8006aca:	3b30      	subs	r3, #48	; 0x30
 8006acc:	220a      	movs	r2, #10
 8006ace:	4630      	mov	r0, r6
 8006ad0:	f7ff ff88 	bl	80069e4 <__multadd>
 8006ad4:	e7eb      	b.n	8006aae <__s2b+0x54>

08006ad6 <__hi0bits>:
 8006ad6:	0c02      	lsrs	r2, r0, #16
 8006ad8:	0412      	lsls	r2, r2, #16
 8006ada:	4603      	mov	r3, r0
 8006adc:	b9b2      	cbnz	r2, 8006b0c <__hi0bits+0x36>
 8006ade:	0403      	lsls	r3, r0, #16
 8006ae0:	2010      	movs	r0, #16
 8006ae2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006ae6:	bf04      	itt	eq
 8006ae8:	021b      	lsleq	r3, r3, #8
 8006aea:	3008      	addeq	r0, #8
 8006aec:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006af0:	bf04      	itt	eq
 8006af2:	011b      	lsleq	r3, r3, #4
 8006af4:	3004      	addeq	r0, #4
 8006af6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006afa:	bf04      	itt	eq
 8006afc:	009b      	lsleq	r3, r3, #2
 8006afe:	3002      	addeq	r0, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	db06      	blt.n	8006b12 <__hi0bits+0x3c>
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	d503      	bpl.n	8006b10 <__hi0bits+0x3a>
 8006b08:	3001      	adds	r0, #1
 8006b0a:	4770      	bx	lr
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	e7e8      	b.n	8006ae2 <__hi0bits+0xc>
 8006b10:	2020      	movs	r0, #32
 8006b12:	4770      	bx	lr

08006b14 <__lo0bits>:
 8006b14:	6803      	ldr	r3, [r0, #0]
 8006b16:	4601      	mov	r1, r0
 8006b18:	f013 0207 	ands.w	r2, r3, #7
 8006b1c:	d00b      	beq.n	8006b36 <__lo0bits+0x22>
 8006b1e:	07da      	lsls	r2, r3, #31
 8006b20:	d423      	bmi.n	8006b6a <__lo0bits+0x56>
 8006b22:	0798      	lsls	r0, r3, #30
 8006b24:	bf49      	itett	mi
 8006b26:	085b      	lsrmi	r3, r3, #1
 8006b28:	089b      	lsrpl	r3, r3, #2
 8006b2a:	2001      	movmi	r0, #1
 8006b2c:	600b      	strmi	r3, [r1, #0]
 8006b2e:	bf5c      	itt	pl
 8006b30:	600b      	strpl	r3, [r1, #0]
 8006b32:	2002      	movpl	r0, #2
 8006b34:	4770      	bx	lr
 8006b36:	b298      	uxth	r0, r3
 8006b38:	b9a8      	cbnz	r0, 8006b66 <__lo0bits+0x52>
 8006b3a:	2010      	movs	r0, #16
 8006b3c:	0c1b      	lsrs	r3, r3, #16
 8006b3e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006b42:	bf04      	itt	eq
 8006b44:	0a1b      	lsreq	r3, r3, #8
 8006b46:	3008      	addeq	r0, #8
 8006b48:	071a      	lsls	r2, r3, #28
 8006b4a:	bf04      	itt	eq
 8006b4c:	091b      	lsreq	r3, r3, #4
 8006b4e:	3004      	addeq	r0, #4
 8006b50:	079a      	lsls	r2, r3, #30
 8006b52:	bf04      	itt	eq
 8006b54:	089b      	lsreq	r3, r3, #2
 8006b56:	3002      	addeq	r0, #2
 8006b58:	07da      	lsls	r2, r3, #31
 8006b5a:	d402      	bmi.n	8006b62 <__lo0bits+0x4e>
 8006b5c:	085b      	lsrs	r3, r3, #1
 8006b5e:	d006      	beq.n	8006b6e <__lo0bits+0x5a>
 8006b60:	3001      	adds	r0, #1
 8006b62:	600b      	str	r3, [r1, #0]
 8006b64:	4770      	bx	lr
 8006b66:	4610      	mov	r0, r2
 8006b68:	e7e9      	b.n	8006b3e <__lo0bits+0x2a>
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	4770      	bx	lr
 8006b6e:	2020      	movs	r0, #32
 8006b70:	4770      	bx	lr

08006b72 <__i2b>:
 8006b72:	b510      	push	{r4, lr}
 8006b74:	460c      	mov	r4, r1
 8006b76:	2101      	movs	r1, #1
 8006b78:	f7ff fee9 	bl	800694e <_Balloc>
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	6144      	str	r4, [r0, #20]
 8006b80:	6102      	str	r2, [r0, #16]
 8006b82:	bd10      	pop	{r4, pc}

08006b84 <__multiply>:
 8006b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b88:	4614      	mov	r4, r2
 8006b8a:	690a      	ldr	r2, [r1, #16]
 8006b8c:	6923      	ldr	r3, [r4, #16]
 8006b8e:	4689      	mov	r9, r1
 8006b90:	429a      	cmp	r2, r3
 8006b92:	bfbe      	ittt	lt
 8006b94:	460b      	movlt	r3, r1
 8006b96:	46a1      	movlt	r9, r4
 8006b98:	461c      	movlt	r4, r3
 8006b9a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006b9e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006ba2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006ba6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006baa:	eb07 060a 	add.w	r6, r7, sl
 8006bae:	429e      	cmp	r6, r3
 8006bb0:	bfc8      	it	gt
 8006bb2:	3101      	addgt	r1, #1
 8006bb4:	f7ff fecb 	bl	800694e <_Balloc>
 8006bb8:	f100 0514 	add.w	r5, r0, #20
 8006bbc:	462b      	mov	r3, r5
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006bc4:	4543      	cmp	r3, r8
 8006bc6:	d316      	bcc.n	8006bf6 <__multiply+0x72>
 8006bc8:	f104 0214 	add.w	r2, r4, #20
 8006bcc:	f109 0114 	add.w	r1, r9, #20
 8006bd0:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8006bd4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	9c01      	ldr	r4, [sp, #4]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	4294      	cmp	r4, r2
 8006be0:	d80c      	bhi.n	8006bfc <__multiply+0x78>
 8006be2:	2e00      	cmp	r6, #0
 8006be4:	dd03      	ble.n	8006bee <__multiply+0x6a>
 8006be6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d054      	beq.n	8006c98 <__multiply+0x114>
 8006bee:	6106      	str	r6, [r0, #16]
 8006bf0:	b003      	add	sp, #12
 8006bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf6:	f843 2b04 	str.w	r2, [r3], #4
 8006bfa:	e7e3      	b.n	8006bc4 <__multiply+0x40>
 8006bfc:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c00:	3204      	adds	r2, #4
 8006c02:	f1ba 0f00 	cmp.w	sl, #0
 8006c06:	d020      	beq.n	8006c4a <__multiply+0xc6>
 8006c08:	46ae      	mov	lr, r5
 8006c0a:	4689      	mov	r9, r1
 8006c0c:	f04f 0c00 	mov.w	ip, #0
 8006c10:	f859 4b04 	ldr.w	r4, [r9], #4
 8006c14:	f8be b000 	ldrh.w	fp, [lr]
 8006c18:	b2a3      	uxth	r3, r4
 8006c1a:	fb0a b303 	mla	r3, sl, r3, fp
 8006c1e:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8006c22:	f8de 4000 	ldr.w	r4, [lr]
 8006c26:	4463      	add	r3, ip
 8006c28:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006c2c:	fb0a c40b 	mla	r4, sl, fp, ip
 8006c30:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006c3a:	454f      	cmp	r7, r9
 8006c3c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006c40:	f84e 3b04 	str.w	r3, [lr], #4
 8006c44:	d8e4      	bhi.n	8006c10 <__multiply+0x8c>
 8006c46:	f8ce c000 	str.w	ip, [lr]
 8006c4a:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8006c4e:	f1b9 0f00 	cmp.w	r9, #0
 8006c52:	d01f      	beq.n	8006c94 <__multiply+0x110>
 8006c54:	46ae      	mov	lr, r5
 8006c56:	468c      	mov	ip, r1
 8006c58:	f04f 0a00 	mov.w	sl, #0
 8006c5c:	682b      	ldr	r3, [r5, #0]
 8006c5e:	f8bc 4000 	ldrh.w	r4, [ip]
 8006c62:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	fb09 b404 	mla	r4, r9, r4, fp
 8006c6c:	44a2      	add	sl, r4
 8006c6e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8006c72:	f84e 3b04 	str.w	r3, [lr], #4
 8006c76:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c7a:	f8be 4000 	ldrh.w	r4, [lr]
 8006c7e:	0c1b      	lsrs	r3, r3, #16
 8006c80:	fb09 4303 	mla	r3, r9, r3, r4
 8006c84:	4567      	cmp	r7, ip
 8006c86:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8006c8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c8e:	d8e6      	bhi.n	8006c5e <__multiply+0xda>
 8006c90:	f8ce 3000 	str.w	r3, [lr]
 8006c94:	3504      	adds	r5, #4
 8006c96:	e7a0      	b.n	8006bda <__multiply+0x56>
 8006c98:	3e01      	subs	r6, #1
 8006c9a:	e7a2      	b.n	8006be2 <__multiply+0x5e>

08006c9c <__pow5mult>:
 8006c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca0:	4615      	mov	r5, r2
 8006ca2:	f012 0203 	ands.w	r2, r2, #3
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	460f      	mov	r7, r1
 8006caa:	d007      	beq.n	8006cbc <__pow5mult+0x20>
 8006cac:	4c21      	ldr	r4, [pc, #132]	; (8006d34 <__pow5mult+0x98>)
 8006cae:	3a01      	subs	r2, #1
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cb6:	f7ff fe95 	bl	80069e4 <__multadd>
 8006cba:	4607      	mov	r7, r0
 8006cbc:	10ad      	asrs	r5, r5, #2
 8006cbe:	d035      	beq.n	8006d2c <__pow5mult+0x90>
 8006cc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006cc2:	b93c      	cbnz	r4, 8006cd4 <__pow5mult+0x38>
 8006cc4:	2010      	movs	r0, #16
 8006cc6:	f7ff fe1d 	bl	8006904 <malloc>
 8006cca:	6270      	str	r0, [r6, #36]	; 0x24
 8006ccc:	6044      	str	r4, [r0, #4]
 8006cce:	6084      	str	r4, [r0, #8]
 8006cd0:	6004      	str	r4, [r0, #0]
 8006cd2:	60c4      	str	r4, [r0, #12]
 8006cd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006cd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cdc:	b94c      	cbnz	r4, 8006cf2 <__pow5mult+0x56>
 8006cde:	f240 2171 	movw	r1, #625	; 0x271
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f7ff ff45 	bl	8006b72 <__i2b>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	4604      	mov	r4, r0
 8006cec:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cf0:	6003      	str	r3, [r0, #0]
 8006cf2:	f04f 0800 	mov.w	r8, #0
 8006cf6:	07eb      	lsls	r3, r5, #31
 8006cf8:	d50a      	bpl.n	8006d10 <__pow5mult+0x74>
 8006cfa:	4639      	mov	r1, r7
 8006cfc:	4622      	mov	r2, r4
 8006cfe:	4630      	mov	r0, r6
 8006d00:	f7ff ff40 	bl	8006b84 <__multiply>
 8006d04:	4681      	mov	r9, r0
 8006d06:	4639      	mov	r1, r7
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f7ff fe54 	bl	80069b6 <_Bfree>
 8006d0e:	464f      	mov	r7, r9
 8006d10:	106d      	asrs	r5, r5, #1
 8006d12:	d00b      	beq.n	8006d2c <__pow5mult+0x90>
 8006d14:	6820      	ldr	r0, [r4, #0]
 8006d16:	b938      	cbnz	r0, 8006d28 <__pow5mult+0x8c>
 8006d18:	4622      	mov	r2, r4
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	f7ff ff31 	bl	8006b84 <__multiply>
 8006d22:	6020      	str	r0, [r4, #0]
 8006d24:	f8c0 8000 	str.w	r8, [r0]
 8006d28:	4604      	mov	r4, r0
 8006d2a:	e7e4      	b.n	8006cf6 <__pow5mult+0x5a>
 8006d2c:	4638      	mov	r0, r7
 8006d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d32:	bf00      	nop
 8006d34:	08008910 	.word	0x08008910

08006d38 <__lshift>:
 8006d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	4607      	mov	r7, r0
 8006d40:	4616      	mov	r6, r2
 8006d42:	6923      	ldr	r3, [r4, #16]
 8006d44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d48:	eb0a 0903 	add.w	r9, sl, r3
 8006d4c:	6849      	ldr	r1, [r1, #4]
 8006d4e:	68a3      	ldr	r3, [r4, #8]
 8006d50:	f109 0501 	add.w	r5, r9, #1
 8006d54:	42ab      	cmp	r3, r5
 8006d56:	db31      	blt.n	8006dbc <__lshift+0x84>
 8006d58:	4638      	mov	r0, r7
 8006d5a:	f7ff fdf8 	bl	800694e <_Balloc>
 8006d5e:	2200      	movs	r2, #0
 8006d60:	4680      	mov	r8, r0
 8006d62:	4611      	mov	r1, r2
 8006d64:	f100 0314 	add.w	r3, r0, #20
 8006d68:	4552      	cmp	r2, sl
 8006d6a:	db2a      	blt.n	8006dc2 <__lshift+0x8a>
 8006d6c:	6920      	ldr	r0, [r4, #16]
 8006d6e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d72:	f104 0114 	add.w	r1, r4, #20
 8006d76:	f016 021f 	ands.w	r2, r6, #31
 8006d7a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8006d7e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8006d82:	d022      	beq.n	8006dca <__lshift+0x92>
 8006d84:	2000      	movs	r0, #0
 8006d86:	f1c2 0c20 	rsb	ip, r2, #32
 8006d8a:	680e      	ldr	r6, [r1, #0]
 8006d8c:	4096      	lsls	r6, r2
 8006d8e:	4330      	orrs	r0, r6
 8006d90:	f843 0b04 	str.w	r0, [r3], #4
 8006d94:	f851 0b04 	ldr.w	r0, [r1], #4
 8006d98:	458e      	cmp	lr, r1
 8006d9a:	fa20 f00c 	lsr.w	r0, r0, ip
 8006d9e:	d8f4      	bhi.n	8006d8a <__lshift+0x52>
 8006da0:	6018      	str	r0, [r3, #0]
 8006da2:	b108      	cbz	r0, 8006da8 <__lshift+0x70>
 8006da4:	f109 0502 	add.w	r5, r9, #2
 8006da8:	3d01      	subs	r5, #1
 8006daa:	4638      	mov	r0, r7
 8006dac:	f8c8 5010 	str.w	r5, [r8, #16]
 8006db0:	4621      	mov	r1, r4
 8006db2:	f7ff fe00 	bl	80069b6 <_Bfree>
 8006db6:	4640      	mov	r0, r8
 8006db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dbc:	3101      	adds	r1, #1
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	e7c8      	b.n	8006d54 <__lshift+0x1c>
 8006dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006dc6:	3201      	adds	r2, #1
 8006dc8:	e7ce      	b.n	8006d68 <__lshift+0x30>
 8006dca:	3b04      	subs	r3, #4
 8006dcc:	f851 2b04 	ldr.w	r2, [r1], #4
 8006dd0:	458e      	cmp	lr, r1
 8006dd2:	f843 2f04 	str.w	r2, [r3, #4]!
 8006dd6:	d8f9      	bhi.n	8006dcc <__lshift+0x94>
 8006dd8:	e7e6      	b.n	8006da8 <__lshift+0x70>

08006dda <__mcmp>:
 8006dda:	6903      	ldr	r3, [r0, #16]
 8006ddc:	690a      	ldr	r2, [r1, #16]
 8006dde:	b530      	push	{r4, r5, lr}
 8006de0:	1a9b      	subs	r3, r3, r2
 8006de2:	d10c      	bne.n	8006dfe <__mcmp+0x24>
 8006de4:	0092      	lsls	r2, r2, #2
 8006de6:	3014      	adds	r0, #20
 8006de8:	3114      	adds	r1, #20
 8006dea:	1884      	adds	r4, r0, r2
 8006dec:	4411      	add	r1, r2
 8006dee:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006df2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006df6:	4295      	cmp	r5, r2
 8006df8:	d003      	beq.n	8006e02 <__mcmp+0x28>
 8006dfa:	d305      	bcc.n	8006e08 <__mcmp+0x2e>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	4618      	mov	r0, r3
 8006e00:	bd30      	pop	{r4, r5, pc}
 8006e02:	42a0      	cmp	r0, r4
 8006e04:	d3f3      	bcc.n	8006dee <__mcmp+0x14>
 8006e06:	e7fa      	b.n	8006dfe <__mcmp+0x24>
 8006e08:	f04f 33ff 	mov.w	r3, #4294967295
 8006e0c:	e7f7      	b.n	8006dfe <__mcmp+0x24>

08006e0e <__mdiff>:
 8006e0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e12:	460d      	mov	r5, r1
 8006e14:	4607      	mov	r7, r0
 8006e16:	4611      	mov	r1, r2
 8006e18:	4628      	mov	r0, r5
 8006e1a:	4614      	mov	r4, r2
 8006e1c:	f7ff ffdd 	bl	8006dda <__mcmp>
 8006e20:	1e06      	subs	r6, r0, #0
 8006e22:	d108      	bne.n	8006e36 <__mdiff+0x28>
 8006e24:	4631      	mov	r1, r6
 8006e26:	4638      	mov	r0, r7
 8006e28:	f7ff fd91 	bl	800694e <_Balloc>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	6146      	str	r6, [r0, #20]
 8006e30:	6103      	str	r3, [r0, #16]
 8006e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e36:	bfa4      	itt	ge
 8006e38:	4623      	movge	r3, r4
 8006e3a:	462c      	movge	r4, r5
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	6861      	ldr	r1, [r4, #4]
 8006e40:	bfa6      	itte	ge
 8006e42:	461d      	movge	r5, r3
 8006e44:	2600      	movge	r6, #0
 8006e46:	2601      	movlt	r6, #1
 8006e48:	f7ff fd81 	bl	800694e <_Balloc>
 8006e4c:	f04f 0c00 	mov.w	ip, #0
 8006e50:	60c6      	str	r6, [r0, #12]
 8006e52:	692b      	ldr	r3, [r5, #16]
 8006e54:	6926      	ldr	r6, [r4, #16]
 8006e56:	f104 0214 	add.w	r2, r4, #20
 8006e5a:	f105 0914 	add.w	r9, r5, #20
 8006e5e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006e62:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006e66:	f100 0114 	add.w	r1, r0, #20
 8006e6a:	f852 ab04 	ldr.w	sl, [r2], #4
 8006e6e:	f859 5b04 	ldr.w	r5, [r9], #4
 8006e72:	fa1f f38a 	uxth.w	r3, sl
 8006e76:	4463      	add	r3, ip
 8006e78:	b2ac      	uxth	r4, r5
 8006e7a:	1b1b      	subs	r3, r3, r4
 8006e7c:	0c2c      	lsrs	r4, r5, #16
 8006e7e:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006e82:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006e8c:	45c8      	cmp	r8, r9
 8006e8e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006e92:	4696      	mov	lr, r2
 8006e94:	f841 4b04 	str.w	r4, [r1], #4
 8006e98:	d8e7      	bhi.n	8006e6a <__mdiff+0x5c>
 8006e9a:	45be      	cmp	lr, r7
 8006e9c:	d305      	bcc.n	8006eaa <__mdiff+0x9c>
 8006e9e:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006ea2:	b18b      	cbz	r3, 8006ec8 <__mdiff+0xba>
 8006ea4:	6106      	str	r6, [r0, #16]
 8006ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eaa:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006eae:	b2a2      	uxth	r2, r4
 8006eb0:	4462      	add	r2, ip
 8006eb2:	1413      	asrs	r3, r2, #16
 8006eb4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006eb8:	b292      	uxth	r2, r2
 8006eba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006ebe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006ec2:	f841 2b04 	str.w	r2, [r1], #4
 8006ec6:	e7e8      	b.n	8006e9a <__mdiff+0x8c>
 8006ec8:	3e01      	subs	r6, #1
 8006eca:	e7e8      	b.n	8006e9e <__mdiff+0x90>

08006ecc <__ulp>:
 8006ecc:	4b10      	ldr	r3, [pc, #64]	; (8006f10 <__ulp+0x44>)
 8006ece:	400b      	ands	r3, r1
 8006ed0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	dd02      	ble.n	8006ede <__ulp+0x12>
 8006ed8:	2000      	movs	r0, #0
 8006eda:	4619      	mov	r1, r3
 8006edc:	4770      	bx	lr
 8006ede:	425b      	negs	r3, r3
 8006ee0:	151b      	asrs	r3, r3, #20
 8006ee2:	2b13      	cmp	r3, #19
 8006ee4:	f04f 0000 	mov.w	r0, #0
 8006ee8:	f04f 0100 	mov.w	r1, #0
 8006eec:	dc04      	bgt.n	8006ef8 <__ulp+0x2c>
 8006eee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006ef2:	fa42 f103 	asr.w	r1, r2, r3
 8006ef6:	4770      	bx	lr
 8006ef8:	2201      	movs	r2, #1
 8006efa:	3b14      	subs	r3, #20
 8006efc:	2b1e      	cmp	r3, #30
 8006efe:	bfce      	itee	gt
 8006f00:	4613      	movgt	r3, r2
 8006f02:	f1c3 031f 	rsble	r3, r3, #31
 8006f06:	fa02 f303 	lslle.w	r3, r2, r3
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	7ff00000 	.word	0x7ff00000

08006f14 <__b2d>:
 8006f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f18:	6907      	ldr	r7, [r0, #16]
 8006f1a:	f100 0914 	add.w	r9, r0, #20
 8006f1e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006f22:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006f26:	f1a7 0804 	sub.w	r8, r7, #4
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	f7ff fdd3 	bl	8006ad6 <__hi0bits>
 8006f30:	f1c0 0320 	rsb	r3, r0, #32
 8006f34:	280a      	cmp	r0, #10
 8006f36:	600b      	str	r3, [r1, #0]
 8006f38:	491e      	ldr	r1, [pc, #120]	; (8006fb4 <__b2d+0xa0>)
 8006f3a:	dc17      	bgt.n	8006f6c <__b2d+0x58>
 8006f3c:	45c1      	cmp	r9, r8
 8006f3e:	bf28      	it	cs
 8006f40:	2200      	movcs	r2, #0
 8006f42:	f1c0 0e0b 	rsb	lr, r0, #11
 8006f46:	fa26 f30e 	lsr.w	r3, r6, lr
 8006f4a:	bf38      	it	cc
 8006f4c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006f50:	ea43 0501 	orr.w	r5, r3, r1
 8006f54:	f100 0315 	add.w	r3, r0, #21
 8006f58:	fa06 f303 	lsl.w	r3, r6, r3
 8006f5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f60:	ea43 0402 	orr.w	r4, r3, r2
 8006f64:	4620      	mov	r0, r4
 8006f66:	4629      	mov	r1, r5
 8006f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f6c:	45c1      	cmp	r9, r8
 8006f6e:	bf3a      	itte	cc
 8006f70:	f1a7 0808 	subcc.w	r8, r7, #8
 8006f74:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006f78:	2200      	movcs	r2, #0
 8006f7a:	f1b0 030b 	subs.w	r3, r0, #11
 8006f7e:	d015      	beq.n	8006fac <__b2d+0x98>
 8006f80:	409e      	lsls	r6, r3
 8006f82:	f1c3 0720 	rsb	r7, r3, #32
 8006f86:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8006f8a:	fa22 f107 	lsr.w	r1, r2, r7
 8006f8e:	45c8      	cmp	r8, r9
 8006f90:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8006f94:	ea46 0501 	orr.w	r5, r6, r1
 8006f98:	bf94      	ite	ls
 8006f9a:	2100      	movls	r1, #0
 8006f9c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006fa0:	fa02 f003 	lsl.w	r0, r2, r3
 8006fa4:	40f9      	lsrs	r1, r7
 8006fa6:	ea40 0401 	orr.w	r4, r0, r1
 8006faa:	e7db      	b.n	8006f64 <__b2d+0x50>
 8006fac:	ea46 0501 	orr.w	r5, r6, r1
 8006fb0:	4614      	mov	r4, r2
 8006fb2:	e7d7      	b.n	8006f64 <__b2d+0x50>
 8006fb4:	3ff00000 	.word	0x3ff00000

08006fb8 <__d2b>:
 8006fb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006fbc:	461c      	mov	r4, r3
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	4690      	mov	r8, r2
 8006fc2:	9e08      	ldr	r6, [sp, #32]
 8006fc4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006fc6:	f7ff fcc2 	bl	800694e <_Balloc>
 8006fca:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006fce:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006fd2:	4607      	mov	r7, r0
 8006fd4:	bb34      	cbnz	r4, 8007024 <__d2b+0x6c>
 8006fd6:	9201      	str	r2, [sp, #4]
 8006fd8:	f1b8 0f00 	cmp.w	r8, #0
 8006fdc:	d027      	beq.n	800702e <__d2b+0x76>
 8006fde:	a802      	add	r0, sp, #8
 8006fe0:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006fe4:	f7ff fd96 	bl	8006b14 <__lo0bits>
 8006fe8:	9900      	ldr	r1, [sp, #0]
 8006fea:	b1f0      	cbz	r0, 800702a <__d2b+0x72>
 8006fec:	9a01      	ldr	r2, [sp, #4]
 8006fee:	f1c0 0320 	rsb	r3, r0, #32
 8006ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff6:	430b      	orrs	r3, r1
 8006ff8:	40c2      	lsrs	r2, r0
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	9201      	str	r2, [sp, #4]
 8006ffe:	9b01      	ldr	r3, [sp, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	bf14      	ite	ne
 8007004:	2102      	movne	r1, #2
 8007006:	2101      	moveq	r1, #1
 8007008:	61bb      	str	r3, [r7, #24]
 800700a:	6139      	str	r1, [r7, #16]
 800700c:	b1c4      	cbz	r4, 8007040 <__d2b+0x88>
 800700e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007012:	4404      	add	r4, r0
 8007014:	6034      	str	r4, [r6, #0]
 8007016:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800701a:	6028      	str	r0, [r5, #0]
 800701c:	4638      	mov	r0, r7
 800701e:	b002      	add	sp, #8
 8007020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007024:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007028:	e7d5      	b.n	8006fd6 <__d2b+0x1e>
 800702a:	6179      	str	r1, [r7, #20]
 800702c:	e7e7      	b.n	8006ffe <__d2b+0x46>
 800702e:	a801      	add	r0, sp, #4
 8007030:	f7ff fd70 	bl	8006b14 <__lo0bits>
 8007034:	2101      	movs	r1, #1
 8007036:	9b01      	ldr	r3, [sp, #4]
 8007038:	6139      	str	r1, [r7, #16]
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	3020      	adds	r0, #32
 800703e:	e7e5      	b.n	800700c <__d2b+0x54>
 8007040:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007044:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007048:	6030      	str	r0, [r6, #0]
 800704a:	6918      	ldr	r0, [r3, #16]
 800704c:	f7ff fd43 	bl	8006ad6 <__hi0bits>
 8007050:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007054:	e7e1      	b.n	800701a <__d2b+0x62>

08007056 <__ratio>:
 8007056:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800705a:	4688      	mov	r8, r1
 800705c:	4669      	mov	r1, sp
 800705e:	4681      	mov	r9, r0
 8007060:	f7ff ff58 	bl	8006f14 <__b2d>
 8007064:	460d      	mov	r5, r1
 8007066:	4604      	mov	r4, r0
 8007068:	a901      	add	r1, sp, #4
 800706a:	4640      	mov	r0, r8
 800706c:	f7ff ff52 	bl	8006f14 <__b2d>
 8007070:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007074:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007078:	9e00      	ldr	r6, [sp, #0]
 800707a:	1a9a      	subs	r2, r3, r2
 800707c:	9b01      	ldr	r3, [sp, #4]
 800707e:	1af3      	subs	r3, r6, r3
 8007080:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8007084:	2b00      	cmp	r3, #0
 8007086:	bfd6      	itet	le
 8007088:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800708c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8007090:	eb01 5103 	addle.w	r1, r1, r3, lsl #20
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4620      	mov	r0, r4
 800709a:	4629      	mov	r1, r5
 800709c:	f7f9 fb5a 	bl	8000754 <__aeabi_ddiv>
 80070a0:	b002      	add	sp, #8
 80070a2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	...

080070a8 <_mprec_log10>:
 80070a8:	2817      	cmp	r0, #23
 80070aa:	b5d0      	push	{r4, r6, r7, lr}
 80070ac:	4604      	mov	r4, r0
 80070ae:	dc05      	bgt.n	80070bc <_mprec_log10+0x14>
 80070b0:	4b08      	ldr	r3, [pc, #32]	; (80070d4 <_mprec_log10+0x2c>)
 80070b2:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 80070b6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80070ba:	bdd0      	pop	{r4, r6, r7, pc}
 80070bc:	2000      	movs	r0, #0
 80070be:	2600      	movs	r6, #0
 80070c0:	4905      	ldr	r1, [pc, #20]	; (80070d8 <_mprec_log10+0x30>)
 80070c2:	4f06      	ldr	r7, [pc, #24]	; (80070dc <_mprec_log10+0x34>)
 80070c4:	4632      	mov	r2, r6
 80070c6:	463b      	mov	r3, r7
 80070c8:	f7f9 fa1a 	bl	8000500 <__aeabi_dmul>
 80070cc:	3c01      	subs	r4, #1
 80070ce:	d1f9      	bne.n	80070c4 <_mprec_log10+0x1c>
 80070d0:	bdd0      	pop	{r4, r6, r7, pc}
 80070d2:	bf00      	nop
 80070d4:	08008848 	.word	0x08008848
 80070d8:	3ff00000 	.word	0x3ff00000
 80070dc:	40240000 	.word	0x40240000

080070e0 <__copybits>:
 80070e0:	3901      	subs	r1, #1
 80070e2:	b510      	push	{r4, lr}
 80070e4:	1149      	asrs	r1, r1, #5
 80070e6:	6914      	ldr	r4, [r2, #16]
 80070e8:	3101      	adds	r1, #1
 80070ea:	f102 0314 	add.w	r3, r2, #20
 80070ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80070f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80070f6:	42a3      	cmp	r3, r4
 80070f8:	4602      	mov	r2, r0
 80070fa:	d303      	bcc.n	8007104 <__copybits+0x24>
 80070fc:	2300      	movs	r3, #0
 80070fe:	428a      	cmp	r2, r1
 8007100:	d305      	bcc.n	800710e <__copybits+0x2e>
 8007102:	bd10      	pop	{r4, pc}
 8007104:	f853 2b04 	ldr.w	r2, [r3], #4
 8007108:	f840 2b04 	str.w	r2, [r0], #4
 800710c:	e7f3      	b.n	80070f6 <__copybits+0x16>
 800710e:	f842 3b04 	str.w	r3, [r2], #4
 8007112:	e7f4      	b.n	80070fe <__copybits+0x1e>

08007114 <__any_on>:
 8007114:	f100 0214 	add.w	r2, r0, #20
 8007118:	6900      	ldr	r0, [r0, #16]
 800711a:	114b      	asrs	r3, r1, #5
 800711c:	4298      	cmp	r0, r3
 800711e:	b510      	push	{r4, lr}
 8007120:	db11      	blt.n	8007146 <__any_on+0x32>
 8007122:	dd0a      	ble.n	800713a <__any_on+0x26>
 8007124:	f011 011f 	ands.w	r1, r1, #31
 8007128:	d007      	beq.n	800713a <__any_on+0x26>
 800712a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800712e:	fa24 f001 	lsr.w	r0, r4, r1
 8007132:	fa00 f101 	lsl.w	r1, r0, r1
 8007136:	428c      	cmp	r4, r1
 8007138:	d10b      	bne.n	8007152 <__any_on+0x3e>
 800713a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800713e:	4293      	cmp	r3, r2
 8007140:	d803      	bhi.n	800714a <__any_on+0x36>
 8007142:	2000      	movs	r0, #0
 8007144:	bd10      	pop	{r4, pc}
 8007146:	4603      	mov	r3, r0
 8007148:	e7f7      	b.n	800713a <__any_on+0x26>
 800714a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800714e:	2900      	cmp	r1, #0
 8007150:	d0f5      	beq.n	800713e <__any_on+0x2a>
 8007152:	2001      	movs	r0, #1
 8007154:	bd10      	pop	{r4, pc}

08007156 <_calloc_r>:
 8007156:	b538      	push	{r3, r4, r5, lr}
 8007158:	fb02 f401 	mul.w	r4, r2, r1
 800715c:	4621      	mov	r1, r4
 800715e:	f000 f855 	bl	800720c <_malloc_r>
 8007162:	4605      	mov	r5, r0
 8007164:	b118      	cbz	r0, 800716e <_calloc_r+0x18>
 8007166:	4622      	mov	r2, r4
 8007168:	2100      	movs	r1, #0
 800716a:	f7fe f809 	bl	8005180 <memset>
 800716e:	4628      	mov	r0, r5
 8007170:	bd38      	pop	{r3, r4, r5, pc}
	...

08007174 <_free_r>:
 8007174:	b538      	push	{r3, r4, r5, lr}
 8007176:	4605      	mov	r5, r0
 8007178:	2900      	cmp	r1, #0
 800717a:	d043      	beq.n	8007204 <_free_r+0x90>
 800717c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007180:	1f0c      	subs	r4, r1, #4
 8007182:	2b00      	cmp	r3, #0
 8007184:	bfb8      	it	lt
 8007186:	18e4      	addlt	r4, r4, r3
 8007188:	f001 fa52 	bl	8008630 <__malloc_lock>
 800718c:	4a1e      	ldr	r2, [pc, #120]	; (8007208 <_free_r+0x94>)
 800718e:	6813      	ldr	r3, [r2, #0]
 8007190:	4610      	mov	r0, r2
 8007192:	b933      	cbnz	r3, 80071a2 <_free_r+0x2e>
 8007194:	6063      	str	r3, [r4, #4]
 8007196:	6014      	str	r4, [r2, #0]
 8007198:	4628      	mov	r0, r5
 800719a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800719e:	f001 ba48 	b.w	8008632 <__malloc_unlock>
 80071a2:	42a3      	cmp	r3, r4
 80071a4:	d90b      	bls.n	80071be <_free_r+0x4a>
 80071a6:	6821      	ldr	r1, [r4, #0]
 80071a8:	1862      	adds	r2, r4, r1
 80071aa:	4293      	cmp	r3, r2
 80071ac:	bf01      	itttt	eq
 80071ae:	681a      	ldreq	r2, [r3, #0]
 80071b0:	685b      	ldreq	r3, [r3, #4]
 80071b2:	1852      	addeq	r2, r2, r1
 80071b4:	6022      	streq	r2, [r4, #0]
 80071b6:	6063      	str	r3, [r4, #4]
 80071b8:	6004      	str	r4, [r0, #0]
 80071ba:	e7ed      	b.n	8007198 <_free_r+0x24>
 80071bc:	4613      	mov	r3, r2
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	b10a      	cbz	r2, 80071c6 <_free_r+0x52>
 80071c2:	42a2      	cmp	r2, r4
 80071c4:	d9fa      	bls.n	80071bc <_free_r+0x48>
 80071c6:	6819      	ldr	r1, [r3, #0]
 80071c8:	1858      	adds	r0, r3, r1
 80071ca:	42a0      	cmp	r0, r4
 80071cc:	d10b      	bne.n	80071e6 <_free_r+0x72>
 80071ce:	6820      	ldr	r0, [r4, #0]
 80071d0:	4401      	add	r1, r0
 80071d2:	1858      	adds	r0, r3, r1
 80071d4:	4282      	cmp	r2, r0
 80071d6:	6019      	str	r1, [r3, #0]
 80071d8:	d1de      	bne.n	8007198 <_free_r+0x24>
 80071da:	6810      	ldr	r0, [r2, #0]
 80071dc:	6852      	ldr	r2, [r2, #4]
 80071de:	4401      	add	r1, r0
 80071e0:	6019      	str	r1, [r3, #0]
 80071e2:	605a      	str	r2, [r3, #4]
 80071e4:	e7d8      	b.n	8007198 <_free_r+0x24>
 80071e6:	d902      	bls.n	80071ee <_free_r+0x7a>
 80071e8:	230c      	movs	r3, #12
 80071ea:	602b      	str	r3, [r5, #0]
 80071ec:	e7d4      	b.n	8007198 <_free_r+0x24>
 80071ee:	6820      	ldr	r0, [r4, #0]
 80071f0:	1821      	adds	r1, r4, r0
 80071f2:	428a      	cmp	r2, r1
 80071f4:	bf01      	itttt	eq
 80071f6:	6811      	ldreq	r1, [r2, #0]
 80071f8:	6852      	ldreq	r2, [r2, #4]
 80071fa:	1809      	addeq	r1, r1, r0
 80071fc:	6021      	streq	r1, [r4, #0]
 80071fe:	6062      	str	r2, [r4, #4]
 8007200:	605c      	str	r4, [r3, #4]
 8007202:	e7c9      	b.n	8007198 <_free_r+0x24>
 8007204:	bd38      	pop	{r3, r4, r5, pc}
 8007206:	bf00      	nop
 8007208:	20000204 	.word	0x20000204

0800720c <_malloc_r>:
 800720c:	b570      	push	{r4, r5, r6, lr}
 800720e:	1ccd      	adds	r5, r1, #3
 8007210:	f025 0503 	bic.w	r5, r5, #3
 8007214:	3508      	adds	r5, #8
 8007216:	2d0c      	cmp	r5, #12
 8007218:	bf38      	it	cc
 800721a:	250c      	movcc	r5, #12
 800721c:	2d00      	cmp	r5, #0
 800721e:	4606      	mov	r6, r0
 8007220:	db01      	blt.n	8007226 <_malloc_r+0x1a>
 8007222:	42a9      	cmp	r1, r5
 8007224:	d903      	bls.n	800722e <_malloc_r+0x22>
 8007226:	230c      	movs	r3, #12
 8007228:	6033      	str	r3, [r6, #0]
 800722a:	2000      	movs	r0, #0
 800722c:	bd70      	pop	{r4, r5, r6, pc}
 800722e:	f001 f9ff 	bl	8008630 <__malloc_lock>
 8007232:	4a23      	ldr	r2, [pc, #140]	; (80072c0 <_malloc_r+0xb4>)
 8007234:	6814      	ldr	r4, [r2, #0]
 8007236:	4621      	mov	r1, r4
 8007238:	b991      	cbnz	r1, 8007260 <_malloc_r+0x54>
 800723a:	4c22      	ldr	r4, [pc, #136]	; (80072c4 <_malloc_r+0xb8>)
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	b91b      	cbnz	r3, 8007248 <_malloc_r+0x3c>
 8007240:	4630      	mov	r0, r6
 8007242:	f000 fb4f 	bl	80078e4 <_sbrk_r>
 8007246:	6020      	str	r0, [r4, #0]
 8007248:	4629      	mov	r1, r5
 800724a:	4630      	mov	r0, r6
 800724c:	f000 fb4a 	bl	80078e4 <_sbrk_r>
 8007250:	1c43      	adds	r3, r0, #1
 8007252:	d126      	bne.n	80072a2 <_malloc_r+0x96>
 8007254:	230c      	movs	r3, #12
 8007256:	4630      	mov	r0, r6
 8007258:	6033      	str	r3, [r6, #0]
 800725a:	f001 f9ea 	bl	8008632 <__malloc_unlock>
 800725e:	e7e4      	b.n	800722a <_malloc_r+0x1e>
 8007260:	680b      	ldr	r3, [r1, #0]
 8007262:	1b5b      	subs	r3, r3, r5
 8007264:	d41a      	bmi.n	800729c <_malloc_r+0x90>
 8007266:	2b0b      	cmp	r3, #11
 8007268:	d90f      	bls.n	800728a <_malloc_r+0x7e>
 800726a:	600b      	str	r3, [r1, #0]
 800726c:	18cc      	adds	r4, r1, r3
 800726e:	50cd      	str	r5, [r1, r3]
 8007270:	4630      	mov	r0, r6
 8007272:	f001 f9de 	bl	8008632 <__malloc_unlock>
 8007276:	f104 000b 	add.w	r0, r4, #11
 800727a:	1d23      	adds	r3, r4, #4
 800727c:	f020 0007 	bic.w	r0, r0, #7
 8007280:	1ac3      	subs	r3, r0, r3
 8007282:	d01b      	beq.n	80072bc <_malloc_r+0xb0>
 8007284:	425a      	negs	r2, r3
 8007286:	50e2      	str	r2, [r4, r3]
 8007288:	bd70      	pop	{r4, r5, r6, pc}
 800728a:	428c      	cmp	r4, r1
 800728c:	bf0b      	itete	eq
 800728e:	6863      	ldreq	r3, [r4, #4]
 8007290:	684b      	ldrne	r3, [r1, #4]
 8007292:	6013      	streq	r3, [r2, #0]
 8007294:	6063      	strne	r3, [r4, #4]
 8007296:	bf18      	it	ne
 8007298:	460c      	movne	r4, r1
 800729a:	e7e9      	b.n	8007270 <_malloc_r+0x64>
 800729c:	460c      	mov	r4, r1
 800729e:	6849      	ldr	r1, [r1, #4]
 80072a0:	e7ca      	b.n	8007238 <_malloc_r+0x2c>
 80072a2:	1cc4      	adds	r4, r0, #3
 80072a4:	f024 0403 	bic.w	r4, r4, #3
 80072a8:	42a0      	cmp	r0, r4
 80072aa:	d005      	beq.n	80072b8 <_malloc_r+0xac>
 80072ac:	1a21      	subs	r1, r4, r0
 80072ae:	4630      	mov	r0, r6
 80072b0:	f000 fb18 	bl	80078e4 <_sbrk_r>
 80072b4:	3001      	adds	r0, #1
 80072b6:	d0cd      	beq.n	8007254 <_malloc_r+0x48>
 80072b8:	6025      	str	r5, [r4, #0]
 80072ba:	e7d9      	b.n	8007270 <_malloc_r+0x64>
 80072bc:	bd70      	pop	{r4, r5, r6, pc}
 80072be:	bf00      	nop
 80072c0:	20000204 	.word	0x20000204
 80072c4:	20000208 	.word	0x20000208

080072c8 <_realloc_r>:
 80072c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ca:	4607      	mov	r7, r0
 80072cc:	4614      	mov	r4, r2
 80072ce:	460e      	mov	r6, r1
 80072d0:	b921      	cbnz	r1, 80072dc <_realloc_r+0x14>
 80072d2:	4611      	mov	r1, r2
 80072d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80072d8:	f7ff bf98 	b.w	800720c <_malloc_r>
 80072dc:	b922      	cbnz	r2, 80072e8 <_realloc_r+0x20>
 80072de:	f7ff ff49 	bl	8007174 <_free_r>
 80072e2:	4625      	mov	r5, r4
 80072e4:	4628      	mov	r0, r5
 80072e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072e8:	f001 f9a4 	bl	8008634 <_malloc_usable_size_r>
 80072ec:	4284      	cmp	r4, r0
 80072ee:	d90f      	bls.n	8007310 <_realloc_r+0x48>
 80072f0:	4621      	mov	r1, r4
 80072f2:	4638      	mov	r0, r7
 80072f4:	f7ff ff8a 	bl	800720c <_malloc_r>
 80072f8:	4605      	mov	r5, r0
 80072fa:	2800      	cmp	r0, #0
 80072fc:	d0f2      	beq.n	80072e4 <_realloc_r+0x1c>
 80072fe:	4631      	mov	r1, r6
 8007300:	4622      	mov	r2, r4
 8007302:	f7ff fb19 	bl	8006938 <memcpy>
 8007306:	4631      	mov	r1, r6
 8007308:	4638      	mov	r0, r7
 800730a:	f7ff ff33 	bl	8007174 <_free_r>
 800730e:	e7e9      	b.n	80072e4 <_realloc_r+0x1c>
 8007310:	4635      	mov	r5, r6
 8007312:	e7e7      	b.n	80072e4 <_realloc_r+0x1c>

08007314 <__ssputs_r>:
 8007314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007318:	688e      	ldr	r6, [r1, #8]
 800731a:	4682      	mov	sl, r0
 800731c:	429e      	cmp	r6, r3
 800731e:	460c      	mov	r4, r1
 8007320:	4691      	mov	r9, r2
 8007322:	4698      	mov	r8, r3
 8007324:	d835      	bhi.n	8007392 <__ssputs_r+0x7e>
 8007326:	898a      	ldrh	r2, [r1, #12]
 8007328:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800732c:	d031      	beq.n	8007392 <__ssputs_r+0x7e>
 800732e:	2302      	movs	r3, #2
 8007330:	6825      	ldr	r5, [r4, #0]
 8007332:	6909      	ldr	r1, [r1, #16]
 8007334:	1a6f      	subs	r7, r5, r1
 8007336:	6965      	ldr	r5, [r4, #20]
 8007338:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800733c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007340:	f108 0301 	add.w	r3, r8, #1
 8007344:	443b      	add	r3, r7
 8007346:	429d      	cmp	r5, r3
 8007348:	bf38      	it	cc
 800734a:	461d      	movcc	r5, r3
 800734c:	0553      	lsls	r3, r2, #21
 800734e:	d531      	bpl.n	80073b4 <__ssputs_r+0xa0>
 8007350:	4629      	mov	r1, r5
 8007352:	f7ff ff5b 	bl	800720c <_malloc_r>
 8007356:	4606      	mov	r6, r0
 8007358:	b950      	cbnz	r0, 8007370 <__ssputs_r+0x5c>
 800735a:	230c      	movs	r3, #12
 800735c:	f8ca 3000 	str.w	r3, [sl]
 8007360:	89a3      	ldrh	r3, [r4, #12]
 8007362:	f04f 30ff 	mov.w	r0, #4294967295
 8007366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800736a:	81a3      	strh	r3, [r4, #12]
 800736c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007370:	463a      	mov	r2, r7
 8007372:	6921      	ldr	r1, [r4, #16]
 8007374:	f7ff fae0 	bl	8006938 <memcpy>
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800737e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007382:	81a3      	strh	r3, [r4, #12]
 8007384:	6126      	str	r6, [r4, #16]
 8007386:	443e      	add	r6, r7
 8007388:	6026      	str	r6, [r4, #0]
 800738a:	4646      	mov	r6, r8
 800738c:	6165      	str	r5, [r4, #20]
 800738e:	1bed      	subs	r5, r5, r7
 8007390:	60a5      	str	r5, [r4, #8]
 8007392:	4546      	cmp	r6, r8
 8007394:	bf28      	it	cs
 8007396:	4646      	movcs	r6, r8
 8007398:	4649      	mov	r1, r9
 800739a:	4632      	mov	r2, r6
 800739c:	6820      	ldr	r0, [r4, #0]
 800739e:	f001 f92d 	bl	80085fc <memmove>
 80073a2:	68a3      	ldr	r3, [r4, #8]
 80073a4:	2000      	movs	r0, #0
 80073a6:	1b9b      	subs	r3, r3, r6
 80073a8:	60a3      	str	r3, [r4, #8]
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	441e      	add	r6, r3
 80073ae:	6026      	str	r6, [r4, #0]
 80073b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b4:	462a      	mov	r2, r5
 80073b6:	f7ff ff87 	bl	80072c8 <_realloc_r>
 80073ba:	4606      	mov	r6, r0
 80073bc:	2800      	cmp	r0, #0
 80073be:	d1e1      	bne.n	8007384 <__ssputs_r+0x70>
 80073c0:	6921      	ldr	r1, [r4, #16]
 80073c2:	4650      	mov	r0, sl
 80073c4:	f7ff fed6 	bl	8007174 <_free_r>
 80073c8:	e7c7      	b.n	800735a <__ssputs_r+0x46>
	...

080073cc <_svfiprintf_r>:
 80073cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d0:	b09d      	sub	sp, #116	; 0x74
 80073d2:	9303      	str	r3, [sp, #12]
 80073d4:	898b      	ldrh	r3, [r1, #12]
 80073d6:	4680      	mov	r8, r0
 80073d8:	061c      	lsls	r4, r3, #24
 80073da:	460d      	mov	r5, r1
 80073dc:	4616      	mov	r6, r2
 80073de:	d50f      	bpl.n	8007400 <_svfiprintf_r+0x34>
 80073e0:	690b      	ldr	r3, [r1, #16]
 80073e2:	b96b      	cbnz	r3, 8007400 <_svfiprintf_r+0x34>
 80073e4:	2140      	movs	r1, #64	; 0x40
 80073e6:	f7ff ff11 	bl	800720c <_malloc_r>
 80073ea:	6028      	str	r0, [r5, #0]
 80073ec:	6128      	str	r0, [r5, #16]
 80073ee:	b928      	cbnz	r0, 80073fc <_svfiprintf_r+0x30>
 80073f0:	230c      	movs	r3, #12
 80073f2:	f8c8 3000 	str.w	r3, [r8]
 80073f6:	f04f 30ff 	mov.w	r0, #4294967295
 80073fa:	e0c4      	b.n	8007586 <_svfiprintf_r+0x1ba>
 80073fc:	2340      	movs	r3, #64	; 0x40
 80073fe:	616b      	str	r3, [r5, #20]
 8007400:	2300      	movs	r3, #0
 8007402:	9309      	str	r3, [sp, #36]	; 0x24
 8007404:	2320      	movs	r3, #32
 8007406:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800740a:	2330      	movs	r3, #48	; 0x30
 800740c:	f04f 0b01 	mov.w	fp, #1
 8007410:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007414:	4637      	mov	r7, r6
 8007416:	463c      	mov	r4, r7
 8007418:	f814 3b01 	ldrb.w	r3, [r4], #1
 800741c:	2b00      	cmp	r3, #0
 800741e:	d13c      	bne.n	800749a <_svfiprintf_r+0xce>
 8007420:	ebb7 0a06 	subs.w	sl, r7, r6
 8007424:	d00b      	beq.n	800743e <_svfiprintf_r+0x72>
 8007426:	4653      	mov	r3, sl
 8007428:	4632      	mov	r2, r6
 800742a:	4629      	mov	r1, r5
 800742c:	4640      	mov	r0, r8
 800742e:	f7ff ff71 	bl	8007314 <__ssputs_r>
 8007432:	3001      	adds	r0, #1
 8007434:	f000 80a2 	beq.w	800757c <_svfiprintf_r+0x1b0>
 8007438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800743a:	4453      	add	r3, sl
 800743c:	9309      	str	r3, [sp, #36]	; 0x24
 800743e:	783b      	ldrb	r3, [r7, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 809b 	beq.w	800757c <_svfiprintf_r+0x1b0>
 8007446:	2300      	movs	r3, #0
 8007448:	f04f 32ff 	mov.w	r2, #4294967295
 800744c:	9304      	str	r3, [sp, #16]
 800744e:	9307      	str	r3, [sp, #28]
 8007450:	9205      	str	r2, [sp, #20]
 8007452:	9306      	str	r3, [sp, #24]
 8007454:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007458:	931a      	str	r3, [sp, #104]	; 0x68
 800745a:	2205      	movs	r2, #5
 800745c:	7821      	ldrb	r1, [r4, #0]
 800745e:	4850      	ldr	r0, [pc, #320]	; (80075a0 <_svfiprintf_r+0x1d4>)
 8007460:	f001 f8be 	bl	80085e0 <memchr>
 8007464:	1c67      	adds	r7, r4, #1
 8007466:	9b04      	ldr	r3, [sp, #16]
 8007468:	b9d8      	cbnz	r0, 80074a2 <_svfiprintf_r+0xd6>
 800746a:	06d9      	lsls	r1, r3, #27
 800746c:	bf44      	itt	mi
 800746e:	2220      	movmi	r2, #32
 8007470:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007474:	071a      	lsls	r2, r3, #28
 8007476:	bf44      	itt	mi
 8007478:	222b      	movmi	r2, #43	; 0x2b
 800747a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800747e:	7822      	ldrb	r2, [r4, #0]
 8007480:	2a2a      	cmp	r2, #42	; 0x2a
 8007482:	d016      	beq.n	80074b2 <_svfiprintf_r+0xe6>
 8007484:	2100      	movs	r1, #0
 8007486:	200a      	movs	r0, #10
 8007488:	9a07      	ldr	r2, [sp, #28]
 800748a:	4627      	mov	r7, r4
 800748c:	783b      	ldrb	r3, [r7, #0]
 800748e:	3401      	adds	r4, #1
 8007490:	3b30      	subs	r3, #48	; 0x30
 8007492:	2b09      	cmp	r3, #9
 8007494:	d950      	bls.n	8007538 <_svfiprintf_r+0x16c>
 8007496:	b1c9      	cbz	r1, 80074cc <_svfiprintf_r+0x100>
 8007498:	e011      	b.n	80074be <_svfiprintf_r+0xf2>
 800749a:	2b25      	cmp	r3, #37	; 0x25
 800749c:	d0c0      	beq.n	8007420 <_svfiprintf_r+0x54>
 800749e:	4627      	mov	r7, r4
 80074a0:	e7b9      	b.n	8007416 <_svfiprintf_r+0x4a>
 80074a2:	4a3f      	ldr	r2, [pc, #252]	; (80075a0 <_svfiprintf_r+0x1d4>)
 80074a4:	463c      	mov	r4, r7
 80074a6:	1a80      	subs	r0, r0, r2
 80074a8:	fa0b f000 	lsl.w	r0, fp, r0
 80074ac:	4318      	orrs	r0, r3
 80074ae:	9004      	str	r0, [sp, #16]
 80074b0:	e7d3      	b.n	800745a <_svfiprintf_r+0x8e>
 80074b2:	9a03      	ldr	r2, [sp, #12]
 80074b4:	1d11      	adds	r1, r2, #4
 80074b6:	6812      	ldr	r2, [r2, #0]
 80074b8:	9103      	str	r1, [sp, #12]
 80074ba:	2a00      	cmp	r2, #0
 80074bc:	db01      	blt.n	80074c2 <_svfiprintf_r+0xf6>
 80074be:	9207      	str	r2, [sp, #28]
 80074c0:	e004      	b.n	80074cc <_svfiprintf_r+0x100>
 80074c2:	4252      	negs	r2, r2
 80074c4:	f043 0302 	orr.w	r3, r3, #2
 80074c8:	9207      	str	r2, [sp, #28]
 80074ca:	9304      	str	r3, [sp, #16]
 80074cc:	783b      	ldrb	r3, [r7, #0]
 80074ce:	2b2e      	cmp	r3, #46	; 0x2e
 80074d0:	d10d      	bne.n	80074ee <_svfiprintf_r+0x122>
 80074d2:	787b      	ldrb	r3, [r7, #1]
 80074d4:	1c79      	adds	r1, r7, #1
 80074d6:	2b2a      	cmp	r3, #42	; 0x2a
 80074d8:	d132      	bne.n	8007540 <_svfiprintf_r+0x174>
 80074da:	9b03      	ldr	r3, [sp, #12]
 80074dc:	3702      	adds	r7, #2
 80074de:	1d1a      	adds	r2, r3, #4
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	9203      	str	r2, [sp, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	bfb8      	it	lt
 80074e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80074ec:	9305      	str	r3, [sp, #20]
 80074ee:	4c2d      	ldr	r4, [pc, #180]	; (80075a4 <_svfiprintf_r+0x1d8>)
 80074f0:	2203      	movs	r2, #3
 80074f2:	7839      	ldrb	r1, [r7, #0]
 80074f4:	4620      	mov	r0, r4
 80074f6:	f001 f873 	bl	80085e0 <memchr>
 80074fa:	b138      	cbz	r0, 800750c <_svfiprintf_r+0x140>
 80074fc:	2340      	movs	r3, #64	; 0x40
 80074fe:	1b00      	subs	r0, r0, r4
 8007500:	fa03 f000 	lsl.w	r0, r3, r0
 8007504:	9b04      	ldr	r3, [sp, #16]
 8007506:	3701      	adds	r7, #1
 8007508:	4303      	orrs	r3, r0
 800750a:	9304      	str	r3, [sp, #16]
 800750c:	7839      	ldrb	r1, [r7, #0]
 800750e:	2206      	movs	r2, #6
 8007510:	4825      	ldr	r0, [pc, #148]	; (80075a8 <_svfiprintf_r+0x1dc>)
 8007512:	1c7e      	adds	r6, r7, #1
 8007514:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007518:	f001 f862 	bl	80085e0 <memchr>
 800751c:	2800      	cmp	r0, #0
 800751e:	d035      	beq.n	800758c <_svfiprintf_r+0x1c0>
 8007520:	4b22      	ldr	r3, [pc, #136]	; (80075ac <_svfiprintf_r+0x1e0>)
 8007522:	b9fb      	cbnz	r3, 8007564 <_svfiprintf_r+0x198>
 8007524:	9b03      	ldr	r3, [sp, #12]
 8007526:	3307      	adds	r3, #7
 8007528:	f023 0307 	bic.w	r3, r3, #7
 800752c:	3308      	adds	r3, #8
 800752e:	9303      	str	r3, [sp, #12]
 8007530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007532:	444b      	add	r3, r9
 8007534:	9309      	str	r3, [sp, #36]	; 0x24
 8007536:	e76d      	b.n	8007414 <_svfiprintf_r+0x48>
 8007538:	fb00 3202 	mla	r2, r0, r2, r3
 800753c:	2101      	movs	r1, #1
 800753e:	e7a4      	b.n	800748a <_svfiprintf_r+0xbe>
 8007540:	2300      	movs	r3, #0
 8007542:	240a      	movs	r4, #10
 8007544:	4618      	mov	r0, r3
 8007546:	9305      	str	r3, [sp, #20]
 8007548:	460f      	mov	r7, r1
 800754a:	783a      	ldrb	r2, [r7, #0]
 800754c:	3101      	adds	r1, #1
 800754e:	3a30      	subs	r2, #48	; 0x30
 8007550:	2a09      	cmp	r2, #9
 8007552:	d903      	bls.n	800755c <_svfiprintf_r+0x190>
 8007554:	2b00      	cmp	r3, #0
 8007556:	d0ca      	beq.n	80074ee <_svfiprintf_r+0x122>
 8007558:	9005      	str	r0, [sp, #20]
 800755a:	e7c8      	b.n	80074ee <_svfiprintf_r+0x122>
 800755c:	fb04 2000 	mla	r0, r4, r0, r2
 8007560:	2301      	movs	r3, #1
 8007562:	e7f1      	b.n	8007548 <_svfiprintf_r+0x17c>
 8007564:	ab03      	add	r3, sp, #12
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	462a      	mov	r2, r5
 800756a:	4b11      	ldr	r3, [pc, #68]	; (80075b0 <_svfiprintf_r+0x1e4>)
 800756c:	a904      	add	r1, sp, #16
 800756e:	4640      	mov	r0, r8
 8007570:	f3af 8000 	nop.w
 8007574:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007578:	4681      	mov	r9, r0
 800757a:	d1d9      	bne.n	8007530 <_svfiprintf_r+0x164>
 800757c:	89ab      	ldrh	r3, [r5, #12]
 800757e:	065b      	lsls	r3, r3, #25
 8007580:	f53f af39 	bmi.w	80073f6 <_svfiprintf_r+0x2a>
 8007584:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007586:	b01d      	add	sp, #116	; 0x74
 8007588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800758c:	ab03      	add	r3, sp, #12
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	462a      	mov	r2, r5
 8007592:	4b07      	ldr	r3, [pc, #28]	; (80075b0 <_svfiprintf_r+0x1e4>)
 8007594:	a904      	add	r1, sp, #16
 8007596:	4640      	mov	r0, r8
 8007598:	f000 f884 	bl	80076a4 <_printf_i>
 800759c:	e7ea      	b.n	8007574 <_svfiprintf_r+0x1a8>
 800759e:	bf00      	nop
 80075a0:	0800891c 	.word	0x0800891c
 80075a4:	08008922 	.word	0x08008922
 80075a8:	08008926 	.word	0x08008926
 80075ac:	00000000 	.word	0x00000000
 80075b0:	08007315 	.word	0x08007315

080075b4 <_printf_common>:
 80075b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b8:	4691      	mov	r9, r2
 80075ba:	461f      	mov	r7, r3
 80075bc:	688a      	ldr	r2, [r1, #8]
 80075be:	690b      	ldr	r3, [r1, #16]
 80075c0:	4606      	mov	r6, r0
 80075c2:	4293      	cmp	r3, r2
 80075c4:	bfb8      	it	lt
 80075c6:	4613      	movlt	r3, r2
 80075c8:	f8c9 3000 	str.w	r3, [r9]
 80075cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075d0:	460c      	mov	r4, r1
 80075d2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075d6:	b112      	cbz	r2, 80075de <_printf_common+0x2a>
 80075d8:	3301      	adds	r3, #1
 80075da:	f8c9 3000 	str.w	r3, [r9]
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	0699      	lsls	r1, r3, #26
 80075e2:	bf42      	ittt	mi
 80075e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80075e8:	3302      	addmi	r3, #2
 80075ea:	f8c9 3000 	strmi.w	r3, [r9]
 80075ee:	6825      	ldr	r5, [r4, #0]
 80075f0:	f015 0506 	ands.w	r5, r5, #6
 80075f4:	d107      	bne.n	8007606 <_printf_common+0x52>
 80075f6:	f104 0a19 	add.w	sl, r4, #25
 80075fa:	68e3      	ldr	r3, [r4, #12]
 80075fc:	f8d9 2000 	ldr.w	r2, [r9]
 8007600:	1a9b      	subs	r3, r3, r2
 8007602:	429d      	cmp	r5, r3
 8007604:	db2a      	blt.n	800765c <_printf_common+0xa8>
 8007606:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800760a:	6822      	ldr	r2, [r4, #0]
 800760c:	3300      	adds	r3, #0
 800760e:	bf18      	it	ne
 8007610:	2301      	movne	r3, #1
 8007612:	0692      	lsls	r2, r2, #26
 8007614:	d42f      	bmi.n	8007676 <_printf_common+0xc2>
 8007616:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800761a:	4639      	mov	r1, r7
 800761c:	4630      	mov	r0, r6
 800761e:	47c0      	blx	r8
 8007620:	3001      	adds	r0, #1
 8007622:	d022      	beq.n	800766a <_printf_common+0xb6>
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	68e5      	ldr	r5, [r4, #12]
 8007628:	f003 0306 	and.w	r3, r3, #6
 800762c:	2b04      	cmp	r3, #4
 800762e:	bf18      	it	ne
 8007630:	2500      	movne	r5, #0
 8007632:	f8d9 2000 	ldr.w	r2, [r9]
 8007636:	f04f 0900 	mov.w	r9, #0
 800763a:	bf08      	it	eq
 800763c:	1aad      	subeq	r5, r5, r2
 800763e:	68a3      	ldr	r3, [r4, #8]
 8007640:	6922      	ldr	r2, [r4, #16]
 8007642:	bf08      	it	eq
 8007644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007648:	4293      	cmp	r3, r2
 800764a:	bfc4      	itt	gt
 800764c:	1a9b      	subgt	r3, r3, r2
 800764e:	18ed      	addgt	r5, r5, r3
 8007650:	341a      	adds	r4, #26
 8007652:	454d      	cmp	r5, r9
 8007654:	d11b      	bne.n	800768e <_printf_common+0xda>
 8007656:	2000      	movs	r0, #0
 8007658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800765c:	2301      	movs	r3, #1
 800765e:	4652      	mov	r2, sl
 8007660:	4639      	mov	r1, r7
 8007662:	4630      	mov	r0, r6
 8007664:	47c0      	blx	r8
 8007666:	3001      	adds	r0, #1
 8007668:	d103      	bne.n	8007672 <_printf_common+0xbe>
 800766a:	f04f 30ff 	mov.w	r0, #4294967295
 800766e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007672:	3501      	adds	r5, #1
 8007674:	e7c1      	b.n	80075fa <_printf_common+0x46>
 8007676:	2030      	movs	r0, #48	; 0x30
 8007678:	18e1      	adds	r1, r4, r3
 800767a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007684:	4422      	add	r2, r4
 8007686:	3302      	adds	r3, #2
 8007688:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800768c:	e7c3      	b.n	8007616 <_printf_common+0x62>
 800768e:	2301      	movs	r3, #1
 8007690:	4622      	mov	r2, r4
 8007692:	4639      	mov	r1, r7
 8007694:	4630      	mov	r0, r6
 8007696:	47c0      	blx	r8
 8007698:	3001      	adds	r0, #1
 800769a:	d0e6      	beq.n	800766a <_printf_common+0xb6>
 800769c:	f109 0901 	add.w	r9, r9, #1
 80076a0:	e7d7      	b.n	8007652 <_printf_common+0x9e>
	...

080076a4 <_printf_i>:
 80076a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076a8:	4617      	mov	r7, r2
 80076aa:	7e0a      	ldrb	r2, [r1, #24]
 80076ac:	b085      	sub	sp, #20
 80076ae:	2a6e      	cmp	r2, #110	; 0x6e
 80076b0:	4698      	mov	r8, r3
 80076b2:	4606      	mov	r6, r0
 80076b4:	460c      	mov	r4, r1
 80076b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076b8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80076bc:	f000 80bc 	beq.w	8007838 <_printf_i+0x194>
 80076c0:	d81a      	bhi.n	80076f8 <_printf_i+0x54>
 80076c2:	2a63      	cmp	r2, #99	; 0x63
 80076c4:	d02e      	beq.n	8007724 <_printf_i+0x80>
 80076c6:	d80a      	bhi.n	80076de <_printf_i+0x3a>
 80076c8:	2a00      	cmp	r2, #0
 80076ca:	f000 80c8 	beq.w	800785e <_printf_i+0x1ba>
 80076ce:	2a58      	cmp	r2, #88	; 0x58
 80076d0:	f000 808a 	beq.w	80077e8 <_printf_i+0x144>
 80076d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076d8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80076dc:	e02a      	b.n	8007734 <_printf_i+0x90>
 80076de:	2a64      	cmp	r2, #100	; 0x64
 80076e0:	d001      	beq.n	80076e6 <_printf_i+0x42>
 80076e2:	2a69      	cmp	r2, #105	; 0x69
 80076e4:	d1f6      	bne.n	80076d4 <_printf_i+0x30>
 80076e6:	6821      	ldr	r1, [r4, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	f011 0f80 	tst.w	r1, #128	; 0x80
 80076ee:	d023      	beq.n	8007738 <_printf_i+0x94>
 80076f0:	1d11      	adds	r1, r2, #4
 80076f2:	6019      	str	r1, [r3, #0]
 80076f4:	6813      	ldr	r3, [r2, #0]
 80076f6:	e027      	b.n	8007748 <_printf_i+0xa4>
 80076f8:	2a73      	cmp	r2, #115	; 0x73
 80076fa:	f000 80b4 	beq.w	8007866 <_printf_i+0x1c2>
 80076fe:	d808      	bhi.n	8007712 <_printf_i+0x6e>
 8007700:	2a6f      	cmp	r2, #111	; 0x6f
 8007702:	d02a      	beq.n	800775a <_printf_i+0xb6>
 8007704:	2a70      	cmp	r2, #112	; 0x70
 8007706:	d1e5      	bne.n	80076d4 <_printf_i+0x30>
 8007708:	680a      	ldr	r2, [r1, #0]
 800770a:	f042 0220 	orr.w	r2, r2, #32
 800770e:	600a      	str	r2, [r1, #0]
 8007710:	e003      	b.n	800771a <_printf_i+0x76>
 8007712:	2a75      	cmp	r2, #117	; 0x75
 8007714:	d021      	beq.n	800775a <_printf_i+0xb6>
 8007716:	2a78      	cmp	r2, #120	; 0x78
 8007718:	d1dc      	bne.n	80076d4 <_printf_i+0x30>
 800771a:	2278      	movs	r2, #120	; 0x78
 800771c:	496f      	ldr	r1, [pc, #444]	; (80078dc <_printf_i+0x238>)
 800771e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8007722:	e064      	b.n	80077ee <_printf_i+0x14a>
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800772a:	1d11      	adds	r1, r2, #4
 800772c:	6019      	str	r1, [r3, #0]
 800772e:	6813      	ldr	r3, [r2, #0]
 8007730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007734:	2301      	movs	r3, #1
 8007736:	e0a3      	b.n	8007880 <_printf_i+0x1dc>
 8007738:	f011 0f40 	tst.w	r1, #64	; 0x40
 800773c:	f102 0104 	add.w	r1, r2, #4
 8007740:	6019      	str	r1, [r3, #0]
 8007742:	d0d7      	beq.n	80076f4 <_printf_i+0x50>
 8007744:	f9b2 3000 	ldrsh.w	r3, [r2]
 8007748:	2b00      	cmp	r3, #0
 800774a:	da03      	bge.n	8007754 <_printf_i+0xb0>
 800774c:	222d      	movs	r2, #45	; 0x2d
 800774e:	425b      	negs	r3, r3
 8007750:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007754:	4962      	ldr	r1, [pc, #392]	; (80078e0 <_printf_i+0x23c>)
 8007756:	220a      	movs	r2, #10
 8007758:	e017      	b.n	800778a <_printf_i+0xe6>
 800775a:	6820      	ldr	r0, [r4, #0]
 800775c:	6819      	ldr	r1, [r3, #0]
 800775e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007762:	d003      	beq.n	800776c <_printf_i+0xc8>
 8007764:	1d08      	adds	r0, r1, #4
 8007766:	6018      	str	r0, [r3, #0]
 8007768:	680b      	ldr	r3, [r1, #0]
 800776a:	e006      	b.n	800777a <_printf_i+0xd6>
 800776c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007770:	f101 0004 	add.w	r0, r1, #4
 8007774:	6018      	str	r0, [r3, #0]
 8007776:	d0f7      	beq.n	8007768 <_printf_i+0xc4>
 8007778:	880b      	ldrh	r3, [r1, #0]
 800777a:	2a6f      	cmp	r2, #111	; 0x6f
 800777c:	bf14      	ite	ne
 800777e:	220a      	movne	r2, #10
 8007780:	2208      	moveq	r2, #8
 8007782:	4957      	ldr	r1, [pc, #348]	; (80078e0 <_printf_i+0x23c>)
 8007784:	2000      	movs	r0, #0
 8007786:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800778a:	6865      	ldr	r5, [r4, #4]
 800778c:	2d00      	cmp	r5, #0
 800778e:	60a5      	str	r5, [r4, #8]
 8007790:	f2c0 809c 	blt.w	80078cc <_printf_i+0x228>
 8007794:	6820      	ldr	r0, [r4, #0]
 8007796:	f020 0004 	bic.w	r0, r0, #4
 800779a:	6020      	str	r0, [r4, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d13f      	bne.n	8007820 <_printf_i+0x17c>
 80077a0:	2d00      	cmp	r5, #0
 80077a2:	f040 8095 	bne.w	80078d0 <_printf_i+0x22c>
 80077a6:	4675      	mov	r5, lr
 80077a8:	2a08      	cmp	r2, #8
 80077aa:	d10b      	bne.n	80077c4 <_printf_i+0x120>
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	07da      	lsls	r2, r3, #31
 80077b0:	d508      	bpl.n	80077c4 <_printf_i+0x120>
 80077b2:	6923      	ldr	r3, [r4, #16]
 80077b4:	6862      	ldr	r2, [r4, #4]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	bfde      	ittt	le
 80077ba:	2330      	movle	r3, #48	; 0x30
 80077bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80077c4:	ebae 0305 	sub.w	r3, lr, r5
 80077c8:	6123      	str	r3, [r4, #16]
 80077ca:	f8cd 8000 	str.w	r8, [sp]
 80077ce:	463b      	mov	r3, r7
 80077d0:	aa03      	add	r2, sp, #12
 80077d2:	4621      	mov	r1, r4
 80077d4:	4630      	mov	r0, r6
 80077d6:	f7ff feed 	bl	80075b4 <_printf_common>
 80077da:	3001      	adds	r0, #1
 80077dc:	d155      	bne.n	800788a <_printf_i+0x1e6>
 80077de:	f04f 30ff 	mov.w	r0, #4294967295
 80077e2:	b005      	add	sp, #20
 80077e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077e8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80077ec:	493c      	ldr	r1, [pc, #240]	; (80078e0 <_printf_i+0x23c>)
 80077ee:	6822      	ldr	r2, [r4, #0]
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80077f6:	f100 0504 	add.w	r5, r0, #4
 80077fa:	601d      	str	r5, [r3, #0]
 80077fc:	d001      	beq.n	8007802 <_printf_i+0x15e>
 80077fe:	6803      	ldr	r3, [r0, #0]
 8007800:	e002      	b.n	8007808 <_printf_i+0x164>
 8007802:	0655      	lsls	r5, r2, #25
 8007804:	d5fb      	bpl.n	80077fe <_printf_i+0x15a>
 8007806:	8803      	ldrh	r3, [r0, #0]
 8007808:	07d0      	lsls	r0, r2, #31
 800780a:	bf44      	itt	mi
 800780c:	f042 0220 	orrmi.w	r2, r2, #32
 8007810:	6022      	strmi	r2, [r4, #0]
 8007812:	b91b      	cbnz	r3, 800781c <_printf_i+0x178>
 8007814:	6822      	ldr	r2, [r4, #0]
 8007816:	f022 0220 	bic.w	r2, r2, #32
 800781a:	6022      	str	r2, [r4, #0]
 800781c:	2210      	movs	r2, #16
 800781e:	e7b1      	b.n	8007784 <_printf_i+0xe0>
 8007820:	4675      	mov	r5, lr
 8007822:	fbb3 f0f2 	udiv	r0, r3, r2
 8007826:	fb02 3310 	mls	r3, r2, r0, r3
 800782a:	5ccb      	ldrb	r3, [r1, r3]
 800782c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007830:	4603      	mov	r3, r0
 8007832:	2800      	cmp	r0, #0
 8007834:	d1f5      	bne.n	8007822 <_printf_i+0x17e>
 8007836:	e7b7      	b.n	80077a8 <_printf_i+0x104>
 8007838:	6808      	ldr	r0, [r1, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007840:	6949      	ldr	r1, [r1, #20]
 8007842:	d004      	beq.n	800784e <_printf_i+0x1aa>
 8007844:	1d10      	adds	r0, r2, #4
 8007846:	6018      	str	r0, [r3, #0]
 8007848:	6813      	ldr	r3, [r2, #0]
 800784a:	6019      	str	r1, [r3, #0]
 800784c:	e007      	b.n	800785e <_printf_i+0x1ba>
 800784e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007852:	f102 0004 	add.w	r0, r2, #4
 8007856:	6018      	str	r0, [r3, #0]
 8007858:	6813      	ldr	r3, [r2, #0]
 800785a:	d0f6      	beq.n	800784a <_printf_i+0x1a6>
 800785c:	8019      	strh	r1, [r3, #0]
 800785e:	2300      	movs	r3, #0
 8007860:	4675      	mov	r5, lr
 8007862:	6123      	str	r3, [r4, #16]
 8007864:	e7b1      	b.n	80077ca <_printf_i+0x126>
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	1d11      	adds	r1, r2, #4
 800786a:	6019      	str	r1, [r3, #0]
 800786c:	6815      	ldr	r5, [r2, #0]
 800786e:	2100      	movs	r1, #0
 8007870:	6862      	ldr	r2, [r4, #4]
 8007872:	4628      	mov	r0, r5
 8007874:	f000 feb4 	bl	80085e0 <memchr>
 8007878:	b108      	cbz	r0, 800787e <_printf_i+0x1da>
 800787a:	1b40      	subs	r0, r0, r5
 800787c:	6060      	str	r0, [r4, #4]
 800787e:	6863      	ldr	r3, [r4, #4]
 8007880:	6123      	str	r3, [r4, #16]
 8007882:	2300      	movs	r3, #0
 8007884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007888:	e79f      	b.n	80077ca <_printf_i+0x126>
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	462a      	mov	r2, r5
 800788e:	4639      	mov	r1, r7
 8007890:	4630      	mov	r0, r6
 8007892:	47c0      	blx	r8
 8007894:	3001      	adds	r0, #1
 8007896:	d0a2      	beq.n	80077de <_printf_i+0x13a>
 8007898:	6823      	ldr	r3, [r4, #0]
 800789a:	079b      	lsls	r3, r3, #30
 800789c:	d507      	bpl.n	80078ae <_printf_i+0x20a>
 800789e:	2500      	movs	r5, #0
 80078a0:	f104 0919 	add.w	r9, r4, #25
 80078a4:	68e3      	ldr	r3, [r4, #12]
 80078a6:	9a03      	ldr	r2, [sp, #12]
 80078a8:	1a9b      	subs	r3, r3, r2
 80078aa:	429d      	cmp	r5, r3
 80078ac:	db05      	blt.n	80078ba <_printf_i+0x216>
 80078ae:	68e0      	ldr	r0, [r4, #12]
 80078b0:	9b03      	ldr	r3, [sp, #12]
 80078b2:	4298      	cmp	r0, r3
 80078b4:	bfb8      	it	lt
 80078b6:	4618      	movlt	r0, r3
 80078b8:	e793      	b.n	80077e2 <_printf_i+0x13e>
 80078ba:	2301      	movs	r3, #1
 80078bc:	464a      	mov	r2, r9
 80078be:	4639      	mov	r1, r7
 80078c0:	4630      	mov	r0, r6
 80078c2:	47c0      	blx	r8
 80078c4:	3001      	adds	r0, #1
 80078c6:	d08a      	beq.n	80077de <_printf_i+0x13a>
 80078c8:	3501      	adds	r5, #1
 80078ca:	e7eb      	b.n	80078a4 <_printf_i+0x200>
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1a7      	bne.n	8007820 <_printf_i+0x17c>
 80078d0:	780b      	ldrb	r3, [r1, #0]
 80078d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078da:	e765      	b.n	80077a8 <_printf_i+0x104>
 80078dc:	0800893e 	.word	0x0800893e
 80078e0:	0800892d 	.word	0x0800892d

080078e4 <_sbrk_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	2300      	movs	r3, #0
 80078e8:	4c05      	ldr	r4, [pc, #20]	; (8007900 <_sbrk_r+0x1c>)
 80078ea:	4605      	mov	r5, r0
 80078ec:	4608      	mov	r0, r1
 80078ee:	6023      	str	r3, [r4, #0]
 80078f0:	f000 feaa 	bl	8008648 <_sbrk>
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	d102      	bne.n	80078fe <_sbrk_r+0x1a>
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	b103      	cbz	r3, 80078fe <_sbrk_r+0x1a>
 80078fc:	602b      	str	r3, [r5, #0]
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	200009fc 	.word	0x200009fc

08007904 <__ascii_wctomb>:
 8007904:	b149      	cbz	r1, 800791a <__ascii_wctomb+0x16>
 8007906:	2aff      	cmp	r2, #255	; 0xff
 8007908:	bf8b      	itete	hi
 800790a:	238a      	movhi	r3, #138	; 0x8a
 800790c:	700a      	strbls	r2, [r1, #0]
 800790e:	6003      	strhi	r3, [r0, #0]
 8007910:	2001      	movls	r0, #1
 8007912:	bf88      	it	hi
 8007914:	f04f 30ff 	movhi.w	r0, #4294967295
 8007918:	4770      	bx	lr
 800791a:	4608      	mov	r0, r1
 800791c:	4770      	bx	lr

0800791e <quorem>:
 800791e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007922:	6903      	ldr	r3, [r0, #16]
 8007924:	690c      	ldr	r4, [r1, #16]
 8007926:	4680      	mov	r8, r0
 8007928:	429c      	cmp	r4, r3
 800792a:	f300 8082 	bgt.w	8007a32 <quorem+0x114>
 800792e:	3c01      	subs	r4, #1
 8007930:	f101 0714 	add.w	r7, r1, #20
 8007934:	f100 0614 	add.w	r6, r0, #20
 8007938:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800793c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007940:	3501      	adds	r5, #1
 8007942:	fbb0 f5f5 	udiv	r5, r0, r5
 8007946:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800794a:	eb06 030e 	add.w	r3, r6, lr
 800794e:	eb07 090e 	add.w	r9, r7, lr
 8007952:	9301      	str	r3, [sp, #4]
 8007954:	b38d      	cbz	r5, 80079ba <quorem+0x9c>
 8007956:	f04f 0a00 	mov.w	sl, #0
 800795a:	4638      	mov	r0, r7
 800795c:	46b4      	mov	ip, r6
 800795e:	46d3      	mov	fp, sl
 8007960:	f850 2b04 	ldr.w	r2, [r0], #4
 8007964:	b293      	uxth	r3, r2
 8007966:	fb05 a303 	mla	r3, r5, r3, sl
 800796a:	0c12      	lsrs	r2, r2, #16
 800796c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007970:	fb05 a202 	mla	r2, r5, r2, sl
 8007974:	b29b      	uxth	r3, r3
 8007976:	ebab 0303 	sub.w	r3, fp, r3
 800797a:	f8bc b000 	ldrh.w	fp, [ip]
 800797e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007982:	445b      	add	r3, fp
 8007984:	fa1f fb82 	uxth.w	fp, r2
 8007988:	f8dc 2000 	ldr.w	r2, [ip]
 800798c:	4581      	cmp	r9, r0
 800798e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007992:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007996:	b29b      	uxth	r3, r3
 8007998:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800799c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80079a0:	f84c 3b04 	str.w	r3, [ip], #4
 80079a4:	d2dc      	bcs.n	8007960 <quorem+0x42>
 80079a6:	f856 300e 	ldr.w	r3, [r6, lr]
 80079aa:	b933      	cbnz	r3, 80079ba <quorem+0x9c>
 80079ac:	9b01      	ldr	r3, [sp, #4]
 80079ae:	3b04      	subs	r3, #4
 80079b0:	429e      	cmp	r6, r3
 80079b2:	461a      	mov	r2, r3
 80079b4:	d331      	bcc.n	8007a1a <quorem+0xfc>
 80079b6:	f8c8 4010 	str.w	r4, [r8, #16]
 80079ba:	4640      	mov	r0, r8
 80079bc:	f7ff fa0d 	bl	8006dda <__mcmp>
 80079c0:	2800      	cmp	r0, #0
 80079c2:	db26      	blt.n	8007a12 <quorem+0xf4>
 80079c4:	4630      	mov	r0, r6
 80079c6:	f04f 0e00 	mov.w	lr, #0
 80079ca:	3501      	adds	r5, #1
 80079cc:	f857 1b04 	ldr.w	r1, [r7], #4
 80079d0:	f8d0 c000 	ldr.w	ip, [r0]
 80079d4:	b28b      	uxth	r3, r1
 80079d6:	ebae 0303 	sub.w	r3, lr, r3
 80079da:	fa1f f28c 	uxth.w	r2, ip
 80079de:	4413      	add	r3, r2
 80079e0:	0c0a      	lsrs	r2, r1, #16
 80079e2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80079e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079f0:	45b9      	cmp	r9, r7
 80079f2:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80079f6:	f840 3b04 	str.w	r3, [r0], #4
 80079fa:	d2e7      	bcs.n	80079cc <quorem+0xae>
 80079fc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007a00:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007a04:	b92a      	cbnz	r2, 8007a12 <quorem+0xf4>
 8007a06:	3b04      	subs	r3, #4
 8007a08:	429e      	cmp	r6, r3
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	d30b      	bcc.n	8007a26 <quorem+0x108>
 8007a0e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007a12:	4628      	mov	r0, r5
 8007a14:	b003      	add	sp, #12
 8007a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1a:	6812      	ldr	r2, [r2, #0]
 8007a1c:	3b04      	subs	r3, #4
 8007a1e:	2a00      	cmp	r2, #0
 8007a20:	d1c9      	bne.n	80079b6 <quorem+0x98>
 8007a22:	3c01      	subs	r4, #1
 8007a24:	e7c4      	b.n	80079b0 <quorem+0x92>
 8007a26:	6812      	ldr	r2, [r2, #0]
 8007a28:	3b04      	subs	r3, #4
 8007a2a:	2a00      	cmp	r2, #0
 8007a2c:	d1ef      	bne.n	8007a0e <quorem+0xf0>
 8007a2e:	3c01      	subs	r4, #1
 8007a30:	e7ea      	b.n	8007a08 <quorem+0xea>
 8007a32:	2000      	movs	r0, #0
 8007a34:	e7ee      	b.n	8007a14 <quorem+0xf6>
	...

08007a38 <_dtoa_r>:
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a3e:	b095      	sub	sp, #84	; 0x54
 8007a40:	4604      	mov	r4, r0
 8007a42:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8007a44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a48:	b93e      	cbnz	r6, 8007a5a <_dtoa_r+0x22>
 8007a4a:	2010      	movs	r0, #16
 8007a4c:	f7fe ff5a 	bl	8006904 <malloc>
 8007a50:	6260      	str	r0, [r4, #36]	; 0x24
 8007a52:	6046      	str	r6, [r0, #4]
 8007a54:	6086      	str	r6, [r0, #8]
 8007a56:	6006      	str	r6, [r0, #0]
 8007a58:	60c6      	str	r6, [r0, #12]
 8007a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a5c:	6819      	ldr	r1, [r3, #0]
 8007a5e:	b151      	cbz	r1, 8007a76 <_dtoa_r+0x3e>
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	2301      	movs	r3, #1
 8007a64:	4093      	lsls	r3, r2
 8007a66:	604a      	str	r2, [r1, #4]
 8007a68:	608b      	str	r3, [r1, #8]
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f7fe ffa3 	bl	80069b6 <_Bfree>
 8007a70:	2200      	movs	r2, #0
 8007a72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	9b03      	ldr	r3, [sp, #12]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	bfb7      	itett	lt
 8007a7c:	2301      	movlt	r3, #1
 8007a7e:	2300      	movge	r3, #0
 8007a80:	602b      	strlt	r3, [r5, #0]
 8007a82:	9b03      	ldrlt	r3, [sp, #12]
 8007a84:	bfae      	itee	ge
 8007a86:	602b      	strge	r3, [r5, #0]
 8007a88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a8c:	9303      	strlt	r3, [sp, #12]
 8007a8e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007a92:	4bab      	ldr	r3, [pc, #684]	; (8007d40 <_dtoa_r+0x308>)
 8007a94:	ea33 0309 	bics.w	r3, r3, r9
 8007a98:	d11b      	bne.n	8007ad2 <_dtoa_r+0x9a>
 8007a9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a9e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007aa0:	6013      	str	r3, [r2, #0]
 8007aa2:	9b02      	ldr	r3, [sp, #8]
 8007aa4:	b923      	cbnz	r3, 8007ab0 <_dtoa_r+0x78>
 8007aa6:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	f000 8583 	beq.w	80085b6 <_dtoa_r+0xb7e>
 8007ab0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ab2:	b953      	cbnz	r3, 8007aca <_dtoa_r+0x92>
 8007ab4:	4ba3      	ldr	r3, [pc, #652]	; (8007d44 <_dtoa_r+0x30c>)
 8007ab6:	e021      	b.n	8007afc <_dtoa_r+0xc4>
 8007ab8:	4ba3      	ldr	r3, [pc, #652]	; (8007d48 <_dtoa_r+0x310>)
 8007aba:	9306      	str	r3, [sp, #24]
 8007abc:	3308      	adds	r3, #8
 8007abe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007ac0:	6013      	str	r3, [r2, #0]
 8007ac2:	9806      	ldr	r0, [sp, #24]
 8007ac4:	b015      	add	sp, #84	; 0x54
 8007ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aca:	4b9e      	ldr	r3, [pc, #632]	; (8007d44 <_dtoa_r+0x30c>)
 8007acc:	9306      	str	r3, [sp, #24]
 8007ace:	3303      	adds	r3, #3
 8007ad0:	e7f5      	b.n	8007abe <_dtoa_r+0x86>
 8007ad2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2300      	movs	r3, #0
 8007ada:	4630      	mov	r0, r6
 8007adc:	4639      	mov	r1, r7
 8007ade:	f7f8 ff77 	bl	80009d0 <__aeabi_dcmpeq>
 8007ae2:	4680      	mov	r8, r0
 8007ae4:	b160      	cbz	r0, 8007b00 <_dtoa_r+0xc8>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007aea:	6013      	str	r3, [r2, #0]
 8007aec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 855e 	beq.w	80085b0 <_dtoa_r+0xb78>
 8007af4:	4b95      	ldr	r3, [pc, #596]	; (8007d4c <_dtoa_r+0x314>)
 8007af6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007af8:	6013      	str	r3, [r2, #0]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	9306      	str	r3, [sp, #24]
 8007afe:	e7e0      	b.n	8007ac2 <_dtoa_r+0x8a>
 8007b00:	ab12      	add	r3, sp, #72	; 0x48
 8007b02:	9301      	str	r3, [sp, #4]
 8007b04:	ab13      	add	r3, sp, #76	; 0x4c
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	4632      	mov	r2, r6
 8007b0a:	463b      	mov	r3, r7
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f7ff fa53 	bl	8006fb8 <__d2b>
 8007b12:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b16:	4682      	mov	sl, r0
 8007b18:	2d00      	cmp	r5, #0
 8007b1a:	d07d      	beq.n	8007c18 <_dtoa_r+0x1e0>
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b22:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007b26:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007b2a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b2e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007b32:	2200      	movs	r2, #0
 8007b34:	4b86      	ldr	r3, [pc, #536]	; (8007d50 <_dtoa_r+0x318>)
 8007b36:	f7f8 fb2f 	bl	8000198 <__aeabi_dsub>
 8007b3a:	a37b      	add	r3, pc, #492	; (adr r3, 8007d28 <_dtoa_r+0x2f0>)
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	f7f8 fcde 	bl	8000500 <__aeabi_dmul>
 8007b44:	a37a      	add	r3, pc, #488	; (adr r3, 8007d30 <_dtoa_r+0x2f8>)
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	f7f8 fb27 	bl	800019c <__adddf3>
 8007b4e:	4606      	mov	r6, r0
 8007b50:	4628      	mov	r0, r5
 8007b52:	460f      	mov	r7, r1
 8007b54:	f7f8 fc6e 	bl	8000434 <__aeabi_i2d>
 8007b58:	a377      	add	r3, pc, #476	; (adr r3, 8007d38 <_dtoa_r+0x300>)
 8007b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5e:	f7f8 fccf 	bl	8000500 <__aeabi_dmul>
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	4630      	mov	r0, r6
 8007b68:	4639      	mov	r1, r7
 8007b6a:	f7f8 fb17 	bl	800019c <__adddf3>
 8007b6e:	4606      	mov	r6, r0
 8007b70:	460f      	mov	r7, r1
 8007b72:	f7f8 ff5f 	bl	8000a34 <__aeabi_d2iz>
 8007b76:	2200      	movs	r2, #0
 8007b78:	4683      	mov	fp, r0
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	4639      	mov	r1, r7
 8007b80:	f7f8 ff30 	bl	80009e4 <__aeabi_dcmplt>
 8007b84:	b158      	cbz	r0, 8007b9e <_dtoa_r+0x166>
 8007b86:	4658      	mov	r0, fp
 8007b88:	f7f8 fc54 	bl	8000434 <__aeabi_i2d>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	4630      	mov	r0, r6
 8007b92:	4639      	mov	r1, r7
 8007b94:	f7f8 ff1c 	bl	80009d0 <__aeabi_dcmpeq>
 8007b98:	b908      	cbnz	r0, 8007b9e <_dtoa_r+0x166>
 8007b9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b9e:	f1bb 0f16 	cmp.w	fp, #22
 8007ba2:	d858      	bhi.n	8007c56 <_dtoa_r+0x21e>
 8007ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ba8:	496a      	ldr	r1, [pc, #424]	; (8007d54 <_dtoa_r+0x31c>)
 8007baa:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bb2:	f7f8 ff35 	bl	8000a20 <__aeabi_dcmpgt>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d04f      	beq.n	8007c5a <_dtoa_r+0x222>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007bc0:	930d      	str	r3, [sp, #52]	; 0x34
 8007bc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bc4:	1b5d      	subs	r5, r3, r5
 8007bc6:	1e6b      	subs	r3, r5, #1
 8007bc8:	9307      	str	r3, [sp, #28]
 8007bca:	bf43      	ittte	mi
 8007bcc:	2300      	movmi	r3, #0
 8007bce:	f1c5 0801 	rsbmi	r8, r5, #1
 8007bd2:	9307      	strmi	r3, [sp, #28]
 8007bd4:	f04f 0800 	movpl.w	r8, #0
 8007bd8:	f1bb 0f00 	cmp.w	fp, #0
 8007bdc:	db3f      	blt.n	8007c5e <_dtoa_r+0x226>
 8007bde:	9b07      	ldr	r3, [sp, #28]
 8007be0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8007be4:	445b      	add	r3, fp
 8007be6:	9307      	str	r3, [sp, #28]
 8007be8:	2300      	movs	r3, #0
 8007bea:	9308      	str	r3, [sp, #32]
 8007bec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007bee:	2b09      	cmp	r3, #9
 8007bf0:	f200 80b4 	bhi.w	8007d5c <_dtoa_r+0x324>
 8007bf4:	2b05      	cmp	r3, #5
 8007bf6:	bfc4      	itt	gt
 8007bf8:	3b04      	subgt	r3, #4
 8007bfa:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007bfc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007bfe:	bfc8      	it	gt
 8007c00:	2600      	movgt	r6, #0
 8007c02:	f1a3 0302 	sub.w	r3, r3, #2
 8007c06:	bfd8      	it	le
 8007c08:	2601      	movle	r6, #1
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	f200 80b2 	bhi.w	8007d74 <_dtoa_r+0x33c>
 8007c10:	e8df f003 	tbb	[pc, r3]
 8007c14:	782d8684 	.word	0x782d8684
 8007c18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c1a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007c1c:	441d      	add	r5, r3
 8007c1e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c22:	2b20      	cmp	r3, #32
 8007c24:	dd11      	ble.n	8007c4a <_dtoa_r+0x212>
 8007c26:	9a02      	ldr	r2, [sp, #8]
 8007c28:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007c2c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007c30:	fa22 f000 	lsr.w	r0, r2, r0
 8007c34:	fa09 f303 	lsl.w	r3, r9, r3
 8007c38:	4318      	orrs	r0, r3
 8007c3a:	f7f8 fbeb 	bl	8000414 <__aeabi_ui2d>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007c44:	3d01      	subs	r5, #1
 8007c46:	9310      	str	r3, [sp, #64]	; 0x40
 8007c48:	e773      	b.n	8007b32 <_dtoa_r+0xfa>
 8007c4a:	f1c3 0020 	rsb	r0, r3, #32
 8007c4e:	9b02      	ldr	r3, [sp, #8]
 8007c50:	fa03 f000 	lsl.w	r0, r3, r0
 8007c54:	e7f1      	b.n	8007c3a <_dtoa_r+0x202>
 8007c56:	2301      	movs	r3, #1
 8007c58:	e7b2      	b.n	8007bc0 <_dtoa_r+0x188>
 8007c5a:	900d      	str	r0, [sp, #52]	; 0x34
 8007c5c:	e7b1      	b.n	8007bc2 <_dtoa_r+0x18a>
 8007c5e:	f1cb 0300 	rsb	r3, fp, #0
 8007c62:	9308      	str	r3, [sp, #32]
 8007c64:	2300      	movs	r3, #0
 8007c66:	eba8 080b 	sub.w	r8, r8, fp
 8007c6a:	930c      	str	r3, [sp, #48]	; 0x30
 8007c6c:	e7be      	b.n	8007bec <_dtoa_r+0x1b4>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	9309      	str	r3, [sp, #36]	; 0x24
 8007c72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f340 8080 	ble.w	8007d7a <_dtoa_r+0x342>
 8007c7a:	4699      	mov	r9, r3
 8007c7c:	9304      	str	r3, [sp, #16]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	2104      	movs	r1, #4
 8007c82:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007c84:	606a      	str	r2, [r5, #4]
 8007c86:	f101 0214 	add.w	r2, r1, #20
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d97a      	bls.n	8007d84 <_dtoa_r+0x34c>
 8007c8e:	6869      	ldr	r1, [r5, #4]
 8007c90:	4620      	mov	r0, r4
 8007c92:	f7fe fe5c 	bl	800694e <_Balloc>
 8007c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c98:	6028      	str	r0, [r5, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f1b9 0f0e 	cmp.w	r9, #14
 8007ca0:	9306      	str	r3, [sp, #24]
 8007ca2:	f200 80f0 	bhi.w	8007e86 <_dtoa_r+0x44e>
 8007ca6:	2e00      	cmp	r6, #0
 8007ca8:	f000 80ed 	beq.w	8007e86 <_dtoa_r+0x44e>
 8007cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cb0:	f1bb 0f00 	cmp.w	fp, #0
 8007cb4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007cb8:	dd79      	ble.n	8007dae <_dtoa_r+0x376>
 8007cba:	4a26      	ldr	r2, [pc, #152]	; (8007d54 <_dtoa_r+0x31c>)
 8007cbc:	f00b 030f 	and.w	r3, fp, #15
 8007cc0:	ea4f 162b 	mov.w	r6, fp, asr #4
 8007cc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007cc8:	06f0      	lsls	r0, r6, #27
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007cd2:	d55c      	bpl.n	8007d8e <_dtoa_r+0x356>
 8007cd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007cd8:	4b1f      	ldr	r3, [pc, #124]	; (8007d58 <_dtoa_r+0x320>)
 8007cda:	2503      	movs	r5, #3
 8007cdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ce0:	f7f8 fd38 	bl	8000754 <__aeabi_ddiv>
 8007ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ce8:	f006 060f 	and.w	r6, r6, #15
 8007cec:	4f1a      	ldr	r7, [pc, #104]	; (8007d58 <_dtoa_r+0x320>)
 8007cee:	2e00      	cmp	r6, #0
 8007cf0:	d14f      	bne.n	8007d92 <_dtoa_r+0x35a>
 8007cf2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cfa:	f7f8 fd2b 	bl	8000754 <__aeabi_ddiv>
 8007cfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d02:	e06e      	b.n	8007de2 <_dtoa_r+0x3aa>
 8007d04:	2301      	movs	r3, #1
 8007d06:	9309      	str	r3, [sp, #36]	; 0x24
 8007d08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d0a:	445b      	add	r3, fp
 8007d0c:	f103 0901 	add.w	r9, r3, #1
 8007d10:	9304      	str	r3, [sp, #16]
 8007d12:	464b      	mov	r3, r9
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	bfb8      	it	lt
 8007d18:	2301      	movlt	r3, #1
 8007d1a:	e7b0      	b.n	8007c7e <_dtoa_r+0x246>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	e7a7      	b.n	8007c70 <_dtoa_r+0x238>
 8007d20:	2300      	movs	r3, #0
 8007d22:	e7f0      	b.n	8007d06 <_dtoa_r+0x2ce>
 8007d24:	f3af 8000 	nop.w
 8007d28:	636f4361 	.word	0x636f4361
 8007d2c:	3fd287a7 	.word	0x3fd287a7
 8007d30:	8b60c8b3 	.word	0x8b60c8b3
 8007d34:	3fc68a28 	.word	0x3fc68a28
 8007d38:	509f79fb 	.word	0x509f79fb
 8007d3c:	3fd34413 	.word	0x3fd34413
 8007d40:	7ff00000 	.word	0x7ff00000
 8007d44:	08008a59 	.word	0x08008a59
 8007d48:	08008a50 	.word	0x08008a50
 8007d4c:	0800873e 	.word	0x0800873e
 8007d50:	3ff80000 	.word	0x3ff80000
 8007d54:	08008848 	.word	0x08008848
 8007d58:	08008820 	.word	0x08008820
 8007d5c:	2601      	movs	r6, #1
 8007d5e:	2300      	movs	r3, #0
 8007d60:	9609      	str	r6, [sp, #36]	; 0x24
 8007d62:	931e      	str	r3, [sp, #120]	; 0x78
 8007d64:	f04f 33ff 	mov.w	r3, #4294967295
 8007d68:	2200      	movs	r2, #0
 8007d6a:	9304      	str	r3, [sp, #16]
 8007d6c:	4699      	mov	r9, r3
 8007d6e:	2312      	movs	r3, #18
 8007d70:	921f      	str	r2, [sp, #124]	; 0x7c
 8007d72:	e784      	b.n	8007c7e <_dtoa_r+0x246>
 8007d74:	2301      	movs	r3, #1
 8007d76:	9309      	str	r3, [sp, #36]	; 0x24
 8007d78:	e7f4      	b.n	8007d64 <_dtoa_r+0x32c>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	9304      	str	r3, [sp, #16]
 8007d7e:	4699      	mov	r9, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	e7f5      	b.n	8007d70 <_dtoa_r+0x338>
 8007d84:	686a      	ldr	r2, [r5, #4]
 8007d86:	0049      	lsls	r1, r1, #1
 8007d88:	3201      	adds	r2, #1
 8007d8a:	606a      	str	r2, [r5, #4]
 8007d8c:	e77b      	b.n	8007c86 <_dtoa_r+0x24e>
 8007d8e:	2502      	movs	r5, #2
 8007d90:	e7ac      	b.n	8007cec <_dtoa_r+0x2b4>
 8007d92:	07f1      	lsls	r1, r6, #31
 8007d94:	d508      	bpl.n	8007da8 <_dtoa_r+0x370>
 8007d96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d9e:	f7f8 fbaf 	bl	8000500 <__aeabi_dmul>
 8007da2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007da6:	3501      	adds	r5, #1
 8007da8:	1076      	asrs	r6, r6, #1
 8007daa:	3708      	adds	r7, #8
 8007dac:	e79f      	b.n	8007cee <_dtoa_r+0x2b6>
 8007dae:	f000 80a5 	beq.w	8007efc <_dtoa_r+0x4c4>
 8007db2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007db6:	f1cb 0600 	rsb	r6, fp, #0
 8007dba:	4ba2      	ldr	r3, [pc, #648]	; (8008044 <_dtoa_r+0x60c>)
 8007dbc:	f006 020f 	and.w	r2, r6, #15
 8007dc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	f7f8 fb9a 	bl	8000500 <__aeabi_dmul>
 8007dcc:	2502      	movs	r5, #2
 8007dce:	2300      	movs	r3, #0
 8007dd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dd4:	4f9c      	ldr	r7, [pc, #624]	; (8008048 <_dtoa_r+0x610>)
 8007dd6:	1136      	asrs	r6, r6, #4
 8007dd8:	2e00      	cmp	r6, #0
 8007dda:	f040 8084 	bne.w	8007ee6 <_dtoa_r+0x4ae>
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d18d      	bne.n	8007cfe <_dtoa_r+0x2c6>
 8007de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 808b 	beq.w	8007f00 <_dtoa_r+0x4c8>
 8007dea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007df2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007df6:	2200      	movs	r2, #0
 8007df8:	4b94      	ldr	r3, [pc, #592]	; (800804c <_dtoa_r+0x614>)
 8007dfa:	f7f8 fdf3 	bl	80009e4 <__aeabi_dcmplt>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d07e      	beq.n	8007f00 <_dtoa_r+0x4c8>
 8007e02:	f1b9 0f00 	cmp.w	r9, #0
 8007e06:	d07b      	beq.n	8007f00 <_dtoa_r+0x4c8>
 8007e08:	9b04      	ldr	r3, [sp, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	dd37      	ble.n	8007e7e <_dtoa_r+0x446>
 8007e0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e12:	2200      	movs	r2, #0
 8007e14:	4b8e      	ldr	r3, [pc, #568]	; (8008050 <_dtoa_r+0x618>)
 8007e16:	f7f8 fb73 	bl	8000500 <__aeabi_dmul>
 8007e1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e1e:	9e04      	ldr	r6, [sp, #16]
 8007e20:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007e24:	3501      	adds	r5, #1
 8007e26:	4628      	mov	r0, r5
 8007e28:	f7f8 fb04 	bl	8000434 <__aeabi_i2d>
 8007e2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e30:	f7f8 fb66 	bl	8000500 <__aeabi_dmul>
 8007e34:	4b87      	ldr	r3, [pc, #540]	; (8008054 <_dtoa_r+0x61c>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	f7f8 f9b0 	bl	800019c <__adddf3>
 8007e3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e42:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8007e46:	950b      	str	r5, [sp, #44]	; 0x2c
 8007e48:	2e00      	cmp	r6, #0
 8007e4a:	d15c      	bne.n	8007f06 <_dtoa_r+0x4ce>
 8007e4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e50:	2200      	movs	r2, #0
 8007e52:	4b81      	ldr	r3, [pc, #516]	; (8008058 <_dtoa_r+0x620>)
 8007e54:	f7f8 f9a0 	bl	8000198 <__aeabi_dsub>
 8007e58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e5a:	462b      	mov	r3, r5
 8007e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e60:	f7f8 fdde 	bl	8000a20 <__aeabi_dcmpgt>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	f040 82f7 	bne.w	8008458 <_dtoa_r+0xa20>
 8007e6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e70:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007e74:	f7f8 fdb6 	bl	80009e4 <__aeabi_dcmplt>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	f040 82eb 	bne.w	8008454 <_dtoa_r+0xa1c>
 8007e7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007e82:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f2c0 8150 	blt.w	800812e <_dtoa_r+0x6f6>
 8007e8e:	f1bb 0f0e 	cmp.w	fp, #14
 8007e92:	f300 814c 	bgt.w	800812e <_dtoa_r+0x6f6>
 8007e96:	4b6b      	ldr	r3, [pc, #428]	; (8008044 <_dtoa_r+0x60c>)
 8007e98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ea4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f280 80da 	bge.w	8008060 <_dtoa_r+0x628>
 8007eac:	f1b9 0f00 	cmp.w	r9, #0
 8007eb0:	f300 80d6 	bgt.w	8008060 <_dtoa_r+0x628>
 8007eb4:	f040 82cd 	bne.w	8008452 <_dtoa_r+0xa1a>
 8007eb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	4b66      	ldr	r3, [pc, #408]	; (8008058 <_dtoa_r+0x620>)
 8007ec0:	f7f8 fb1e 	bl	8000500 <__aeabi_dmul>
 8007ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ec8:	f7f8 fda0 	bl	8000a0c <__aeabi_dcmpge>
 8007ecc:	464e      	mov	r6, r9
 8007ece:	464f      	mov	r7, r9
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	f040 82a4 	bne.w	800841e <_dtoa_r+0x9e6>
 8007ed6:	9b06      	ldr	r3, [sp, #24]
 8007ed8:	9a06      	ldr	r2, [sp, #24]
 8007eda:	1c5d      	adds	r5, r3, #1
 8007edc:	2331      	movs	r3, #49	; 0x31
 8007ede:	f10b 0b01 	add.w	fp, fp, #1
 8007ee2:	7013      	strb	r3, [r2, #0]
 8007ee4:	e29f      	b.n	8008426 <_dtoa_r+0x9ee>
 8007ee6:	07f2      	lsls	r2, r6, #31
 8007ee8:	d505      	bpl.n	8007ef6 <_dtoa_r+0x4be>
 8007eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eee:	f7f8 fb07 	bl	8000500 <__aeabi_dmul>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	3501      	adds	r5, #1
 8007ef6:	1076      	asrs	r6, r6, #1
 8007ef8:	3708      	adds	r7, #8
 8007efa:	e76d      	b.n	8007dd8 <_dtoa_r+0x3a0>
 8007efc:	2502      	movs	r5, #2
 8007efe:	e770      	b.n	8007de2 <_dtoa_r+0x3aa>
 8007f00:	465f      	mov	r7, fp
 8007f02:	464e      	mov	r6, r9
 8007f04:	e78f      	b.n	8007e26 <_dtoa_r+0x3ee>
 8007f06:	9a06      	ldr	r2, [sp, #24]
 8007f08:	4b4e      	ldr	r3, [pc, #312]	; (8008044 <_dtoa_r+0x60c>)
 8007f0a:	4432      	add	r2, r6
 8007f0c:	9211      	str	r2, [sp, #68]	; 0x44
 8007f0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f10:	1e71      	subs	r1, r6, #1
 8007f12:	2a00      	cmp	r2, #0
 8007f14:	d048      	beq.n	8007fa8 <_dtoa_r+0x570>
 8007f16:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1e:	2000      	movs	r0, #0
 8007f20:	494e      	ldr	r1, [pc, #312]	; (800805c <_dtoa_r+0x624>)
 8007f22:	f7f8 fc17 	bl	8000754 <__aeabi_ddiv>
 8007f26:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f2a:	f7f8 f935 	bl	8000198 <__aeabi_dsub>
 8007f2e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007f32:	9d06      	ldr	r5, [sp, #24]
 8007f34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f38:	f7f8 fd7c 	bl	8000a34 <__aeabi_d2iz>
 8007f3c:	4606      	mov	r6, r0
 8007f3e:	f7f8 fa79 	bl	8000434 <__aeabi_i2d>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f4a:	f7f8 f925 	bl	8000198 <__aeabi_dsub>
 8007f4e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f52:	3630      	adds	r6, #48	; 0x30
 8007f54:	f805 6b01 	strb.w	r6, [r5], #1
 8007f58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f5c:	f7f8 fd42 	bl	80009e4 <__aeabi_dcmplt>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d164      	bne.n	800802e <_dtoa_r+0x5f6>
 8007f64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f68:	2000      	movs	r0, #0
 8007f6a:	4938      	ldr	r1, [pc, #224]	; (800804c <_dtoa_r+0x614>)
 8007f6c:	f7f8 f914 	bl	8000198 <__aeabi_dsub>
 8007f70:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f74:	f7f8 fd36 	bl	80009e4 <__aeabi_dcmplt>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	f040 80b9 	bne.w	80080f0 <_dtoa_r+0x6b8>
 8007f7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f80:	429d      	cmp	r5, r3
 8007f82:	f43f af7c 	beq.w	8007e7e <_dtoa_r+0x446>
 8007f86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	4b30      	ldr	r3, [pc, #192]	; (8008050 <_dtoa_r+0x618>)
 8007f8e:	f7f8 fab7 	bl	8000500 <__aeabi_dmul>
 8007f92:	2200      	movs	r2, #0
 8007f94:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007f98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f9c:	4b2c      	ldr	r3, [pc, #176]	; (8008050 <_dtoa_r+0x618>)
 8007f9e:	f7f8 faaf 	bl	8000500 <__aeabi_dmul>
 8007fa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fa6:	e7c5      	b.n	8007f34 <_dtoa_r+0x4fc>
 8007fa8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007fac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fb0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007fb4:	f7f8 faa4 	bl	8000500 <__aeabi_dmul>
 8007fb8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007fbc:	9d06      	ldr	r5, [sp, #24]
 8007fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fc2:	f7f8 fd37 	bl	8000a34 <__aeabi_d2iz>
 8007fc6:	4606      	mov	r6, r0
 8007fc8:	f7f8 fa34 	bl	8000434 <__aeabi_i2d>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fd4:	f7f8 f8e0 	bl	8000198 <__aeabi_dsub>
 8007fd8:	3630      	adds	r6, #48	; 0x30
 8007fda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fdc:	f805 6b01 	strb.w	r6, [r5], #1
 8007fe0:	42ab      	cmp	r3, r5
 8007fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fe6:	f04f 0200 	mov.w	r2, #0
 8007fea:	d124      	bne.n	8008036 <_dtoa_r+0x5fe>
 8007fec:	4b1b      	ldr	r3, [pc, #108]	; (800805c <_dtoa_r+0x624>)
 8007fee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ff2:	f7f8 f8d3 	bl	800019c <__adddf3>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ffe:	f7f8 fd0f 	bl	8000a20 <__aeabi_dcmpgt>
 8008002:	2800      	cmp	r0, #0
 8008004:	d174      	bne.n	80080f0 <_dtoa_r+0x6b8>
 8008006:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800800a:	2000      	movs	r0, #0
 800800c:	4913      	ldr	r1, [pc, #76]	; (800805c <_dtoa_r+0x624>)
 800800e:	f7f8 f8c3 	bl	8000198 <__aeabi_dsub>
 8008012:	4602      	mov	r2, r0
 8008014:	460b      	mov	r3, r1
 8008016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800801a:	f7f8 fce3 	bl	80009e4 <__aeabi_dcmplt>
 800801e:	2800      	cmp	r0, #0
 8008020:	f43f af2d 	beq.w	8007e7e <_dtoa_r+0x446>
 8008024:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008028:	1e6a      	subs	r2, r5, #1
 800802a:	2b30      	cmp	r3, #48	; 0x30
 800802c:	d001      	beq.n	8008032 <_dtoa_r+0x5fa>
 800802e:	46bb      	mov	fp, r7
 8008030:	e04d      	b.n	80080ce <_dtoa_r+0x696>
 8008032:	4615      	mov	r5, r2
 8008034:	e7f6      	b.n	8008024 <_dtoa_r+0x5ec>
 8008036:	4b06      	ldr	r3, [pc, #24]	; (8008050 <_dtoa_r+0x618>)
 8008038:	f7f8 fa62 	bl	8000500 <__aeabi_dmul>
 800803c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008040:	e7bd      	b.n	8007fbe <_dtoa_r+0x586>
 8008042:	bf00      	nop
 8008044:	08008848 	.word	0x08008848
 8008048:	08008820 	.word	0x08008820
 800804c:	3ff00000 	.word	0x3ff00000
 8008050:	40240000 	.word	0x40240000
 8008054:	401c0000 	.word	0x401c0000
 8008058:	40140000 	.word	0x40140000
 800805c:	3fe00000 	.word	0x3fe00000
 8008060:	9d06      	ldr	r5, [sp, #24]
 8008062:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008066:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800806a:	4630      	mov	r0, r6
 800806c:	4639      	mov	r1, r7
 800806e:	f7f8 fb71 	bl	8000754 <__aeabi_ddiv>
 8008072:	f7f8 fcdf 	bl	8000a34 <__aeabi_d2iz>
 8008076:	4680      	mov	r8, r0
 8008078:	f7f8 f9dc 	bl	8000434 <__aeabi_i2d>
 800807c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008080:	f7f8 fa3e 	bl	8000500 <__aeabi_dmul>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	4630      	mov	r0, r6
 800808a:	4639      	mov	r1, r7
 800808c:	f7f8 f884 	bl	8000198 <__aeabi_dsub>
 8008090:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008094:	f805 6b01 	strb.w	r6, [r5], #1
 8008098:	9e06      	ldr	r6, [sp, #24]
 800809a:	4602      	mov	r2, r0
 800809c:	1bae      	subs	r6, r5, r6
 800809e:	45b1      	cmp	r9, r6
 80080a0:	460b      	mov	r3, r1
 80080a2:	d137      	bne.n	8008114 <_dtoa_r+0x6dc>
 80080a4:	f7f8 f87a 	bl	800019c <__adddf3>
 80080a8:	4606      	mov	r6, r0
 80080aa:	460f      	mov	r7, r1
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080b4:	f7f8 fc96 	bl	80009e4 <__aeabi_dcmplt>
 80080b8:	b9c8      	cbnz	r0, 80080ee <_dtoa_r+0x6b6>
 80080ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080be:	4632      	mov	r2, r6
 80080c0:	463b      	mov	r3, r7
 80080c2:	f7f8 fc85 	bl	80009d0 <__aeabi_dcmpeq>
 80080c6:	b110      	cbz	r0, 80080ce <_dtoa_r+0x696>
 80080c8:	f018 0f01 	tst.w	r8, #1
 80080cc:	d10f      	bne.n	80080ee <_dtoa_r+0x6b6>
 80080ce:	4651      	mov	r1, sl
 80080d0:	4620      	mov	r0, r4
 80080d2:	f7fe fc70 	bl	80069b6 <_Bfree>
 80080d6:	2300      	movs	r3, #0
 80080d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80080da:	702b      	strb	r3, [r5, #0]
 80080dc:	f10b 0301 	add.w	r3, fp, #1
 80080e0:	6013      	str	r3, [r2, #0]
 80080e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f43f acec 	beq.w	8007ac2 <_dtoa_r+0x8a>
 80080ea:	601d      	str	r5, [r3, #0]
 80080ec:	e4e9      	b.n	8007ac2 <_dtoa_r+0x8a>
 80080ee:	465f      	mov	r7, fp
 80080f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80080f4:	1e6b      	subs	r3, r5, #1
 80080f6:	2a39      	cmp	r2, #57	; 0x39
 80080f8:	d106      	bne.n	8008108 <_dtoa_r+0x6d0>
 80080fa:	9a06      	ldr	r2, [sp, #24]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d107      	bne.n	8008110 <_dtoa_r+0x6d8>
 8008100:	2330      	movs	r3, #48	; 0x30
 8008102:	7013      	strb	r3, [r2, #0]
 8008104:	4613      	mov	r3, r2
 8008106:	3701      	adds	r7, #1
 8008108:	781a      	ldrb	r2, [r3, #0]
 800810a:	3201      	adds	r2, #1
 800810c:	701a      	strb	r2, [r3, #0]
 800810e:	e78e      	b.n	800802e <_dtoa_r+0x5f6>
 8008110:	461d      	mov	r5, r3
 8008112:	e7ed      	b.n	80080f0 <_dtoa_r+0x6b8>
 8008114:	2200      	movs	r2, #0
 8008116:	4bb5      	ldr	r3, [pc, #724]	; (80083ec <_dtoa_r+0x9b4>)
 8008118:	f7f8 f9f2 	bl	8000500 <__aeabi_dmul>
 800811c:	2200      	movs	r2, #0
 800811e:	2300      	movs	r3, #0
 8008120:	4606      	mov	r6, r0
 8008122:	460f      	mov	r7, r1
 8008124:	f7f8 fc54 	bl	80009d0 <__aeabi_dcmpeq>
 8008128:	2800      	cmp	r0, #0
 800812a:	d09c      	beq.n	8008066 <_dtoa_r+0x62e>
 800812c:	e7cf      	b.n	80080ce <_dtoa_r+0x696>
 800812e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008130:	2a00      	cmp	r2, #0
 8008132:	f000 8129 	beq.w	8008388 <_dtoa_r+0x950>
 8008136:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008138:	2a01      	cmp	r2, #1
 800813a:	f300 810e 	bgt.w	800835a <_dtoa_r+0x922>
 800813e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008140:	2a00      	cmp	r2, #0
 8008142:	f000 8106 	beq.w	8008352 <_dtoa_r+0x91a>
 8008146:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800814a:	4645      	mov	r5, r8
 800814c:	9e08      	ldr	r6, [sp, #32]
 800814e:	9a07      	ldr	r2, [sp, #28]
 8008150:	2101      	movs	r1, #1
 8008152:	441a      	add	r2, r3
 8008154:	4620      	mov	r0, r4
 8008156:	4498      	add	r8, r3
 8008158:	9207      	str	r2, [sp, #28]
 800815a:	f7fe fd0a 	bl	8006b72 <__i2b>
 800815e:	4607      	mov	r7, r0
 8008160:	2d00      	cmp	r5, #0
 8008162:	dd0b      	ble.n	800817c <_dtoa_r+0x744>
 8008164:	9b07      	ldr	r3, [sp, #28]
 8008166:	2b00      	cmp	r3, #0
 8008168:	dd08      	ble.n	800817c <_dtoa_r+0x744>
 800816a:	42ab      	cmp	r3, r5
 800816c:	bfa8      	it	ge
 800816e:	462b      	movge	r3, r5
 8008170:	9a07      	ldr	r2, [sp, #28]
 8008172:	eba8 0803 	sub.w	r8, r8, r3
 8008176:	1aed      	subs	r5, r5, r3
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	9307      	str	r3, [sp, #28]
 800817c:	9b08      	ldr	r3, [sp, #32]
 800817e:	b1fb      	cbz	r3, 80081c0 <_dtoa_r+0x788>
 8008180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 8104 	beq.w	8008390 <_dtoa_r+0x958>
 8008188:	2e00      	cmp	r6, #0
 800818a:	dd11      	ble.n	80081b0 <_dtoa_r+0x778>
 800818c:	4639      	mov	r1, r7
 800818e:	4632      	mov	r2, r6
 8008190:	4620      	mov	r0, r4
 8008192:	f7fe fd83 	bl	8006c9c <__pow5mult>
 8008196:	4652      	mov	r2, sl
 8008198:	4601      	mov	r1, r0
 800819a:	4607      	mov	r7, r0
 800819c:	4620      	mov	r0, r4
 800819e:	f7fe fcf1 	bl	8006b84 <__multiply>
 80081a2:	4651      	mov	r1, sl
 80081a4:	900a      	str	r0, [sp, #40]	; 0x28
 80081a6:	4620      	mov	r0, r4
 80081a8:	f7fe fc05 	bl	80069b6 <_Bfree>
 80081ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ae:	469a      	mov	sl, r3
 80081b0:	9b08      	ldr	r3, [sp, #32]
 80081b2:	1b9a      	subs	r2, r3, r6
 80081b4:	d004      	beq.n	80081c0 <_dtoa_r+0x788>
 80081b6:	4651      	mov	r1, sl
 80081b8:	4620      	mov	r0, r4
 80081ba:	f7fe fd6f 	bl	8006c9c <__pow5mult>
 80081be:	4682      	mov	sl, r0
 80081c0:	2101      	movs	r1, #1
 80081c2:	4620      	mov	r0, r4
 80081c4:	f7fe fcd5 	bl	8006b72 <__i2b>
 80081c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081ca:	4606      	mov	r6, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f340 80e1 	ble.w	8008394 <_dtoa_r+0x95c>
 80081d2:	461a      	mov	r2, r3
 80081d4:	4601      	mov	r1, r0
 80081d6:	4620      	mov	r0, r4
 80081d8:	f7fe fd60 	bl	8006c9c <__pow5mult>
 80081dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80081de:	4606      	mov	r6, r0
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	f340 80da 	ble.w	800839a <_dtoa_r+0x962>
 80081e6:	2300      	movs	r3, #0
 80081e8:	9308      	str	r3, [sp, #32]
 80081ea:	6933      	ldr	r3, [r6, #16]
 80081ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80081f0:	6918      	ldr	r0, [r3, #16]
 80081f2:	f7fe fc70 	bl	8006ad6 <__hi0bits>
 80081f6:	f1c0 0020 	rsb	r0, r0, #32
 80081fa:	9b07      	ldr	r3, [sp, #28]
 80081fc:	4418      	add	r0, r3
 80081fe:	f010 001f 	ands.w	r0, r0, #31
 8008202:	f000 80f0 	beq.w	80083e6 <_dtoa_r+0x9ae>
 8008206:	f1c0 0320 	rsb	r3, r0, #32
 800820a:	2b04      	cmp	r3, #4
 800820c:	f340 80e2 	ble.w	80083d4 <_dtoa_r+0x99c>
 8008210:	9b07      	ldr	r3, [sp, #28]
 8008212:	f1c0 001c 	rsb	r0, r0, #28
 8008216:	4480      	add	r8, r0
 8008218:	4405      	add	r5, r0
 800821a:	4403      	add	r3, r0
 800821c:	9307      	str	r3, [sp, #28]
 800821e:	f1b8 0f00 	cmp.w	r8, #0
 8008222:	dd05      	ble.n	8008230 <_dtoa_r+0x7f8>
 8008224:	4651      	mov	r1, sl
 8008226:	4642      	mov	r2, r8
 8008228:	4620      	mov	r0, r4
 800822a:	f7fe fd85 	bl	8006d38 <__lshift>
 800822e:	4682      	mov	sl, r0
 8008230:	9b07      	ldr	r3, [sp, #28]
 8008232:	2b00      	cmp	r3, #0
 8008234:	dd05      	ble.n	8008242 <_dtoa_r+0x80a>
 8008236:	4631      	mov	r1, r6
 8008238:	461a      	mov	r2, r3
 800823a:	4620      	mov	r0, r4
 800823c:	f7fe fd7c 	bl	8006d38 <__lshift>
 8008240:	4606      	mov	r6, r0
 8008242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 80d3 	beq.w	80083f0 <_dtoa_r+0x9b8>
 800824a:	4631      	mov	r1, r6
 800824c:	4650      	mov	r0, sl
 800824e:	f7fe fdc4 	bl	8006dda <__mcmp>
 8008252:	2800      	cmp	r0, #0
 8008254:	f280 80cc 	bge.w	80083f0 <_dtoa_r+0x9b8>
 8008258:	2300      	movs	r3, #0
 800825a:	4651      	mov	r1, sl
 800825c:	220a      	movs	r2, #10
 800825e:	4620      	mov	r0, r4
 8008260:	f7fe fbc0 	bl	80069e4 <__multadd>
 8008264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008266:	f10b 3bff 	add.w	fp, fp, #4294967295
 800826a:	4682      	mov	sl, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 81a9 	beq.w	80085c4 <_dtoa_r+0xb8c>
 8008272:	2300      	movs	r3, #0
 8008274:	4639      	mov	r1, r7
 8008276:	220a      	movs	r2, #10
 8008278:	4620      	mov	r0, r4
 800827a:	f7fe fbb3 	bl	80069e4 <__multadd>
 800827e:	9b04      	ldr	r3, [sp, #16]
 8008280:	4607      	mov	r7, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	dc03      	bgt.n	800828e <_dtoa_r+0x856>
 8008286:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008288:	2b02      	cmp	r3, #2
 800828a:	f300 80b9 	bgt.w	8008400 <_dtoa_r+0x9c8>
 800828e:	2d00      	cmp	r5, #0
 8008290:	dd05      	ble.n	800829e <_dtoa_r+0x866>
 8008292:	4639      	mov	r1, r7
 8008294:	462a      	mov	r2, r5
 8008296:	4620      	mov	r0, r4
 8008298:	f7fe fd4e 	bl	8006d38 <__lshift>
 800829c:	4607      	mov	r7, r0
 800829e:	9b08      	ldr	r3, [sp, #32]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 8110 	beq.w	80084c6 <_dtoa_r+0xa8e>
 80082a6:	6879      	ldr	r1, [r7, #4]
 80082a8:	4620      	mov	r0, r4
 80082aa:	f7fe fb50 	bl	800694e <_Balloc>
 80082ae:	4605      	mov	r5, r0
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	f107 010c 	add.w	r1, r7, #12
 80082b6:	3202      	adds	r2, #2
 80082b8:	0092      	lsls	r2, r2, #2
 80082ba:	300c      	adds	r0, #12
 80082bc:	f7fe fb3c 	bl	8006938 <memcpy>
 80082c0:	2201      	movs	r2, #1
 80082c2:	4629      	mov	r1, r5
 80082c4:	4620      	mov	r0, r4
 80082c6:	f7fe fd37 	bl	8006d38 <__lshift>
 80082ca:	9707      	str	r7, [sp, #28]
 80082cc:	4607      	mov	r7, r0
 80082ce:	9b02      	ldr	r3, [sp, #8]
 80082d0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80082d4:	f003 0301 	and.w	r3, r3, #1
 80082d8:	9308      	str	r3, [sp, #32]
 80082da:	4631      	mov	r1, r6
 80082dc:	4650      	mov	r0, sl
 80082de:	f7ff fb1e 	bl	800791e <quorem>
 80082e2:	9907      	ldr	r1, [sp, #28]
 80082e4:	4605      	mov	r5, r0
 80082e6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80082ea:	4650      	mov	r0, sl
 80082ec:	f7fe fd75 	bl	8006dda <__mcmp>
 80082f0:	463a      	mov	r2, r7
 80082f2:	9002      	str	r0, [sp, #8]
 80082f4:	4631      	mov	r1, r6
 80082f6:	4620      	mov	r0, r4
 80082f8:	f7fe fd89 	bl	8006e0e <__mdiff>
 80082fc:	68c3      	ldr	r3, [r0, #12]
 80082fe:	4602      	mov	r2, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	f040 80e2 	bne.w	80084ca <_dtoa_r+0xa92>
 8008306:	4601      	mov	r1, r0
 8008308:	9009      	str	r0, [sp, #36]	; 0x24
 800830a:	4650      	mov	r0, sl
 800830c:	f7fe fd65 	bl	8006dda <__mcmp>
 8008310:	4603      	mov	r3, r0
 8008312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008314:	4611      	mov	r1, r2
 8008316:	4620      	mov	r0, r4
 8008318:	9309      	str	r3, [sp, #36]	; 0x24
 800831a:	f7fe fb4c 	bl	80069b6 <_Bfree>
 800831e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008320:	2b00      	cmp	r3, #0
 8008322:	f040 80d4 	bne.w	80084ce <_dtoa_r+0xa96>
 8008326:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008328:	2a00      	cmp	r2, #0
 800832a:	f040 80d0 	bne.w	80084ce <_dtoa_r+0xa96>
 800832e:	9a08      	ldr	r2, [sp, #32]
 8008330:	2a00      	cmp	r2, #0
 8008332:	f040 80cc 	bne.w	80084ce <_dtoa_r+0xa96>
 8008336:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800833a:	f000 80e8 	beq.w	800850e <_dtoa_r+0xad6>
 800833e:	9b02      	ldr	r3, [sp, #8]
 8008340:	2b00      	cmp	r3, #0
 8008342:	dd01      	ble.n	8008348 <_dtoa_r+0x910>
 8008344:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8008348:	f108 0501 	add.w	r5, r8, #1
 800834c:	f888 9000 	strb.w	r9, [r8]
 8008350:	e06b      	b.n	800842a <_dtoa_r+0x9f2>
 8008352:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008354:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008358:	e6f7      	b.n	800814a <_dtoa_r+0x712>
 800835a:	9b08      	ldr	r3, [sp, #32]
 800835c:	f109 36ff 	add.w	r6, r9, #4294967295
 8008360:	42b3      	cmp	r3, r6
 8008362:	bfb7      	itett	lt
 8008364:	9b08      	ldrlt	r3, [sp, #32]
 8008366:	1b9e      	subge	r6, r3, r6
 8008368:	1af2      	sublt	r2, r6, r3
 800836a:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800836c:	bfbf      	itttt	lt
 800836e:	9608      	strlt	r6, [sp, #32]
 8008370:	189b      	addlt	r3, r3, r2
 8008372:	930c      	strlt	r3, [sp, #48]	; 0x30
 8008374:	2600      	movlt	r6, #0
 8008376:	f1b9 0f00 	cmp.w	r9, #0
 800837a:	bfb9      	ittee	lt
 800837c:	eba8 0509 	sublt.w	r5, r8, r9
 8008380:	2300      	movlt	r3, #0
 8008382:	4645      	movge	r5, r8
 8008384:	464b      	movge	r3, r9
 8008386:	e6e2      	b.n	800814e <_dtoa_r+0x716>
 8008388:	9e08      	ldr	r6, [sp, #32]
 800838a:	4645      	mov	r5, r8
 800838c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800838e:	e6e7      	b.n	8008160 <_dtoa_r+0x728>
 8008390:	9a08      	ldr	r2, [sp, #32]
 8008392:	e710      	b.n	80081b6 <_dtoa_r+0x77e>
 8008394:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008396:	2b01      	cmp	r3, #1
 8008398:	dc18      	bgt.n	80083cc <_dtoa_r+0x994>
 800839a:	9b02      	ldr	r3, [sp, #8]
 800839c:	b9b3      	cbnz	r3, 80083cc <_dtoa_r+0x994>
 800839e:	9b03      	ldr	r3, [sp, #12]
 80083a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083a4:	b9a3      	cbnz	r3, 80083d0 <_dtoa_r+0x998>
 80083a6:	9b03      	ldr	r3, [sp, #12]
 80083a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083ac:	0d1b      	lsrs	r3, r3, #20
 80083ae:	051b      	lsls	r3, r3, #20
 80083b0:	b12b      	cbz	r3, 80083be <_dtoa_r+0x986>
 80083b2:	9b07      	ldr	r3, [sp, #28]
 80083b4:	f108 0801 	add.w	r8, r8, #1
 80083b8:	3301      	adds	r3, #1
 80083ba:	9307      	str	r3, [sp, #28]
 80083bc:	2301      	movs	r3, #1
 80083be:	9308      	str	r3, [sp, #32]
 80083c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f47f af11 	bne.w	80081ea <_dtoa_r+0x7b2>
 80083c8:	2001      	movs	r0, #1
 80083ca:	e716      	b.n	80081fa <_dtoa_r+0x7c2>
 80083cc:	2300      	movs	r3, #0
 80083ce:	e7f6      	b.n	80083be <_dtoa_r+0x986>
 80083d0:	9b02      	ldr	r3, [sp, #8]
 80083d2:	e7f4      	b.n	80083be <_dtoa_r+0x986>
 80083d4:	f43f af23 	beq.w	800821e <_dtoa_r+0x7e6>
 80083d8:	9a07      	ldr	r2, [sp, #28]
 80083da:	331c      	adds	r3, #28
 80083dc:	441a      	add	r2, r3
 80083de:	4498      	add	r8, r3
 80083e0:	441d      	add	r5, r3
 80083e2:	4613      	mov	r3, r2
 80083e4:	e71a      	b.n	800821c <_dtoa_r+0x7e4>
 80083e6:	4603      	mov	r3, r0
 80083e8:	e7f6      	b.n	80083d8 <_dtoa_r+0x9a0>
 80083ea:	bf00      	nop
 80083ec:	40240000 	.word	0x40240000
 80083f0:	f1b9 0f00 	cmp.w	r9, #0
 80083f4:	dc33      	bgt.n	800845e <_dtoa_r+0xa26>
 80083f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	dd30      	ble.n	800845e <_dtoa_r+0xa26>
 80083fc:	f8cd 9010 	str.w	r9, [sp, #16]
 8008400:	9b04      	ldr	r3, [sp, #16]
 8008402:	b963      	cbnz	r3, 800841e <_dtoa_r+0x9e6>
 8008404:	4631      	mov	r1, r6
 8008406:	2205      	movs	r2, #5
 8008408:	4620      	mov	r0, r4
 800840a:	f7fe faeb 	bl	80069e4 <__multadd>
 800840e:	4601      	mov	r1, r0
 8008410:	4606      	mov	r6, r0
 8008412:	4650      	mov	r0, sl
 8008414:	f7fe fce1 	bl	8006dda <__mcmp>
 8008418:	2800      	cmp	r0, #0
 800841a:	f73f ad5c 	bgt.w	8007ed6 <_dtoa_r+0x49e>
 800841e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008420:	9d06      	ldr	r5, [sp, #24]
 8008422:	ea6f 0b03 	mvn.w	fp, r3
 8008426:	2300      	movs	r3, #0
 8008428:	9307      	str	r3, [sp, #28]
 800842a:	4631      	mov	r1, r6
 800842c:	4620      	mov	r0, r4
 800842e:	f7fe fac2 	bl	80069b6 <_Bfree>
 8008432:	2f00      	cmp	r7, #0
 8008434:	f43f ae4b 	beq.w	80080ce <_dtoa_r+0x696>
 8008438:	9b07      	ldr	r3, [sp, #28]
 800843a:	b12b      	cbz	r3, 8008448 <_dtoa_r+0xa10>
 800843c:	42bb      	cmp	r3, r7
 800843e:	d003      	beq.n	8008448 <_dtoa_r+0xa10>
 8008440:	4619      	mov	r1, r3
 8008442:	4620      	mov	r0, r4
 8008444:	f7fe fab7 	bl	80069b6 <_Bfree>
 8008448:	4639      	mov	r1, r7
 800844a:	4620      	mov	r0, r4
 800844c:	f7fe fab3 	bl	80069b6 <_Bfree>
 8008450:	e63d      	b.n	80080ce <_dtoa_r+0x696>
 8008452:	2600      	movs	r6, #0
 8008454:	4637      	mov	r7, r6
 8008456:	e7e2      	b.n	800841e <_dtoa_r+0x9e6>
 8008458:	46bb      	mov	fp, r7
 800845a:	4637      	mov	r7, r6
 800845c:	e53b      	b.n	8007ed6 <_dtoa_r+0x49e>
 800845e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008460:	f8cd 9010 	str.w	r9, [sp, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	f47f af12 	bne.w	800828e <_dtoa_r+0x856>
 800846a:	9d06      	ldr	r5, [sp, #24]
 800846c:	4631      	mov	r1, r6
 800846e:	4650      	mov	r0, sl
 8008470:	f7ff fa55 	bl	800791e <quorem>
 8008474:	9b06      	ldr	r3, [sp, #24]
 8008476:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800847a:	f805 9b01 	strb.w	r9, [r5], #1
 800847e:	9a04      	ldr	r2, [sp, #16]
 8008480:	1aeb      	subs	r3, r5, r3
 8008482:	429a      	cmp	r2, r3
 8008484:	f300 8081 	bgt.w	800858a <_dtoa_r+0xb52>
 8008488:	9b06      	ldr	r3, [sp, #24]
 800848a:	2a01      	cmp	r2, #1
 800848c:	bfac      	ite	ge
 800848e:	189b      	addge	r3, r3, r2
 8008490:	3301      	addlt	r3, #1
 8008492:	4698      	mov	r8, r3
 8008494:	2300      	movs	r3, #0
 8008496:	9307      	str	r3, [sp, #28]
 8008498:	4651      	mov	r1, sl
 800849a:	2201      	movs	r2, #1
 800849c:	4620      	mov	r0, r4
 800849e:	f7fe fc4b 	bl	8006d38 <__lshift>
 80084a2:	4631      	mov	r1, r6
 80084a4:	4682      	mov	sl, r0
 80084a6:	f7fe fc98 	bl	8006dda <__mcmp>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	dc34      	bgt.n	8008518 <_dtoa_r+0xae0>
 80084ae:	d102      	bne.n	80084b6 <_dtoa_r+0xa7e>
 80084b0:	f019 0f01 	tst.w	r9, #1
 80084b4:	d130      	bne.n	8008518 <_dtoa_r+0xae0>
 80084b6:	4645      	mov	r5, r8
 80084b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80084bc:	1e6a      	subs	r2, r5, #1
 80084be:	2b30      	cmp	r3, #48	; 0x30
 80084c0:	d1b3      	bne.n	800842a <_dtoa_r+0x9f2>
 80084c2:	4615      	mov	r5, r2
 80084c4:	e7f8      	b.n	80084b8 <_dtoa_r+0xa80>
 80084c6:	4638      	mov	r0, r7
 80084c8:	e6ff      	b.n	80082ca <_dtoa_r+0x892>
 80084ca:	2301      	movs	r3, #1
 80084cc:	e722      	b.n	8008314 <_dtoa_r+0x8dc>
 80084ce:	9a02      	ldr	r2, [sp, #8]
 80084d0:	2a00      	cmp	r2, #0
 80084d2:	db04      	blt.n	80084de <_dtoa_r+0xaa6>
 80084d4:	d128      	bne.n	8008528 <_dtoa_r+0xaf0>
 80084d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80084d8:	bb32      	cbnz	r2, 8008528 <_dtoa_r+0xaf0>
 80084da:	9a08      	ldr	r2, [sp, #32]
 80084dc:	bb22      	cbnz	r2, 8008528 <_dtoa_r+0xaf0>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f77f af32 	ble.w	8008348 <_dtoa_r+0x910>
 80084e4:	4651      	mov	r1, sl
 80084e6:	2201      	movs	r2, #1
 80084e8:	4620      	mov	r0, r4
 80084ea:	f7fe fc25 	bl	8006d38 <__lshift>
 80084ee:	4631      	mov	r1, r6
 80084f0:	4682      	mov	sl, r0
 80084f2:	f7fe fc72 	bl	8006dda <__mcmp>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	dc05      	bgt.n	8008506 <_dtoa_r+0xace>
 80084fa:	f47f af25 	bne.w	8008348 <_dtoa_r+0x910>
 80084fe:	f019 0f01 	tst.w	r9, #1
 8008502:	f43f af21 	beq.w	8008348 <_dtoa_r+0x910>
 8008506:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800850a:	f47f af1b 	bne.w	8008344 <_dtoa_r+0x90c>
 800850e:	2339      	movs	r3, #57	; 0x39
 8008510:	f108 0801 	add.w	r8, r8, #1
 8008514:	f808 3c01 	strb.w	r3, [r8, #-1]
 8008518:	4645      	mov	r5, r8
 800851a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800851e:	1e6a      	subs	r2, r5, #1
 8008520:	2b39      	cmp	r3, #57	; 0x39
 8008522:	d03a      	beq.n	800859a <_dtoa_r+0xb62>
 8008524:	3301      	adds	r3, #1
 8008526:	e03f      	b.n	80085a8 <_dtoa_r+0xb70>
 8008528:	2b00      	cmp	r3, #0
 800852a:	f108 0501 	add.w	r5, r8, #1
 800852e:	dd05      	ble.n	800853c <_dtoa_r+0xb04>
 8008530:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008534:	d0eb      	beq.n	800850e <_dtoa_r+0xad6>
 8008536:	f109 0901 	add.w	r9, r9, #1
 800853a:	e707      	b.n	800834c <_dtoa_r+0x914>
 800853c:	9b06      	ldr	r3, [sp, #24]
 800853e:	9a04      	ldr	r2, [sp, #16]
 8008540:	1aeb      	subs	r3, r5, r3
 8008542:	4293      	cmp	r3, r2
 8008544:	46a8      	mov	r8, r5
 8008546:	f805 9c01 	strb.w	r9, [r5, #-1]
 800854a:	d0a5      	beq.n	8008498 <_dtoa_r+0xa60>
 800854c:	4651      	mov	r1, sl
 800854e:	2300      	movs	r3, #0
 8008550:	220a      	movs	r2, #10
 8008552:	4620      	mov	r0, r4
 8008554:	f7fe fa46 	bl	80069e4 <__multadd>
 8008558:	9b07      	ldr	r3, [sp, #28]
 800855a:	4682      	mov	sl, r0
 800855c:	42bb      	cmp	r3, r7
 800855e:	f04f 020a 	mov.w	r2, #10
 8008562:	f04f 0300 	mov.w	r3, #0
 8008566:	9907      	ldr	r1, [sp, #28]
 8008568:	4620      	mov	r0, r4
 800856a:	d104      	bne.n	8008576 <_dtoa_r+0xb3e>
 800856c:	f7fe fa3a 	bl	80069e4 <__multadd>
 8008570:	9007      	str	r0, [sp, #28]
 8008572:	4607      	mov	r7, r0
 8008574:	e6b1      	b.n	80082da <_dtoa_r+0x8a2>
 8008576:	f7fe fa35 	bl	80069e4 <__multadd>
 800857a:	2300      	movs	r3, #0
 800857c:	9007      	str	r0, [sp, #28]
 800857e:	220a      	movs	r2, #10
 8008580:	4639      	mov	r1, r7
 8008582:	4620      	mov	r0, r4
 8008584:	f7fe fa2e 	bl	80069e4 <__multadd>
 8008588:	e7f3      	b.n	8008572 <_dtoa_r+0xb3a>
 800858a:	4651      	mov	r1, sl
 800858c:	2300      	movs	r3, #0
 800858e:	220a      	movs	r2, #10
 8008590:	4620      	mov	r0, r4
 8008592:	f7fe fa27 	bl	80069e4 <__multadd>
 8008596:	4682      	mov	sl, r0
 8008598:	e768      	b.n	800846c <_dtoa_r+0xa34>
 800859a:	9b06      	ldr	r3, [sp, #24]
 800859c:	4293      	cmp	r3, r2
 800859e:	d105      	bne.n	80085ac <_dtoa_r+0xb74>
 80085a0:	2331      	movs	r3, #49	; 0x31
 80085a2:	9a06      	ldr	r2, [sp, #24]
 80085a4:	f10b 0b01 	add.w	fp, fp, #1
 80085a8:	7013      	strb	r3, [r2, #0]
 80085aa:	e73e      	b.n	800842a <_dtoa_r+0x9f2>
 80085ac:	4615      	mov	r5, r2
 80085ae:	e7b4      	b.n	800851a <_dtoa_r+0xae2>
 80085b0:	4b09      	ldr	r3, [pc, #36]	; (80085d8 <_dtoa_r+0xba0>)
 80085b2:	f7ff baa3 	b.w	8007afc <_dtoa_r+0xc4>
 80085b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f47f aa7d 	bne.w	8007ab8 <_dtoa_r+0x80>
 80085be:	4b07      	ldr	r3, [pc, #28]	; (80085dc <_dtoa_r+0xba4>)
 80085c0:	f7ff ba9c 	b.w	8007afc <_dtoa_r+0xc4>
 80085c4:	9b04      	ldr	r3, [sp, #16]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f73f af4f 	bgt.w	800846a <_dtoa_r+0xa32>
 80085cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	f77f af4b 	ble.w	800846a <_dtoa_r+0xa32>
 80085d4:	e714      	b.n	8008400 <_dtoa_r+0x9c8>
 80085d6:	bf00      	nop
 80085d8:	0800873d 	.word	0x0800873d
 80085dc:	08008a50 	.word	0x08008a50

080085e0 <memchr>:
 80085e0:	b510      	push	{r4, lr}
 80085e2:	b2c9      	uxtb	r1, r1
 80085e4:	4402      	add	r2, r0
 80085e6:	4290      	cmp	r0, r2
 80085e8:	4603      	mov	r3, r0
 80085ea:	d101      	bne.n	80085f0 <memchr+0x10>
 80085ec:	2000      	movs	r0, #0
 80085ee:	bd10      	pop	{r4, pc}
 80085f0:	781c      	ldrb	r4, [r3, #0]
 80085f2:	3001      	adds	r0, #1
 80085f4:	428c      	cmp	r4, r1
 80085f6:	d1f6      	bne.n	80085e6 <memchr+0x6>
 80085f8:	4618      	mov	r0, r3
 80085fa:	bd10      	pop	{r4, pc}

080085fc <memmove>:
 80085fc:	4288      	cmp	r0, r1
 80085fe:	b510      	push	{r4, lr}
 8008600:	eb01 0302 	add.w	r3, r1, r2
 8008604:	d803      	bhi.n	800860e <memmove+0x12>
 8008606:	1e42      	subs	r2, r0, #1
 8008608:	4299      	cmp	r1, r3
 800860a:	d10c      	bne.n	8008626 <memmove+0x2a>
 800860c:	bd10      	pop	{r4, pc}
 800860e:	4298      	cmp	r0, r3
 8008610:	d2f9      	bcs.n	8008606 <memmove+0xa>
 8008612:	1881      	adds	r1, r0, r2
 8008614:	1ad2      	subs	r2, r2, r3
 8008616:	42d3      	cmn	r3, r2
 8008618:	d100      	bne.n	800861c <memmove+0x20>
 800861a:	bd10      	pop	{r4, pc}
 800861c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008620:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008624:	e7f7      	b.n	8008616 <memmove+0x1a>
 8008626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800862a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800862e:	e7eb      	b.n	8008608 <memmove+0xc>

08008630 <__malloc_lock>:
 8008630:	4770      	bx	lr

08008632 <__malloc_unlock>:
 8008632:	4770      	bx	lr

08008634 <_malloc_usable_size_r>:
 8008634:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8008638:	2800      	cmp	r0, #0
 800863a:	f1a0 0004 	sub.w	r0, r0, #4
 800863e:	bfbc      	itt	lt
 8008640:	580b      	ldrlt	r3, [r1, r0]
 8008642:	18c0      	addlt	r0, r0, r3
 8008644:	4770      	bx	lr
	...

08008648 <_sbrk>:
 8008648:	4b04      	ldr	r3, [pc, #16]	; (800865c <_sbrk+0x14>)
 800864a:	4602      	mov	r2, r0
 800864c:	6819      	ldr	r1, [r3, #0]
 800864e:	b909      	cbnz	r1, 8008654 <_sbrk+0xc>
 8008650:	4903      	ldr	r1, [pc, #12]	; (8008660 <_sbrk+0x18>)
 8008652:	6019      	str	r1, [r3, #0]
 8008654:	6818      	ldr	r0, [r3, #0]
 8008656:	4402      	add	r2, r0
 8008658:	601a      	str	r2, [r3, #0]
 800865a:	4770      	bx	lr
 800865c:	2000020c 	.word	0x2000020c
 8008660:	20000a00 	.word	0x20000a00

08008664 <_init>:
 8008664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008666:	bf00      	nop
 8008668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866a:	bc08      	pop	{r3}
 800866c:	469e      	mov	lr, r3
 800866e:	4770      	bx	lr

08008670 <_fini>:
 8008670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008672:	bf00      	nop
 8008674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008676:	bc08      	pop	{r3}
 8008678:	469e      	mov	lr, r3
 800867a:	4770      	bx	lr
