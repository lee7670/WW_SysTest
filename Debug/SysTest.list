
SysTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006294  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  080063d8  080063d8  000163d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006720  08006720  00016720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006724  08006724  00016724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d4  20000000  08006728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000032c  200001d8  080068fc  000201d8  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000504  080068fc  00020504  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001769c  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002dbd  00000000  00000000  00037899  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000605c  00000000  00000000  0003a656  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000848  00000000  00000000  000406b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d68  00000000  00000000  00040f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005af6  00000000  00000000  00041c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003207  00000000  00000000  0004775e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004a965  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002540  00000000  00000000  0004a9e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d8 	.word	0x200001d8
 800015c:	00000000 	.word	0x00000000
 8000160:	080063bc 	.word	0x080063bc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001dc 	.word	0x200001dc
 800017c:	080063bc 	.word	0x080063bc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f092 0f00 	teq	r2, #0
 800047a:	bf14      	ite	ne
 800047c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e720      	b.n	80002d4 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aedc 	beq.w	8000282 <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6c1      	b.n	8000282 <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	; 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c20:	f1a2 0201 	sub.w	r2, r2, #1
 8000c24:	d1ed      	bne.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fmul>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d06f      	beq.n	8000e78 <__aeabi_fmul+0xf8>
 8000d98:	441a      	add	r2, r3
 8000d9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9e:	0240      	lsls	r0, r0, #9
 8000da0:	bf18      	it	ne
 8000da2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da6:	d01e      	beq.n	8000de6 <__aeabi_fmul+0x66>
 8000da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db4:	fba0 3101 	umull	r3, r1, r0, r1
 8000db8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc0:	bf3e      	ittt	cc
 8000dc2:	0049      	lslcc	r1, r1, #1
 8000dc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc8:	005b      	lslcc	r3, r3, #1
 8000dca:	ea40 0001 	orr.w	r0, r0, r1
 8000dce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd2:	2afd      	cmp	r2, #253	; 0xfd
 8000dd4:	d81d      	bhi.n	8000e12 <__aeabi_fmul+0x92>
 8000dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dde:	bf08      	it	eq
 8000de0:	f020 0001 	biceq.w	r0, r0, #1
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dee:	bf08      	it	eq
 8000df0:	0249      	lsleq	r1, r1, #9
 8000df2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfa:	3a7f      	subs	r2, #127	; 0x7f
 8000dfc:	bfc2      	ittt	gt
 8000dfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e06:	4770      	bxgt	lr
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	3a01      	subs	r2, #1
 8000e12:	dc5d      	bgt.n	8000ed0 <__aeabi_fmul+0x150>
 8000e14:	f112 0f19 	cmn.w	r2, #25
 8000e18:	bfdc      	itt	le
 8000e1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1e:	4770      	bxle	lr
 8000e20:	f1c2 0200 	rsb	r2, r2, #0
 8000e24:	0041      	lsls	r1, r0, #1
 8000e26:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2a:	f1c2 0220 	rsb	r2, r2, #32
 8000e2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e36:	f140 0000 	adc.w	r0, r0, #0
 8000e3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3e:	bf08      	it	eq
 8000e40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e44:	4770      	bx	lr
 8000e46:	f092 0f00 	teq	r2, #0
 8000e4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0040      	lsleq	r0, r0, #1
 8000e52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e56:	3a01      	subeq	r2, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xce>
 8000e5a:	ea40 000c 	orr.w	r0, r0, ip
 8000e5e:	f093 0f00 	teq	r3, #0
 8000e62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0049      	lsleq	r1, r1, #1
 8000e6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6e:	3b01      	subeq	r3, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xe6>
 8000e72:	ea41 010c 	orr.w	r1, r1, ip
 8000e76:	e78f      	b.n	8000d98 <__aeabi_fmul+0x18>
 8000e78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	bf18      	it	ne
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d00a      	beq.n	8000e9e <__aeabi_fmul+0x11e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1d8      	bne.n	8000e46 <__aeabi_fmul+0xc6>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	bf17      	itett	ne
 8000ea4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea8:	4608      	moveq	r0, r1
 8000eaa:	f091 0f00 	teqne	r1, #0
 8000eae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb2:	d014      	beq.n	8000ede <__aeabi_fmul+0x15e>
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	d101      	bne.n	8000ebe <__aeabi_fmul+0x13e>
 8000eba:	0242      	lsls	r2, r0, #9
 8000ebc:	d10f      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ebe:	ea93 0f0c 	teq	r3, ip
 8000ec2:	d103      	bne.n	8000ecc <__aeabi_fmul+0x14c>
 8000ec4:	024b      	lsls	r3, r1, #9
 8000ec6:	bf18      	it	ne
 8000ec8:	4608      	movne	r0, r1
 8000eca:	d108      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000edc:	4770      	bx	lr
 8000ede:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee6:	4770      	bx	lr

08000ee8 <__aeabi_fdiv>:
 8000ee8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef0:	bf1e      	ittt	ne
 8000ef2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef6:	ea92 0f0c 	teqne	r2, ip
 8000efa:	ea93 0f0c 	teqne	r3, ip
 8000efe:	d069      	beq.n	8000fd4 <__aeabi_fdiv+0xec>
 8000f00:	eba2 0203 	sub.w	r2, r2, r3
 8000f04:	ea80 0c01 	eor.w	ip, r0, r1
 8000f08:	0249      	lsls	r1, r1, #9
 8000f0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0e:	d037      	beq.n	8000f80 <__aeabi_fdiv+0x98>
 8000f10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f20:	428b      	cmp	r3, r1
 8000f22:	bf38      	it	cc
 8000f24:	005b      	lslcc	r3, r3, #1
 8000f26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	bf24      	itt	cs
 8000f32:	1a5b      	subcs	r3, r3, r1
 8000f34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4a:	bf24      	itt	cs
 8000f4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f58:	bf24      	itt	cs
 8000f5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	bf18      	it	ne
 8000f66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6a:	d1e0      	bne.n	8000f2e <__aeabi_fdiv+0x46>
 8000f6c:	2afd      	cmp	r2, #253	; 0xfd
 8000f6e:	f63f af50 	bhi.w	8000e12 <__aeabi_fmul+0x92>
 8000f72:	428b      	cmp	r3, r1
 8000f74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f78:	bf08      	it	eq
 8000f7a:	f020 0001 	biceq.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f88:	327f      	adds	r2, #127	; 0x7f
 8000f8a:	bfc2      	ittt	gt
 8000f8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f94:	4770      	bxgt	lr
 8000f96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	3a01      	subs	r2, #1
 8000fa0:	e737      	b.n	8000e12 <__aeabi_fmul+0x92>
 8000fa2:	f092 0f00 	teq	r2, #0
 8000fa6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0040      	lsleq	r0, r0, #1
 8000fae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb2:	3a01      	subeq	r2, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xc2>
 8000fb6:	ea40 000c 	orr.w	r0, r0, ip
 8000fba:	f093 0f00 	teq	r3, #0
 8000fbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0049      	lsleq	r1, r1, #1
 8000fc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fca:	3b01      	subeq	r3, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xda>
 8000fce:	ea41 010c 	orr.w	r1, r1, ip
 8000fd2:	e795      	b.n	8000f00 <__aeabi_fdiv+0x18>
 8000fd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd8:	ea92 0f0c 	teq	r2, ip
 8000fdc:	d108      	bne.n	8000ff0 <__aeabi_fdiv+0x108>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	f47f af7d 	bne.w	8000ede <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	f47f af70 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8000fec:	4608      	mov	r0, r1
 8000fee:	e776      	b.n	8000ede <__aeabi_fmul+0x15e>
 8000ff0:	ea93 0f0c 	teq	r3, ip
 8000ff4:	d104      	bne.n	8001000 <__aeabi_fdiv+0x118>
 8000ff6:	024b      	lsls	r3, r1, #9
 8000ff8:	f43f af4c 	beq.w	8000e94 <__aeabi_fmul+0x114>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e76e      	b.n	8000ede <__aeabi_fmul+0x15e>
 8001000:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001004:	bf18      	it	ne
 8001006:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100a:	d1ca      	bne.n	8000fa2 <__aeabi_fdiv+0xba>
 800100c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001010:	f47f af5c 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8001014:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001018:	f47f af3c 	bne.w	8000e94 <__aeabi_fmul+0x114>
 800101c:	e75f      	b.n	8000ede <__aeabi_fmul+0x15e>
 800101e:	bf00      	nop

08001020 <__gesf2>:
 8001020:	f04f 3cff 	mov.w	ip, #4294967295
 8001024:	e006      	b.n	8001034 <__cmpsf2+0x4>
 8001026:	bf00      	nop

08001028 <__lesf2>:
 8001028:	f04f 0c01 	mov.w	ip, #1
 800102c:	e002      	b.n	8001034 <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__cmpsf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001040:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001044:	bf18      	it	ne
 8001046:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104a:	d011      	beq.n	8001070 <__cmpsf2+0x40>
 800104c:	b001      	add	sp, #4
 800104e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001052:	bf18      	it	ne
 8001054:	ea90 0f01 	teqne	r0, r1
 8001058:	bf58      	it	pl
 800105a:	ebb2 0003 	subspl.w	r0, r2, r3
 800105e:	bf88      	it	hi
 8001060:	17c8      	asrhi	r0, r1, #31
 8001062:	bf38      	it	cc
 8001064:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001068:	bf18      	it	ne
 800106a:	f040 0001 	orrne.w	r0, r0, #1
 800106e:	4770      	bx	lr
 8001070:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001074:	d102      	bne.n	800107c <__cmpsf2+0x4c>
 8001076:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107a:	d105      	bne.n	8001088 <__cmpsf2+0x58>
 800107c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001080:	d1e4      	bne.n	800104c <__cmpsf2+0x1c>
 8001082:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001086:	d0e1      	beq.n	800104c <__cmpsf2+0x1c>
 8001088:	f85d 0b04 	ldr.w	r0, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <__aeabi_cfrcmple>:
 8001090:	4684      	mov	ip, r0
 8001092:	4608      	mov	r0, r1
 8001094:	4661      	mov	r1, ip
 8001096:	e7ff      	b.n	8001098 <__aeabi_cfcmpeq>

08001098 <__aeabi_cfcmpeq>:
 8001098:	b50f      	push	{r0, r1, r2, r3, lr}
 800109a:	f7ff ffc9 	bl	8001030 <__cmpsf2>
 800109e:	2800      	cmp	r0, #0
 80010a0:	bf48      	it	mi
 80010a2:	f110 0f00 	cmnmi.w	r0, #0
 80010a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a8 <__aeabi_fcmpeq>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff fff4 	bl	8001098 <__aeabi_cfcmpeq>
 80010b0:	bf0c      	ite	eq
 80010b2:	2001      	moveq	r0, #1
 80010b4:	2000      	movne	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmplt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffea 	bl	8001098 <__aeabi_cfcmpeq>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmple>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffe0 	bl	8001098 <__aeabi_cfcmpeq>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpge>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffd2 	bl	8001090 <__aeabi_cfrcmple>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpgt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffc8 	bl	8001090 <__aeabi_cfrcmple>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_f2iz>:
 800110c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001114:	d30f      	bcc.n	8001136 <__aeabi_f2iz+0x2a>
 8001116:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d90d      	bls.n	800113c <__aeabi_f2iz+0x30>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001128:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	bf18      	it	ne
 8001132:	4240      	negne	r0, r0
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr
 800113c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001140:	d101      	bne.n	8001146 <__aeabi_f2iz+0x3a>
 8001142:	0242      	lsls	r2, r0, #9
 8001144:	d105      	bne.n	8001152 <__aeabi_f2iz+0x46>
 8001146:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114a:	bf08      	it	eq
 800114c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr

08001158 <__aeabi_f2uiz>:
 8001158:	0042      	lsls	r2, r0, #1
 800115a:	d20e      	bcs.n	800117a <__aeabi_f2uiz+0x22>
 800115c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001160:	d30b      	bcc.n	800117a <__aeabi_f2uiz+0x22>
 8001162:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001166:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116a:	d409      	bmi.n	8001180 <__aeabi_f2uiz+0x28>
 800116c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001170:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001174:	fa23 f002 	lsr.w	r0, r3, r2
 8001178:	4770      	bx	lr
 800117a:	f04f 0000 	mov.w	r0, #0
 800117e:	4770      	bx	lr
 8001180:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001184:	d101      	bne.n	800118a <__aeabi_f2uiz+0x32>
 8001186:	0242      	lsls	r2, r0, #9
 8001188:	d102      	bne.n	8001190 <__aeabi_f2uiz+0x38>
 800118a:	f04f 30ff 	mov.w	r0, #4294967295
 800118e:	4770      	bx	lr
 8001190:	f04f 0000 	mov.w	r0, #0
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop

08001198 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_InitTick+0x24>)
{
 800119a:	b510      	push	{r4, lr}
 800119c:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80011a8:	f000 f876 	bl	8001298 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	4621      	mov	r1, r4
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f000 f830 	bl	8001218 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80011b8:	2000      	movs	r0, #0
 80011ba:	bd10      	pop	{r4, pc}
 80011bc:	20000000 	.word	0x20000000

080011c0 <HAL_Init>:
{
 80011c0:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c2:	2003      	movs	r0, #3
 80011c4:	f000 f816 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff ffe5 	bl	8001198 <HAL_InitTick>
  HAL_MspInit();
 80011ce:	f002 fa81 	bl	80036d4 <HAL_MspInit>
}
 80011d2:	2000      	movs	r0, #0
 80011d4:	bd08      	pop	{r3, pc}
	...

080011d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80011d8:	4a02      	ldr	r2, [pc, #8]	; (80011e4 <HAL_IncTick+0xc>)
 80011da:	6813      	ldr	r3, [r2, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000214 	.word	0x20000214

080011e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011e8:	4b01      	ldr	r3, [pc, #4]	; (80011f0 <HAL_GetTick+0x8>)
 80011ea:	6818      	ldr	r0, [r3, #0]
}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000214 	.word	0x20000214

080011f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80011f6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80011fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001202:	041b      	lsls	r3, r3, #16
 8001204:	0c1b      	lsrs	r3, r3, #16
 8001206:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800120a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800120e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001210:	60d3      	str	r3, [r2, #12]
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121a:	b530      	push	{r4, r5, lr}
 800121c:	68dc      	ldr	r4, [r3, #12]
 800121e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001222:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	2b04      	cmp	r3, #4
 800122a:	bf28      	it	cs
 800122c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001234:	bf98      	it	ls
 8001236:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	fa05 f303 	lsl.w	r3, r5, r3
 800123c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001240:	bf88      	it	hi
 8001242:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4019      	ands	r1, r3
 8001246:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	fa05 f404 	lsl.w	r4, r5, r4
 800124c:	3c01      	subs	r4, #1
 800124e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001250:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001252:	ea42 0201 	orr.w	r2, r2, r1
 8001256:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	bfaf      	iteee	ge
 800125c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	4b06      	ldrlt	r3, [pc, #24]	; (800127c <HAL_NVIC_SetPriority+0x64>)
 8001262:	f000 000f 	andlt.w	r0, r0, #15
 8001266:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	bfa5      	ittet	ge
 800126a:	b2d2      	uxtbge	r2, r2
 800126c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001276:	bd30      	pop	{r4, r5, pc}
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	e000ed14 	.word	0xe000ed14

08001280 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001280:	2301      	movs	r3, #1
 8001282:	0942      	lsrs	r2, r0, #5
 8001284:	f000 001f 	and.w	r0, r0, #31
 8001288:	fa03 f000 	lsl.w	r0, r3, r0
 800128c:	4b01      	ldr	r3, [pc, #4]	; (8001294 <HAL_NVIC_EnableIRQ+0x14>)
 800128e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100

08001298 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	3801      	subs	r0, #1
 800129a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800129e:	d20a      	bcs.n	80012b6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000e010 	.word	0xe000e010
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80012c6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	bf0c      	ite	eq
 80012cc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80012d0:	f022 0204 	bicne.w	r2, r2, #4
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	4770      	bx	lr
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80012dc:	4770      	bx	lr

080012de <HAL_SYSTICK_IRQHandler>:
{
 80012de:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80012e0:	f7ff fffc 	bl	80012dc <HAL_SYSTICK_Callback>
 80012e4:	bd08      	pop	{r3, pc}
	...

080012e8 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 80012e8:	2300      	movs	r3, #0
{ 
 80012ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ee:	4a62      	ldr	r2, [pc, #392]	; (8001478 <HAL_GPIO_Init+0x190>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80012f0:	f8d1 8000 	ldr.w	r8, [r1]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f4:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8001480 <HAL_GPIO_Init+0x198>
{ 
 80012f8:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80012fa:	fa38 f403 	lsrs.w	r4, r8, r3
 80012fe:	d102      	bne.n	8001306 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  } 
}
 8001300:	b005      	add	sp, #20
 8001302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001306:	2401      	movs	r4, #1
 8001308:	409c      	lsls	r4, r3
    if(iocurrent)
 800130a:	ea18 0604 	ands.w	r6, r8, r4
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800130e:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 8001310:	f000 80a7 	beq.w	8001462 <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001314:	684c      	ldr	r4, [r1, #4]
 8001316:	f024 0a10 	bic.w	sl, r4, #16
 800131a:	f1ba 0f02 	cmp.w	sl, #2
 800131e:	d116      	bne.n	800134e <HAL_GPIO_Init+0x66>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001320:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 8001324:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001328:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800132c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001330:	f8dc 5020 	ldr.w	r5, [ip, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001334:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001338:	fa0e fe0b 	lsl.w	lr, lr, fp
 800133c:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001340:	690d      	ldr	r5, [r1, #16]
 8001342:	fa05 f50b 	lsl.w	r5, r5, fp
 8001346:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 800134a:	f8cc 5020 	str.w	r5, [ip, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800134e:	2503      	movs	r5, #3
 8001350:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001354:	fa05 f50c 	lsl.w	r5, r5, ip
 8001358:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 800135a:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800135e:	f004 0e03 	and.w	lr, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001362:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001366:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800136a:	f10a 3aff 	add.w	sl, sl, #4294967295
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800136e:	ea4e 0e0b 	orr.w	lr, lr, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001372:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8001376:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800137a:	d816      	bhi.n	80013aa <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR; 
 800137c:	f8d0 e008 	ldr.w	lr, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001380:	68cf      	ldr	r7, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001382:	ea05 0e0e 	and.w	lr, r5, lr
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001386:	fa07 fa0c 	lsl.w	sl, r7, ip
 800138a:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800138e:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8001392:	f8d0 e004 	ldr.w	lr, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001396:	9f01      	ldr	r7, [sp, #4]
 8001398:	ea2e 0707 	bic.w	r7, lr, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800139c:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80013a0:	fa0e fe03 	lsl.w	lr, lr, r3
 80013a4:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80013a8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80013aa:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80013ac:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80013ae:	688f      	ldr	r7, [r1, #8]
 80013b0:	fa07 f70c 	lsl.w	r7, r7, ip
 80013b4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80013b6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80013b8:	00e5      	lsls	r5, r4, #3
 80013ba:	d552      	bpl.n	8001462 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80013bc:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c0:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80013c4:	f023 0703 	bic.w	r7, r3, #3
 80013c8:	f045 0501 	orr.w	r5, r5, #1
 80013cc:	f8c9 5020 	str.w	r5, [r9, #32]
 80013d0:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80013d4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80013d8:	f005 0501 	and.w	r5, r5, #1
 80013dc:	9503      	str	r5, [sp, #12]
 80013de:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80013e2:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	9d03      	ldr	r5, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80013e8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 80013ec:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80013ee:	fa0e fe0c 	lsl.w	lr, lr, ip
 80013f2:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013f6:	4d21      	ldr	r5, [pc, #132]	; (800147c <HAL_GPIO_Init+0x194>)
 80013f8:	42a8      	cmp	r0, r5
 80013fa:	d034      	beq.n	8001466 <HAL_GPIO_Init+0x17e>
 80013fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001400:	42a8      	cmp	r0, r5
 8001402:	d032      	beq.n	800146a <HAL_GPIO_Init+0x182>
 8001404:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001408:	42a8      	cmp	r0, r5
 800140a:	d030      	beq.n	800146e <HAL_GPIO_Init+0x186>
 800140c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001410:	42a8      	cmp	r0, r5
 8001412:	d02e      	beq.n	8001472 <HAL_GPIO_Init+0x18a>
 8001414:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001418:	42a8      	cmp	r0, r5
 800141a:	bf14      	ite	ne
 800141c:	2505      	movne	r5, #5
 800141e:	2504      	moveq	r5, #4
 8001420:	fa05 f50c 	lsl.w	r5, r5, ip
 8001424:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001428:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800142a:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 800142c:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800142e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001432:	bf0c      	ite	eq
 8001434:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8001436:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8001438:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800143a:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800143c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001440:	bf0c      	ite	eq
 8001442:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8001444:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8001446:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001448:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800144a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800144e:	bf0c      	ite	eq
 8001450:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8001452:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8001454:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001456:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001458:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800145a:	bf54      	ite	pl
 800145c:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 800145e:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8001460:	60d5      	str	r5, [r2, #12]
    position++;
 8001462:	3301      	adds	r3, #1
 8001464:	e749      	b.n	80012fa <HAL_GPIO_Init+0x12>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001466:	2500      	movs	r5, #0
 8001468:	e7da      	b.n	8001420 <HAL_GPIO_Init+0x138>
 800146a:	2501      	movs	r5, #1
 800146c:	e7d8      	b.n	8001420 <HAL_GPIO_Init+0x138>
 800146e:	2502      	movs	r5, #2
 8001470:	e7d6      	b.n	8001420 <HAL_GPIO_Init+0x138>
 8001472:	2503      	movs	r5, #3
 8001474:	e7d4      	b.n	8001420 <HAL_GPIO_Init+0x138>
 8001476:	bf00      	nop
 8001478:	40010400 	.word	0x40010400
 800147c:	40020000 	.word	0x40020000
 8001480:	40023800 	.word	0x40023800

08001484 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001484:	b10a      	cbz	r2, 800148a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001486:	6181      	str	r1, [r0, #24]
 8001488:	4770      	bx	lr
 800148a:	0409      	lsls	r1, r1, #16
 800148c:	e7fb      	b.n	8001486 <HAL_GPIO_WritePin+0x2>
	...

08001490 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8001492:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800149a:	d00c      	beq.n	80014b6 <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 800149c:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 800149e:	491a      	ldr	r1, [pc, #104]	; (8001508 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80014a0:	680b      	ldr	r3, [r1, #0]
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80014aa:	6808      	ldr	r0, [r1, #0]
 80014ac:	f000 0001 	and.w	r0, r0, #1
 80014b0:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 80014b2:	b002      	add	sp, #8
 80014b4:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80014b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b8:	4914      	ldr	r1, [pc, #80]	; (800150c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80014ba:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80014be:	d00f      	beq.n	80014e0 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80014c0:	680a      	ldr	r2, [r1, #0]
 80014c2:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80014c6:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 80014ca:	d1e7      	bne.n	800149c <RCC_SetFlashLatencyFromMSIRange+0xc>
 80014cc:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80014d0:	d1e4      	bne.n	800149c <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 80014d2:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80014d4:	6813      	ldr	r3, [r2, #0]
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 80014dc:	2201      	movs	r2, #1
 80014de:	e7de      	b.n	800149e <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24
 80014e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ea:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80014ee:	9201      	str	r2, [sp, #4]
 80014f0:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80014f2:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80014f6:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fa:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80014fe:	6259      	str	r1, [r3, #36]	; 0x24
 8001500:	e7e1      	b.n	80014c6 <RCC_SetFlashLatencyFromMSIRange+0x36>
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	40023c00 	.word	0x40023c00
 800150c:	40007000 	.word	0x40007000

08001510 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001510:	6803      	ldr	r3, [r0, #0]
{
 8001512:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001516:	07d9      	lsls	r1, r3, #31
{
 8001518:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151a:	d46a      	bmi.n	80015f2 <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151c:	6823      	ldr	r3, [r4, #0]
 800151e:	079a      	lsls	r2, r3, #30
 8001520:	f100 80e6 	bmi.w	80016f0 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	06de      	lsls	r6, r3, #27
 8001528:	d555      	bpl.n	80015d6 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800152a:	4dc1      	ldr	r5, [pc, #772]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 800152c:	68ab      	ldr	r3, [r5, #8]
 800152e:	f013 0f0c 	tst.w	r3, #12
 8001532:	f040 8183 	bne.w	800183c <HAL_RCC_OscConfig+0x32c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800153e:	6829      	ldr	r1, [r5, #0]
 8001540:	fa93 f3a3 	rbit	r3, r3
 8001544:	fab3 f383 	clz	r3, r3
 8001548:	2201      	movs	r2, #1
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	420b      	tst	r3, r1
 8001554:	d002      	beq.n	800155c <HAL_RCC_OscConfig+0x4c>
 8001556:	69a3      	ldr	r3, [r4, #24]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d06e      	beq.n	800163a <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800155c:	4db4      	ldr	r5, [pc, #720]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 800155e:	6a20      	ldr	r0, [r4, #32]
 8001560:	686b      	ldr	r3, [r5, #4]
 8001562:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001566:	4298      	cmp	r0, r3
 8001568:	f240 814a 	bls.w	8001800 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800156c:	f7ff ff90 	bl	8001490 <RCC_SetFlashLatencyFromMSIRange>
 8001570:	2800      	cmp	r0, #0
 8001572:	d162      	bne.n	800163a <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001574:	686b      	ldr	r3, [r5, #4]
 8001576:	6a22      	ldr	r2, [r4, #32]
 8001578:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800157c:	4313      	orrs	r3, r2
 800157e:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001580:	6869      	ldr	r1, [r5, #4]
 8001582:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001586:	fa93 f3a3 	rbit	r3, r3
 800158a:	fab3 f283 	clz	r2, r3
 800158e:	69e3      	ldr	r3, [r4, #28]
 8001590:	4093      	lsls	r3, r2
 8001592:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001596:	4313      	orrs	r3, r2
 8001598:	606b      	str	r3, [r5, #4]
 800159a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800159e:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80015a2:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80015a6:	4ba2      	ldr	r3, [pc, #648]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 80015a8:	21f0      	movs	r1, #240	; 0xf0
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	fa91 f1a1 	rbit	r1, r1
 80015b0:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80015b4:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80015b6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80015ba:	40c3      	lsrs	r3, r0
 80015bc:	1c58      	adds	r0, r3, #1
 80015be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80015c2:	40ca      	lsrs	r2, r1
 80015c4:	499b      	ldr	r1, [pc, #620]	; (8001834 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80015c6:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80015c8:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 80015ca:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80015cc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80015ce:	4a9a      	ldr	r2, [pc, #616]	; (8001838 <HAL_RCC_OscConfig+0x328>)
 80015d0:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80015d2:	f7ff fde1 	bl	8001198 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	071d      	lsls	r5, r3, #28
 80015da:	f100 8191 	bmi.w	8001900 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	0758      	lsls	r0, r3, #29
 80015e2:	f100 81d3 	bmi.w	800198c <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015e8:	2a00      	cmp	r2, #0
 80015ea:	f040 8257 	bne.w	8001a9c <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 80015ee:	2000      	movs	r0, #0
 80015f0:	e024      	b.n	800163c <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015f2:	4b8f      	ldr	r3, [pc, #572]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	f002 020c 	and.w	r2, r2, #12
 80015fa:	2a08      	cmp	r2, #8
 80015fc:	d007      	beq.n	800160e <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	f002 020c 	and.w	r2, r2, #12
 8001604:	2a0c      	cmp	r2, #12
 8001606:	d11c      	bne.n	8001642 <HAL_RCC_OscConfig+0x132>
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	03db      	lsls	r3, r3, #15
 800160c:	d519      	bpl.n	8001642 <HAL_RCC_OscConfig+0x132>
 800160e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001612:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001616:	4a86      	ldr	r2, [pc, #536]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 8001618:	6811      	ldr	r1, [r2, #0]
 800161a:	fa93 f3a3 	rbit	r3, r3
 800161e:	fab3 f383 	clz	r3, r3
 8001622:	2201      	movs	r2, #1
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	420b      	tst	r3, r1
 800162e:	f43f af75 	beq.w	800151c <HAL_RCC_OscConfig+0xc>
 8001632:	6863      	ldr	r3, [r4, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	f47f af71 	bne.w	800151c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800163a:	2001      	movs	r0, #1
}
 800163c:	b003      	add	sp, #12
 800163e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001642:	6863      	ldr	r3, [r4, #4]
 8001644:	4d7a      	ldr	r5, [pc, #488]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 8001646:	2b01      	cmp	r3, #1
 8001648:	d120      	bne.n	800168c <HAL_RCC_OscConfig+0x17c>
 800164a:	682b      	ldr	r3, [r5, #0]
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001652:	f7ff fdc9 	bl	80011e8 <HAL_GetTick>
 8001656:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800165a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165c:	2601      	movs	r6, #1
 800165e:	4f74      	ldr	r7, [pc, #464]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 8001660:	fa95 f3a5 	rbit	r3, r5
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	fa95 f3a5 	rbit	r3, r5
 800166a:	fab3 f383 	clz	r3, r3
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	fa06 f303 	lsl.w	r3, r6, r3
 8001676:	4213      	tst	r3, r2
 8001678:	f47f af50 	bne.w	800151c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fdb4 	bl	80011e8 <HAL_GetTick>
 8001680:	eba0 0008 	sub.w	r0, r0, r8
 8001684:	2864      	cmp	r0, #100	; 0x64
 8001686:	d9eb      	bls.n	8001660 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8001688:	2003      	movs	r0, #3
 800168a:	e7d7      	b.n	800163c <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168c:	bb13      	cbnz	r3, 80016d4 <HAL_RCC_OscConfig+0x1c4>
 800168e:	682b      	ldr	r3, [r5, #0]
 8001690:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001698:	602b      	str	r3, [r5, #0]
 800169a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169c:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016a4:	f7ff fda0 	bl	80011e8 <HAL_GetTick>
 80016a8:	4680      	mov	r8, r0
 80016aa:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	682a      	ldr	r2, [r5, #0]
 80016b0:	fa96 f3a6 	rbit	r3, r6
 80016b4:	fab3 f383 	clz	r3, r3
 80016b8:	f003 031f 	and.w	r3, r3, #31
 80016bc:	fa07 f303 	lsl.w	r3, r7, r3
 80016c0:	4213      	tst	r3, r2
 80016c2:	f43f af2b 	beq.w	800151c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c6:	f7ff fd8f 	bl	80011e8 <HAL_GetTick>
 80016ca:	eba0 0008 	sub.w	r0, r0, r8
 80016ce:	2864      	cmp	r0, #100	; 0x64
 80016d0:	d9eb      	bls.n	80016aa <HAL_RCC_OscConfig+0x19a>
 80016d2:	e7d9      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	682b      	ldr	r3, [r5, #0]
 80016d8:	d103      	bne.n	80016e2 <HAL_RCC_OscConfig+0x1d2>
 80016da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016de:	602b      	str	r3, [r5, #0]
 80016e0:	e7b3      	b.n	800164a <HAL_RCC_OscConfig+0x13a>
 80016e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e6:	602b      	str	r3, [r5, #0]
 80016e8:	682b      	ldr	r3, [r5, #0]
 80016ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ee:	e7af      	b.n	8001650 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016f0:	4b4f      	ldr	r3, [pc, #316]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	f002 020c 	and.w	r2, r2, #12
 80016f8:	2a04      	cmp	r2, #4
 80016fa:	d007      	beq.n	800170c <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	f002 020c 	and.w	r2, r2, #12
 8001702:	2a0c      	cmp	r2, #12
 8001704:	d124      	bne.n	8001750 <HAL_RCC_OscConfig+0x240>
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	03df      	lsls	r7, r3, #15
 800170a:	d421      	bmi.n	8001750 <HAL_RCC_OscConfig+0x240>
 800170c:	2302      	movs	r3, #2
 800170e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	4a47      	ldr	r2, [pc, #284]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 8001714:	6810      	ldr	r0, [r2, #0]
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	2101      	movs	r1, #1
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	4203      	tst	r3, r0
 800172a:	4613      	mov	r3, r2
 800172c:	d002      	beq.n	8001734 <HAL_RCC_OscConfig+0x224>
 800172e:	68e2      	ldr	r2, [r4, #12]
 8001730:	428a      	cmp	r2, r1
 8001732:	d182      	bne.n	800163a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001734:	6858      	ldr	r0, [r3, #4]
 8001736:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 800173a:	fa92 f2a2 	rbit	r2, r2
 800173e:	fab2 f182 	clz	r1, r2
 8001742:	6922      	ldr	r2, [r4, #16]
 8001744:	408a      	lsls	r2, r1
 8001746:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 800174a:	430a      	orrs	r2, r1
 800174c:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174e:	e6e9      	b.n	8001524 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001750:	68e2      	ldr	r2, [r4, #12]
 8001752:	2501      	movs	r5, #1
 8001754:	b382      	cbz	r2, 80017b8 <HAL_RCC_OscConfig+0x2a8>
 8001756:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 800175a:	fab3 f383 	clz	r3, r3
 800175e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001762:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800176a:	f7ff fd3d 	bl	80011e8 <HAL_GetTick>
 800176e:	2702      	movs	r7, #2
 8001770:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001772:	4e2f      	ldr	r6, [pc, #188]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 8001774:	fa97 f3a7 	rbit	r3, r7
 8001778:	6832      	ldr	r2, [r6, #0]
 800177a:	fa97 f3a7 	rbit	r3, r7
 800177e:	fab3 f383 	clz	r3, r3
 8001782:	f003 031f 	and.w	r3, r3, #31
 8001786:	fa05 f303 	lsl.w	r3, r5, r3
 800178a:	4213      	tst	r3, r2
 800178c:	d00d      	beq.n	80017aa <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178e:	6871      	ldr	r1, [r6, #4]
 8001790:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001794:	fa93 f3a3 	rbit	r3, r3
 8001798:	fab3 f283 	clz	r2, r3
 800179c:	6923      	ldr	r3, [r4, #16]
 800179e:	4093      	lsls	r3, r2
 80017a0:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 80017a4:	4313      	orrs	r3, r2
 80017a6:	6073      	str	r3, [r6, #4]
 80017a8:	e6bc      	b.n	8001524 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017aa:	f7ff fd1d 	bl	80011e8 <HAL_GetTick>
 80017ae:	eba0 0008 	sub.w	r0, r0, r8
 80017b2:	2802      	cmp	r0, #2
 80017b4:	d9de      	bls.n	8001774 <HAL_RCC_OscConfig+0x264>
 80017b6:	e767      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
 80017b8:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80017bc:	fab3 f383 	clz	r3, r3
 80017c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017c4:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017cc:	f7ff fd0c 	bl	80011e8 <HAL_GetTick>
 80017d0:	2602      	movs	r6, #2
 80017d2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d4:	4f16      	ldr	r7, [pc, #88]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 80017d6:	fa96 f3a6 	rbit	r3, r6
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	fa96 f3a6 	rbit	r3, r6
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	fa05 f303 	lsl.w	r3, r5, r3
 80017ec:	4213      	tst	r3, r2
 80017ee:	f43f ae99 	beq.w	8001524 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f2:	f7ff fcf9 	bl	80011e8 <HAL_GetTick>
 80017f6:	eba0 0008 	sub.w	r0, r0, r8
 80017fa:	2802      	cmp	r0, #2
 80017fc:	d9eb      	bls.n	80017d6 <HAL_RCC_OscConfig+0x2c6>
 80017fe:	e743      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001800:	686b      	ldr	r3, [r5, #4]
 8001802:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001806:	4303      	orrs	r3, r0
 8001808:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800180a:	6869      	ldr	r1, [r5, #4]
 800180c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001810:	fa93 f3a3 	rbit	r3, r3
 8001814:	fab3 f283 	clz	r2, r3
 8001818:	69e3      	ldr	r3, [r4, #28]
 800181a:	4093      	lsls	r3, r2
 800181c:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001820:	4313      	orrs	r3, r2
 8001822:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001824:	f7ff fe34 	bl	8001490 <RCC_SetFlashLatencyFromMSIRange>
 8001828:	2800      	cmp	r0, #0
 800182a:	f43f aeb6 	beq.w	800159a <HAL_RCC_OscConfig+0x8a>
 800182e:	e704      	b.n	800163a <HAL_RCC_OscConfig+0x12a>
 8001830:	40023800 	.word	0x40023800
 8001834:	08006447 	.word	0x08006447
 8001838:	20000000 	.word	0x20000000
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800183c:	69a2      	ldr	r2, [r4, #24]
 800183e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001842:	2a00      	cmp	r2, #0
 8001844:	d037      	beq.n	80018b6 <HAL_RCC_OscConfig+0x3a6>
 8001846:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	2601      	movs	r6, #1
 8001850:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001854:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800185c:	f7ff fcc4 	bl	80011e8 <HAL_GetTick>
 8001860:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001864:	4680      	mov	r8, r0
 8001866:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800186a:	682a      	ldr	r2, [r5, #0]
 800186c:	fa97 f3a7 	rbit	r3, r7
 8001870:	fab3 f383 	clz	r3, r3
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	fa06 f303 	lsl.w	r3, r6, r3
 800187c:	4213      	tst	r3, r2
 800187e:	d013      	beq.n	80018a8 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001880:	686b      	ldr	r3, [r5, #4]
 8001882:	6a22      	ldr	r2, [r4, #32]
 8001884:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001888:	4313      	orrs	r3, r2
 800188a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800188c:	6869      	ldr	r1, [r5, #4]
 800188e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	fab3 f283 	clz	r2, r3
 800189a:	69e3      	ldr	r3, [r4, #28]
 800189c:	4093      	lsls	r3, r2
 800189e:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 80018a2:	4313      	orrs	r3, r2
 80018a4:	606b      	str	r3, [r5, #4]
 80018a6:	e696      	b.n	80015d6 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018a8:	f7ff fc9e 	bl	80011e8 <HAL_GetTick>
 80018ac:	eba0 0008 	sub.w	r0, r0, r8
 80018b0:	2802      	cmp	r0, #2
 80018b2:	d9d8      	bls.n	8001866 <HAL_RCC_OscConfig+0x356>
 80018b4:	e6e8      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
 80018b6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018c2:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018ca:	f7ff fc8d 	bl	80011e8 <HAL_GetTick>
 80018ce:	f44f 7600 	mov.w	r6, #512	; 0x200
 80018d2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80018d4:	2701      	movs	r7, #1
 80018d6:	fa96 f3a6 	rbit	r3, r6
 80018da:	682a      	ldr	r2, [r5, #0]
 80018dc:	fa96 f3a6 	rbit	r3, r6
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	fa07 f303 	lsl.w	r3, r7, r3
 80018ec:	4213      	tst	r3, r2
 80018ee:	f43f ae72 	beq.w	80015d6 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018f2:	f7ff fc79 	bl	80011e8 <HAL_GetTick>
 80018f6:	eba0 0008 	sub.w	r0, r0, r8
 80018fa:	2802      	cmp	r0, #2
 80018fc:	d9eb      	bls.n	80018d6 <HAL_RCC_OscConfig+0x3c6>
 80018fe:	e6c3      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001900:	6962      	ldr	r2, [r4, #20]
 8001902:	2501      	movs	r5, #1
 8001904:	49a9      	ldr	r1, [pc, #676]	; (8001bac <HAL_RCC_OscConfig+0x69c>)
 8001906:	b302      	cbz	r2, 800194a <HAL_RCC_OscConfig+0x43a>
 8001908:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 800190c:	fab3 f383 	clz	r3, r3
 8001910:	440b      	add	r3, r1
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8001916:	f7ff fc67 	bl	80011e8 <HAL_GetTick>
 800191a:	2602      	movs	r6, #2
 800191c:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	4fa4      	ldr	r7, [pc, #656]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 8001920:	fa96 f3a6 	rbit	r3, r6
 8001924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001926:	fa96 f3a6 	rbit	r3, r6
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	fa05 f303 	lsl.w	r3, r5, r3
 8001936:	4213      	tst	r3, r2
 8001938:	f47f ae51 	bne.w	80015de <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193c:	f7ff fc54 	bl	80011e8 <HAL_GetTick>
 8001940:	eba0 0008 	sub.w	r0, r0, r8
 8001944:	2802      	cmp	r0, #2
 8001946:	d9eb      	bls.n	8001920 <HAL_RCC_OscConfig+0x410>
 8001948:	e69e      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
 800194a:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 800194e:	fab3 f383 	clz	r3, r3
 8001952:	440b      	add	r3, r1
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001958:	f7ff fc46 	bl	80011e8 <HAL_GetTick>
 800195c:	2602      	movs	r6, #2
 800195e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001960:	4f93      	ldr	r7, [pc, #588]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 8001962:	fa96 f3a6 	rbit	r3, r6
 8001966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001968:	fa96 f3a6 	rbit	r3, r6
 800196c:	fab3 f383 	clz	r3, r3
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	fa05 f303 	lsl.w	r3, r5, r3
 8001978:	4213      	tst	r3, r2
 800197a:	f43f ae30 	beq.w	80015de <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800197e:	f7ff fc33 	bl	80011e8 <HAL_GetTick>
 8001982:	eba0 0008 	sub.w	r0, r0, r8
 8001986:	2802      	cmp	r0, #2
 8001988:	d9eb      	bls.n	8001962 <HAL_RCC_OscConfig+0x452>
 800198a:	e67d      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198c:	4b88      	ldr	r3, [pc, #544]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 800198e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001990:	00d1      	lsls	r1, r2, #3
 8001992:	d434      	bmi.n	80019fe <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8001994:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001998:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800199c:	625a      	str	r2, [r3, #36]	; 0x24
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	4d82      	ldr	r5, [pc, #520]	; (8001bb4 <HAL_RCC_OscConfig+0x6a4>)
 80019aa:	682b      	ldr	r3, [r5, #0]
 80019ac:	05da      	lsls	r2, r3, #23
 80019ae:	d528      	bpl.n	8001a02 <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b0:	68a3      	ldr	r3, [r4, #8]
 80019b2:	4d7f      	ldr	r5, [pc, #508]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d134      	bne.n	8001a22 <HAL_RCC_OscConfig+0x512>
 80019b8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80019ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019be:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80019c0:	f7ff fc12 	bl	80011e8 <HAL_GetTick>
 80019c4:	f44f 7500 	mov.w	r5, #512	; 0x200
 80019c8:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ca:	2701      	movs	r7, #1
 80019cc:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8001bb0 <HAL_RCC_OscConfig+0x6a0>
 80019d0:	fa95 f3a5 	rbit	r3, r5
 80019d4:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80019d8:	fa95 f3a5 	rbit	r3, r5
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	fa07 f303 	lsl.w	r3, r7, r3
 80019e8:	4213      	tst	r3, r2
 80019ea:	d04e      	beq.n	8001a8a <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 80019ec:	2e00      	cmp	r6, #0
 80019ee:	f43f adfa 	beq.w	80015e6 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f2:	4a6f      	ldr	r2, [pc, #444]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 80019f4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80019f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019fa:	6253      	str	r3, [r2, #36]	; 0x24
 80019fc:	e5f3      	b.n	80015e6 <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 80019fe:	2600      	movs	r6, #0
 8001a00:	e7d2      	b.n	80019a8 <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a02:	682b      	ldr	r3, [r5, #0]
 8001a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a08:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fbed 	bl	80011e8 <HAL_GetTick>
 8001a0e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	682b      	ldr	r3, [r5, #0]
 8001a12:	05db      	lsls	r3, r3, #23
 8001a14:	d4cc      	bmi.n	80019b0 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a16:	f7ff fbe7 	bl	80011e8 <HAL_GetTick>
 8001a1a:	1bc0      	subs	r0, r0, r7
 8001a1c:	2864      	cmp	r0, #100	; 0x64
 8001a1e:	d9f7      	bls.n	8001a10 <HAL_RCC_OscConfig+0x500>
 8001a20:	e632      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a22:	bb23      	cbnz	r3, 8001a6e <HAL_RCC_OscConfig+0x55e>
 8001a24:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a26:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001a2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a2e:	636b      	str	r3, [r5, #52]	; 0x34
 8001a30:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a32:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a3a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001a3c:	f7ff fbd4 	bl	80011e8 <HAL_GetTick>
 8001a40:	4681      	mov	r9, r0
 8001a42:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a46:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001a48:	fa97 f3a7 	rbit	r3, r7
 8001a4c:	fab3 f383 	clz	r3, r3
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	fa08 f303 	lsl.w	r3, r8, r3
 8001a58:	4213      	tst	r3, r2
 8001a5a:	d0c7      	beq.n	80019ec <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a5c:	f7ff fbc4 	bl	80011e8 <HAL_GetTick>
 8001a60:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a64:	eba0 0009 	sub.w	r0, r0, r9
 8001a68:	4298      	cmp	r0, r3
 8001a6a:	d9ea      	bls.n	8001a42 <HAL_RCC_OscConfig+0x532>
 8001a6c:	e60c      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6e:	2b05      	cmp	r3, #5
 8001a70:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a72:	d103      	bne.n	8001a7c <HAL_RCC_OscConfig+0x56c>
 8001a74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a78:	636b      	str	r3, [r5, #52]	; 0x34
 8001a7a:	e79d      	b.n	80019b8 <HAL_RCC_OscConfig+0x4a8>
 8001a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a80:	636b      	str	r3, [r5, #52]	; 0x34
 8001a82:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a88:	e799      	b.n	80019be <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a8a:	f7ff fbad 	bl	80011e8 <HAL_GetTick>
 8001a8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a92:	eba0 0009 	sub.w	r0, r0, r9
 8001a96:	4298      	cmp	r0, r3
 8001a98:	d99a      	bls.n	80019d0 <HAL_RCC_OscConfig+0x4c0>
 8001a9a:	e5f5      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a9c:	4d44      	ldr	r5, [pc, #272]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 8001a9e:	68ab      	ldr	r3, [r5, #8]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b0c      	cmp	r3, #12
 8001aa6:	f43f adc8 	beq.w	800163a <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aaa:	2a02      	cmp	r2, #2
 8001aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ab0:	d156      	bne.n	8001b60 <HAL_RCC_OscConfig+0x650>
 8001ab2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	2200      	movs	r2, #0
 8001abc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ac0:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fb8e 	bl	80011e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001acc:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 8001ace:	4680      	mov	r8, r0
 8001ad0:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad4:	2501      	movs	r5, #1
 8001ad6:	fa97 f3a7 	rbit	r3, r7
 8001ada:	6832      	ldr	r2, [r6, #0]
 8001adc:	fa97 f3a7 	rbit	r3, r7
 8001ae0:	fab3 f383 	clz	r3, r3
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	fa05 f303 	lsl.w	r3, r5, r3
 8001aec:	4213      	tst	r3, r2
 8001aee:	d130      	bne.n	8001b52 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af0:	68b2      	ldr	r2, [r6, #8]
 8001af2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001af4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001af6:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8001afa:	430b      	orrs	r3, r1
 8001afc:	4313      	orrs	r3, r2
 8001afe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60b3      	str	r3, [r6, #8]
 8001b04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b08:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001b0c:	fab3 f383 	clz	r3, r3
 8001b10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b14:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fb64 	bl	80011e8 <HAL_GetTick>
 8001b20:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001b24:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b26:	2501      	movs	r5, #1
 8001b28:	4e21      	ldr	r6, [pc, #132]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 8001b2a:	fa94 f3a4 	rbit	r3, r4
 8001b2e:	6832      	ldr	r2, [r6, #0]
 8001b30:	fa94 f3a4 	rbit	r3, r4
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	fa05 f303 	lsl.w	r3, r5, r3
 8001b40:	4213      	tst	r3, r2
 8001b42:	f47f ad54 	bne.w	80015ee <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b46:	f7ff fb4f 	bl	80011e8 <HAL_GetTick>
 8001b4a:	1bc0      	subs	r0, r0, r7
 8001b4c:	2802      	cmp	r0, #2
 8001b4e:	d9ec      	bls.n	8001b2a <HAL_RCC_OscConfig+0x61a>
 8001b50:	e59a      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b52:	f7ff fb49 	bl	80011e8 <HAL_GetTick>
 8001b56:	eba0 0008 	sub.w	r0, r0, r8
 8001b5a:	2802      	cmp	r0, #2
 8001b5c:	d9bb      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x5c6>
 8001b5e:	e593      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
 8001b60:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b6e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b76:	f7ff fb37 	bl	80011e8 <HAL_GetTick>
 8001b7a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001b7e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b80:	2601      	movs	r6, #1
 8001b82:	fa94 f3a4 	rbit	r3, r4
 8001b86:	682a      	ldr	r2, [r5, #0]
 8001b88:	fa94 f3a4 	rbit	r3, r4
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	fa06 f303 	lsl.w	r3, r6, r3
 8001b98:	4213      	tst	r3, r2
 8001b9a:	f43f ad28 	beq.w	80015ee <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff fb23 	bl	80011e8 <HAL_GetTick>
 8001ba2:	1bc0      	subs	r0, r0, r7
 8001ba4:	2802      	cmp	r0, #2
 8001ba6:	d9ec      	bls.n	8001b82 <HAL_RCC_OscConfig+0x672>
 8001ba8:	e56e      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
 8001baa:	bf00      	nop
 8001bac:	1091c1a0 	.word	0x1091c1a0
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40007000 	.word	0x40007000

08001bb8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001bb8:	491e      	ldr	r1, [pc, #120]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8001bba:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8001bbc:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8001bbe:	f003 020c 	and.w	r2, r3, #12
 8001bc2:	2a08      	cmp	r2, #8
 8001bc4:	d005      	beq.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x1a>
 8001bc6:	2a0c      	cmp	r2, #12
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x1e>
 8001bca:	2a04      	cmp	r2, #4
 8001bcc:	d122      	bne.n	8001c14 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 8001bce:	481a      	ldr	r0, [pc, #104]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x80>)
}
 8001bd0:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001bd2:	481a      	ldr	r0, [pc, #104]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x84>)
 8001bd4:	bd10      	pop	{r4, pc}
 8001bd6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001bda:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001bde:	fab2 f282 	clz	r2, r2
 8001be2:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8001be6:	fa20 f202 	lsr.w	r2, r0, r2
 8001bea:	4815      	ldr	r0, [pc, #84]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x88>)
 8001bec:	5c84      	ldrb	r4, [r0, r2]
 8001bee:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8001bf2:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001bf6:	fab0 f280 	clz	r2, r0
 8001bfa:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bfe:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001c00:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c02:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8001c04:	bf4c      	ite	mi
 8001c06:	4b0d      	ldrmi	r3, [pc, #52]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8001c08:	4b0b      	ldrpl	r3, [pc, #44]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001c0a:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 8001c0c:	4363      	muls	r3, r4
 8001c0e:	fbb3 f0f0 	udiv	r0, r3, r0
 8001c12:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8001c14:	6848      	ldr	r0, [r1, #4]
 8001c16:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8001c26:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8001c28:	1c43      	adds	r3, r0, #1
 8001c2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c2e:	4098      	lsls	r0, r3
 8001c30:	bd10      	pop	{r4, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	00f42400 	.word	0x00f42400
 8001c3c:	007a1200 	.word	0x007a1200
 8001c40:	0800645f 	.word	0x0800645f

08001c44 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c44:	4b6a      	ldr	r3, [pc, #424]	; (8001df0 <HAL_RCC_ClockConfig+0x1ac>)
{
 8001c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c4a:	681a      	ldr	r2, [r3, #0]
{
 8001c4c:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c4e:	f002 0201 	and.w	r2, r2, #1
 8001c52:	428a      	cmp	r2, r1
{
 8001c54:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c56:	d330      	bcc.n	8001cba <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c58:	6832      	ldr	r2, [r6, #0]
 8001c5a:	0794      	lsls	r4, r2, #30
 8001c5c:	d440      	bmi.n	8001ce0 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5e:	07d0      	lsls	r0, r2, #31
 8001c60:	d446      	bmi.n	8001cf0 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c62:	4b63      	ldr	r3, [pc, #396]	; (8001df0 <HAL_RCC_ClockConfig+0x1ac>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	f002 0201 	and.w	r2, r2, #1
 8001c6a:	4295      	cmp	r5, r2
 8001c6c:	f0c0 80ae 	bcc.w	8001dcc <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c70:	6832      	ldr	r2, [r6, #0]
 8001c72:	0751      	lsls	r1, r2, #29
 8001c74:	f100 80b3 	bmi.w	8001dde <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c78:	0713      	lsls	r3, r2, #28
 8001c7a:	d507      	bpl.n	8001c8c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c7c:	4a5d      	ldr	r2, [pc, #372]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c7e:	6931      	ldr	r1, [r6, #16]
 8001c80:	6893      	ldr	r3, [r2, #8]
 8001c82:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001c86:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c8a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c8c:	f7ff ff94 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 8001c90:	4b58      	ldr	r3, [pc, #352]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c92:	22f0      	movs	r2, #240	; 0xf0
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	fa92 f2a2 	rbit	r2, r2
 8001c9a:	fab2 f282 	clz	r2, r2
 8001c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca2:	40d3      	lsrs	r3, r2
 8001ca4:	4a54      	ldr	r2, [pc, #336]	; (8001df8 <HAL_RCC_ClockConfig+0x1b4>)
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	40d8      	lsrs	r0, r3
 8001caa:	4b54      	ldr	r3, [pc, #336]	; (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001cac:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff fa72 	bl	8001198 <HAL_InitTick>
  return HAL_OK;
 8001cb4:	2000      	movs	r0, #0
}
 8001cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	2901      	cmp	r1, #1
 8001cbc:	bf02      	ittt	eq
 8001cbe:	681a      	ldreq	r2, [r3, #0]
 8001cc0:	f042 0204 	orreq.w	r2, r2, #4
 8001cc4:	601a      	streq	r2, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	f022 0201 	bic.w	r2, r2, #1
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	4299      	cmp	r1, r3
 8001cd8:	d0be      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001cda:	2001      	movs	r0, #1
 8001cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce0:	4944      	ldr	r1, [pc, #272]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001ce2:	68b0      	ldr	r0, [r6, #8]
 8001ce4:	688b      	ldr	r3, [r1, #8]
 8001ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cea:	4303      	orrs	r3, r0
 8001cec:	608b      	str	r3, [r1, #8]
 8001cee:	e7b6      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf0:	6872      	ldr	r2, [r6, #4]
 8001cf2:	4940      	ldr	r1, [pc, #256]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001cf4:	2a02      	cmp	r2, #2
 8001cf6:	d10f      	bne.n	8001d18 <HAL_RCC_ClockConfig+0xd4>
 8001cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cfc:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001d00:	6808      	ldr	r0, [r1, #0]
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	4203      	tst	r3, r0
 8001d16:	e013      	b.n	8001d40 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d18:	2a03      	cmp	r2, #3
 8001d1a:	d102      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xde>
 8001d1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d20:	e7ec      	b.n	8001cfc <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d22:	2a01      	cmp	r2, #1
 8001d24:	d129      	bne.n	8001d7a <HAL_RCC_ClockConfig+0x136>
 8001d26:	2302      	movs	r3, #2
 8001d28:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	6809      	ldr	r1, [r1, #0]
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001d40:	d0cb      	beq.n	8001cda <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d42:	4c2c      	ldr	r4, [pc, #176]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d44:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d48:	68a3      	ldr	r3, [r4, #8]
 8001d4a:	f023 0303 	bic.w	r3, r3, #3
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001d52:	f7ff fa49 	bl	80011e8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d56:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001d58:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d110      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d5e:	68a3      	ldr	r3, [r4, #8]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	f43f af7c 	beq.w	8001c62 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6a:	f7ff fa3d 	bl	80011e8 <HAL_GetTick>
 8001d6e:	1bc0      	subs	r0, r0, r7
 8001d70:	4540      	cmp	r0, r8
 8001d72:	d9f4      	bls.n	8001d5e <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8001d74:	2003      	movs	r0, #3
 8001d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d7e:	e7bd      	b.n	8001cfc <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d10b      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d84:	68a3      	ldr	r3, [r4, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	f43f af69 	beq.w	8001c62 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d90:	f7ff fa2a 	bl	80011e8 <HAL_GetTick>
 8001d94:	1bc0      	subs	r0, r0, r7
 8001d96:	4540      	cmp	r0, r8
 8001d98:	d9f4      	bls.n	8001d84 <HAL_RCC_ClockConfig+0x140>
 8001d9a:	e7eb      	b.n	8001d74 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d110      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001da0:	68a3      	ldr	r3, [r4, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	f43f af5b 	beq.w	8001c62 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dac:	f7ff fa1c 	bl	80011e8 <HAL_GetTick>
 8001db0:	1bc0      	subs	r0, r0, r7
 8001db2:	4540      	cmp	r0, r8
 8001db4:	d9f4      	bls.n	8001da0 <HAL_RCC_ClockConfig+0x15c>
 8001db6:	e7dd      	b.n	8001d74 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db8:	f7ff fa16 	bl	80011e8 <HAL_GetTick>
 8001dbc:	1bc0      	subs	r0, r0, r7
 8001dbe:	4540      	cmp	r0, r8
 8001dc0:	d8d8      	bhi.n	8001d74 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001dc2:	68a3      	ldr	r3, [r4, #8]
 8001dc4:	f013 0f0c 	tst.w	r3, #12
 8001dc8:	d1f6      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x174>
 8001dca:	e74a      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	f022 0201 	bic.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	07da      	lsls	r2, r3, #31
 8001dd8:	f53f af7f 	bmi.w	8001cda <HAL_RCC_ClockConfig+0x96>
 8001ddc:	e748      	b.n	8001c70 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dde:	4905      	ldr	r1, [pc, #20]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001de0:	68f0      	ldr	r0, [r6, #12]
 8001de2:	688b      	ldr	r3, [r1, #8]
 8001de4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001de8:	4303      	orrs	r3, r0
 8001dea:	608b      	str	r3, [r1, #8]
 8001dec:	e744      	b.n	8001c78 <HAL_RCC_ClockConfig+0x34>
 8001dee:	bf00      	nop
 8001df0:	40023c00 	.word	0x40023c00
 8001df4:	40023800 	.word	0x40023800
 8001df8:	08006447 	.word	0x08006447
 8001dfc:	20000000 	.word	0x20000000

08001e00 <HAL_RCC_GetHCLKFreq>:
}
 8001e00:	4b01      	ldr	r3, [pc, #4]	; (8001e08 <HAL_RCC_GetHCLKFreq+0x8>)
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000000 	.word	0x20000000

08001e0c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	fa92 f2a2 	rbit	r2, r2
 8001e18:	fab2 f282 	clz	r2, r2
 8001e1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e20:	40d3      	lsrs	r3, r2
 8001e22:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e24:	5cd3      	ldrb	r3, [r2, r3]
 8001e26:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001e28:	6810      	ldr	r0, [r2, #0]
}    
 8001e2a:	40d8      	lsrs	r0, r3
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	08006457 	.word	0x08006457
 8001e38:	20000000 	.word	0x20000000

08001e3c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e3e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	fa92 f2a2 	rbit	r2, r2
 8001e48:	fab2 f282 	clz	r2, r2
 8001e4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001e50:	40d3      	lsrs	r3, r2
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e54:	5cd3      	ldrb	r3, [r2, r3]
 8001e56:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001e58:	6810      	ldr	r0, [r2, #0]
} 
 8001e5a:	40d8      	lsrs	r0, r3
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	08006457 	.word	0x08006457
 8001e68:	20000000 	.word	0x20000000

08001e6c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e6c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8001e70:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e72:	d00e      	beq.n	8001e92 <TIM_Base_SetConfig+0x26>
 8001e74:	4a1c      	ldr	r2, [pc, #112]	; (8001ee8 <TIM_Base_SetConfig+0x7c>)
 8001e76:	4290      	cmp	r0, r2
 8001e78:	d00b      	beq.n	8001e92 <TIM_Base_SetConfig+0x26>
 8001e7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e7e:	4290      	cmp	r0, r2
 8001e80:	d007      	beq.n	8001e92 <TIM_Base_SetConfig+0x26>
 8001e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e86:	4290      	cmp	r0, r2
 8001e88:	d003      	beq.n	8001e92 <TIM_Base_SetConfig+0x26>
 8001e8a:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8001e8e:	4290      	cmp	r0, r2
 8001e90:	d116      	bne.n	8001ec0 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001e92:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e98:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 8001e9c:	ea43 0302 	orr.w	r3, r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ea0:	d015      	beq.n	8001ece <TIM_Base_SetConfig+0x62>
 8001ea2:	4a11      	ldr	r2, [pc, #68]	; (8001ee8 <TIM_Base_SetConfig+0x7c>)
 8001ea4:	4290      	cmp	r0, r2
 8001ea6:	d012      	beq.n	8001ece <TIM_Base_SetConfig+0x62>
 8001ea8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eac:	4290      	cmp	r0, r2
 8001eae:	d00e      	beq.n	8001ece <TIM_Base_SetConfig+0x62>
 8001eb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eb4:	4290      	cmp	r0, r2
 8001eb6:	d00a      	beq.n	8001ece <TIM_Base_SetConfig+0x62>
 8001eb8:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8001ebc:	4290      	cmp	r0, r2
 8001ebe:	d006      	beq.n	8001ece <TIM_Base_SetConfig+0x62>
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <TIM_Base_SetConfig+0x80>)
 8001ec2:	4290      	cmp	r0, r2
 8001ec4:	d003      	beq.n	8001ece <TIM_Base_SetConfig+0x62>
 8001ec6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eca:	4290      	cmp	r0, r2
 8001ecc:	d103      	bne.n	8001ed6 <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ece:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ed4:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001ed6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ed8:	688b      	ldr	r3, [r1, #8]
 8001eda:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001edc:	680b      	ldr	r3, [r1, #0]
 8001ede:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler */
  TIMx->EGR = TIM_EGR_UG;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	6143      	str	r3, [r0, #20]
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40010c00 	.word	0x40010c00

08001ef0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ef0:	6a03      	ldr	r3, [r0, #32]
{
 8001ef2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001efa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001efc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001efe:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f00:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f02:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001f06:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f08:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001f0a:	f023 0302 	bic.w	r3, r3, #2

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f0e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f10:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f12:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8001f14:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8001f16:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f18:	6203      	str	r3, [r0, #32]
 8001f1a:	bd30      	pop	{r4, r5, pc}

08001f1c <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f1c:	6a03      	ldr	r3, [r0, #32]
{
 8001f1e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f20:	f023 0310 	bic.w	r3, r3, #16
 8001f24:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f26:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f2a:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001f2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f2e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001f32:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001f36:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001f38:	f023 0320 	bic.w	r3, r3, #32

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f3c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f3e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f40:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001f42:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCR2 = OC_Config->Pulse;
 8001f46:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f48:	6203      	str	r3, [r0, #32]
 8001f4a:	bd30      	pop	{r4, r5, pc}

08001f4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001f4c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f4e:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001f50:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f54:	f024 0401 	bic.w	r4, r4, #1
 8001f58:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f5a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001f5c:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001f5e:	d00e      	beq.n	8001f7e <TIM_TI1_SetConfig+0x32>
 8001f60:	4e10      	ldr	r6, [pc, #64]	; (8001fa4 <TIM_TI1_SetConfig+0x58>)
 8001f62:	42b0      	cmp	r0, r6
 8001f64:	d00b      	beq.n	8001f7e <TIM_TI1_SetConfig+0x32>
 8001f66:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f6a:	42b0      	cmp	r0, r6
 8001f6c:	d007      	beq.n	8001f7e <TIM_TI1_SetConfig+0x32>
 8001f6e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f72:	42b0      	cmp	r0, r6
 8001f74:	d003      	beq.n	8001f7e <TIM_TI1_SetConfig+0x32>
 8001f76:	f506 467c 	add.w	r6, r6, #64512	; 0xfc00
 8001f7a:	42b0      	cmp	r0, r6
 8001f7c:	d10f      	bne.n	8001f9e <TIM_TI1_SetConfig+0x52>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001f7e:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8001f82:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 8001f84:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f86:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 8001f8a:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f8c:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001f90:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 8001f94:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001f96:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f98:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f9a:	6201      	str	r1, [r0, #32]
}
 8001f9c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001f9e:	f044 0201 	orr.w	r2, r4, #1
 8001fa2:	e7ef      	b.n	8001f84 <TIM_TI1_SetConfig+0x38>
 8001fa4:	40000400 	.word	0x40000400

08001fa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001fa8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001faa:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001fac:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8001fae:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001fb0:	ea23 0304 	bic.w	r3, r3, r4
 8001fb4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001fb6:	6a03      	ldr	r3, [r0, #32]
 8001fb8:	408a      	lsls	r2, r1
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	6202      	str	r2, [r0, #32]
 8001fbe:	bd10      	pop	{r4, pc}

08001fc0 <HAL_TIM_Base_Init>:
{
 8001fc0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001fc2:	4604      	mov	r4, r0
 8001fc4:	b1a0      	cbz	r0, 8001ff0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001fc6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001fca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fce:	b91b      	cbnz	r3, 8001fd8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001fd0:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_Base_MspInit(htim);
 8001fd4:	f001 fd2c 	bl	8003a30 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001fd8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fda:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001fdc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe0:	1d21      	adds	r1, r4, #4
 8001fe2:	f7ff ff43 	bl	8001e6c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001fe6:	2301      	movs	r3, #1
  return HAL_OK;
 8001fe8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001fea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001fee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ff0:	2001      	movs	r0, #1
}
 8001ff2:	bd10      	pop	{r4, pc}

08001ff4 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ff4:	6803      	ldr	r3, [r0, #0]
}
 8001ff6:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]
}
 8002008:	4770      	bx	lr

0800200a <HAL_TIM_PWM_MspInit>:
 800200a:	4770      	bx	lr

0800200c <HAL_TIM_PWM_Init>:
{
 800200c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800200e:	4604      	mov	r4, r0
 8002010:	b1a0      	cbz	r0, 800203c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002012:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002016:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800201a:	b91b      	cbnz	r3, 8002024 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800201c:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_PWM_MspInit(htim);
 8002020:	f7ff fff3 	bl	800200a <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002024:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002026:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002028:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800202c:	1d21      	adds	r1, r4, #4
 800202e:	f7ff ff1d 	bl	8001e6c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002032:	2301      	movs	r3, #1
  return HAL_OK;
 8002034:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002036:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800203a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800203c:	2001      	movs	r0, #1
}
 800203e:	bd10      	pop	{r4, pc}

08002040 <HAL_TIM_IC_MspInit>:
 8002040:	4770      	bx	lr

08002042 <HAL_TIM_IC_Init>:
{
 8002042:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002044:	4604      	mov	r4, r0
 8002046:	b1a0      	cbz	r0, 8002072 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002048:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800204c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002050:	b91b      	cbnz	r3, 800205a <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002052:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_IC_MspInit(htim);
 8002056:	f7ff fff3 	bl	8002040 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800205a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800205c:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800205e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002062:	1d21      	adds	r1, r4, #4
 8002064:	f7ff ff02 	bl	8001e6c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002068:	2301      	movs	r3, #1
  return HAL_OK;
 800206a:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800206c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002070:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002072:	2001      	movs	r0, #1
}
 8002074:	bd10      	pop	{r4, pc}

08002076 <HAL_TIM_IC_Start>:
{
 8002076:	b510      	push	{r4, lr}
 8002078:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800207a:	2201      	movs	r2, #1
 800207c:	6800      	ldr	r0, [r0, #0]
 800207e:	f7ff ff93 	bl	8001fa8 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8002082:	6822      	ldr	r2, [r4, #0]
}
 8002084:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8002086:	6813      	ldr	r3, [r2, #0]
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6013      	str	r3, [r2, #0]
}
 800208e:	bd10      	pop	{r4, pc}

08002090 <HAL_TIM_PWM_Start>:
 8002090:	f7ff bff1 	b.w	8002076 <HAL_TIM_IC_Start>

08002094 <HAL_TIM_Encoder_Init>:
{
 8002094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002096:	460c      	mov	r4, r1
  if(htim == NULL)
 8002098:	4605      	mov	r5, r0
 800209a:	2800      	cmp	r0, #0
 800209c:	d041      	beq.n	8002122 <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 800209e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80020a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020a6:	b91b      	cbnz	r3, 80020b0 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 80020a8:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_Encoder_MspInit(htim);
 80020ac:	f001 fc7e 	bl	80039ac <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80020b0:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;
 80020b2:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80020b4:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;
 80020b8:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80020bc:	6883      	ldr	r3, [r0, #8]
 80020be:	f023 0307 	bic.w	r3, r3, #7
 80020c2:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c4:	f7ff fed2 	bl	8001e6c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 80020c8:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 80020ca:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 80020cc:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 80020ce:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 80020d0:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 80020d2:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 80020d4:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80020d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80020da:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 80020de:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 80020e2:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80020e4:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80020e8:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
 80020ea:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80020f2:	68e1      	ldr	r1, [r4, #12]
  tmpccer = htim->Instance->CCER;
 80020f4:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80020f6:	430b      	orrs	r3, r1
 80020f8:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80020fa:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80020fe:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002102:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 8002104:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002106:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 800210a:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 800210c:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800210e:	6183      	str	r3, [r0, #24]
  htim->State= HAL_TIM_STATE_READY;
 8002110:	2301      	movs	r3, #1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 8002112:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 8002116:	4317      	orrs	r7, r2
  htim->Instance->CCER = tmpccer;
 8002118:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 800211a:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  return HAL_OK;
 800211e:	2000      	movs	r0, #0
 8002120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002122:	2001      	movs	r0, #1
}
 8002124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002126 <HAL_TIM_Encoder_Start>:
{
 8002126:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8002128:	b189      	cbz	r1, 800214e <HAL_TIM_Encoder_Start+0x28>
 800212a:	2904      	cmp	r1, #4
 800212c:	d007      	beq.n	800213e <HAL_TIM_Encoder_Start+0x18>
  TIMx->CCER &= ~tmp;
 800212e:	6a1a      	ldr	r2, [r3, #32]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002136:	6a1a      	ldr	r2, [r3, #32]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 800213e:	6a1a      	ldr	r2, [r3, #32]
 8002140:	f022 0210 	bic.w	r2, r2, #16
 8002144:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002146:	6a1a      	ldr	r2, [r3, #32]
 8002148:	f042 0210 	orr.w	r2, r2, #16
 800214c:	e006      	b.n	800215c <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 800214e:	6a1a      	ldr	r2, [r3, #32]
 8002150:	f022 0201 	bic.w	r2, r2, #1
 8002154:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002156:	6a1a      	ldr	r2, [r3, #32]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 800215e:	681a      	ldr	r2, [r3, #0]
}
 8002160:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]
}
 8002168:	4770      	bx	lr

0800216a <HAL_TIM_IC_ConfigChannel>:
{
 800216a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800216c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8002170:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002172:	2b01      	cmp	r3, #1
{
 8002174:	460d      	mov	r5, r1
 8002176:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800217a:	d019      	beq.n	80021b0 <HAL_TIM_IC_ConfigChannel+0x46>
 800217c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800217e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  __HAL_LOCK(htim);
 8002182:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (Channel == TIM_CHANNEL_1)
 8002186:	b9a2      	cbnz	r2, 80021b2 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8002188:	68cb      	ldr	r3, [r1, #12]
 800218a:	6820      	ldr	r0, [r4, #0]
 800218c:	c906      	ldmia	r1, {r1, r2}
 800218e:	f7ff fedd 	bl	8001f4c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002192:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002194:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002196:	699a      	ldr	r2, [r3, #24]
 8002198:	f022 020c 	bic.w	r2, r2, #12
 800219c:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800219e:	699a      	ldr	r2, [r3, #24]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80021a4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80021a6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80021a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(htim);
 80021ac:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 80021b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 80021b2:	2a04      	cmp	r2, #4
 80021b4:	688e      	ldr	r6, [r1, #8]
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	c982      	ldmia	r1, {r1, r7}
 80021ba:	68e8      	ldr	r0, [r5, #12]
 80021bc:	d11f      	bne.n	80021fe <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021be:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 80021c0:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021c2:	f022 0210 	bic.w	r2, r2, #16
 80021c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021c8:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 80021ca:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80021cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8);
 80021d0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 80021d4:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021d6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80021da:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 80021dc:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80021de:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021e2:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80021e6:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80021e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021ea:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80021f2:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8);
 80021f4:	699a      	ldr	r2, [r3, #24]
 80021f6:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80021fa:	619e      	str	r6, [r3, #24]
 80021fc:	e7d2      	b.n	80021a4 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 80021fe:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002200:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8002202:	d11c      	bne.n	800223e <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002208:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800220a:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 800220c:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800220e:	f022 0203 	bic.w	r2, r2, #3
  tmpccer = TIMx->CCER;
 8002212:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= TIM_ICSelection;
 8002214:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 8002216:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002218:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800221c:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 800221e:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002220:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002224:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002228:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 800222a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800222c:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800222e:	69da      	ldr	r2, [r3, #28]
 8002230:	f022 020c 	bic.w	r2, r2, #12
 8002234:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002236:	69da      	ldr	r2, [r3, #28]
 8002238:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
 800223a:	61de      	str	r6, [r3, #28]
 800223c:	e7b2      	b.n	80021a4 <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800223e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002242:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002244:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 8002246:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002248:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccer = TIMx->CCER;
 800224c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= (TIM_ICSelection << 8);
 800224e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002252:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 8002256:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002258:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 800225a:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800225c:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002260:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002264:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8002266:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002268:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800226a:	69da      	ldr	r2, [r3, #28]
 800226c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002270:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
 8002272:	69da      	ldr	r2, [r3, #28]
 8002274:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002278:	e7df      	b.n	800223a <HAL_TIM_IC_ConfigChannel+0xd0>

0800227a <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800227a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 800227e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002280:	2b01      	cmp	r3, #1
{
 8002282:	4605      	mov	r5, r0
 8002284:	460c      	mov	r4, r1
 8002286:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800228a:	d025      	beq.n	80022d8 <HAL_TIM_PWM_ConfigChannel+0x5e>
 800228c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800228e:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
  __HAL_LOCK(htim);
 8002292:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
  switch (Channel)
 8002296:	2a0c      	cmp	r2, #12
 8002298:	d818      	bhi.n	80022cc <HAL_TIM_PWM_ConfigChannel+0x52>
 800229a:	e8df f002 	tbb	[pc, r2]
 800229e:	1707      	.short	0x1707
 80022a0:	171e1717 	.word	0x171e1717
 80022a4:	172f1717 	.word	0x172f1717
 80022a8:	1717      	.short	0x1717
 80022aa:	52          	.byte	0x52
 80022ab:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022ac:	6828      	ldr	r0, [r5, #0]
 80022ae:	f7ff fe1f 	bl	8001ef0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022b2:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022b4:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022b6:	699a      	ldr	r2, [r3, #24]
 80022b8:	f042 0208 	orr.w	r2, r2, #8
 80022bc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022be:	699a      	ldr	r2, [r3, #24]
 80022c0:	f022 0204 	bic.w	r2, r2, #4
 80022c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022c6:	699a      	ldr	r2, [r3, #24]
 80022c8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80022ca:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80022cc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80022ce:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80022d0:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  __HAL_UNLOCK(htim);
 80022d4:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
}
 80022d8:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022da:	6828      	ldr	r0, [r5, #0]
 80022dc:	f7ff fe1e 	bl	8001f1c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022e0:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80022e2:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80022fa:	e7e6      	b.n	80022ca <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022fc:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= OC_Config->OCMode;
 80022fe:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002300:	6a1a      	ldr	r2, [r3, #32]
 8002302:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002306:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8002308:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800230a:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800230c:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800230e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002312:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002316:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002318:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 800231a:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800231c:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800231e:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002320:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  TIMx->CCR3 = OC_Config->Pulse;
 8002324:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8002326:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002328:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800232a:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800232c:	f042 0208 	orr.w	r2, r2, #8
 8002330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	f022 0204 	bic.w	r2, r2, #4
 8002338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800233a:	69da      	ldr	r2, [r3, #28]
 800233c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800233e:	61da      	str	r2, [r3, #28]
    break;
 8002340:	e7c4      	b.n	80022cc <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002342:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002344:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002346:	6a1a      	ldr	r2, [r3, #32]
 8002348:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800234c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800234e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002350:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002352:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8002354:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002358:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 800235c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 8002360:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8002362:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002364:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002366:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12);
 8002368:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 800236c:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800236e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002370:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002372:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002382:	69da      	ldr	r2, [r3, #28]
 8002384:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002388:	e7d9      	b.n	800233e <HAL_TIM_PWM_ConfigChannel+0xc4>

0800238a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800238a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 800238e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002390:	2b01      	cmp	r3, #1
 8002392:	f04f 0302 	mov.w	r3, #2
 8002396:	d01c      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0x48>
 8002398:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800239a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  tmpsmcr = htim->Instance->SMCR;
 800239e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80023a0:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  tmpsmcr = htim->Instance->SMCR;
 80023a4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80023aa:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80023ae:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80023b0:	680a      	ldr	r2, [r1, #0]
 80023b2:	2a40      	cmp	r2, #64	; 0x40
 80023b4:	d079      	beq.n	80024aa <HAL_TIM_ConfigClockSource+0x120>
 80023b6:	d819      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x62>
 80023b8:	2a10      	cmp	r2, #16
 80023ba:	f000 8093 	beq.w	80024e4 <HAL_TIM_ConfigClockSource+0x15a>
 80023be:	d80a      	bhi.n	80023d6 <HAL_TIM_ConfigClockSource+0x4c>
 80023c0:	2a00      	cmp	r2, #0
 80023c2:	f000 8089 	beq.w	80024d8 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80023c6:	2301      	movs	r3, #1
 80023c8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  __HAL_UNLOCK(htim);
 80023cc:	2300      	movs	r3, #0
 80023ce:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  __HAL_LOCK(htim);
 80023d2:	4618      	mov	r0, r3
}
 80023d4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80023d6:	2a20      	cmp	r2, #32
 80023d8:	f000 808a 	beq.w	80024f0 <HAL_TIM_ConfigClockSource+0x166>
 80023dc:	2a30      	cmp	r2, #48	; 0x30
 80023de:	d1f2      	bne.n	80023c6 <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 80023e0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80023e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80023e6:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80023ea:	e036      	b.n	800245a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80023ec:	2a70      	cmp	r2, #112	; 0x70
 80023ee:	d036      	beq.n	800245e <HAL_TIM_ConfigClockSource+0xd4>
 80023f0:	d81b      	bhi.n	800242a <HAL_TIM_ConfigClockSource+0xa0>
 80023f2:	2a50      	cmp	r2, #80	; 0x50
 80023f4:	d042      	beq.n	800247c <HAL_TIM_ConfigClockSource+0xf2>
 80023f6:	2a60      	cmp	r2, #96	; 0x60
 80023f8:	d1e5      	bne.n	80023c6 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023fa:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023fc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023fe:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002402:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002404:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002406:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002408:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800240a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800240e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8002412:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12);
 8002416:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800241a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800241c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800241e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002420:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002424:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002428:	e017      	b.n	800245a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800242a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800242e:	d011      	beq.n	8002454 <HAL_TIM_ConfigClockSource+0xca>
 8002430:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002434:	d1c7      	bne.n	80023c6 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002436:	688a      	ldr	r2, [r1, #8]
 8002438:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800243a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800243c:	68c9      	ldr	r1, [r1, #12]
 800243e:	432a      	orrs	r2, r5
  tmpsmcr &= (uint32_t)(~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 8002440:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002444:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002448:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800244a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002452:	e002      	b.n	800245a <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	e7b3      	b.n	80023c6 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800245e:	688a      	ldr	r2, [r1, #8]
 8002460:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002462:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002464:	68c9      	ldr	r1, [r1, #12]
 8002466:	432a      	orrs	r2, r5
  tmpsmcr &= (uint32_t)(~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 8002468:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800246c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002470:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002472:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002474:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002476:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800247a:	e7ee      	b.n	800245a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800247c:	684c      	ldr	r4, [r1, #4]
 800247e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002480:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002482:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002484:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002488:	f025 0501 	bic.w	r5, r5, #1
 800248c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800248e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002490:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002492:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002496:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800249a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800249c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800249e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80024a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80024a4:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80024a8:	e7d7      	b.n	800245a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024aa:	684c      	ldr	r4, [r1, #4]
 80024ac:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80024ae:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024b0:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024b2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024b6:	f025 0501 	bic.w	r5, r5, #1
 80024ba:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024bc:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80024be:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 80024c4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80024c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024ca:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80024cc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80024ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80024d2:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80024d6:	e7c0      	b.n	800245a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80024d8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80024da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80024de:	f042 0207 	orr.w	r2, r2, #7
 80024e2:	e7ba      	b.n	800245a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80024e4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80024e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80024ea:	f042 0217 	orr.w	r2, r2, #23
 80024ee:	e7b4      	b.n	800245a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80024f0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80024f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80024f6:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80024fa:	e7ae      	b.n	800245a <HAL_TIM_ConfigClockSource+0xd0>

080024fc <HAL_TIM_OC_DelayElapsedCallback>:
 80024fc:	4770      	bx	lr

080024fe <HAL_TIM_IC_CaptureCallback>:
 80024fe:	4770      	bx	lr

08002500 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002500:	4770      	bx	lr

08002502 <HAL_TIM_TriggerCallback>:
 8002502:	4770      	bx	lr

08002504 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002504:	6803      	ldr	r3, [r0, #0]
{
 8002506:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002508:	691a      	ldr	r2, [r3, #16]
{
 800250a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800250c:	0791      	lsls	r1, r2, #30
 800250e:	d50e      	bpl.n	800252e <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	0792      	lsls	r2, r2, #30
 8002514:	d50b      	bpl.n	800252e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002516:	f06f 0202 	mvn.w	r2, #2
 800251a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800251c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800251e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002520:	7502      	strb	r2, [r0, #20]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002522:	0799      	lsls	r1, r3, #30
 8002524:	d05c      	beq.n	80025e0 <HAL_TIM_IRQHandler+0xdc>
          HAL_TIM_IC_CaptureCallback(htim);
 8002526:	f7ff ffea 	bl	80024fe <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252a:	2300      	movs	r3, #0
 800252c:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800252e:	6823      	ldr	r3, [r4, #0]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	0752      	lsls	r2, r2, #29
 8002534:	d510      	bpl.n	8002558 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	0750      	lsls	r0, r2, #29
 800253a:	d50d      	bpl.n	8002558 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800253c:	f06f 0204 	mvn.w	r2, #4
 8002540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002542:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002544:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002546:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002548:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800254c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800254e:	d04d      	beq.n	80025ec <HAL_TIM_IRQHandler+0xe8>
        HAL_TIM_IC_CaptureCallback(htim);
 8002550:	f7ff ffd5 	bl	80024fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002554:	2300      	movs	r3, #0
 8002556:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	0711      	lsls	r1, r2, #28
 800255e:	d50f      	bpl.n	8002580 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	0712      	lsls	r2, r2, #28
 8002564:	d50c      	bpl.n	8002580 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002566:	f06f 0208 	mvn.w	r2, #8
 800256a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800256c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800256e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002570:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002572:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002574:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002576:	d03f      	beq.n	80025f8 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8002578:	f7ff ffc1 	bl	80024fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257c:	2300      	movs	r3, #0
 800257e:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	06d0      	lsls	r0, r2, #27
 8002586:	d510      	bpl.n	80025aa <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	06d1      	lsls	r1, r2, #27
 800258c:	d50d      	bpl.n	80025aa <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800258e:	f06f 0210 	mvn.w	r2, #16
 8002592:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002594:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002596:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002598:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800259a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800259e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80025a0:	d030      	beq.n	8002604 <HAL_TIM_IRQHandler+0x100>
        HAL_TIM_IC_CaptureCallback(htim);
 80025a2:	f7ff ffac 	bl	80024fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a6:	2300      	movs	r3, #0
 80025a8:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025aa:	6823      	ldr	r3, [r4, #0]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	07d2      	lsls	r2, r2, #31
 80025b0:	d508      	bpl.n	80025c4 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	07d0      	lsls	r0, r2, #31
 80025b6:	d505      	bpl.n	80025c4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025b8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80025bc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025be:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80025c0:	f000 fbf8 	bl	8002db4 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	0651      	lsls	r1, r2, #25
 80025ca:	d508      	bpl.n	80025de <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	0652      	lsls	r2, r2, #25
 80025d0:	d505      	bpl.n	80025de <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80025d6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025d8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80025da:	f7ff ff92 	bl	8002502 <HAL_TIM_TriggerCallback>
 80025de:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e0:	f7ff ff8c 	bl	80024fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e4:	4620      	mov	r0, r4
 80025e6:	f7ff ff8b 	bl	8002500 <HAL_TIM_PWM_PulseFinishedCallback>
 80025ea:	e79e      	b.n	800252a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ec:	f7ff ff86 	bl	80024fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f0:	4620      	mov	r0, r4
 80025f2:	f7ff ff85 	bl	8002500 <HAL_TIM_PWM_PulseFinishedCallback>
 80025f6:	e7ad      	b.n	8002554 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f8:	f7ff ff80 	bl	80024fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fc:	4620      	mov	r0, r4
 80025fe:	f7ff ff7f 	bl	8002500 <HAL_TIM_PWM_PulseFinishedCallback>
 8002602:	e7bb      	b.n	800257c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002604:	f7ff ff7a 	bl	80024fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	4620      	mov	r0, r4
 800260a:	f7ff ff79 	bl	8002500 <HAL_TIM_PWM_PulseFinishedCallback>
 800260e:	e7ca      	b.n	80025a6 <HAL_TIM_IRQHandler+0xa2>

08002610 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002610:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8002614:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002616:	2b01      	cmp	r3, #1
 8002618:	f04f 0302 	mov.w	r3, #2
 800261c:	d018      	beq.n	8002650 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800261e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002622:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002624:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002626:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002628:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800262a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800262e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	4322      	orrs	r2, r4
 8002634:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800263c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	430a      	orrs	r2, r1
 8002642:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002644:	2301      	movs	r3, #1
 8002646:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  __HAL_UNLOCK(htim);
 800264a:	2300      	movs	r3, #0
 800264c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  __HAL_LOCK(htim);
 8002650:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002652:	bd10      	pop	{r4, pc}

08002654 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002658:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800265a:	6805      	ldr	r5, [r0, #0]
 800265c:	68c2      	ldr	r2, [r0, #12]
 800265e:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002660:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002662:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002666:	4313      	orrs	r3, r2
 8002668:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800266a:	6883      	ldr	r3, [r0, #8]
 800266c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 800266e:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002670:	4303      	orrs	r3, r0
 8002672:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002676:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800267a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 800267c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002680:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8002682:	4313      	orrs	r3, r2
 8002684:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002686:	696b      	ldr	r3, [r5, #20]
 8002688:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800268c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002690:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002692:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002696:	616b      	str	r3, [r5, #20]
 8002698:	4b7e      	ldr	r3, [pc, #504]	; (8002894 <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800269a:	d17f      	bne.n	800279c <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 800269c:	429d      	cmp	r5, r3
 800269e:	f04f 0419 	mov.w	r4, #25
 80026a2:	d147      	bne.n	8002734 <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80026a4:	f7ff fbca 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 80026a8:	fb04 f300 	mul.w	r3, r4, r0
 80026ac:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80026b0:	f04f 0864 	mov.w	r8, #100	; 0x64
 80026b4:	007f      	lsls	r7, r7, #1
 80026b6:	fbb3 f3f7 	udiv	r3, r3, r7
 80026ba:	fbb3 f3f8 	udiv	r3, r3, r8
 80026be:	011f      	lsls	r7, r3, #4
 80026c0:	f7ff fbbc 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 80026c4:	4360      	muls	r0, r4
 80026c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fbb0 f6f3 	udiv	r6, r0, r3
 80026d0:	f7ff fbb4 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 80026d4:	4360      	muls	r0, r4
 80026d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e0:	fbb3 f3f8 	udiv	r3, r3, r8
 80026e4:	fb08 6313 	mls	r3, r8, r3, r6
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	3332      	adds	r3, #50	; 0x32
 80026ec:	fbb3 f3f8 	udiv	r3, r3, r8
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 80026f6:	f7ff fba1 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 80026fa:	4360      	muls	r0, r4
 80026fc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002700:	0052      	lsls	r2, r2, #1
 8002702:	fbb0 faf2 	udiv	sl, r0, r2
 8002706:	f7ff fb99 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800270a:	4360      	muls	r0, r4
 800270c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	fbb0 f3f3 	udiv	r3, r0, r3
 8002716:	fbb3 f3f8 	udiv	r3, r3, r8
 800271a:	fb08 a313 	mls	r3, r8, r3, sl
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	3332      	adds	r3, #50	; 0x32
 8002722:	fbb3 f3f8 	udiv	r3, r3, r8
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800272c:	4433      	add	r3, r6
 800272e:	60ab      	str	r3, [r5, #8]
 8002730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002734:	f7ff fb6a 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8002738:	fb04 f300 	mul.w	r3, r4, r0
 800273c:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8002740:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002744:	007f      	lsls	r7, r7, #1
 8002746:	fbb3 f3f7 	udiv	r3, r3, r7
 800274a:	fbb3 f3f8 	udiv	r3, r3, r8
 800274e:	011f      	lsls	r7, r3, #4
 8002750:	f7ff fb5c 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8002754:	4360      	muls	r0, r4
 8002756:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fbb0 f6f3 	udiv	r6, r0, r3
 8002760:	f7ff fb54 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8002764:	4360      	muls	r0, r4
 8002766:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002770:	fbb3 f3f8 	udiv	r3, r3, r8
 8002774:	fb08 6313 	mls	r3, r8, r3, r6
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	3332      	adds	r3, #50	; 0x32
 800277c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8002786:	f7ff fb41 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 800278a:	4360      	muls	r0, r4
 800278c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002790:	0052      	lsls	r2, r2, #1
 8002792:	fbb0 faf2 	udiv	sl, r0, r2
 8002796:	f7ff fb39 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 800279a:	e7b6      	b.n	800270a <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 800279c:	429d      	cmp	r5, r3
 800279e:	f04f 0419 	mov.w	r4, #25
 80027a2:	d143      	bne.n	800282c <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027a4:	f7ff fb4a 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 80027a8:	fb04 f300 	mul.w	r3, r4, r0
 80027ac:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80027b0:	f04f 0864 	mov.w	r8, #100	; 0x64
 80027b4:	00b6      	lsls	r6, r6, #2
 80027b6:	fbb3 f3f6 	udiv	r3, r3, r6
 80027ba:	fbb3 f3f8 	udiv	r3, r3, r8
 80027be:	011e      	lsls	r6, r3, #4
 80027c0:	f7ff fb3c 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 80027c4:	4360      	muls	r0, r4
 80027c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	fbb0 f7f3 	udiv	r7, r0, r3
 80027d0:	f7ff fb34 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 80027d4:	4360      	muls	r0, r4
 80027d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e0:	fbb3 f3f8 	udiv	r3, r3, r8
 80027e4:	fb08 7313 	mls	r3, r8, r3, r7
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	3332      	adds	r3, #50	; 0x32
 80027ec:	fbb3 f3f8 	udiv	r3, r3, r8
 80027f0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80027f4:	f7ff fb22 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 80027f8:	4360      	muls	r0, r4
 80027fa:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80027fe:	0092      	lsls	r2, r2, #2
 8002800:	fbb0 faf2 	udiv	sl, r0, r2
 8002804:	f7ff fb1a 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002808:	4360      	muls	r0, r4
 800280a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	fbb0 f3f3 	udiv	r3, r0, r3
 8002814:	fbb3 f3f8 	udiv	r3, r3, r8
 8002818:	fb08 a313 	mls	r3, r8, r3, sl
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	3332      	adds	r3, #50	; 0x32
 8002820:	fbb3 f3f8 	udiv	r3, r3, r8
 8002824:	f003 030f 	and.w	r3, r3, #15
 8002828:	433b      	orrs	r3, r7
 800282a:	e77f      	b.n	800272c <UART_SetConfig+0xd8>
 800282c:	f7ff faee 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8002830:	fb04 f300 	mul.w	r3, r4, r0
 8002834:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002838:	f04f 0864 	mov.w	r8, #100	; 0x64
 800283c:	00b6      	lsls	r6, r6, #2
 800283e:	fbb3 f3f6 	udiv	r3, r3, r6
 8002842:	fbb3 f3f8 	udiv	r3, r3, r8
 8002846:	011e      	lsls	r6, r3, #4
 8002848:	f7ff fae0 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 800284c:	4360      	muls	r0, r4
 800284e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	fbb0 f7f3 	udiv	r7, r0, r3
 8002858:	f7ff fad8 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 800285c:	4360      	muls	r0, r4
 800285e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	fbb0 f3f3 	udiv	r3, r0, r3
 8002868:	fbb3 f3f8 	udiv	r3, r3, r8
 800286c:	fb08 7313 	mls	r3, r8, r3, r7
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	3332      	adds	r3, #50	; 0x32
 8002874:	fbb3 f3f8 	udiv	r3, r3, r8
 8002878:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800287c:	f7ff fac6 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8002880:	4360      	muls	r0, r4
 8002882:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002886:	0092      	lsls	r2, r2, #2
 8002888:	fbb0 faf2 	udiv	sl, r0, r2
 800288c:	f7ff fabe 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8002890:	e7ba      	b.n	8002808 <UART_SetConfig+0x1b4>
 8002892:	bf00      	nop
 8002894:	40013800 	.word	0x40013800

08002898 <UART_WaitOnFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 8002898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289a:	4604      	mov	r4, r0
 800289c:	460e      	mov	r6, r1
 800289e:	4615      	mov	r5, r2
  tickstart = HAL_GetTick();
 80028a0:	f7fe fca2 	bl	80011e8 <HAL_GetTick>
 80028a4:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80028a6:	6822      	ldr	r2, [r4, #0]
 80028a8:	6813      	ldr	r3, [r2, #0]
 80028aa:	ea36 0303 	bics.w	r3, r6, r3
 80028ae:	d101      	bne.n	80028b4 <UART_WaitOnFlagUntilTimeout.constprop.1+0x1c>
  return HAL_OK;
 80028b0:	2000      	movs	r0, #0
}
 80028b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 80028b4:	1c6b      	adds	r3, r5, #1
 80028b6:	d0f7      	beq.n	80028a8 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80028b8:	b9c5      	cbnz	r5, 80028ec <UART_WaitOnFlagUntilTimeout.constprop.1+0x54>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028ba:	6823      	ldr	r3, [r4, #0]
          return HAL_TIMEOUT;
 80028bc:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028c4:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	f022 0220 	bic.w	r2, r2, #32
 80028cc:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028d4:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	615a      	str	r2, [r3, #20]
          huart->State= HAL_UART_STATE_READY;
 80028de:	2301      	movs	r3, #1
 80028e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
          __HAL_UNLOCK(huart);
 80028e4:	2300      	movs	r3, #0
 80028e6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80028ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80028ec:	f7fe fc7c 	bl	80011e8 <HAL_GetTick>
 80028f0:	1bc0      	subs	r0, r0, r7
 80028f2:	4285      	cmp	r5, r0
 80028f4:	d2d7      	bcs.n	80028a6 <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 80028f6:	e7e0      	b.n	80028ba <UART_WaitOnFlagUntilTimeout.constprop.1+0x22>

080028f8 <HAL_UART_Init>:
{
 80028f8:	b510      	push	{r4, lr}
  if(huart == NULL)
 80028fa:	4604      	mov	r4, r0
 80028fc:	b330      	cbz	r0, 800294c <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 80028fe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002902:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002906:	b91b      	cbnz	r3, 8002910 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002908:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800290c:	f001 fa28 	bl	8003d60 <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 8002910:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 8002912:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8002914:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002918:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800291a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800291c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002920:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002922:	f7ff fe97 	bl	8002654 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002926:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002928:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002938:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002940:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 8002942:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002944:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8002946:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800294a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800294c:	2001      	movs	r0, #1
}
 800294e:	bd10      	pop	{r4, pc}

08002950 <HAL_UART_Transmit>:
{
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	460d      	mov	r5, r1
  tmp_state = huart->State;
 8002954:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
{
 8002958:	4604      	mov	r4, r0
  tmp_state = huart->State;
 800295a:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 800295c:	2901      	cmp	r1, #1
{
 800295e:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8002960:	d001      	beq.n	8002966 <HAL_UART_Transmit+0x16>
 8002962:	2922      	cmp	r1, #34	; 0x22
 8002964:	d14d      	bne.n	8002a02 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0))
 8002966:	2d00      	cmp	r5, #0
 8002968:	d049      	beq.n	80029fe <HAL_UART_Transmit+0xae>
 800296a:	2a00      	cmp	r2, #0
 800296c:	d047      	beq.n	80029fe <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 800296e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002972:	2b01      	cmp	r3, #1
 8002974:	d045      	beq.n	8002a02 <HAL_UART_Transmit+0xb2>
 8002976:	2301      	movs	r3, #1
 8002978:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800297c:	2300      	movs	r3, #0
 800297e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002980:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 8002984:	84a2      	strh	r2, [r4, #36]	; 0x24
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002986:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002988:	bf0c      	ite	eq
 800298a:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 800298c:	2312      	movne	r3, #18
    huart->TxXferCount = Size;
 800298e:	84e2      	strh	r2, [r4, #38]	; 0x26
      huart->State = HAL_UART_STATE_BUSY_TX;
 8002990:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    while(huart->TxXferCount > 0)
 8002994:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002996:	b98a      	cbnz	r2, 80029bc <HAL_UART_Transmit+0x6c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8002998:	4632      	mov	r2, r6
 800299a:	2140      	movs	r1, #64	; 0x40
 800299c:	4620      	mov	r0, r4
 800299e:	f7ff ff7b 	bl	8002898 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80029a2:	b9c0      	cbnz	r0, 80029d6 <HAL_UART_Transmit+0x86>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80029a4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80029a8:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 80029aa:	bf0c      	ite	eq
 80029ac:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 80029ae:	2301      	movne	r3, #1
 80029b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80029b4:	2300      	movs	r3, #0
 80029b6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 80029ba:	bd70      	pop	{r4, r5, r6, pc}
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029bc:	68a3      	ldr	r3, [r4, #8]
      huart->TxXferCount--;
 80029be:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->TxXferCount--;
 80029c4:	84e2      	strh	r2, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80029c6:	f04f 0180 	mov.w	r1, #128	; 0x80
 80029ca:	4632      	mov	r2, r6
 80029cc:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029ce:	d10d      	bne.n	80029ec <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80029d0:	f7ff ff62 	bl	8002898 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80029d4:	b108      	cbz	r0, 80029da <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80029d6:	2003      	movs	r0, #3
 80029d8:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80029da:	882b      	ldrh	r3, [r5, #0]
 80029dc:	6822      	ldr	r2, [r4, #0]
 80029de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e2:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80029e4:	6923      	ldr	r3, [r4, #16]
 80029e6:	b943      	cbnz	r3, 80029fa <HAL_UART_Transmit+0xaa>
          pData +=2;
 80029e8:	3502      	adds	r5, #2
 80029ea:	e7d3      	b.n	8002994 <HAL_UART_Transmit+0x44>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80029ec:	f7ff ff54 	bl	8002898 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80029f0:	2800      	cmp	r0, #0
 80029f2:	d1f0      	bne.n	80029d6 <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80029f4:	6823      	ldr	r3, [r4, #0]
 80029f6:	782a      	ldrb	r2, [r5, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	3501      	adds	r5, #1
 80029fc:	e7ca      	b.n	8002994 <HAL_UART_Transmit+0x44>
      return  HAL_ERROR;
 80029fe:	2001      	movs	r0, #1
 8002a00:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8002a02:	2002      	movs	r0, #2
}
 8002a04:	bd70      	pop	{r4, r5, r6, pc}

08002a06 <HAL_UART_Receive_IT>:
  tmp_state = huart->State;
 8002a06:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002a0a:	b2db      	uxtb	r3, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d001      	beq.n	8002a14 <HAL_UART_Receive_IT+0xe>
 8002a10:	2b12      	cmp	r3, #18
 8002a12:	d128      	bne.n	8002a66 <HAL_UART_Receive_IT+0x60>
    if((pData == NULL ) || (Size == 0))
 8002a14:	b329      	cbz	r1, 8002a62 <HAL_UART_Receive_IT+0x5c>
 8002a16:	b322      	cbz	r2, 8002a62 <HAL_UART_Receive_IT+0x5c>
    __HAL_LOCK(huart);
 8002a18:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d022      	beq.n	8002a66 <HAL_UART_Receive_IT+0x60>
 8002a20:	2301      	movs	r3, #1
 8002a22:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxXferSize = Size;
 8002a2a:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002a2c:	85c2      	strh	r2, [r0, #46]	; 0x2e
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8002a2e:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002a32:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8002a36:	2a12      	cmp	r2, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002a38:	bf0c      	ite	eq
 8002a3a:	2232      	moveq	r2, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002a3c:	2222      	movne	r2, #34	; 0x22
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a3e:	6803      	ldr	r3, [r0, #0]
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002a40:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a44:	68da      	ldr	r2, [r3, #12]
    huart->pRxBuffPtr = pData;
 8002a46:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a4c:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a4e:	695a      	ldr	r2, [r3, #20]
    return HAL_OK;
 8002a50:	2000      	movs	r0, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	f042 0220 	orr.w	r2, r2, #32
 8002a5e:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8002a60:	4770      	bx	lr
      return HAL_ERROR;
 8002a62:	2001      	movs	r0, #1
 8002a64:	4770      	bx	lr
    return HAL_BUSY;
 8002a66:	2002      	movs	r0, #2
}
 8002a68:	4770      	bx	lr

08002a6a <HAL_UART_TxCpltCallback>:
 8002a6a:	4770      	bx	lr

08002a6c <HAL_UART_ErrorCallback>:
{
 8002a6c:	4770      	bx	lr

08002a6e <HAL_UART_IRQHandler>:
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8002a6e:	6802      	ldr	r2, [r0, #0]
{
 8002a70:	b513      	push	{r0, r1, r4, lr}
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8002a72:	6811      	ldr	r1, [r2, #0]
{
 8002a74:	4604      	mov	r4, r0
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002a76:	07c9      	lsls	r1, r1, #31
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8002a78:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002a7a:	d505      	bpl.n	8002a88 <HAL_UART_IRQHandler+0x1a>
 8002a7c:	05db      	lsls	r3, r3, #23
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a7e:	bf42      	ittt	mi
 8002a80:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 8002a82:	f043 0301 	orrmi.w	r3, r3, #1
 8002a86:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8002a88:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002a8a:	6953      	ldr	r3, [r2, #20]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002a8c:	0788      	lsls	r0, r1, #30
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002a8e:	f003 0301 	and.w	r3, r3, #1
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002a92:	d504      	bpl.n	8002a9e <HAL_UART_IRQHandler+0x30>
 8002a94:	b11b      	cbz	r3, 8002a9e <HAL_UART_IRQHandler+0x30>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a96:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002a98:	f041 0104 	orr.w	r1, r1, #4
 8002a9c:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8002a9e:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002aa0:	0749      	lsls	r1, r1, #29
 8002aa2:	d504      	bpl.n	8002aae <HAL_UART_IRQHandler+0x40>
 8002aa4:	b11b      	cbz	r3, 8002aae <HAL_UART_IRQHandler+0x40>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aa6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002aa8:	f041 0102 	orr.w	r1, r1, #2
 8002aac:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8002aae:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002ab0:	0708      	lsls	r0, r1, #28
 8002ab2:	d504      	bpl.n	8002abe <HAL_UART_IRQHandler+0x50>
 8002ab4:	b11b      	cbz	r3, 8002abe <HAL_UART_IRQHandler+0x50>
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ab6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ab8:	f043 0308 	orr.w	r3, r3, #8
 8002abc:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8002abe:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 8002ac0:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002ac2:	0689      	lsls	r1, r1, #26
 8002ac4:	d533      	bpl.n	8002b2e <HAL_UART_IRQHandler+0xc0>
 8002ac6:	0698      	lsls	r0, r3, #26
 8002ac8:	d531      	bpl.n	8002b2e <HAL_UART_IRQHandler+0xc0>
  tmp_state = huart->State; 
 8002aca:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8002ace:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002ad2:	2b22      	cmp	r3, #34	; 0x22
 8002ad4:	d12b      	bne.n	8002b2e <HAL_UART_IRQHandler+0xc0>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ad6:	68a3      	ldr	r3, [r4, #8]
 8002ad8:	6921      	ldr	r1, [r4, #16]
 8002ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ade:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ae0:	d176      	bne.n	8002bd0 <HAL_UART_IRQHandler+0x162>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ae2:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002ae4:	2900      	cmp	r1, #0
 8002ae6:	d16f      	bne.n	8002bc8 <HAL_UART_IRQHandler+0x15a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aec:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1;
 8002af0:	62a3      	str	r3, [r4, #40]	; 0x28
    if(--huart->RxXferCount == 0)
 8002af2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8002afa:	b9c3      	cbnz	r3, 8002b2e <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002afc:	6823      	ldr	r3, [r4, #0]
      HAL_UART_RxCpltCallback(huart);
 8002afe:	4620      	mov	r0, r4
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	f022 0220 	bic.w	r2, r2, #32
 8002b06:	60da      	str	r2, [r3, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002b08:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002b0c:	2a32      	cmp	r2, #50	; 0x32
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b0e:	bf17      	itett	ne
 8002b10:	68da      	ldrne	r2, [r3, #12]
        huart->State = HAL_UART_STATE_BUSY_TX;
 8002b12:	2312      	moveq	r3, #18
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b14:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 8002b18:	60da      	strne	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b1a:	bf1f      	itttt	ne
 8002b1c:	695a      	ldrne	r2, [r3, #20]
 8002b1e:	f022 0201 	bicne.w	r2, r2, #1
 8002b22:	615a      	strne	r2, [r3, #20]
        huart->State = HAL_UART_STATE_READY;
 8002b24:	2301      	movne	r3, #1
 8002b26:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 8002b2a:	f000 f90f 	bl	8002d4c <HAL_UART_RxCpltCallback>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8002b32:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002b34:	0609      	lsls	r1, r1, #24
 8002b36:	d522      	bpl.n	8002b7e <HAL_UART_IRQHandler+0x110>
 8002b38:	0610      	lsls	r0, r2, #24
 8002b3a:	d520      	bpl.n	8002b7e <HAL_UART_IRQHandler+0x110>
  tmp_state = huart->State;
 8002b3c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8002b40:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8002b44:	2a12      	cmp	r2, #18
 8002b46:	d11a      	bne.n	8002b7e <HAL_UART_IRQHandler+0x110>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b48:	68a2      	ldr	r2, [r4, #8]
 8002b4a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002b4e:	6a22      	ldr	r2, [r4, #32]
 8002b50:	d14c      	bne.n	8002bec <HAL_UART_IRQHandler+0x17e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b52:	8811      	ldrh	r1, [r2, #0]
 8002b54:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002b58:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002b5a:	6921      	ldr	r1, [r4, #16]
 8002b5c:	2900      	cmp	r1, #0
 8002b5e:	d143      	bne.n	8002be8 <HAL_UART_IRQHandler+0x17a>
        huart->pTxBuffPtr += 2;
 8002b60:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1;
 8002b62:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0)
 8002b64:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002b66:	3a01      	subs	r2, #1
 8002b68:	b292      	uxth	r2, r2
 8002b6a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002b6c:	b93a      	cbnz	r2, 8002b7e <HAL_UART_IRQHandler+0x110>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b74:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b7c:	60da      	str	r2, [r3, #12]
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8002b7e:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8002b80:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002b82:	0649      	lsls	r1, r1, #25
 8002b84:	d510      	bpl.n	8002ba8 <HAL_UART_IRQHandler+0x13a>
 8002b86:	0652      	lsls	r2, r2, #25
 8002b88:	d50e      	bpl.n	8002ba8 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b8a:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002b8c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b92:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002b94:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002b98:	2b32      	cmp	r3, #50	; 0x32
    huart->State = HAL_UART_STATE_BUSY_RX;
 8002b9a:	bf0c      	ite	eq
 8002b9c:	2322      	moveq	r3, #34	; 0x22
    huart->State = HAL_UART_STATE_READY;
 8002b9e:	2301      	movne	r3, #1
 8002ba0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002ba4:	f7ff ff61 	bl	8002a6a <HAL_UART_TxCpltCallback>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ba8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002baa:	b15b      	cbz	r3, 8002bc4 <HAL_UART_IRQHandler+0x156>
    __HAL_UART_CLEAR_PEFLAG(huart);
 8002bac:	6823      	ldr	r3, [r4, #0]
    HAL_UART_ErrorCallback(huart);
 8002bae:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_PEFLAG(huart);
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	9201      	str	r2, [sp, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	9301      	str	r3, [sp, #4]
 8002bb8:	9b01      	ldr	r3, [sp, #4]
    huart->State = HAL_UART_STATE_READY;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 8002bc0:	f7ff ff54 	bl	8002a6c <HAL_UART_ErrorCallback>
}
 8002bc4:	b002      	add	sp, #8
 8002bc6:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	f823 2b01 	strh.w	r2, [r3], #1
 8002bce:	e78f      	b.n	8002af0 <HAL_UART_IRQHandler+0x82>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002bd0:	b921      	cbnz	r1, 8002bdc <HAL_UART_IRQHandler+0x16e>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bd2:	1c59      	adds	r1, r3, #1
 8002bd4:	6852      	ldr	r2, [r2, #4]
 8002bd6:	62a1      	str	r1, [r4, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	e78a      	b.n	8002af2 <HAL_UART_IRQHandler+0x84>
 8002bdc:	6852      	ldr	r2, [r2, #4]
 8002bde:	1c59      	adds	r1, r3, #1
 8002be0:	62a1      	str	r1, [r4, #40]	; 0x28
 8002be2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002be6:	e7f7      	b.n	8002bd8 <HAL_UART_IRQHandler+0x16a>
        huart->pTxBuffPtr += 1;
 8002be8:	3201      	adds	r2, #1
 8002bea:	e7ba      	b.n	8002b62 <HAL_UART_IRQHandler+0xf4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bec:	1c51      	adds	r1, r2, #1
 8002bee:	6221      	str	r1, [r4, #32]
 8002bf0:	7812      	ldrb	r2, [r2, #0]
 8002bf2:	605a      	str	r2, [r3, #4]
 8002bf4:	e7b6      	b.n	8002b64 <HAL_UART_IRQHandler+0xf6>
	...

08002bf8 <Parse_CMD>:
 *      Author: Theodore Lee
 */
#include "WW_CMD.h"
unsigned char Rx_indx, Rx_data[2], Transfer_cplt;
char Rx_Buffer[100];
void Parse_CMD(TIM_HandleTypeDef* Fan_TIM, UART_HandleTypeDef* huart){
 8002bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if(Transfer_cplt >= 1){
 8002bfc:	4e4a      	ldr	r6, [pc, #296]	; (8002d28 <Parse_CMD+0x130>)
void Parse_CMD(TIM_HandleTypeDef* Fan_TIM, UART_HandleTypeDef* huart){
 8002bfe:	b0b3      	sub	sp, #204	; 0xcc
	if(Transfer_cplt >= 1){
 8002c00:	7835      	ldrb	r5, [r6, #0]
void Parse_CMD(TIM_HandleTypeDef* Fan_TIM, UART_HandleTypeDef* huart){
 8002c02:	4607      	mov	r7, r0
 8002c04:	460c      	mov	r4, r1
	if(Transfer_cplt >= 1){
 8002c06:	b1fd      	cbz	r5, 8002c48 <Parse_CMD+0x50>
		char cmd[100];
		memset(cmd,0,sizeof cmd);
 8002c08:	2264      	movs	r2, #100	; 0x64
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4668      	mov	r0, sp
 8002c0e:	f001 f925 	bl	8003e5c <memset>
		strcpy(cmd, Rx_Buffer);
 8002c12:	4946      	ldr	r1, [pc, #280]	; (8002d2c <Parse_CMD+0x134>)
 8002c14:	4668      	mov	r0, sp
 8002c16:	f001 f94d 	bl	8003eb4 <strcpy>
		cmd[Transfer_cplt]='\0';
 8002c1a:	ab32      	add	r3, sp, #200	; 0xc8
 8002c1c:	442b      	add	r3, r5
 8002c1e:	2500      	movs	r5, #0
		char* tkpnt;
		tkpnt = strtok(cmd, " ");
 8002c20:	4943      	ldr	r1, [pc, #268]	; (8002d30 <Parse_CMD+0x138>)
 8002c22:	4668      	mov	r0, sp
		cmd[Transfer_cplt]='\0';
 8002c24:	f803 5cc8 	strb.w	r5, [r3, #-200]
		tkpnt = strtok(cmd, " ");
 8002c28:	f001 ff78 	bl	8004b1c <strtok>
		if(strncmp(tkpnt, "f",1)==0){
 8002c2c:	7803      	ldrb	r3, [r0, #0]
 8002c2e:	2b66      	cmp	r3, #102	; 0x66
 8002c30:	d10d      	bne.n	8002c4e <Parse_CMD+0x56>
			tkpnt = strtok(NULL, " ");
 8002c32:	493f      	ldr	r1, [pc, #252]	; (8002d30 <Parse_CMD+0x138>)
 8002c34:	4628      	mov	r0, r5
 8002c36:	f001 ff71 	bl	8004b1c <strtok>
			int pwm = atoi(tkpnt);
 8002c3a:	f001 f8e7 	bl	8003e0c <atoi>
			pwm = pwm + 255;
			__HAL_TIM_SetCompare(Fan_TIM, TIM_CHANNEL_1, pwm);
 8002c3e:	683b      	ldr	r3, [r7, #0]
			pwm = pwm + 255;
 8002c40:	30ff      	adds	r0, #255	; 0xff
			__HAL_TIM_SetCompare(Fan_TIM, TIM_CHANNEL_1, pwm);
 8002c42:	6358      	str	r0, [r3, #52]	; 0x34
			HAL_UART_Transmit(huart, buffer, len, 1000);
			len=sprintf(buffer,"Left Encoder:%i\r\n", TIM2->CNT); //sprintf will return the length of 'buffer'
			HAL_UART_Transmit(huart, buffer, len, 1000);
		}

		Transfer_cplt = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	7033      	strb	r3, [r6, #0]
	}
}
 8002c48:	b033      	add	sp, #204	; 0xcc
 8002c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		}else if(strncmp(tkpnt, "l",1)==0){
 8002c4e:	2b6c      	cmp	r3, #108	; 0x6c
 8002c50:	d118      	bne.n	8002c84 <Parse_CMD+0x8c>
			tkpnt = strtok(NULL, " ");
 8002c52:	4937      	ldr	r1, [pc, #220]	; (8002d30 <Parse_CMD+0x138>)
 8002c54:	4628      	mov	r0, r5
 8002c56:	f001 ff61 	bl	8004b1c <strtok>
			float lindis = atof(tkpnt);
 8002c5a:	f001 f8d4 	bl	8003e06 <atof>
 8002c5e:	4680      	mov	r8, r0
 8002c60:	4689      	mov	r9, r1
			tkpnt = strtok(NULL, " ");
 8002c62:	4628      	mov	r0, r5
 8002c64:	4932      	ldr	r1, [pc, #200]	; (8002d30 <Parse_CMD+0x138>)
 8002c66:	f001 ff59 	bl	8004b1c <strtok>
			float linspd = atof(tkpnt);
 8002c6a:	f001 f8cc 	bl	8003e06 <atof>
 8002c6e:	f7fd ff29 	bl	8000ac4 <__aeabi_d2f>
 8002c72:	4604      	mov	r4, r0
			float lindis = atof(tkpnt);
 8002c74:	4649      	mov	r1, r9
 8002c76:	4640      	mov	r0, r8
 8002c78:	f7fd ff24 	bl	8000ac4 <__aeabi_d2f>
			setLin(lindis, linspd);
 8002c7c:	4621      	mov	r1, r4
 8002c7e:	f000 f90f 	bl	8002ea0 <setLin>
 8002c82:	e7df      	b.n	8002c44 <Parse_CMD+0x4c>
		}else if(strncmp(tkpnt, "t",1)==0){
 8002c84:	2b74      	cmp	r3, #116	; 0x74
 8002c86:	d10f      	bne.n	8002ca8 <Parse_CMD+0xb0>
			uint8_t len=sprintf(buffer,"%i\r\n", Get_Time()); //sprintf will return the length of 'buffer'
 8002c88:	f000 f8a6 	bl	8002dd8 <Get_Time>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	a819      	add	r0, sp, #100	; 0x64
 8002c92:	4928      	ldr	r1, [pc, #160]	; (8002d34 <Parse_CMD+0x13c>)
 8002c94:	f001 f8ea 	bl	8003e6c <siprintf>
			HAL_UART_Transmit(huart, buffer, len, 1000);
 8002c98:	b2c2      	uxtb	r2, r0
 8002c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c9e:	a919      	add	r1, sp, #100	; 0x64
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f7ff fe55 	bl	8002950 <HAL_UART_Transmit>
 8002ca6:	e7cd      	b.n	8002c44 <Parse_CMD+0x4c>
		}else if(strncmp(tkpnt, "d",1)==0){
 8002ca8:	2b64      	cmp	r3, #100	; 0x64
 8002caa:	d109      	bne.n	8002cc0 <Parse_CMD+0xc8>
			tkpnt = strtok(NULL, " ");
 8002cac:	4920      	ldr	r1, [pc, #128]	; (8002d30 <Parse_CMD+0x138>)
 8002cae:	4628      	mov	r0, r5
 8002cb0:	f001 ff34 	bl	8004b1c <strtok>
			int16_t pwm = atoi(tkpnt);
 8002cb4:	f001 f8aa 	bl	8003e0c <atoi>
			Run_MotorPWM(pwm);
 8002cb8:	b200      	sxth	r0, r0
 8002cba:	f000 facb 	bl	8003254 <Run_MotorPWM>
 8002cbe:	e7c1      	b.n	8002c44 <Parse_CMD+0x4c>
		}else if(strncmp(tkpnt, "e",1)==0){
 8002cc0:	2b65      	cmp	r3, #101	; 0x65
 8002cc2:	d1bf      	bne.n	8002c44 <Parse_CMD+0x4c>
			uint8_t len=sprintf(buffer,"Right Encoder Delta :%i\r\n", Get_RightEncoderPos()); //sprintf will return the length of 'buffer'
 8002cc4:	f000 f948 	bl	8002f58 <Get_RightEncoderPos>
 8002cc8:	491b      	ldr	r1, [pc, #108]	; (8002d38 <Parse_CMD+0x140>)
 8002cca:	4602      	mov	r2, r0
 8002ccc:	a819      	add	r0, sp, #100	; 0x64
 8002cce:	f001 f8cd 	bl	8003e6c <siprintf>
			HAL_UART_Transmit(huart, buffer, len, 1000);
 8002cd2:	a919      	add	r1, sp, #100	; 0x64
 8002cd4:	b2c2      	uxtb	r2, r0
 8002cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f7ff fe38 	bl	8002950 <HAL_UART_Transmit>
			len=sprintf(buffer,"Right Encoder:%i\r\n", TIM3->CNT); //sprintf will return the length of 'buffer'
 8002ce0:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <Parse_CMD+0x144>)
 8002ce2:	4917      	ldr	r1, [pc, #92]	; (8002d40 <Parse_CMD+0x148>)
 8002ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce6:	a819      	add	r0, sp, #100	; 0x64
 8002ce8:	f001 f8c0 	bl	8003e6c <siprintf>
			HAL_UART_Transmit(huart, buffer, len, 1000);
 8002cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cf0:	b2c2      	uxtb	r2, r0
 8002cf2:	a919      	add	r1, sp, #100	; 0x64
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f7ff fe2b 	bl	8002950 <HAL_UART_Transmit>
			len = len=sprintf(buffer,"Left Encoder Delta:%i\r\n", Get_LeftEncoderPos());
 8002cfa:	f000 f927 	bl	8002f4c <Get_LeftEncoderPos>
 8002cfe:	4911      	ldr	r1, [pc, #68]	; (8002d44 <Parse_CMD+0x14c>)
 8002d00:	4602      	mov	r2, r0
 8002d02:	a819      	add	r0, sp, #100	; 0x64
 8002d04:	f001 f8b2 	bl	8003e6c <siprintf>
			HAL_UART_Transmit(huart, buffer, len, 1000);
 8002d08:	a919      	add	r1, sp, #100	; 0x64
 8002d0a:	b2c2      	uxtb	r2, r0
 8002d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d10:	4620      	mov	r0, r4
 8002d12:	f7ff fe1d 	bl	8002950 <HAL_UART_Transmit>
			len=sprintf(buffer,"Left Encoder:%i\r\n", TIM2->CNT); //sprintf will return the length of 'buffer'
 8002d16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d1a:	490b      	ldr	r1, [pc, #44]	; (8002d48 <Parse_CMD+0x150>)
 8002d1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d1e:	a819      	add	r0, sp, #100	; 0x64
 8002d20:	f001 f8a4 	bl	8003e6c <siprintf>
 8002d24:	e7b8      	b.n	8002c98 <Parse_CMD+0xa0>
 8002d26:	bf00      	nop
 8002d28:	20000218 	.word	0x20000218
 8002d2c:	2000021c 	.word	0x2000021c
 8002d30:	080065f0 	.word	0x080065f0
 8002d34:	080063ed 	.word	0x080063ed
 8002d38:	080063d8 	.word	0x080063d8
 8002d3c:	40000400 	.word	0x40000400
 8002d40:	080063f2 	.word	0x080063f2
 8002d44:	08006405 	.word	0x08006405
 8002d48:	0800641d 	.word	0x0800641d

08002d4c <HAL_UART_RxCpltCallback>:
//Interrupt callback routine
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    uint8_t i;
    if (huart->Instance == USART1)  //current UART
 8002d4c:	6802      	ldr	r2, [r0, #0]
 8002d4e:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <HAL_UART_RxCpltCallback+0x48>)
{
 8002d50:	b430      	push	{r4, r5}
    if (huart->Instance == USART1)  //current UART
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d11c      	bne.n	8002d90 <HAL_UART_RxCpltCallback+0x44>
	{
		if (Rx_indx==0) {for (i=0;i<100;i++) Rx_Buffer[i]=0;}   //clear Rx_Buffer before receiving new data
 8002d56:	4a10      	ldr	r2, [pc, #64]	; (8002d98 <HAL_UART_RxCpltCallback+0x4c>)
 8002d58:	7813      	ldrb	r3, [r2, #0]
 8002d5a:	b143      	cbz	r3, 8002d6e <HAL_UART_RxCpltCallback+0x22>

		if (Rx_data[0]!=13) //if received data different from ascii 13 (enter)
 8002d5c:	490f      	ldr	r1, [pc, #60]	; (8002d9c <HAL_UART_RxCpltCallback+0x50>)
 8002d5e:	7809      	ldrb	r1, [r1, #0]
 8002d60:	290d      	cmp	r1, #13
 8002d62:	d10c      	bne.n	8002d7e <HAL_UART_RxCpltCallback+0x32>
		{
			Rx_Buffer[Rx_indx++]=Rx_data[0];    //add data to Rx_Buffer
		}
		else            //if received data = 13
		{
			Transfer_cplt=Rx_indx;//transfer complete, data is ready to read
 8002d64:	490e      	ldr	r1, [pc, #56]	; (8002da0 <HAL_UART_RxCpltCallback+0x54>)
 8002d66:	700b      	strb	r3, [r1, #0]
			Rx_indx=0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	7013      	strb	r3, [r2, #0]
 8002d6c:	e00b      	b.n	8002d86 <HAL_UART_RxCpltCallback+0x3a>
 8002d6e:	4619      	mov	r1, r3
		if (Rx_indx==0) {for (i=0;i<100;i++) Rx_Buffer[i]=0;}   //clear Rx_Buffer before receiving new data
 8002d70:	461d      	mov	r5, r3
 8002d72:	4c0c      	ldr	r4, [pc, #48]	; (8002da4 <HAL_UART_RxCpltCallback+0x58>)
 8002d74:	550d      	strb	r5, [r1, r4]
 8002d76:	3101      	adds	r1, #1
 8002d78:	2964      	cmp	r1, #100	; 0x64
 8002d7a:	d1fb      	bne.n	8002d74 <HAL_UART_RxCpltCallback+0x28>
 8002d7c:	e7ee      	b.n	8002d5c <HAL_UART_RxCpltCallback+0x10>
			Rx_Buffer[Rx_indx++]=Rx_data[0];    //add data to Rx_Buffer
 8002d7e:	1c5c      	adds	r4, r3, #1
 8002d80:	7014      	strb	r4, [r2, #0]
 8002d82:	4a08      	ldr	r2, [pc, #32]	; (8002da4 <HAL_UART_RxCpltCallback+0x58>)
 8002d84:	54d1      	strb	r1, [r2, r3]
		}

		HAL_UART_Receive_IT(huart, Rx_data, 1);   //activate UART receive interrupt every time
 8002d86:	2201      	movs	r2, #1
	}

}
 8002d88:	bc30      	pop	{r4, r5}
		HAL_UART_Receive_IT(huart, Rx_data, 1);   //activate UART receive interrupt every time
 8002d8a:	4904      	ldr	r1, [pc, #16]	; (8002d9c <HAL_UART_RxCpltCallback+0x50>)
 8002d8c:	f7ff be3b 	b.w	8002a06 <HAL_UART_Receive_IT>
}
 8002d90:	bc30      	pop	{r4, r5}
 8002d92:	4770      	bx	lr
 8002d94:	40013800 	.word	0x40013800
 8002d98:	20000219 	.word	0x20000219
 8002d9c:	2000021a 	.word	0x2000021a
 8002da0:	20000218 	.word	0x20000218
 8002da4:	2000021c 	.word	0x2000021c

08002da8 <UART_ReadStart>:
void UART_ReadStart(UART_HandleTypeDef *huart){
	HAL_UART_Receive_IT(huart, Rx_data, 1);
 8002da8:	2201      	movs	r2, #1
 8002daa:	4901      	ldr	r1, [pc, #4]	; (8002db0 <UART_ReadStart+0x8>)
 8002dac:	f7ff be2b 	b.w	8002a06 <HAL_UART_Receive_IT>
 8002db0:	2000021a 	.word	0x2000021a

08002db4 <HAL_TIM_PeriodElapsedCallback>:
#include "WW_Clk.h"

uint64_t timeElapsed = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if (htim->Instance==TIM6) //check if the interrupt comes from TIM3
 8002db4:	6802      	ldr	r2, [r0, #0]
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d107      	bne.n	8002dcc <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		timeElapsed++;
 8002dbc:	4905      	ldr	r1, [pc, #20]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002dbe:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002dc2:	3201      	adds	r2, #1
 8002dc4:	f143 0300 	adc.w	r3, r3, #0
 8002dc8:	e9c1 2300 	strd	r2, r3, [r1]
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40001000 	.word	0x40001000
 8002dd4:	200001f8 	.word	0x200001f8

08002dd8 <Get_Time>:
	}
}
uint64_t Get_Time(){
	return timeElapsed;
}
 8002dd8:	4b01      	ldr	r3, [pc, #4]	; (8002de0 <Get_Time+0x8>)
 8002dda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dde:	4770      	bx	lr
 8002de0:	200001f8 	.word	0x200001f8

08002de4 <initMot>:
#include "WW_Loc.h"
struct motor left;
struct motor right;
uint64_t prevTime = 0;
void initMot(TIM_HandleTypeDef* TIM_RightEnc, TIM_HandleTypeDef* TIM_LeftEnc,
		TIM_HandleTypeDef* TIM_RightMot, TIM_HandleTypeDef* TIM_LeftMot){
 8002de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	right.prevcount = __HAL_TIM_GET_COUNTER(TIM_RightEnc);
 8002de8:	6804      	ldr	r4, [r0, #0]
 8002dea:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 8002e8c <initMot+0xa8>
 8002dee:	6a64      	ldr	r4, [r4, #36]	; 0x24
	left.prevcount = __HAL_TIM_GET_COUNTER(TIM_LeftEnc);
	right.encoder = TIM_RightEnc;
	left.encoder = TIM_LeftEnc;
	right.pwm = TIM_RightMot;
	left.pwm = TIM_LeftMot;
	right.dir = false;
 8002df0:	2600      	movs	r6, #0
	right.prevcount = __HAL_TIM_GET_COUNTER(TIM_RightEnc);
 8002df2:	f8ae 4014 	strh.w	r4, [lr, #20]
	left.prevcount = __HAL_TIM_GET_COUNTER(TIM_LeftEnc);
 8002df6:	680c      	ldr	r4, [r1, #0]
	right.prevpos = 0.0;
	left.setRPM = 0.0;
	left.setDis = 0.0;
	left.distance_traveled = 0.0f;
	left.prevpos = 0.0;
	PIDInit(&right.PID, KP, KI, KD, .1, ((float)PID_PERIOD)/1000.0, 255, AUTOMATIC, DIRECT);
 8002df8:	f04f 0b01 	mov.w	fp, #1
	left.prevcount = __HAL_TIM_GET_COUNTER(TIM_LeftEnc);
 8002dfc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002dfe:	4c20      	ldr	r4, [pc, #128]	; (8002e80 <initMot+0x9c>)
	PIDInit(&right.PID, KP, KI, KD, .1, ((float)PID_PERIOD)/1000.0, 255, AUTOMATIC, DIRECT);
 8002e00:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002e90 <initMot+0xac>
	left.pwm = TIM_LeftMot;
 8002e04:	61e3      	str	r3, [r4, #28]
	right.setRPM = 0.0;
 8002e06:	2300      	movs	r3, #0
	left.prevcount = __HAL_TIM_GET_COUNTER(TIM_LeftEnc);
 8002e08:	82a5      	strh	r5, [r4, #20]
	PIDInit(&right.PID, KP, KI, KD, .1, ((float)PID_PERIOD)/1000.0, 255, AUTOMATIC, DIRECT);
 8002e0a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8002e94 <initMot+0xb0>
 8002e0e:	4d1d      	ldr	r5, [pc, #116]	; (8002e84 <initMot+0xa0>)
 8002e10:	4f1d      	ldr	r7, [pc, #116]	; (8002e88 <initMot+0xa4>)
 8002e12:	f8df a084 	ldr.w	sl, [pc, #132]	; 8002e98 <initMot+0xb4>
		TIM_HandleTypeDef* TIM_RightMot, TIM_HandleTypeDef* TIM_LeftMot){
 8002e16:	b087      	sub	sp, #28
	right.encoder = TIM_RightEnc;
 8002e18:	f8ce 0018 	str.w	r0, [lr, #24]
	right.pwm = TIM_RightMot;
 8002e1c:	f8ce 201c 	str.w	r2, [lr, #28]
	right.setRPM = 0.0;
 8002e20:	f8ce 3000 	str.w	r3, [lr]
	right.setDis = 0.0;
 8002e24:	f8ce 3010 	str.w	r3, [lr, #16]
	right.distance_traveled = 0.0f;
 8002e28:	f8ce 3008 	str.w	r3, [lr, #8]
	right.prevpos = 0.0;
 8002e2c:	f8ce 300c 	str.w	r3, [lr, #12]
	left.encoder = TIM_LeftEnc;
 8002e30:	61a1      	str	r1, [r4, #24]
	right.dir = false;
 8002e32:	f88e 6004 	strb.w	r6, [lr, #4]
	left.setRPM = 0.0;
 8002e36:	6023      	str	r3, [r4, #0]
	left.setDis = 0.0;
 8002e38:	6123      	str	r3, [r4, #16]
	left.distance_traveled = 0.0f;
 8002e3a:	60a3      	str	r3, [r4, #8]
	left.prevpos = 0.0;
 8002e3c:	60e3      	str	r3, [r4, #12]
	left.dir = false;
 8002e3e:	7126      	strb	r6, [r4, #4]
	PIDInit(&right.PID, KP, KI, KD, .1, ((float)PID_PERIOD)/1000.0, 255, AUTOMATIC, DIRECT);
 8002e40:	f10e 0020 	add.w	r0, lr, #32
 8002e44:	464b      	mov	r3, r9
 8002e46:	4642      	mov	r2, r8
 8002e48:	4639      	mov	r1, r7
 8002e4a:	9604      	str	r6, [sp, #16]
 8002e4c:	f8cd b00c 	str.w	fp, [sp, #12]
 8002e50:	f8cd a008 	str.w	sl, [sp, #8]
 8002e54:	9501      	str	r5, [sp, #4]
 8002e56:	9500      	str	r5, [sp, #0]
 8002e58:	f000 fc0c 	bl	8003674 <PIDInit>
	PIDInit(&left.PID, KP, KI, KD, .1, ((float)PID_PERIOD)/1000.0, 255, AUTOMATIC, DIRECT);
 8002e5c:	9604      	str	r6, [sp, #16]
 8002e5e:	f8cd b00c 	str.w	fp, [sp, #12]
 8002e62:	f8cd a008 	str.w	sl, [sp, #8]
 8002e66:	9501      	str	r5, [sp, #4]
 8002e68:	9500      	str	r5, [sp, #0]
 8002e6a:	464b      	mov	r3, r9
 8002e6c:	4642      	mov	r2, r8
 8002e6e:	4639      	mov	r1, r7
 8002e70:	f104 0020 	add.w	r0, r4, #32
 8002e74:	f000 fbfe 	bl	8003674 <PIDInit>

}
 8002e78:	b007      	add	sp, #28
 8002e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e7e:	bf00      	nop
 8002e80:	200002dc 	.word	0x200002dc
 8002e84:	3dcccccd 	.word	0x3dcccccd
 8002e88:	3f666666 	.word	0x3f666666
 8002e8c:	20000280 	.word	0x20000280
 8002e90:	3d8f5c29 	.word	0x3d8f5c29
 8002e94:	40533333 	.word	0x40533333
 8002e98:	437f0000 	.word	0x437f0000
 8002e9c:	00000000 	.word	0x00000000

08002ea0 <setLin>:
  }
  //Re-initialize targeting to a rotation/distance
  right.distance_traveled = 0.0;
  left.distance_traveled = 0.0;
}
void setLin(float dis, float spd){
 8002ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea2:	4607      	mov	r7, r0
  right.setRPM = (spd/(2.0*M_PI*WHEELRAD))*60.0;
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	f7fd fad7 	bl	8000458 <__aeabi_f2d>
 8002eaa:	a313      	add	r3, pc, #76	; (adr r3, 8002ef8 <setLin+0x58>)
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	f7fd fc50 	bl	8000754 <__aeabi_ddiv>
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <setLin+0x60>)
 8002eb8:	f7fd fb22 	bl	8000500 <__aeabi_dmul>
 8002ebc:	f7fd fe02 	bl	8000ac4 <__aeabi_d2f>
 8002ec0:	4d10      	ldr	r5, [pc, #64]	; (8002f04 <setLin+0x64>)
  left.setRPM = right.setRPM;
 8002ec2:	4c11      	ldr	r4, [pc, #68]	; (8002f08 <setLin+0x68>)
  right.setRPM = (spd/(2.0*M_PI*WHEELRAD))*60.0;
 8002ec4:	6028      	str	r0, [r5, #0]
  left.setRPM = right.setRPM;
 8002ec6:	6020      	str	r0, [r4, #0]

  if (right.setRPM < 0){
 8002ec8:	2100      	movs	r1, #0
  right.setRPM = (spd/(2.0*M_PI*WHEELRAD))*60.0;
 8002eca:	4606      	mov	r6, r0
  if (right.setRPM < 0){
 8002ecc:	f7fe f8f6 	bl	80010bc <__aeabi_fcmplt>
 8002ed0:	462a      	mov	r2, r5
 8002ed2:	4623      	mov	r3, r4
 8002ed4:	b160      	cbz	r0, 8002ef0 <setLin+0x50>
    right.setRPM = -1.0*right.setRPM;
    left.setRPM = -1.0*left.setRPM;
    right.dir = true;
 8002ed6:	2101      	movs	r1, #1
    right.setRPM = -1.0*right.setRPM;
 8002ed8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8002edc:	602e      	str	r6, [r5, #0]
    left.setRPM = -1.0*left.setRPM;
 8002ede:	6026      	str	r6, [r4, #0]
    right.dir = true;
 8002ee0:	7129      	strb	r1, [r5, #4]
    left.dir = true;
 8002ee2:	7121      	strb	r1, [r4, #4]
  }

  right.setDis = dis;
  left.setDis = dis;
  //Re-initialize targeting to a rotation/distance
  right.distance_traveled = 0.0;
 8002ee4:	2100      	movs	r1, #0
  right.setDis = dis;
 8002ee6:	6117      	str	r7, [r2, #16]
  left.setDis = dis;
 8002ee8:	611f      	str	r7, [r3, #16]
  right.distance_traveled = 0.0;
 8002eea:	6091      	str	r1, [r2, #8]
  left.distance_traveled = 0.0;
 8002eec:	6099      	str	r1, [r3, #8]
 8002eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    right.dir = false;
 8002ef0:	7128      	strb	r0, [r5, #4]
    left.dir = false;
 8002ef2:	7120      	strb	r0, [r4, #4]
 8002ef4:	e7f6      	b.n	8002ee4 <setLin+0x44>
 8002ef6:	bf00      	nop
 8002ef8:	b73fefb5 	.word	0xb73fefb5
 8002efc:	4081abe4 	.word	0x4081abe4
 8002f00:	404e0000 	.word	0x404e0000
 8002f04:	20000280 	.word	0x20000280
 8002f08:	200002dc 	.word	0x200002dc

08002f0c <Get_EncoderPos>:
	left.prevpos = newposition2;
	return;
}
uint16_t Get_EncoderPos(struct motor* Mot){
	uint16_t newposition;
	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(Mot->encoder)){
 8002f0c:	6983      	ldr	r3, [r0, #24]
uint16_t Get_EncoderPos(struct motor* Mot){
 8002f0e:	b510      	push	{r4, lr}
	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(Mot->encoder)){
 8002f10:	6819      	ldr	r1, [r3, #0]
 8002f12:	8a82      	ldrh	r2, [r0, #20]
 8002f14:	680b      	ldr	r3, [r1, #0]
 8002f16:	f013 0f10 	tst.w	r3, #16
		if(Mot->prevcount < __HAL_TIM_GET_COUNTER(Mot->encoder)){
 8002f1a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(Mot->encoder)){
 8002f1c:	d009      	beq.n	8002f32 <Get_EncoderPos+0x26>
		if(Mot->prevcount < __HAL_TIM_GET_COUNTER(Mot->encoder)){
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d20d      	bcs.n	8002f3e <Get_EncoderPos+0x32>
			newposition = 65535 - __HAL_TIM_GET_COUNTER(Mot->encoder) + Mot->prevcount;
 8002f22:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002f24:	1e53      	subs	r3, r2, #1
 8002f26:	1b1b      	subs	r3, r3, r4
			newposition = __HAL_TIM_GET_COUNTER(Mot->encoder) + 65535 - Mot->prevcount;
		}else{
			newposition = abs(__HAL_TIM_GET_COUNTER(Mot->encoder) - Mot->prevcount);
		}
	}
	Mot->prevcount = __HAL_TIM_GET_COUNTER(Mot->encoder);
 8002f28:	6a4a      	ldr	r2, [r1, #36]	; 0x24
			newposition = abs(__HAL_TIM_GET_COUNTER(Mot->encoder) - Mot->prevcount);
 8002f2a:	b29b      	uxth	r3, r3
	Mot->prevcount = __HAL_TIM_GET_COUNTER(Mot->encoder);
 8002f2c:	8282      	strh	r2, [r0, #20]
	return newposition;
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	bd10      	pop	{r4, pc}
		if(Mot->prevcount > __HAL_TIM_GET_COUNTER(Mot->encoder)){
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d903      	bls.n	8002f3e <Get_EncoderPos+0x32>
			newposition = __HAL_TIM_GET_COUNTER(Mot->encoder) + 65535 - Mot->prevcount;
 8002f36:	43d3      	mvns	r3, r2
 8002f38:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002f3a:	4423      	add	r3, r4
 8002f3c:	e7f4      	b.n	8002f28 <Get_EncoderPos+0x1c>
			newposition = abs(__HAL_TIM_GET_COUNTER(Mot->encoder) - Mot->prevcount);
 8002f3e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	bfb8      	it	lt
 8002f46:	425b      	neglt	r3, r3
 8002f48:	e7ee      	b.n	8002f28 <Get_EncoderPos+0x1c>
	...

08002f4c <Get_LeftEncoderPos>:
uint16_t Get_LeftEncoderPos(){
	return Get_EncoderPos(&left);
 8002f4c:	4801      	ldr	r0, [pc, #4]	; (8002f54 <Get_LeftEncoderPos+0x8>)
 8002f4e:	f7ff bfdd 	b.w	8002f0c <Get_EncoderPos>
 8002f52:	bf00      	nop
 8002f54:	200002dc 	.word	0x200002dc

08002f58 <Get_RightEncoderPos>:
}
uint16_t Get_RightEncoderPos(){
	return Get_EncoderPos(&right);
 8002f58:	4801      	ldr	r0, [pc, #4]	; (8002f60 <Get_RightEncoderPos+0x8>)
 8002f5a:	f7ff bfd7 	b.w	8002f0c <Get_EncoderPos>
 8002f5e:	bf00      	nop
 8002f60:	20000280 	.word	0x20000280

08002f64 <Set_MotorDir>:
}
void Set_MotorDir(){

	if(right.dir == true) {
 8002f64:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <Set_MotorDir+0x74>)
void Set_MotorDir(){
 8002f66:	b510      	push	{r4, lr}
	if(right.dir == true) {
 8002f68:	791c      	ldrb	r4, [r3, #4]
 8002f6a:	b1c4      	cbz	r4, 8002f9e <Set_MotorDir+0x3a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	4611      	mov	r1, r2
 8002f70:	481a      	ldr	r0, [pc, #104]	; (8002fdc <Set_MotorDir+0x78>)
 8002f72:	f7fe fa87 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8002f76:	2200      	movs	r2, #0
	} else if (right.setRPM == 0.0) {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8002f78:	2102      	movs	r1, #2
 8002f7a:	4818      	ldr	r0, [pc, #96]	; (8002fdc <Set_MotorDir+0x78>)
 8002f7c:	f7fe fa82 	bl	8001484 <HAL_GPIO_WritePin>
	}
	if(left.dir == true) {
 8002f80:	4b17      	ldr	r3, [pc, #92]	; (8002fe0 <Set_MotorDir+0x7c>)
 8002f82:	791c      	ldrb	r4, [r3, #4]
 8002f84:	b1d4      	cbz	r4, 8002fbc <Set_MotorDir+0x58>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8002f86:	2201      	movs	r2, #1
 8002f88:	2104      	movs	r1, #4
 8002f8a:	4814      	ldr	r0, [pc, #80]	; (8002fdc <Set_MotorDir+0x78>)
 8002f8c:	f7fe fa7a 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8002f90:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
	}
}
 8002f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8002f96:	2108      	movs	r1, #8
 8002f98:	4810      	ldr	r0, [pc, #64]	; (8002fdc <Set_MotorDir+0x78>)
 8002f9a:	f7fe ba73 	b.w	8001484 <HAL_GPIO_WritePin>
	} else if (right.setRPM == 0.0) {
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	f7fe f881 	bl	80010a8 <__aeabi_fcmpeq>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	b110      	cbz	r0, 8002fb0 <Set_MotorDir+0x4c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8002faa:	4622      	mov	r2, r4
 8002fac:	2101      	movs	r1, #1
 8002fae:	e7df      	b.n	8002f70 <Set_MotorDir+0xc>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	480a      	ldr	r0, [pc, #40]	; (8002fdc <Set_MotorDir+0x78>)
 8002fb4:	f7fe fa66 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8002fb8:	2201      	movs	r2, #1
 8002fba:	e7dd      	b.n	8002f78 <Set_MotorDir+0x14>
	} else if (left.setRPM == 0.0) {
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	f7fe f872 	bl	80010a8 <__aeabi_fcmpeq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	b108      	cbz	r0, 8002fcc <Set_MotorDir+0x68>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8002fc8:	4622      	mov	r2, r4
 8002fca:	e7dd      	b.n	8002f88 <Set_MotorDir+0x24>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8002fcc:	2104      	movs	r1, #4
 8002fce:	4803      	ldr	r0, [pc, #12]	; (8002fdc <Set_MotorDir+0x78>)
 8002fd0:	f7fe fa58 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	e7dc      	b.n	8002f92 <Set_MotorDir+0x2e>
 8002fd8:	20000280 	.word	0x20000280
 8002fdc:	40020800 	.word	0x40020800
 8002fe0:	200002dc 	.word	0x200002dc

08002fe4 <Set_PIDOut>:
void Set_PIDOut(float rpm1, float rpm2, UART_HandleTypeDef* huart){
 8002fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
//      setpoint - The desired setpoint the PID controller will try to obtain.
// Returns:
//      Nothing.
// 
inline void 
PIDSetpointSet(PIDControl *pid, float setpoint) { pid->setpoint = setpoint; }
 8002fe8:	4e17      	ldr	r6, [pc, #92]	; (8003048 <Set_PIDOut+0x64>)
 8002fea:	4f18      	ldr	r7, [pc, #96]	; (800304c <Set_PIDOut+0x68>)
 8002fec:	6833      	ldr	r3, [r6, #0]
 8002fee:	460c      	mov	r4, r1
 8002ff0:	6573      	str	r3, [r6, #84]	; 0x54
//      input - The value the controller will work with.
// Returns:
//      Nothing.
// 
inline void 
PIDInputSet(PIDControl *pid, float input) { pid->input = input; }
 8002ff2:	4633      	mov	r3, r6
 8002ff4:	f843 0f20 	str.w	r0, [r3, #32]!
	PIDSetpointSet(&right.PID,right.setRPM);
	PIDInputSet(&right.PID,rpm1);
	PIDCompute(&right.PID);
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fa8e 	bl	800351a <PIDCompute>
 8002ffe:	4638      	mov	r0, r7
PIDSetpointSet(PIDControl *pid, float setpoint) { pid->setpoint = setpoint; }
 8003000:	683b      	ldr	r3, [r7, #0]
PIDInputSet(PIDControl *pid, float input) { pid->input = input; }
 8003002:	f840 4f20 	str.w	r4, [r0, #32]!
PIDSetpointSet(PIDControl *pid, float setpoint) { pid->setpoint = setpoint; }
 8003006:	657b      	str	r3, [r7, #84]	; 0x54
	PIDSetpointSet(&left.PID,left.setRPM);
	PIDInputSet(&left.PID,rpm2);
	PIDCompute(&left.PID);
 8003008:	f000 fa87 	bl	800351a <PIDCompute>
	uint16_t speed1 = (uint16_t)PIDOutputGet(&right.PID);
	uint16_t speed2 = (uint16_t)PIDOutputGet(&left.PID);
 800300c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800300e:	f7fe f8a3 	bl	8001158 <__aeabi_f2uiz>
	speed1 = map(speed1, 0, 255, 0, 2000);
	speed2 = map(speed2, 0, 255, 0, 2000);
//	char buffer[25];
//	uint8_t len = sprintf(buffer, "PWM:%i\r\n", speed1);
//	HAL_UART_Transmit(huart, buffer, len, 1000);
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, speed1);
 8003012:	69f3      	ldr	r3, [r6, #28]
	}

}
uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003014:	b285      	uxth	r5, r0
	uint16_t speed1 = (uint16_t)PIDOutputGet(&right.PID);
 8003016:	6ab0      	ldr	r0, [r6, #40]	; 0x28
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, speed1);
 8003018:	f8d3 9000 	ldr.w	r9, [r3]
	uint16_t speed1 = (uint16_t)PIDOutputGet(&right.PID);
 800301c:	f7fe f89c 	bl	8001158 <__aeabi_f2uiz>
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003020:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 8003024:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8003028:	b280      	uxth	r0, r0
 800302a:	4365      	muls	r5, r4
 800302c:	4344      	muls	r4, r0
 800302e:	fb95 f5f8 	sdiv	r5, r5, r8
 8003032:	fb94 f4f8 	sdiv	r4, r4, r8
	__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, speed2);
 8003036:	69fb      	ldr	r3, [r7, #28]
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, speed1);
 8003038:	b2a4      	uxth	r4, r4
	__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, speed2);
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	b2ad      	uxth	r5, r5
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, speed1);
 800303e:	f8c9 4034 	str.w	r4, [r9, #52]	; 0x34
	__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, speed2);
 8003042:	635d      	str	r5, [r3, #52]	; 0x34
 8003044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003048:	20000280 	.word	0x20000280
 800304c:	200002dc 	.word	0x200002dc

08003050 <Run_PID>:
void Run_PID(UART_HandleTypeDef* huart){
 8003050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003054:	b08f      	sub	sp, #60	; 0x3c
 8003056:	4682      	mov	sl, r0
	volatile uint64_t tim = Get_Time();
 8003058:	f7ff febe 	bl	8002dd8 <Get_Time>
	volatile uint32_t deltat = (uint32_t)(tim - prevtim);
 800305c:	4e74      	ldr	r6, [pc, #464]	; (8003230 <Run_PID+0x1e0>)
	volatile uint64_t tim = Get_Time();
 800305e:	e9cd 0104 	strd	r0, r1, [sp, #16]
	volatile uint32_t deltat = (uint32_t)(tim - prevtim);
 8003062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003066:	6833      	ldr	r3, [r6, #0]
 8003068:	1ad2      	subs	r2, r2, r3
 800306a:	9203      	str	r2, [sp, #12]
	if(deltat < PID_PERIOD){
 800306c:	9b03      	ldr	r3, [sp, #12]
 800306e:	2b63      	cmp	r3, #99	; 0x63
 8003070:	f240 80d1 	bls.w	8003216 <Run_PID+0x1c6>
	uint16_t newposition1 = Get_EncoderPos(&right);
 8003074:	4c6f      	ldr	r4, [pc, #444]	; (8003234 <Run_PID+0x1e4>)
	Set_MotorDir();
 8003076:	f7ff ff75 	bl	8002f64 <Set_MotorDir>
	uint16_t newposition1 = Get_EncoderPos(&right);
 800307a:	4620      	mov	r0, r4
 800307c:	f7ff ff46 	bl	8002f0c <Get_EncoderPos>
 8003080:	4605      	mov	r5, r0
	uint16_t newposition2 = Get_EncoderPos(&left);
 8003082:	486d      	ldr	r0, [pc, #436]	; (8003238 <Run_PID+0x1e8>)
 8003084:	f7ff ff42 	bl	8002f0c <Get_EncoderPos>
	uint8_t len = sprintf(buffer, "newposition:%i\r\n", newposition1);
 8003088:	462a      	mov	r2, r5
	uint16_t newposition2 = Get_EncoderPos(&left);
 800308a:	4607      	mov	r7, r0
	uint8_t len = sprintf(buffer, "newposition:%i\r\n", newposition1);
 800308c:	496b      	ldr	r1, [pc, #428]	; (800323c <Run_PID+0x1ec>)
 800308e:	a807      	add	r0, sp, #28
 8003090:	f000 feec 	bl	8003e6c <siprintf>
	HAL_UART_Transmit(huart, buffer, len, 1000);
 8003094:	a907      	add	r1, sp, #28
 8003096:	b2c2      	uxtb	r2, r0
 8003098:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800309c:	4650      	mov	r0, sl
 800309e:	f7ff fc57 	bl	8002950 <HAL_UART_Transmit>
	prevtim = tim;
 80030a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	float vel1 = ((float)newposition1) * 10; //encoder pulses per second
 80030a6:	4628      	mov	r0, r5
	prevtim = tim;
 80030a8:	e9c6 2300 	strd	r2, r3, [r6]
	float vel1 = ((float)newposition1) * 10; //encoder pulses per second
 80030ac:	f7fd fe10 	bl	8000cd0 <__aeabi_ui2f>
 80030b0:	4963      	ldr	r1, [pc, #396]	; (8003240 <Run_PID+0x1f0>)
 80030b2:	4680      	mov	r8, r0
 80030b4:	f7fd fe64 	bl	8000d80 <__aeabi_fmul>
	float rpm1 = ((vel1 * 60)/3000); //Measured motor RPM
 80030b8:	4962      	ldr	r1, [pc, #392]	; (8003244 <Run_PID+0x1f4>)
 80030ba:	f7fd fe61 	bl	8000d80 <__aeabi_fmul>
 80030be:	4962      	ldr	r1, [pc, #392]	; (8003248 <Run_PID+0x1f8>)
 80030c0:	f7fd ff12 	bl	8000ee8 <__aeabi_fdiv>
 80030c4:	4606      	mov	r6, r0
	float vel2 = ((float)newposition2) * 10; //encoder pulses per second
 80030c6:	4638      	mov	r0, r7
 80030c8:	f7fd fe02 	bl	8000cd0 <__aeabi_ui2f>
 80030cc:	495c      	ldr	r1, [pc, #368]	; (8003240 <Run_PID+0x1f0>)
 80030ce:	9001      	str	r0, [sp, #4]
 80030d0:	f7fd fe56 	bl	8000d80 <__aeabi_fmul>
	float rpm2 = ((vel2 * 60)/3000);
 80030d4:	495b      	ldr	r1, [pc, #364]	; (8003244 <Run_PID+0x1f4>)
 80030d6:	f7fd fe53 	bl	8000d80 <__aeabi_fmul>
 80030da:	495b      	ldr	r1, [pc, #364]	; (8003248 <Run_PID+0x1f8>)
 80030dc:	f7fd ff04 	bl	8000ee8 <__aeabi_fdiv>
 80030e0:	4607      	mov	r7, r0
	float realspeed1 = (rpm1 * 2.0 * M_PI * WHEELRAD)/60; //Linear speed in mm/s
 80030e2:	4630      	mov	r0, r6
 80030e4:	f7fd f9b8 	bl	8000458 <__aeabi_f2d>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	f7fd f856 	bl	800019c <__adddf3>
 80030f0:	a34b      	add	r3, pc, #300	; (adr r3, 8003220 <Run_PID+0x1d0>)
 80030f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f6:	f7fd fa03 	bl	8000500 <__aeabi_dmul>
 80030fa:	2200      	movs	r2, #0
 80030fc:	4b53      	ldr	r3, [pc, #332]	; (800324c <Run_PID+0x1fc>)
 80030fe:	f7fd f9ff 	bl	8000500 <__aeabi_dmul>
 8003102:	2200      	movs	r2, #0
 8003104:	4b52      	ldr	r3, [pc, #328]	; (8003250 <Run_PID+0x200>)
 8003106:	f7fd fb25 	bl	8000754 <__aeabi_ddiv>
 800310a:	f7fd fcdb 	bl	8000ac4 <__aeabi_d2f>
 800310e:	4683      	mov	fp, r0
	float realspeed2 = (rpm2 * 2.0 * M_PI * WHEELRAD)/60; //Linear speed in mm/s
 8003110:	4638      	mov	r0, r7
 8003112:	f7fd f9a1 	bl	8000458 <__aeabi_f2d>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	f7fd f83f 	bl	800019c <__adddf3>
 800311e:	a340      	add	r3, pc, #256	; (adr r3, 8003220 <Run_PID+0x1d0>)
 8003120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003124:	f7fd f9ec 	bl	8000500 <__aeabi_dmul>
 8003128:	2200      	movs	r2, #0
 800312a:	4b48      	ldr	r3, [pc, #288]	; (800324c <Run_PID+0x1fc>)
 800312c:	f7fd f9e8 	bl	8000500 <__aeabi_dmul>
 8003130:	4b47      	ldr	r3, [pc, #284]	; (8003250 <Run_PID+0x200>)
 8003132:	2200      	movs	r2, #0
 8003134:	f7fd fb0e 	bl	8000754 <__aeabi_ddiv>
 8003138:	f7fd fcc4 	bl	8000ac4 <__aeabi_d2f>
	if (right.dir)
 800313c:	7923      	ldrb	r3, [r4, #4]
	float realspeed2 = (rpm2 * 2.0 * M_PI * WHEELRAD)/60; //Linear speed in mm/s
 800313e:	4681      	mov	r9, r0
	if (right.dir)
 8003140:	b10b      	cbz	r3, 8003146 <Run_PID+0xf6>
		rpm1 = -1*rpm1;
 8003142:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
	if (left.dir)
 8003146:	4d3c      	ldr	r5, [pc, #240]	; (8003238 <Run_PID+0x1e8>)
 8003148:	792b      	ldrb	r3, [r5, #4]
 800314a:	b10b      	cbz	r3, 8003150 <Run_PID+0x100>
		rpm2 = -1*rpm2;
 800314c:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
	Set_PIDOut(rpm1, rpm2, huart);
 8003150:	4652      	mov	r2, sl
 8003152:	4639      	mov	r1, r7
 8003154:	4630      	mov	r0, r6
 8003156:	f7ff ff45 	bl	8002fe4 <Set_PIDOut>
	right.distance_traveled = right.distance_traveled + (realspeed1*deltat*1e-3); //integrate linear velocity to obtain distance
 800315a:	9803      	ldr	r0, [sp, #12]
 800315c:	f7fd fdb8 	bl	8000cd0 <__aeabi_ui2f>
 8003160:	4659      	mov	r1, fp
 8003162:	f7fd fe0d 	bl	8000d80 <__aeabi_fmul>
 8003166:	f7fd f977 	bl	8000458 <__aeabi_f2d>
 800316a:	a32f      	add	r3, pc, #188	; (adr r3, 8003228 <Run_PID+0x1d8>)
 800316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003170:	f7fd f9c6 	bl	8000500 <__aeabi_dmul>
 8003174:	4606      	mov	r6, r0
 8003176:	68a0      	ldr	r0, [r4, #8]
 8003178:	460f      	mov	r7, r1
 800317a:	f7fd f96d 	bl	8000458 <__aeabi_f2d>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4630      	mov	r0, r6
 8003184:	4639      	mov	r1, r7
 8003186:	f7fd f809 	bl	800019c <__adddf3>
 800318a:	f7fd fc9b 	bl	8000ac4 <__aeabi_d2f>
 800318e:	4682      	mov	sl, r0
 8003190:	60a0      	str	r0, [r4, #8]
	left.distance_traveled = left.distance_traveled + (realspeed2*deltat*1e-3); //integrate linear velocity to obtain distance
 8003192:	9803      	ldr	r0, [sp, #12]
 8003194:	f7fd fd9c 	bl	8000cd0 <__aeabi_ui2f>
 8003198:	4649      	mov	r1, r9
 800319a:	f7fd fdf1 	bl	8000d80 <__aeabi_fmul>
 800319e:	f7fd f95b 	bl	8000458 <__aeabi_f2d>
 80031a2:	a321      	add	r3, pc, #132	; (adr r3, 8003228 <Run_PID+0x1d8>)
 80031a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a8:	f7fd f9aa 	bl	8000500 <__aeabi_dmul>
 80031ac:	4606      	mov	r6, r0
 80031ae:	68a8      	ldr	r0, [r5, #8]
 80031b0:	460f      	mov	r7, r1
 80031b2:	f7fd f951 	bl	8000458 <__aeabi_f2d>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4630      	mov	r0, r6
 80031bc:	4639      	mov	r1, r7
 80031be:	f7fc ffed 	bl	800019c <__adddf3>
 80031c2:	f7fd fc7f 	bl	8000ac4 <__aeabi_d2f>
	if ((abs(right.distance_traveled-right.setDis) <= 5)||(abs(left.distance_traveled-left.setDis) <= 5) ){
 80031c6:	6921      	ldr	r1, [r4, #16]
	left.distance_traveled = left.distance_traveled + (realspeed2*deltat*1e-3); //integrate linear velocity to obtain distance
 80031c8:	60a8      	str	r0, [r5, #8]
 80031ca:	4606      	mov	r6, r0
	if ((abs(right.distance_traveled-right.setDis) <= 5)||(abs(left.distance_traveled-left.setDis) <= 5) ){
 80031cc:	4650      	mov	r0, sl
 80031ce:	f7fd fccd 	bl	8000b6c <__aeabi_fsub>
 80031d2:	f7fd ff9b 	bl	800110c <__aeabi_f2iz>
 80031d6:	3005      	adds	r0, #5
 80031d8:	280a      	cmp	r0, #10
 80031da:	d908      	bls.n	80031ee <Run_PID+0x19e>
 80031dc:	6929      	ldr	r1, [r5, #16]
 80031de:	4630      	mov	r0, r6
 80031e0:	f7fd fcc4 	bl	8000b6c <__aeabi_fsub>
 80031e4:	f7fd ff92 	bl	800110c <__aeabi_f2iz>
 80031e8:	3005      	adds	r0, #5
 80031ea:	280a      	cmp	r0, #10
 80031ec:	d80f      	bhi.n	800320e <Run_PID+0x1be>
		__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, 0);
 80031ee:	2200      	movs	r2, #0
 80031f0:	69e3      	ldr	r3, [r4, #28]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, 0);
 80031f6:	69eb      	ldr	r3, [r5, #28]
 80031f8:	681b      	ldr	r3, [r3, #0]
		right.dir = false;
 80031fa:	7122      	strb	r2, [r4, #4]
		__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, 0);
 80031fc:	635a      	str	r2, [r3, #52]	; 0x34
		right.setRPM = 0.0; //Brake
 80031fe:	2300      	movs	r3, #0
		left.dir = false;
 8003200:	712a      	strb	r2, [r5, #4]
		right.setRPM = 0.0; //Brake
 8003202:	6023      	str	r3, [r4, #0]
		left.setRPM = 0.0; //Brake
 8003204:	602b      	str	r3, [r5, #0]
		right.setDis = 0.0;
 8003206:	6123      	str	r3, [r4, #16]
		left.setDis = 0.0;
 8003208:	612b      	str	r3, [r5, #16]
		Set_MotorDir();
 800320a:	f7ff feab 	bl	8002f64 <Set_MotorDir>
	left.prevpos = newposition2;
 800320e:	9b01      	ldr	r3, [sp, #4]
	right.prevpos = newposition1;
 8003210:	f8c4 800c 	str.w	r8, [r4, #12]
	left.prevpos = newposition2;
 8003214:	60eb      	str	r3, [r5, #12]
}
 8003216:	b00f      	add	sp, #60	; 0x3c
 8003218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800321c:	f3af 8000 	nop.w
 8003220:	54442d18 	.word	0x54442d18
 8003224:	400921fb 	.word	0x400921fb
 8003228:	d2f1a9fc 	.word	0xd2f1a9fc
 800322c:	3f50624d 	.word	0x3f50624d
 8003230:	20000200 	.word	0x20000200
 8003234:	20000280 	.word	0x20000280
 8003238:	200002dc 	.word	0x200002dc
 800323c:	0800642f 	.word	0x0800642f
 8003240:	41200000 	.word	0x41200000
 8003244:	42700000 	.word	0x42700000
 8003248:	453b8000 	.word	0x453b8000
 800324c:	40568000 	.word	0x40568000
 8003250:	404e0000 	.word	0x404e0000

08003254 <Run_MotorPWM>:
void Run_MotorPWM(int16_t pwm){
 8003254:	b508      	push	{r3, lr}
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, abs(pwm));
 8003256:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <Run_MotorPWM+0x6c>)
	if(pwm >= 0){
 8003258:	2800      	cmp	r0, #0
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, abs(pwm));
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8003262:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8003266:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, abs(pwm));
 8003268:	4a16      	ldr	r2, [pc, #88]	; (80032c4 <Run_MotorPWM+0x70>)
 800326a:	69d2      	ldr	r2, [r2, #28]
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	6353      	str	r3, [r2, #52]	; 0x34
	if(pwm >= 0){
 8003270:	db15      	blt.n	800329e <Run_MotorPWM+0x4a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8003272:	2200      	movs	r2, #0
 8003274:	2104      	movs	r1, #4
 8003276:	4814      	ldr	r0, [pc, #80]	; (80032c8 <Run_MotorPWM+0x74>)
 8003278:	f7fe f904 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800327c:	2201      	movs	r2, #1
 800327e:	2108      	movs	r1, #8
 8003280:	4811      	ldr	r0, [pc, #68]	; (80032c8 <Run_MotorPWM+0x74>)
 8003282:	f7fe f8ff 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8003286:	2200      	movs	r2, #0
 8003288:	2101      	movs	r1, #1
 800328a:	480f      	ldr	r0, [pc, #60]	; (80032c8 <Run_MotorPWM+0x74>)
 800328c:	f7fe f8fa 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8003290:	2201      	movs	r2, #1
}
 8003292:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8003296:	2102      	movs	r1, #2
 8003298:	480b      	ldr	r0, [pc, #44]	; (80032c8 <Run_MotorPWM+0x74>)
 800329a:	f7fe b8f3 	b.w	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800329e:	2201      	movs	r2, #1
 80032a0:	2104      	movs	r1, #4
 80032a2:	4809      	ldr	r0, [pc, #36]	; (80032c8 <Run_MotorPWM+0x74>)
 80032a4:	f7fe f8ee 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80032a8:	2200      	movs	r2, #0
 80032aa:	2108      	movs	r1, #8
 80032ac:	4806      	ldr	r0, [pc, #24]	; (80032c8 <Run_MotorPWM+0x74>)
 80032ae:	f7fe f8e9 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80032b2:	2201      	movs	r2, #1
 80032b4:	4804      	ldr	r0, [pc, #16]	; (80032c8 <Run_MotorPWM+0x74>)
 80032b6:	4611      	mov	r1, r2
 80032b8:	f7fe f8e4 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80032bc:	2200      	movs	r2, #0
 80032be:	e7e8      	b.n	8003292 <Run_MotorPWM+0x3e>
 80032c0:	20000280 	.word	0x20000280
 80032c4:	200002dc 	.word	0x200002dc
 80032c8:	40020800 	.word	0x40020800

080032cc <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032cc:	4b3e      	ldr	r3, [pc, #248]	; (80033c8 <MX_GPIO_Init+0xfc>)
{
 80032ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032d2:	69da      	ldr	r2, [r3, #28]
{
 80032d4:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032d6:	f042 0204 	orr.w	r2, r2, #4
 80032da:	61da      	str	r2, [r3, #28]
 80032dc:	69da      	ldr	r2, [r3, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80032de:	4e3b      	ldr	r6, [pc, #236]	; (80033cc <MX_GPIO_Init+0x100>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032e0:	f002 0204 	and.w	r2, r2, #4
 80032e4:	9200      	str	r2, [sp, #0]
 80032e6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e8:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80032ea:	4630      	mov	r0, r6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ec:	f042 0201 	orr.w	r2, r2, #1
 80032f0:	61da      	str	r2, [r3, #28]
 80032f2:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80032f4:	210f      	movs	r1, #15
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f6:	f002 0201 	and.w	r2, r2, #1
 80032fa:	9201      	str	r2, [sp, #4]
 80032fc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fe:	69da      	ldr	r2, [r3, #28]

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003302:	f042 0202 	orr.w	r2, r2, #2
 8003306:	61da      	str	r2, [r3, #28]
 8003308:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800330a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	9302      	str	r3, [sp, #8]
 8003312:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003314:	f7fe f8b6 	bl	8001484 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003318:	230f      	movs	r3, #15
 800331a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800331c:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800331e:	a903      	add	r1, sp, #12
 8003320:	4630      	mov	r0, r6

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IDD_Measurement_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003322:	2503      	movs	r5, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003324:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003326:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003328:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800332a:	f7fd ffdd 	bl	80012e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 800332e:	2310      	movs	r3, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 8003330:	4f27      	ldr	r7, [pc, #156]	; (80033d0 <MX_GPIO_Init+0x104>)
 8003332:	a903      	add	r1, sp, #12
 8003334:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 8003336:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003338:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 800333c:	f7fd ffd4 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GRP2_Sampling_Pin|GRP2_Ground_Pin;
 8003340:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003342:	a903      	add	r1, sp, #12
 8003344:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GRP2_Sampling_Pin|GRP2_Ground_Pin;
 8003346:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003348:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334c:	f7fd ffcc 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GRP9_Sampling_Pin|GRP9_Ground_Pin;
 8003350:	2330      	movs	r3, #48	; 0x30

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GRP3_Sampling_Pin|GRP3_Ground_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003352:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80033d4 <MX_GPIO_Init+0x108>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003356:	a903      	add	r1, sp, #12
 8003358:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GRP9_Sampling_Pin|GRP9_Ground_Pin;
 800335a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800335c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003360:	f7fd ffc2 	bl	80012e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003364:	a903      	add	r1, sp, #12
 8003366:	4648      	mov	r0, r9

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG10_Pin 
                          |SEG11_Pin|SEG5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pin = GRP3_Sampling_Pin|GRP3_Ground_Pin;
 800336c:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800336e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8003372:	250b      	movs	r5, #11
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003374:	f7fd ffb8 	bl	80012e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG10_Pin 
 8003378:	f64d 4320 	movw	r3, #56352	; 0xdc20
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337c:	a903      	add	r1, sp, #12
 800337e:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG10_Pin 
 8003380:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003382:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003388:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800338a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800338c:	f7fd ffac 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SEG20_Pin|SEG21_Pin|SEG22_Pin|SEG23_Pin;
 8003390:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003394:	a903      	add	r1, sp, #12
 8003396:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = SEG20_Pin|SEG21_Pin|SEG22_Pin|SEG23_Pin;
 8003398:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339a:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80033a2:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a4:	f7fd ffa0 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = COM0_Pin|COM1_Pin|COM2_Pin;
 80033a8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ac:	a903      	add	r1, sp, #12
 80033ae:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = COM0_Pin|COM1_Pin|COM2_Pin;
 80033b0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b2:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80033ba:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033bc:	f7fd ff94 	bl	80012e8 <HAL_GPIO_Init>

}
 80033c0:	b009      	add	sp, #36	; 0x24
 80033c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033c6:	bf00      	nop
 80033c8:	40023800 	.word	0x40023800
 80033cc:	40020800 	.word	0x40020800
 80033d0:	40020000 	.word	0x40020000
 80033d4:	40020400 	.word	0x40020400

080033d8 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033d8:	4a1e      	ldr	r2, [pc, #120]	; (8003454 <SystemClock_Config+0x7c>)
{
 80033da:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033dc:	6813      	ldr	r3, [r2, #0]
{
 80033de:	b092      	sub	sp, #72	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033e0:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80033e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033e8:	6013      	str	r3, [r2, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033ea:	2302      	movs	r3, #2
 80033ec:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033ee:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80033f0:	2300      	movs	r3, #0
 80033f2:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80033f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033f8:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80033fa:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80033fc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80033fe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003402:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003404:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003406:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8003408:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800340a:	f7fe f881 	bl	8001510 <HAL_RCC_OscConfig>
 800340e:	b100      	cbz	r0, 8003412 <SystemClock_Config+0x3a>
 8003410:	e7fe      	b.n	8003410 <SystemClock_Config+0x38>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003412:	220f      	movs	r2, #15
 8003414:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003416:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003418:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800341a:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800341c:	4621      	mov	r1, r4
 800341e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003420:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003424:	f7fe fc0e 	bl	8001c44 <HAL_RCC_ClockConfig>
 8003428:	4604      	mov	r4, r0
 800342a:	b100      	cbz	r0, 800342e <SystemClock_Config+0x56>
 800342c:	e7fe      	b.n	800342c <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800342e:	f7fe fce7 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8003432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003436:	fbb0 f0f3 	udiv	r0, r0, r3
 800343a:	f7fd ff2d 	bl	8001298 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800343e:	2004      	movs	r0, #4
 8003440:	f7fd ff40 	bl	80012c4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003444:	4622      	mov	r2, r4
 8003446:	4621      	mov	r1, r4
 8003448:	f04f 30ff 	mov.w	r0, #4294967295
 800344c:	f7fd fee4 	bl	8001218 <HAL_NVIC_SetPriority>
}
 8003450:	b012      	add	sp, #72	; 0x48
 8003452:	bd10      	pop	{r4, pc}
 8003454:	40007000 	.word	0x40007000

08003458 <main>:
{
 8003458:	b530      	push	{r4, r5, lr}
 800345a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800345c:	f7fd feb0 	bl	80011c0 <HAL_Init>
  SystemClock_Config();
 8003460:	f7ff ffba 	bl	80033d8 <SystemClock_Config>
  MX_GPIO_Init();
 8003464:	f7ff ff32 	bl	80032cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003468:	f000 fc5a 	bl	8003d20 <MX_USART1_UART_Init>
  MX_TIM9_Init();
 800346c:	f000 fb78 	bl	8003b60 <MX_TIM9_Init>
  MX_TIM10_Init();
 8003470:	f000 fbc6 	bl	8003c00 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003474:	f000 fc0c 	bl	8003c90 <MX_TIM11_Init>
  MX_TIM3_Init();
 8003478:	f000 f9ec 	bl	8003854 <MX_TIM3_Init>
  MX_TIM2_Init();
 800347c:	f000 f9b8 	bl	80037f0 <MX_TIM2_Init>
  MX_TIM6_Init();
 8003480:	f000 fa6e 	bl	8003960 <MX_TIM6_Init>
  MX_TIM5_Init();
 8003484:	f000 fa18 	bl	80038b8 <MX_TIM5_Init>
  UART_ReadStart(&huart1);
 8003488:	481b      	ldr	r0, [pc, #108]	; (80034f8 <main+0xa0>)
 800348a:	f7ff fc8d 	bl	8002da8 <UART_ReadStart>
  uint8_t len=sprintf(buffer,"Init\r\n"); //sprintf will return the length of 'buffer'
 800348e:	491b      	ldr	r1, [pc, #108]	; (80034fc <main+0xa4>)
 8003490:	a801      	add	r0, sp, #4
 8003492:	f000 fd0f 	bl	8003eb4 <strcpy>
  HAL_UART_Transmit(&huart1, buffer, len, 1000);
 8003496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800349a:	2206      	movs	r2, #6
 800349c:	a901      	add	r1, sp, #4
 800349e:	4816      	ldr	r0, [pc, #88]	; (80034f8 <main+0xa0>)
 80034a0:	f7ff fa56 	bl	8002950 <HAL_UART_Transmit>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80034a4:	2100      	movs	r1, #0
 80034a6:	4816      	ldr	r0, [pc, #88]	; (8003500 <main+0xa8>)
 80034a8:	f7fe fdf2 	bl	8002090 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80034ac:	2100      	movs	r1, #0
 80034ae:	4815      	ldr	r0, [pc, #84]	; (8003504 <main+0xac>)
 80034b0:	f7fe fdee 	bl	8002090 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80034b4:	2100      	movs	r1, #0
 80034b6:	4814      	ldr	r0, [pc, #80]	; (8003508 <main+0xb0>)
 80034b8:	f7fe fdea 	bl	8002090 <HAL_TIM_PWM_Start>
  initMot(&htim3, &htim2, &htim11, &htim10);
 80034bc:	4b11      	ldr	r3, [pc, #68]	; (8003504 <main+0xac>)
 80034be:	4a12      	ldr	r2, [pc, #72]	; (8003508 <main+0xb0>)
 80034c0:	4912      	ldr	r1, [pc, #72]	; (800350c <main+0xb4>)
 80034c2:	4813      	ldr	r0, [pc, #76]	; (8003510 <main+0xb8>)
 80034c4:	f7ff fc8e 	bl	8002de4 <initMot>
  HAL_TIM_Base_Start_IT(&htim6);
 80034c8:	4812      	ldr	r0, [pc, #72]	; (8003514 <main+0xbc>)
 80034ca:	f7fe fd93 	bl	8001ff4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80034ce:	2118      	movs	r1, #24
 80034d0:	480e      	ldr	r0, [pc, #56]	; (800350c <main+0xb4>)
 80034d2:	f7fe fe28 	bl	8002126 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80034d6:	2118      	movs	r1, #24
 80034d8:	480d      	ldr	r0, [pc, #52]	; (8003510 <main+0xb8>)
 80034da:	f7fe fe24 	bl	8002126 <HAL_TIM_Encoder_Start>
	  UART_ReadStart(&huart1);
 80034de:	4c06      	ldr	r4, [pc, #24]	; (80034f8 <main+0xa0>)
	  Parse_CMD(&htim9, &huart1);
 80034e0:	4d07      	ldr	r5, [pc, #28]	; (8003500 <main+0xa8>)
	  UART_ReadStart(&huart1);
 80034e2:	4620      	mov	r0, r4
 80034e4:	f7ff fc60 	bl	8002da8 <UART_ReadStart>
	  Parse_CMD(&htim9, &huart1);
 80034e8:	4628      	mov	r0, r5
 80034ea:	4621      	mov	r1, r4
 80034ec:	f7ff fb84 	bl	8002bf8 <Parse_CMD>
	  Run_PID(&huart1);
 80034f0:	4620      	mov	r0, r4
 80034f2:	f7ff fdad 	bl	8003050 <Run_PID>
 80034f6:	e7f4      	b.n	80034e2 <main+0x8a>
 80034f8:	200004c0 	.word	0x200004c0
 80034fc:	08006440 	.word	0x08006440
 8003500:	20000450 	.word	0x20000450
 8003504:	20000338 	.word	0x20000338
 8003508:	200003e0 	.word	0x200003e0
 800350c:	20000488 	.word	0x20000488
 8003510:	200003a8 	.word	0x200003a8
 8003514:	20000418 	.word	0x20000418

08003518 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003518:	e7fe      	b.n	8003518 <_Error_Handler>

0800351a <PIDCompute>:
    PIDTuningsSet(pid, kp, ki, kd);
}
        
bool
PIDCompute(PIDControl *pid) 
{
 800351a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800351e:	4604      	mov	r4, r0
    float error, dInput;

    if(pid->mode == MANUAL)
 8003520:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8003524:	2800      	cmp	r0, #0
 8003526:	d03d      	beq.n	80035a4 <PIDCompute+0x8a>
    {
        return false;
    }
    
    // The classic PID error term
    error = (pid->setpoint) - (pid->input);
 8003528:	6827      	ldr	r7, [r4, #0]
 800352a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800352c:	4639      	mov	r1, r7
 800352e:	f7fd fb1d 	bl	8000b6c <__aeabi_fsub>
    
    // Compute the integral term separately ahead of time
    pid->iTerm += (pid->alteredKi) * error;
 8003532:	69e1      	ldr	r1, [r4, #28]
    error = (pid->setpoint) - (pid->input);
 8003534:	4681      	mov	r9, r0
    pid->iTerm += (pid->alteredKi) * error;
 8003536:	f7fd fc23 	bl	8000d80 <__aeabi_fmul>
 800353a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800353c:	f7fd fb18 	bl	8000b70 <__addsf3>
    
    // Constrain the integrator to make sure it does not exceed output bounds
    pid->iTerm = CONSTRAIN( (pid->iTerm), (pid->outMin), (pid->outMax) );
 8003540:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    pid->iTerm += (pid->alteredKi) * error;
 8003542:	4680      	mov	r8, r0
    pid->iTerm = CONSTRAIN( (pid->iTerm), (pid->outMin), (pid->outMax) );
 8003544:	4629      	mov	r1, r5
 8003546:	f7fd fdb9 	bl	80010bc <__aeabi_fcmplt>
 800354a:	2800      	cmp	r0, #0
 800354c:	d12c      	bne.n	80035a8 <PIDCompute+0x8e>
 800354e:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003550:	4640      	mov	r0, r8
 8003552:	4631      	mov	r1, r6
 8003554:	f7fd fdd0 	bl	80010f8 <__aeabi_fcmpgt>
 8003558:	b900      	cbnz	r0, 800355c <PIDCompute+0x42>
 800355a:	4646      	mov	r6, r8
 800355c:	6266      	str	r6, [r4, #36]	; 0x24
    
    // Take the "derivative on measurement" instead of "derivative on error"
    dInput = (pid->input) - (pid->lastInput);
    
    // Run all the terms together to get the overall output
    pid->output = (pid->alteredKp) * error + (pid->iTerm) - (pid->alteredKd) * dInput;
 800355e:	69a1      	ldr	r1, [r4, #24]
 8003560:	4648      	mov	r0, r9
 8003562:	f7fd fc0d 	bl	8000d80 <__aeabi_fmul>
 8003566:	4631      	mov	r1, r6
 8003568:	f7fd fb02 	bl	8000b70 <__addsf3>
    dInput = (pid->input) - (pid->lastInput);
 800356c:	6861      	ldr	r1, [r4, #4]
    pid->output = (pid->alteredKp) * error + (pid->iTerm) - (pid->alteredKd) * dInput;
 800356e:	4606      	mov	r6, r0
    dInput = (pid->input) - (pid->lastInput);
 8003570:	4638      	mov	r0, r7
 8003572:	f7fd fafb 	bl	8000b6c <__aeabi_fsub>
    pid->output = (pid->alteredKp) * error + (pid->iTerm) - (pid->alteredKd) * dInput;
 8003576:	6a21      	ldr	r1, [r4, #32]
 8003578:	f7fd fc02 	bl	8000d80 <__aeabi_fmul>
 800357c:	4601      	mov	r1, r0
 800357e:	4630      	mov	r0, r6
 8003580:	f7fd faf4 	bl	8000b6c <__aeabi_fsub>
 8003584:	4606      	mov	r6, r0
    
    // Bound the output
    pid->output = CONSTRAIN( (pid->output), (pid->outMin), (pid->outMax) );
 8003586:	4601      	mov	r1, r0
 8003588:	4628      	mov	r0, r5
 800358a:	f7fd fdb5 	bl	80010f8 <__aeabi_fcmpgt>
 800358e:	b930      	cbnz	r0, 800359e <PIDCompute+0x84>
 8003590:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8003592:	4630      	mov	r0, r6
 8003594:	4629      	mov	r1, r5
 8003596:	f7fd fdaf 	bl	80010f8 <__aeabi_fcmpgt>
 800359a:	b900      	cbnz	r0, 800359e <PIDCompute+0x84>
 800359c:	4635      	mov	r5, r6
    
    // Make the current input the former input
    pid->lastInput = pid->input;
    
    return true;
 800359e:	2001      	movs	r0, #1
    pid->output = CONSTRAIN( (pid->output), (pid->outMin), (pid->outMax) );
 80035a0:	60a5      	str	r5, [r4, #8]
    pid->lastInput = pid->input;
 80035a2:	6067      	str	r7, [r4, #4]
}
 80035a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pid->iTerm = CONSTRAIN( (pid->iTerm), (pid->outMin), (pid->outMax) );
 80035a8:	462e      	mov	r6, r5
 80035aa:	e7d7      	b.n	800355c <PIDCompute+0x42>

080035ac <PIDOutputLimitsSet>:
    pid->mode = mode;
}

void 
PIDOutputLimitsSet(PIDControl *pid, float min, float max) 							  							  
{
 80035ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ae:	460c      	mov	r4, r1
 80035b0:	4605      	mov	r5, r0
    // Check if the parameters are valid
    if(min >= max)
 80035b2:	4611      	mov	r1, r2
 80035b4:	4620      	mov	r0, r4
{
 80035b6:	4616      	mov	r6, r2
    if(min >= max)
 80035b8:	f7fd fd94 	bl	80010e4 <__aeabi_fcmpge>
 80035bc:	b9f0      	cbnz	r0, 80035fc <PIDOutputLimitsSet+0x50>
    // Save the parameters
    pid->outMin = min;
    pid->outMax = max;
    
    // If in automatic, apply the new constraints
    if(pid->mode == AUTOMATIC)
 80035be:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    pid->outMin = min;
 80035c2:	62ec      	str	r4, [r5, #44]	; 0x2c
    if(pid->mode == AUTOMATIC)
 80035c4:	2b01      	cmp	r3, #1
    pid->outMax = max;
 80035c6:	632e      	str	r6, [r5, #48]	; 0x30
    if(pid->mode == AUTOMATIC)
 80035c8:	d118      	bne.n	80035fc <PIDOutputLimitsSet+0x50>
    {
        pid->output = CONSTRAIN(pid->output, min, max);
 80035ca:	68af      	ldr	r7, [r5, #8]
 80035cc:	4620      	mov	r0, r4
 80035ce:	4639      	mov	r1, r7
 80035d0:	f7fd fd92 	bl	80010f8 <__aeabi_fcmpgt>
 80035d4:	b998      	cbnz	r0, 80035fe <PIDOutputLimitsSet+0x52>
 80035d6:	4639      	mov	r1, r7
 80035d8:	4630      	mov	r0, r6
 80035da:	f7fd fd6f 	bl	80010bc <__aeabi_fcmplt>
 80035de:	b980      	cbnz	r0, 8003602 <PIDOutputLimitsSet+0x56>
 80035e0:	60af      	str	r7, [r5, #8]
        pid->iTerm  = CONSTRAIN(pid->iTerm,  min, max);
 80035e2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80035e4:	4620      	mov	r0, r4
 80035e6:	4639      	mov	r1, r7
 80035e8:	f7fd fd86 	bl	80010f8 <__aeabi_fcmpgt>
 80035ec:	b928      	cbnz	r0, 80035fa <PIDOutputLimitsSet+0x4e>
 80035ee:	4639      	mov	r1, r7
 80035f0:	4630      	mov	r0, r6
 80035f2:	f7fd fd63 	bl	80010bc <__aeabi_fcmplt>
 80035f6:	b930      	cbnz	r0, 8003606 <PIDOutputLimitsSet+0x5a>
 80035f8:	463c      	mov	r4, r7
 80035fa:	626c      	str	r4, [r5, #36]	; 0x24
 80035fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pid->output = CONSTRAIN(pid->output, min, max);
 80035fe:	4627      	mov	r7, r4
 8003600:	e7ee      	b.n	80035e0 <PIDOutputLimitsSet+0x34>
 8003602:	4637      	mov	r7, r6
 8003604:	e7ec      	b.n	80035e0 <PIDOutputLimitsSet+0x34>
        pid->iTerm  = CONSTRAIN(pid->iTerm,  min, max);
 8003606:	4634      	mov	r4, r6
 8003608:	e7f7      	b.n	80035fa <PIDOutputLimitsSet+0x4e>

0800360a <PIDTuningsSet>:
    }
}

void 
PIDTuningsSet(PIDControl *pid, float kp, float ki, float kd)         	                                         
{
 800360a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800360e:	460d      	mov	r5, r1
 8003610:	4604      	mov	r4, r0
    // Check if the parameters are valid
    if(kp < 0.0f || ki < 0.0f || kd < 0.0f)
 8003612:	2100      	movs	r1, #0
 8003614:	4628      	mov	r0, r5
{
 8003616:	4616      	mov	r6, r2
 8003618:	461f      	mov	r7, r3
    if(kp < 0.0f || ki < 0.0f || kd < 0.0f)
 800361a:	f7fd fd4f 	bl	80010bc <__aeabi_fcmplt>
 800361e:	bb38      	cbnz	r0, 8003670 <PIDTuningsSet+0x66>
 8003620:	2100      	movs	r1, #0
 8003622:	4630      	mov	r0, r6
 8003624:	f7fd fd4a 	bl	80010bc <__aeabi_fcmplt>
 8003628:	bb10      	cbnz	r0, 8003670 <PIDTuningsSet+0x66>
 800362a:	2100      	movs	r1, #0
 800362c:	4638      	mov	r0, r7
 800362e:	f7fd fd45 	bl	80010bc <__aeabi_fcmplt>
 8003632:	b9e8      	cbnz	r0, 8003670 <PIDTuningsSet+0x66>
    pid->dispKi = ki;
    pid->dispKd = kd;
    
    // Alter the parameters for PID
    pid->alteredKp = kp;
    pid->alteredKi = ki * pid->sampleTime;
 8003634:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
    pid->dispKi = ki;
 8003638:	6126      	str	r6, [r4, #16]
    pid->alteredKi = ki * pid->sampleTime;
 800363a:	4641      	mov	r1, r8
 800363c:	4630      	mov	r0, r6
    pid->dispKp = kp;
 800363e:	60e5      	str	r5, [r4, #12]
    pid->dispKd = kd;
 8003640:	6167      	str	r7, [r4, #20]
    pid->alteredKp = kp;
 8003642:	61a5      	str	r5, [r4, #24]
    pid->alteredKi = ki * pid->sampleTime;
 8003644:	f7fd fb9c 	bl	8000d80 <__aeabi_fmul>
    pid->alteredKd = kd / pid->sampleTime;
 8003648:	4641      	mov	r1, r8
    pid->alteredKi = ki * pid->sampleTime;
 800364a:	61e0      	str	r0, [r4, #28]
 800364c:	4606      	mov	r6, r0
    pid->alteredKd = kd / pid->sampleTime;
 800364e:	4638      	mov	r0, r7
 8003650:	f7fd fc4a 	bl	8000ee8 <__aeabi_fdiv>
    
    // Apply reverse direction to the altered values if necessary
    if(pid->controllerDirection == REVERSE)
 8003654:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    pid->alteredKd = kd / pid->sampleTime;
 8003658:	6220      	str	r0, [r4, #32]
    if(pid->controllerDirection == REVERSE)
 800365a:	2b01      	cmp	r3, #1
 800365c:	d108      	bne.n	8003670 <PIDTuningsSet+0x66>
    {
        pid->alteredKp = -(pid->alteredKp);
 800365e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        pid->alteredKi = -(pid->alteredKi);
 8003662:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
        pid->alteredKd = -(pid->alteredKd);
 8003666:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
        pid->alteredKp = -(pid->alteredKp);
 800366a:	61a5      	str	r5, [r4, #24]
        pid->alteredKi = -(pid->alteredKi);
 800366c:	61e6      	str	r6, [r4, #28]
        pid->alteredKd = -(pid->alteredKd);
 800366e:	6220      	str	r0, [r4, #32]
 8003670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003674 <PIDInit>:
{
 8003674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003678:	460e      	mov	r6, r1
    pid->iTerm = 0.0f;
 800367a:	2100      	movs	r1, #0
{
 800367c:	4617      	mov	r7, r2
 800367e:	4698      	mov	r8, r3
 8003680:	9d08      	ldr	r5, [sp, #32]
 8003682:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8003686:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800368a:	4604      	mov	r4, r0
    pid->controllerDirection = controllerDirection;
 800368c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    pid->mode = mode;
 8003690:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    pid->iTerm = 0.0f;
 8003694:	6241      	str	r1, [r0, #36]	; 0x24
    pid->input = 0.0f;
 8003696:	6001      	str	r1, [r0, #0]
    pid->lastInput = 0.0f;
 8003698:	6041      	str	r1, [r0, #4]
    pid->output = 0.0f;
 800369a:	6081      	str	r1, [r0, #8]
    pid->setpoint = 0.0f;
 800369c:	6341      	str	r1, [r0, #52]	; 0x34
    if(sampleTimeSeconds > 0.0f)
 800369e:	4628      	mov	r0, r5
{
 80036a0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80036a4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    if(sampleTimeSeconds > 0.0f)
 80036a8:	f7fd fd26 	bl	80010f8 <__aeabi_fcmpgt>
 80036ac:	b168      	cbz	r0, 80036ca <PIDInit+0x56>
        pid->sampleTime = sampleTimeSeconds;
 80036ae:	62a5      	str	r5, [r4, #40]	; 0x28
    PIDOutputLimitsSet(pid, minOutput, maxOutput);
 80036b0:	4652      	mov	r2, sl
 80036b2:	4649      	mov	r1, r9
 80036b4:	4620      	mov	r0, r4
 80036b6:	f7ff ff79 	bl	80035ac <PIDOutputLimitsSet>
    PIDTuningsSet(pid, kp, ki, kd);
 80036ba:	4643      	mov	r3, r8
 80036bc:	463a      	mov	r2, r7
 80036be:	4631      	mov	r1, r6
 80036c0:	4620      	mov	r0, r4
}
 80036c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    PIDTuningsSet(pid, kp, ki, kd);
 80036c6:	f7ff bfa0 	b.w	800360a <PIDTuningsSet>
        pid->sampleTime = 1.0f;
 80036ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80036ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80036d0:	e7ee      	b.n	80036b0 <PIDInit+0x3c>
	...

080036d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80036d6:	4b28      	ldr	r3, [pc, #160]	; (8003778 <HAL_MspInit+0xa4>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80036d8:	2007      	movs	r0, #7
  __HAL_RCC_COMP_CLK_ENABLE();
 80036da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24
 80036e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036e4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80036e8:	9201      	str	r2, [sp, #4]
 80036ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ec:	6a1a      	ldr	r2, [r3, #32]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	621a      	str	r2, [r3, #32]
 80036f4:	6a1a      	ldr	r2, [r3, #32]
 80036f6:	f002 0201 	and.w	r2, r2, #1
 80036fa:	9202      	str	r2, [sp, #8]
 80036fc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003700:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003704:	625a      	str	r2, [r3, #36]	; 0x24
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370c:	9303      	str	r3, [sp, #12]
 800370e:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003710:	f7fd fd70 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003714:	2200      	movs	r2, #0
 8003716:	f06f 000b 	mvn.w	r0, #11
 800371a:	4611      	mov	r1, r2
 800371c:	f7fd fd7c 	bl	8001218 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003720:	2200      	movs	r2, #0
 8003722:	f06f 000a 	mvn.w	r0, #10
 8003726:	4611      	mov	r1, r2
 8003728:	f7fd fd76 	bl	8001218 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800372c:	2200      	movs	r2, #0
 800372e:	f06f 0009 	mvn.w	r0, #9
 8003732:	4611      	mov	r1, r2
 8003734:	f7fd fd70 	bl	8001218 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8003738:	2200      	movs	r2, #0
 800373a:	f06f 0004 	mvn.w	r0, #4
 800373e:	4611      	mov	r1, r2
 8003740:	f7fd fd6a 	bl	8001218 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003744:	2200      	movs	r2, #0
 8003746:	f06f 0003 	mvn.w	r0, #3
 800374a:	4611      	mov	r1, r2
 800374c:	f7fd fd64 	bl	8001218 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003750:	2200      	movs	r2, #0
 8003752:	f06f 0001 	mvn.w	r0, #1
 8003756:	4611      	mov	r1, r2
 8003758:	f7fd fd5e 	bl	8001218 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800375c:	2200      	movs	r2, #0
 800375e:	f04f 30ff 	mov.w	r0, #4294967295
 8003762:	4611      	mov	r1, r2
 8003764:	f7fd fd58 	bl	8001218 <HAL_NVIC_SetPriority>

    /**Enables the output of internal reference voltage 
    */
  __HAL_SYSCFG_VREFINT_OUT_ENABLE();
 8003768:	4a04      	ldr	r2, [pc, #16]	; (800377c <HAL_MspInit+0xa8>)
 800376a:	6813      	ldr	r3, [r2, #0]
 800376c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003770:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003772:	b005      	add	sp, #20
 8003774:	f85d fb04 	ldr.w	pc, [sp], #4
 8003778:	40023800 	.word	0x40023800
 800377c:	40007c00 	.word	0x40007c00

08003780 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003780:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003782:	f7fd fd29 	bl	80011d8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800378a:	f7fd bda8 	b.w	80012de <HAL_SYSTICK_IRQHandler>
	...

08003790 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003790:	4801      	ldr	r0, [pc, #4]	; (8003798 <USART1_IRQHandler+0x8>)
 8003792:	f7ff b96c 	b.w	8002a6e <HAL_UART_IRQHandler>
 8003796:	bf00      	nop
 8003798:	200004c0 	.word	0x200004c0

0800379c <TIM6_IRQHandler>:
void TIM6_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800379c:	4801      	ldr	r0, [pc, #4]	; (80037a4 <TIM6_IRQHandler+0x8>)
 800379e:	f7fe beb1 	b.w	8002504 <HAL_TIM_IRQHandler>
 80037a2:	bf00      	nop
 80037a4:	20000418 	.word	0x20000418

080037a8 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80037a8:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <SystemInit+0x3c>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80037b2:	6899      	ldr	r1, [r3, #8]
 80037b4:	4a0c      	ldr	r2, [pc, #48]	; (80037e8 <SystemInit+0x40>)
 80037b6:	400a      	ands	r2, r1
 80037b8:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 80037c0:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 80037c4:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037cc:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80037d4:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80037d6:	2200      	movs	r2, #0
 80037d8:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80037da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037de:	4b03      	ldr	r3, [pc, #12]	; (80037ec <SystemInit+0x44>)
 80037e0:	609a      	str	r2, [r3, #8]
 80037e2:	4770      	bx	lr
 80037e4:	40023800 	.word	0x40023800
 80037e8:	88ffc00c 	.word	0x88ffc00c
 80037ec:	e000ed00 	.word	0xe000ed00

080037f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80037f0:	b510      	push	{r4, lr}
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
 80037f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037f6:	2400      	movs	r4, #0
  htim2.Instance = TIM2;
 80037f8:	4814      	ldr	r0, [pc, #80]	; (800384c <MX_TIM2_Init+0x5c>)
{
 80037fa:	b08c      	sub	sp, #48	; 0x30
  htim2.Init.Prescaler = 0;
 80037fc:	e880 0018 	stmia.w	r0, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
 8003800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003804:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003806:	2303      	movs	r3, #3
 8003808:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800380a:	2301      	movs	r3, #1
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800380c:	a903      	add	r1, sp, #12
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800380e:	6084      	str	r4, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003810:	6104      	str	r4, [r0, #16]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003812:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003814:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003816:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 8003818:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800381a:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800381c:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800381e:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003820:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003822:	f7fe fc37 	bl	8002094 <HAL_TIM_Encoder_Init>
 8003826:	b118      	cbz	r0, 8003830 <MX_TIM2_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003828:	214f      	movs	r1, #79	; 0x4f
 800382a:	4809      	ldr	r0, [pc, #36]	; (8003850 <MX_TIM2_Init+0x60>)
 800382c:	f7ff fe74 	bl	8003518 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003830:	a901      	add	r1, sp, #4
 8003832:	4806      	ldr	r0, [pc, #24]	; (800384c <MX_TIM2_Init+0x5c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003834:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003836:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003838:	f7fe feea 	bl	8002610 <HAL_TIMEx_MasterConfigSynchronization>
 800383c:	b118      	cbz	r0, 8003846 <MX_TIM2_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 800383e:	2156      	movs	r1, #86	; 0x56
 8003840:	4803      	ldr	r0, [pc, #12]	; (8003850 <MX_TIM2_Init+0x60>)
 8003842:	f7ff fe69 	bl	8003518 <_Error_Handler>
  }

}
 8003846:	b00c      	add	sp, #48	; 0x30
 8003848:	bd10      	pop	{r4, pc}
 800384a:	bf00      	nop
 800384c:	20000488 	.word	0x20000488
 8003850:	08006468 	.word	0x08006468

08003854 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003854:	b510      	push	{r4, lr}
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
 8003856:	2400      	movs	r4, #0
  htim3.Instance = TIM3;
 8003858:	4814      	ldr	r0, [pc, #80]	; (80038ac <MX_TIM3_Init+0x58>)
  htim3.Init.Prescaler = 0;
 800385a:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <MX_TIM3_Init+0x5c>)
{
 800385c:	b08c      	sub	sp, #48	; 0x30
  htim3.Init.Prescaler = 0;
 800385e:	e880 0018 	stmia.w	r0, {r3, r4}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
 8003862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003866:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003868:	2303      	movs	r3, #3
 800386a:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800386c:	2301      	movs	r3, #1
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800386e:	a903      	add	r1, sp, #12
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003870:	6084      	str	r4, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003872:	6104      	str	r4, [r0, #16]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003874:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003876:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003878:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 800387a:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800387c:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800387e:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003880:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003882:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003884:	f7fe fc06 	bl	8002094 <HAL_TIM_Encoder_Init>
 8003888:	b118      	cbz	r0, 8003892 <MX_TIM3_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800388a:	2170      	movs	r1, #112	; 0x70
 800388c:	4809      	ldr	r0, [pc, #36]	; (80038b4 <MX_TIM3_Init+0x60>)
 800388e:	f7ff fe43 	bl	8003518 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003892:	a901      	add	r1, sp, #4
 8003894:	4805      	ldr	r0, [pc, #20]	; (80038ac <MX_TIM3_Init+0x58>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003896:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003898:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800389a:	f7fe feb9 	bl	8002610 <HAL_TIMEx_MasterConfigSynchronization>
 800389e:	b118      	cbz	r0, 80038a8 <MX_TIM3_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 80038a0:	2177      	movs	r1, #119	; 0x77
 80038a2:	4804      	ldr	r0, [pc, #16]	; (80038b4 <MX_TIM3_Init+0x60>)
 80038a4:	f7ff fe38 	bl	8003518 <_Error_Handler>
  }

}
 80038a8:	b00c      	add	sp, #48	; 0x30
 80038aa:	bd10      	pop	{r4, pc}
 80038ac:	200003a8 	.word	0x200003a8
 80038b0:	40000400 	.word	0x40000400
 80038b4:	08006468 	.word	0x08006468

080038b8 <MX_TIM5_Init>:
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim5.Instance = TIM5;
 80038b8:	4826      	ldr	r0, [pc, #152]	; (8003954 <MX_TIM5_Init+0x9c>)
 80038ba:	4b27      	ldr	r3, [pc, #156]	; (8003958 <MX_TIM5_Init+0xa0>)
{
 80038bc:	b510      	push	{r4, lr}
  htim5.Instance = TIM5;
 80038be:	6003      	str	r3, [r0, #0]
  htim5.Init.Prescaler = 0;
 80038c0:	2300      	movs	r3, #0
{
 80038c2:	b08a      	sub	sp, #40	; 0x28
  htim5.Init.Prescaler = 0;
 80038c4:	6043      	str	r3, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038c6:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 0;
 80038c8:	60c3      	str	r3, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ca:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80038cc:	f7fe fb78 	bl	8001fc0 <HAL_TIM_Base_Init>
 80038d0:	b118      	cbz	r0, 80038da <MX_TIM5_Init+0x22>
  {
    _Error_Handler(__FILE__, __LINE__);
 80038d2:	2189      	movs	r1, #137	; 0x89
 80038d4:	4821      	ldr	r0, [pc, #132]	; (800395c <MX_TIM5_Init+0xa4>)
 80038d6:	f7ff fe1f 	bl	8003518 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038de:	a90a      	add	r1, sp, #40	; 0x28
 80038e0:	f841 3d20 	str.w	r3, [r1, #-32]!
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80038e4:	481b      	ldr	r0, [pc, #108]	; (8003954 <MX_TIM5_Init+0x9c>)
 80038e6:	f7fe fd50 	bl	800238a <HAL_TIM_ConfigClockSource>
 80038ea:	b118      	cbz	r0, 80038f4 <MX_TIM5_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80038ec:	218f      	movs	r1, #143	; 0x8f
 80038ee:	481b      	ldr	r0, [pc, #108]	; (800395c <MX_TIM5_Init+0xa4>)
 80038f0:	f7ff fe12 	bl	8003518 <_Error_Handler>
  }

  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80038f4:	4817      	ldr	r0, [pc, #92]	; (8003954 <MX_TIM5_Init+0x9c>)
 80038f6:	f7fe fba4 	bl	8002042 <HAL_TIM_IC_Init>
 80038fa:	b118      	cbz	r0, 8003904 <MX_TIM5_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80038fc:	2194      	movs	r1, #148	; 0x94
 80038fe:	4817      	ldr	r0, [pc, #92]	; (800395c <MX_TIM5_Init+0xa4>)
 8003900:	f7ff fe0a 	bl	8003518 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003904:	2400      	movs	r4, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003906:	4669      	mov	r1, sp
 8003908:	4812      	ldr	r0, [pc, #72]	; (8003954 <MX_TIM5_Init+0x9c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800390a:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800390c:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800390e:	f7fe fe7f 	bl	8002610 <HAL_TIMEx_MasterConfigSynchronization>
 8003912:	b118      	cbz	r0, 800391c <MX_TIM5_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003914:	219b      	movs	r1, #155	; 0x9b
 8003916:	4811      	ldr	r0, [pc, #68]	; (800395c <MX_TIM5_Init+0xa4>)
 8003918:	f7ff fdfe 	bl	8003518 <_Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800391c:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800391e:	2208      	movs	r2, #8
 8003920:	a906      	add	r1, sp, #24
 8003922:	480c      	ldr	r0, [pc, #48]	; (8003954 <MX_TIM5_Init+0x9c>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003924:	9406      	str	r4, [sp, #24]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003926:	9307      	str	r3, [sp, #28]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003928:	9408      	str	r4, [sp, #32]
  sConfigIC.ICFilter = 0;
 800392a:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800392c:	f7fe fc1d 	bl	800216a <HAL_TIM_IC_ConfigChannel>
 8003930:	b118      	cbz	r0, 800393a <MX_TIM5_Init+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003932:	21a4      	movs	r1, #164	; 0xa4
 8003934:	4809      	ldr	r0, [pc, #36]	; (800395c <MX_TIM5_Init+0xa4>)
 8003936:	f7ff fdef 	bl	8003518 <_Error_Handler>
  }

  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800393a:	220c      	movs	r2, #12
 800393c:	a906      	add	r1, sp, #24
 800393e:	4805      	ldr	r0, [pc, #20]	; (8003954 <MX_TIM5_Init+0x9c>)
 8003940:	f7fe fc13 	bl	800216a <HAL_TIM_IC_ConfigChannel>
 8003944:	b118      	cbz	r0, 800394e <MX_TIM5_Init+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003946:	21a9      	movs	r1, #169	; 0xa9
 8003948:	4804      	ldr	r0, [pc, #16]	; (800395c <MX_TIM5_Init+0xa4>)
 800394a:	f7ff fde5 	bl	8003518 <_Error_Handler>
  }

}
 800394e:	b00a      	add	sp, #40	; 0x28
 8003950:	bd10      	pop	{r4, pc}
 8003952:	bf00      	nop
 8003954:	20000370 	.word	0x20000370
 8003958:	40000c00 	.word	0x40000c00
 800395c:	08006468 	.word	0x08006468

08003960 <MX_TIM6_Init>:
void MX_TIM6_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 31999;
 8003960:	f647 4cff 	movw	ip, #31999	; 0x7cff
{
 8003964:	b513      	push	{r0, r1, r4, lr}
  htim6.Init.Prescaler = 31999;
 8003966:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <MX_TIM6_Init+0x40>)
  htim6.Instance = TIM6;
 8003968:	480e      	ldr	r0, [pc, #56]	; (80039a4 <MX_TIM6_Init+0x44>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800396a:	2400      	movs	r4, #0
  htim6.Init.Prescaler = 31999;
 800396c:	e880 1008 	stmia.w	r0, {r3, ip}
  htim6.Init.Period = 1;
 8003970:	2301      	movs	r3, #1
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003972:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 1;
 8003974:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003976:	f7fe fb23 	bl	8001fc0 <HAL_TIM_Base_Init>
 800397a:	b118      	cbz	r0, 8003984 <MX_TIM6_Init+0x24>
  {
    _Error_Handler(__FILE__, __LINE__);
 800397c:	21b8      	movs	r1, #184	; 0xb8
 800397e:	480a      	ldr	r0, [pc, #40]	; (80039a8 <MX_TIM6_Init+0x48>)
 8003980:	f7ff fdca 	bl	8003518 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003984:	4669      	mov	r1, sp
 8003986:	4807      	ldr	r0, [pc, #28]	; (80039a4 <MX_TIM6_Init+0x44>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003988:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800398a:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800398c:	f7fe fe40 	bl	8002610 <HAL_TIMEx_MasterConfigSynchronization>
 8003990:	b118      	cbz	r0, 800399a <MX_TIM6_Init+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003992:	21bf      	movs	r1, #191	; 0xbf
 8003994:	4804      	ldr	r0, [pc, #16]	; (80039a8 <MX_TIM6_Init+0x48>)
 8003996:	f7ff fdbf 	bl	8003518 <_Error_Handler>
  }

}
 800399a:	b002      	add	sp, #8
 800399c:	bd10      	pop	{r4, pc}
 800399e:	bf00      	nop
 80039a0:	40001000 	.word	0x40001000
 80039a4:	20000418 	.word	0x20000418
 80039a8:	08006468 	.word	0x08006468

080039ac <HAL_TIM_Encoder_MspInit>:
  HAL_TIM_MspPostInit(&htim11);

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80039ac:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_encoderHandle->Instance==TIM2)
 80039ae:	6803      	ldr	r3, [r0, #0]
{
 80039b0:	b089      	sub	sp, #36	; 0x24
  if(tim_encoderHandle->Instance==TIM2)
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b6:	d11a      	bne.n	80039ee <HAL_TIM_Encoder_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039b8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80039bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039be:	4818      	ldr	r0, [pc, #96]	; (8003a20 <HAL_TIM_Encoder_MspInit+0x74>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039c0:	f042 0201 	orr.w	r2, r2, #1
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c8:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	9301      	str	r3, [sp, #4]
 80039d0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80039d2:	2322      	movs	r3, #34	; 0x22
 80039d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d6:	2302      	movs	r3, #2
 80039d8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039de:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80039e0:	2301      	movs	r3, #1
 80039e2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039e4:	f7fd fc80 	bl	80012e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80039e8:	b009      	add	sp, #36	; 0x24
 80039ea:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_encoderHandle->Instance==TIM3)
 80039ee:	4a0d      	ldr	r2, [pc, #52]	; (8003a24 <HAL_TIM_Encoder_MspInit+0x78>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d1f9      	bne.n	80039e8 <HAL_TIM_Encoder_MspInit+0x3c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <HAL_TIM_Encoder_MspInit+0x7c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039f6:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039fa:	480c      	ldr	r0, [pc, #48]	; (8003a2c <HAL_TIM_Encoder_MspInit+0x80>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039fc:	f042 0202 	orr.w	r2, r2, #2
 8003a00:	625a      	str	r2, [r3, #36]	; 0x24
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a04:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	9302      	str	r3, [sp, #8]
 8003a0c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a0e:	23c0      	movs	r3, #192	; 0xc0
 8003a10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a12:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a14:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a16:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a18:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a1a:	9307      	str	r3, [sp, #28]
 8003a1c:	e7e2      	b.n	80039e4 <HAL_TIM_Encoder_MspInit+0x38>
 8003a1e:	bf00      	nop
 8003a20:	40020000 	.word	0x40020000
 8003a24:	40000400 	.word	0x40000400
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40020800 	.word	0x40020800

08003a30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a30:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_baseHandle->Instance==TIM5)
 8003a32:	6803      	ldr	r3, [r0, #0]
 8003a34:	4a2e      	ldr	r2, [pc, #184]	; (8003af0 <HAL_TIM_Base_MspInit+0xc0>)
{
 8003a36:	b08b      	sub	sp, #44	; 0x2c
  if(tim_baseHandle->Instance==TIM5)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d118      	bne.n	8003a6e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a3c:	4b2d      	ldr	r3, [pc, #180]	; (8003af4 <HAL_TIM_Base_MspInit+0xc4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3e:	a905      	add	r1, sp, #20
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a42:	482d      	ldr	r0, [pc, #180]	; (8003af8 <HAL_TIM_Base_MspInit+0xc8>)
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a44:	f042 0208 	orr.w	r2, r2, #8
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4c:	2200      	movs	r2, #0
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a56:	230c      	movs	r3, #12
 8003a58:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5a:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5c:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a60:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003a62:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a64:	f7fd fc40 	bl	80012e8 <HAL_GPIO_Init>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003a68:	b00b      	add	sp, #44	; 0x2c
 8003a6a:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM6)
 8003a6e:	4a23      	ldr	r2, [pc, #140]	; (8003afc <HAL_TIM_Base_MspInit+0xcc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d112      	bne.n	8003a9a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a74:	4b1f      	ldr	r3, [pc, #124]	; (8003af4 <HAL_TIM_Base_MspInit+0xc4>)
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003a76:	202b      	movs	r0, #43	; 0x2b
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a7a:	f042 0210 	orr.w	r2, r2, #16
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003a80:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003a84:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a86:	f003 0310 	and.w	r3, r3, #16
 8003a8a:	9302      	str	r3, [sp, #8]
 8003a8c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003a8e:	f7fd fbc3 	bl	8001218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003a92:	202b      	movs	r0, #43	; 0x2b
 8003a94:	f7fd fbf4 	bl	8001280 <HAL_NVIC_EnableIRQ>
 8003a98:	e7e6      	b.n	8003a68 <HAL_TIM_Base_MspInit+0x38>
  else if(tim_baseHandle->Instance==TIM9)
 8003a9a:	4a19      	ldr	r2, [pc, #100]	; (8003b00 <HAL_TIM_Base_MspInit+0xd0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d10a      	bne.n	8003ab6 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003aa0:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <HAL_TIM_Base_MspInit+0xc4>)
 8003aa2:	6a1a      	ldr	r2, [r3, #32]
 8003aa4:	f042 0204 	orr.w	r2, r2, #4
 8003aa8:	621a      	str	r2, [r3, #32]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	9303      	str	r3, [sp, #12]
 8003ab2:	9b03      	ldr	r3, [sp, #12]
 8003ab4:	e7d8      	b.n	8003a68 <HAL_TIM_Base_MspInit+0x38>
  else if(tim_baseHandle->Instance==TIM10)
 8003ab6:	4a13      	ldr	r2, [pc, #76]	; (8003b04 <HAL_TIM_Base_MspInit+0xd4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d10a      	bne.n	8003ad2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003abc:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <HAL_TIM_Base_MspInit+0xc4>)
 8003abe:	6a1a      	ldr	r2, [r3, #32]
 8003ac0:	f042 0208 	orr.w	r2, r2, #8
 8003ac4:	621a      	str	r2, [r3, #32]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	9304      	str	r3, [sp, #16]
 8003ace:	9b04      	ldr	r3, [sp, #16]
 8003ad0:	e7ca      	b.n	8003a68 <HAL_TIM_Base_MspInit+0x38>
  else if(tim_baseHandle->Instance==TIM11)
 8003ad2:	4a0d      	ldr	r2, [pc, #52]	; (8003b08 <HAL_TIM_Base_MspInit+0xd8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d1c7      	bne.n	8003a68 <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003ad8:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <HAL_TIM_Base_MspInit+0xc4>)
 8003ada:	6a1a      	ldr	r2, [r3, #32]
 8003adc:	f042 0210 	orr.w	r2, r2, #16
 8003ae0:	621a      	str	r2, [r3, #32]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	9305      	str	r3, [sp, #20]
 8003aea:	9b05      	ldr	r3, [sp, #20]
}
 8003aec:	e7bc      	b.n	8003a68 <HAL_TIM_Base_MspInit+0x38>
 8003aee:	bf00      	nop
 8003af0:	40000c00 	.word	0x40000c00
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40020000 	.word	0x40020000
 8003afc:	40001000 	.word	0x40001000
 8003b00:	40010800 	.word	0x40010800
 8003b04:	40010c00 	.word	0x40010c00
 8003b08:	40011000 	.word	0x40011000

08003b0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM9)
 8003b0e:	6803      	ldr	r3, [r0, #0]
 8003b10:	4a0f      	ldr	r2, [pc, #60]	; (8003b50 <HAL_TIM_MspPostInit+0x44>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d110      	bne.n	8003b38 <HAL_TIM_MspPostInit+0x2c>

  /* USER CODE END TIM9_MspPostInit 0 */
    /**TIM9 GPIO Configuration    
    PB13     ------> TIM9_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003b16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  /* USER CODE END TIM11_MspPostInit 0 */
  
    /**TIM11 GPIO Configuration    
    PB9     ------> TIM11_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b1a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b24:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003b26:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b28:	a901      	add	r1, sp, #4
 8003b2a:	480a      	ldr	r0, [pc, #40]	; (8003b54 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003b2c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b2e:	f7fd fbdb 	bl	80012e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8003b32:	b007      	add	sp, #28
 8003b34:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(timHandle->Instance==TIM10)
 8003b38:	4a07      	ldr	r2, [pc, #28]	; (8003b58 <HAL_TIM_MspPostInit+0x4c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d102      	bne.n	8003b44 <HAL_TIM_MspPostInit+0x38>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b42:	e7ea      	b.n	8003b1a <HAL_TIM_MspPostInit+0xe>
  else if(timHandle->Instance==TIM11)
 8003b44:	4a05      	ldr	r2, [pc, #20]	; (8003b5c <HAL_TIM_MspPostInit+0x50>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d1f3      	bne.n	8003b32 <HAL_TIM_MspPostInit+0x26>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b4e:	e7e4      	b.n	8003b1a <HAL_TIM_MspPostInit+0xe>
 8003b50:	40010800 	.word	0x40010800
 8003b54:	40020400 	.word	0x40020400
 8003b58:	40010c00 	.word	0x40010c00
 8003b5c:	40011000 	.word	0x40011000

08003b60 <MX_TIM9_Init>:
  htim9.Init.Prescaler = 125;
 8003b60:	237d      	movs	r3, #125	; 0x7d
  htim9.Instance = TIM9;
 8003b62:	4824      	ldr	r0, [pc, #144]	; (8003bf4 <MX_TIM9_Init+0x94>)
  htim9.Init.Prescaler = 125;
 8003b64:	4924      	ldr	r1, [pc, #144]	; (8003bf8 <MX_TIM9_Init+0x98>)
{
 8003b66:	b500      	push	{lr}
  htim9.Init.Period = 1024;
 8003b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
  htim9.Init.Prescaler = 125;
 8003b6c:	e880 000a 	stmia.w	r0, {r1, r3}
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b70:	2300      	movs	r3, #0
{
 8003b72:	b08d      	sub	sp, #52	; 0x34
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b74:	6083      	str	r3, [r0, #8]
  htim9.Init.Period = 1024;
 8003b76:	60c2      	str	r2, [r0, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b78:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003b7a:	f7fe fa21 	bl	8001fc0 <HAL_TIM_Base_Init>
 8003b7e:	b118      	cbz	r0, 8003b88 <MX_TIM9_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 8003b80:	21d1      	movs	r1, #209	; 0xd1
 8003b82:	481e      	ldr	r0, [pc, #120]	; (8003bfc <MX_TIM9_Init+0x9c>)
 8003b84:	f7ff fcc8 	bl	8003518 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b8c:	a90c      	add	r1, sp, #48	; 0x30
 8003b8e:	f841 3d24 	str.w	r3, [r1, #-36]!
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003b92:	4818      	ldr	r0, [pc, #96]	; (8003bf4 <MX_TIM9_Init+0x94>)
 8003b94:	f7fe fbf9 	bl	800238a <HAL_TIM_ConfigClockSource>
 8003b98:	b118      	cbz	r0, 8003ba2 <MX_TIM9_Init+0x42>
    _Error_Handler(__FILE__, __LINE__);
 8003b9a:	21d7      	movs	r1, #215	; 0xd7
 8003b9c:	4817      	ldr	r0, [pc, #92]	; (8003bfc <MX_TIM9_Init+0x9c>)
 8003b9e:	f7ff fcbb 	bl	8003518 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003ba2:	4814      	ldr	r0, [pc, #80]	; (8003bf4 <MX_TIM9_Init+0x94>)
 8003ba4:	f7fe fa32 	bl	800200c <HAL_TIM_PWM_Init>
 8003ba8:	b118      	cbz	r0, 8003bb2 <MX_TIM9_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
 8003baa:	21dc      	movs	r1, #220	; 0xdc
 8003bac:	4813      	ldr	r0, [pc, #76]	; (8003bfc <MX_TIM9_Init+0x9c>)
 8003bae:	f7ff fcb3 	bl	8003518 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bb2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8003bb4:	a901      	add	r1, sp, #4
 8003bb6:	480f      	ldr	r0, [pc, #60]	; (8003bf4 <MX_TIM9_Init+0x94>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bb8:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bba:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8003bbc:	f7fe fd28 	bl	8002610 <HAL_TIMEx_MasterConfigSynchronization>
 8003bc0:	b118      	cbz	r0, 8003bca <MX_TIM9_Init+0x6a>
    _Error_Handler(__FILE__, __LINE__);
 8003bc2:	21e3      	movs	r1, #227	; 0xe3
 8003bc4:	480d      	ldr	r0, [pc, #52]	; (8003bfc <MX_TIM9_Init+0x9c>)
 8003bc6:	f7ff fca7 	bl	8003518 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8003bca:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bcc:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bce:	a907      	add	r1, sp, #28
 8003bd0:	4808      	ldr	r0, [pc, #32]	; (8003bf4 <MX_TIM9_Init+0x94>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bd2:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8003bd4:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bd6:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bd8:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bda:	f7fe fb4e 	bl	800227a <HAL_TIM_PWM_ConfigChannel>
 8003bde:	b118      	cbz	r0, 8003be8 <MX_TIM9_Init+0x88>
    _Error_Handler(__FILE__, __LINE__);
 8003be0:	21ec      	movs	r1, #236	; 0xec
 8003be2:	4806      	ldr	r0, [pc, #24]	; (8003bfc <MX_TIM9_Init+0x9c>)
 8003be4:	f7ff fc98 	bl	8003518 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim9);
 8003be8:	4802      	ldr	r0, [pc, #8]	; (8003bf4 <MX_TIM9_Init+0x94>)
 8003bea:	f7ff ff8f 	bl	8003b0c <HAL_TIM_MspPostInit>
}
 8003bee:	b00d      	add	sp, #52	; 0x34
 8003bf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bf4:	20000450 	.word	0x20000450
 8003bf8:	40010800 	.word	0x40010800
 8003bfc:	08006468 	.word	0x08006468

08003c00 <MX_TIM10_Init>:
  htim10.Init.Prescaler = 16;
 8003c00:	2310      	movs	r3, #16
  htim10.Instance = TIM10;
 8003c02:	4820      	ldr	r0, [pc, #128]	; (8003c84 <MX_TIM10_Init+0x84>)
  htim10.Init.Prescaler = 16;
 8003c04:	4920      	ldr	r1, [pc, #128]	; (8003c88 <MX_TIM10_Init+0x88>)
{
 8003c06:	b500      	push	{lr}
  htim10.Init.Period = 2000;
 8003c08:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  htim10.Init.Prescaler = 16;
 8003c0c:	e880 000a 	stmia.w	r0, {r1, r3}
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c10:	2300      	movs	r3, #0
{
 8003c12:	b08b      	sub	sp, #44	; 0x2c
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c14:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 2000;
 8003c16:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c18:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003c1a:	f7fe f9d1 	bl	8001fc0 <HAL_TIM_Base_Init>
 8003c1e:	b118      	cbz	r0, 8003c28 <MX_TIM10_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 8003c20:	21ff      	movs	r1, #255	; 0xff
 8003c22:	481a      	ldr	r0, [pc, #104]	; (8003c8c <MX_TIM10_Init+0x8c>)
 8003c24:	f7ff fc78 	bl	8003518 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c2c:	a90a      	add	r1, sp, #40	; 0x28
 8003c2e:	f841 3d24 	str.w	r3, [r1, #-36]!
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8003c32:	4814      	ldr	r0, [pc, #80]	; (8003c84 <MX_TIM10_Init+0x84>)
 8003c34:	f7fe fba9 	bl	800238a <HAL_TIM_ConfigClockSource>
 8003c38:	b120      	cbz	r0, 8003c44 <MX_TIM10_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
 8003c3a:	f240 1105 	movw	r1, #261	; 0x105
 8003c3e:	4813      	ldr	r0, [pc, #76]	; (8003c8c <MX_TIM10_Init+0x8c>)
 8003c40:	f7ff fc6a 	bl	8003518 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8003c44:	480f      	ldr	r0, [pc, #60]	; (8003c84 <MX_TIM10_Init+0x84>)
 8003c46:	f7fe f9e1 	bl	800200c <HAL_TIM_PWM_Init>
 8003c4a:	b120      	cbz	r0, 8003c56 <MX_TIM10_Init+0x56>
    _Error_Handler(__FILE__, __LINE__);
 8003c4c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8003c50:	480e      	ldr	r0, [pc, #56]	; (8003c8c <MX_TIM10_Init+0x8c>)
 8003c52:	f7ff fc61 	bl	8003518 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8003c56:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c58:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c5a:	a905      	add	r1, sp, #20
 8003c5c:	4809      	ldr	r0, [pc, #36]	; (8003c84 <MX_TIM10_Init+0x84>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c5e:	9305      	str	r3, [sp, #20]
  sConfigOC.Pulse = 0;
 8003c60:	9206      	str	r2, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c62:	9207      	str	r2, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c64:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c66:	f7fe fb08 	bl	800227a <HAL_TIM_PWM_ConfigChannel>
 8003c6a:	b120      	cbz	r0, 8003c76 <MX_TIM10_Init+0x76>
    _Error_Handler(__FILE__, __LINE__);
 8003c6c:	f240 1113 	movw	r1, #275	; 0x113
 8003c70:	4806      	ldr	r0, [pc, #24]	; (8003c8c <MX_TIM10_Init+0x8c>)
 8003c72:	f7ff fc51 	bl	8003518 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim10);
 8003c76:	4803      	ldr	r0, [pc, #12]	; (8003c84 <MX_TIM10_Init+0x84>)
 8003c78:	f7ff ff48 	bl	8003b0c <HAL_TIM_MspPostInit>
}
 8003c7c:	b00b      	add	sp, #44	; 0x2c
 8003c7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c82:	bf00      	nop
 8003c84:	20000338 	.word	0x20000338
 8003c88:	40010c00 	.word	0x40010c00
 8003c8c:	08006468 	.word	0x08006468

08003c90 <MX_TIM11_Init>:
  htim11.Init.Prescaler = 16;
 8003c90:	2310      	movs	r3, #16
  htim11.Instance = TIM11;
 8003c92:	4820      	ldr	r0, [pc, #128]	; (8003d14 <MX_TIM11_Init+0x84>)
  htim11.Init.Prescaler = 16;
 8003c94:	4920      	ldr	r1, [pc, #128]	; (8003d18 <MX_TIM11_Init+0x88>)
{
 8003c96:	b500      	push	{lr}
  htim11.Init.Period = 2000;
 8003c98:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  htim11.Init.Prescaler = 16;
 8003c9c:	e880 000a 	stmia.w	r0, {r1, r3}
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca0:	2300      	movs	r3, #0
{
 8003ca2:	b08b      	sub	sp, #44	; 0x2c
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca4:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 2000;
 8003ca6:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ca8:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003caa:	f7fe f989 	bl	8001fc0 <HAL_TIM_Base_Init>
 8003cae:	b120      	cbz	r0, 8003cba <MX_TIM11_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 8003cb0:	f44f 7193 	mov.w	r1, #294	; 0x126
 8003cb4:	4819      	ldr	r0, [pc, #100]	; (8003d1c <MX_TIM11_Init+0x8c>)
 8003cb6:	f7ff fc2f 	bl	8003518 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cbe:	a90a      	add	r1, sp, #40	; 0x28
 8003cc0:	f841 3d24 	str.w	r3, [r1, #-36]!
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8003cc4:	4813      	ldr	r0, [pc, #76]	; (8003d14 <MX_TIM11_Init+0x84>)
 8003cc6:	f7fe fb60 	bl	800238a <HAL_TIM_ConfigClockSource>
 8003cca:	b120      	cbz	r0, 8003cd6 <MX_TIM11_Init+0x46>
    _Error_Handler(__FILE__, __LINE__);
 8003ccc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003cd0:	4812      	ldr	r0, [pc, #72]	; (8003d1c <MX_TIM11_Init+0x8c>)
 8003cd2:	f7ff fc21 	bl	8003518 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8003cd6:	480f      	ldr	r0, [pc, #60]	; (8003d14 <MX_TIM11_Init+0x84>)
 8003cd8:	f7fe f998 	bl	800200c <HAL_TIM_PWM_Init>
 8003cdc:	b120      	cbz	r0, 8003ce8 <MX_TIM11_Init+0x58>
    _Error_Handler(__FILE__, __LINE__);
 8003cde:	f240 1131 	movw	r1, #305	; 0x131
 8003ce2:	480e      	ldr	r0, [pc, #56]	; (8003d1c <MX_TIM11_Init+0x8c>)
 8003ce4:	f7ff fc18 	bl	8003518 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8003ce8:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cea:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cec:	a905      	add	r1, sp, #20
 8003cee:	4809      	ldr	r0, [pc, #36]	; (8003d14 <MX_TIM11_Init+0x84>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cf0:	9305      	str	r3, [sp, #20]
  sConfigOC.Pulse = 0;
 8003cf2:	9206      	str	r2, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cf4:	9207      	str	r2, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003cf6:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cf8:	f7fe fabf 	bl	800227a <HAL_TIM_PWM_ConfigChannel>
 8003cfc:	b120      	cbz	r0, 8003d08 <MX_TIM11_Init+0x78>
    _Error_Handler(__FILE__, __LINE__);
 8003cfe:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8003d02:	4806      	ldr	r0, [pc, #24]	; (8003d1c <MX_TIM11_Init+0x8c>)
 8003d04:	f7ff fc08 	bl	8003518 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim11);
 8003d08:	4802      	ldr	r0, [pc, #8]	; (8003d14 <MX_TIM11_Init+0x84>)
 8003d0a:	f7ff feff 	bl	8003b0c <HAL_TIM_MspPostInit>
}
 8003d0e:	b00b      	add	sp, #44	; 0x2c
 8003d10:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d14:	200003e0 	.word	0x200003e0
 8003d18:	40011000 	.word	0x40011000
 8003d1c:	08006468 	.word	0x08006468

08003d20 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003d20:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 8003d22:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
  huart1.Instance = USART1;
 8003d26:	480b      	ldr	r0, [pc, #44]	; (8003d54 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 9600;
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d2a:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 9600;
 8003d2c:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d30:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d32:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d34:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d36:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d38:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d3a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d3c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d3e:	f7fe fddb 	bl	80028f8 <HAL_UART_Init>
 8003d42:	b128      	cbz	r0, 8003d50 <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8003d44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003d48:	2142      	movs	r1, #66	; 0x42
 8003d4a:	4804      	ldr	r0, [pc, #16]	; (8003d5c <MX_USART1_UART_Init+0x3c>)
 8003d4c:	f7ff bbe4 	b.w	8003518 <_Error_Handler>
 8003d50:	bd08      	pop	{r3, pc}
 8003d52:	bf00      	nop
 8003d54:	200004c0 	.word	0x200004c0
 8003d58:	40013800 	.word	0x40013800
 8003d5c:	08006475 	.word	0x08006475

08003d60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003d60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8003d62:	6802      	ldr	r2, [r0, #0]
 8003d64:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <HAL_UART_MspInit+0x54>)
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d120      	bne.n	8003dac <HAL_UART_MspInit+0x4c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d6a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003d6e:	6a1a      	ldr	r2, [r3, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d70:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d76:	621a      	str	r2, [r3, #32]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d7a:	480f      	ldr	r0, [pc, #60]	; (8003db8 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d84:	23c0      	movs	r3, #192	; 0xc0
 8003d86:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d90:	2303      	movs	r3, #3
 8003d92:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d94:	2307      	movs	r3, #7
 8003d96:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d98:	f7fd faa6 	bl	80012e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2025      	movs	r0, #37	; 0x25
 8003da0:	4611      	mov	r1, r2
 8003da2:	f7fd fa39 	bl	8001218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003da6:	2025      	movs	r0, #37	; 0x25
 8003da8:	f7fd fa6a 	bl	8001280 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003dac:	b007      	add	sp, #28
 8003dae:	f85d fb04 	ldr.w	pc, [sp], #4
 8003db2:	bf00      	nop
 8003db4:	40013800 	.word	0x40013800
 8003db8:	40020400 	.word	0x40020400

08003dbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003dbc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003dbe:	e003      	b.n	8003dc8 <LoopCopyDataInit>

08003dc0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003dc2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003dc4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003dc6:	3104      	adds	r1, #4

08003dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003dc8:	480a      	ldr	r0, [pc, #40]	; (8003df4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003dcc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003dce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003dd0:	d3f6      	bcc.n	8003dc0 <CopyDataInit>
  ldr r2, =_sbss
 8003dd2:	4a0a      	ldr	r2, [pc, #40]	; (8003dfc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003dd4:	e002      	b.n	8003ddc <LoopFillZerobss>

08003dd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003dd6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003dd8:	f842 3b04 	str.w	r3, [r2], #4

08003ddc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003ddc:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003dde:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003de0:	d3f9      	bcc.n	8003dd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003de2:	f7ff fce1 	bl	80037a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003de6:	f000 f815 	bl	8003e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003dea:	f7ff fb35 	bl	8003458 <main>
  bx lr
 8003dee:	4770      	bx	lr
  ldr r3, =_sidata
 8003df0:	08006728 	.word	0x08006728
  ldr r0, =_sdata
 8003df4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003df8:	200001d4 	.word	0x200001d4
  ldr r2, =_sbss
 8003dfc:	200001d8 	.word	0x200001d8
  ldr r3, = _ebss
 8003e00:	20000504 	.word	0x20000504

08003e04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e04:	e7fe      	b.n	8003e04 <ADC1_IRQHandler>

08003e06 <atof>:
 8003e06:	2100      	movs	r1, #0
 8003e08:	f000 be76 	b.w	8004af8 <strtod>

08003e0c <atoi>:
 8003e0c:	220a      	movs	r2, #10
 8003e0e:	2100      	movs	r1, #0
 8003e10:	f000 bf58 	b.w	8004cc4 <strtol>

08003e14 <__libc_init_array>:
 8003e14:	b570      	push	{r4, r5, r6, lr}
 8003e16:	2500      	movs	r5, #0
 8003e18:	4e0c      	ldr	r6, [pc, #48]	; (8003e4c <__libc_init_array+0x38>)
 8003e1a:	4c0d      	ldr	r4, [pc, #52]	; (8003e50 <__libc_init_array+0x3c>)
 8003e1c:	1ba4      	subs	r4, r4, r6
 8003e1e:	10a4      	asrs	r4, r4, #2
 8003e20:	42a5      	cmp	r5, r4
 8003e22:	d109      	bne.n	8003e38 <__libc_init_array+0x24>
 8003e24:	f002 faca 	bl	80063bc <_init>
 8003e28:	2500      	movs	r5, #0
 8003e2a:	4e0a      	ldr	r6, [pc, #40]	; (8003e54 <__libc_init_array+0x40>)
 8003e2c:	4c0a      	ldr	r4, [pc, #40]	; (8003e58 <__libc_init_array+0x44>)
 8003e2e:	1ba4      	subs	r4, r4, r6
 8003e30:	10a4      	asrs	r4, r4, #2
 8003e32:	42a5      	cmp	r5, r4
 8003e34:	d105      	bne.n	8003e42 <__libc_init_array+0x2e>
 8003e36:	bd70      	pop	{r4, r5, r6, pc}
 8003e38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e3c:	4798      	blx	r3
 8003e3e:	3501      	adds	r5, #1
 8003e40:	e7ee      	b.n	8003e20 <__libc_init_array+0xc>
 8003e42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e46:	4798      	blx	r3
 8003e48:	3501      	adds	r5, #1
 8003e4a:	e7f2      	b.n	8003e32 <__libc_init_array+0x1e>
 8003e4c:	08006720 	.word	0x08006720
 8003e50:	08006720 	.word	0x08006720
 8003e54:	08006720 	.word	0x08006720
 8003e58:	08006724 	.word	0x08006724

08003e5c <memset>:
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	4402      	add	r2, r0
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d100      	bne.n	8003e66 <memset+0xa>
 8003e64:	4770      	bx	lr
 8003e66:	f803 1b01 	strb.w	r1, [r3], #1
 8003e6a:	e7f9      	b.n	8003e60 <memset+0x4>

08003e6c <siprintf>:
 8003e6c:	b40e      	push	{r1, r2, r3}
 8003e6e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003e72:	b500      	push	{lr}
 8003e74:	b09c      	sub	sp, #112	; 0x70
 8003e76:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003e7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e7e:	9104      	str	r1, [sp, #16]
 8003e80:	9107      	str	r1, [sp, #28]
 8003e82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e86:	ab1d      	add	r3, sp, #116	; 0x74
 8003e88:	9002      	str	r0, [sp, #8]
 8003e8a:	9006      	str	r0, [sp, #24]
 8003e8c:	4808      	ldr	r0, [pc, #32]	; (8003eb0 <siprintf+0x44>)
 8003e8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e92:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003e96:	6800      	ldr	r0, [r0, #0]
 8003e98:	a902      	add	r1, sp, #8
 8003e9a:	9301      	str	r3, [sp, #4]
 8003e9c:	f001 ff6c 	bl	8005d78 <_svfiprintf_r>
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	9b02      	ldr	r3, [sp, #8]
 8003ea4:	701a      	strb	r2, [r3, #0]
 8003ea6:	b01c      	add	sp, #112	; 0x70
 8003ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003eac:	b003      	add	sp, #12
 8003eae:	4770      	bx	lr
 8003eb0:	20000004 	.word	0x20000004

08003eb4 <strcpy>:
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003eba:	f803 2b01 	strb.w	r2, [r3], #1
 8003ebe:	2a00      	cmp	r2, #0
 8003ec0:	d1f9      	bne.n	8003eb6 <strcpy+0x2>
 8003ec2:	4770      	bx	lr

08003ec4 <sulp>:
 8003ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ec8:	460f      	mov	r7, r1
 8003eca:	4690      	mov	r8, r2
 8003ecc:	f001 fd18 	bl	8005900 <__ulp>
 8003ed0:	4604      	mov	r4, r0
 8003ed2:	460d      	mov	r5, r1
 8003ed4:	f1b8 0f00 	cmp.w	r8, #0
 8003ed8:	d011      	beq.n	8003efe <sulp+0x3a>
 8003eda:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003ede:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	dd0b      	ble.n	8003efe <sulp+0x3a>
 8003ee6:	2400      	movs	r4, #0
 8003ee8:	051b      	lsls	r3, r3, #20
 8003eea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003eee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	462b      	mov	r3, r5
 8003ef6:	f7fc fb03 	bl	8000500 <__aeabi_dmul>
 8003efa:	4604      	mov	r4, r0
 8003efc:	460d      	mov	r5, r1
 8003efe:	4620      	mov	r0, r4
 8003f00:	4629      	mov	r1, r5
 8003f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003f08 <_strtod_l>:
 8003f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0c:	4699      	mov	r9, r3
 8003f0e:	2300      	movs	r3, #0
 8003f10:	b09f      	sub	sp, #124	; 0x7c
 8003f12:	4680      	mov	r8, r0
 8003f14:	4648      	mov	r0, r9
 8003f16:	460c      	mov	r4, r1
 8003f18:	9215      	str	r2, [sp, #84]	; 0x54
 8003f1a:	931a      	str	r3, [sp, #104]	; 0x68
 8003f1c:	f001 fa09 	bl	8005332 <__localeconv_l>
 8003f20:	4607      	mov	r7, r0
 8003f22:	6800      	ldr	r0, [r0, #0]
 8003f24:	f7fc f92c 	bl	8000180 <strlen>
 8003f28:	f04f 0a00 	mov.w	sl, #0
 8003f2c:	4605      	mov	r5, r0
 8003f2e:	f04f 0b00 	mov.w	fp, #0
 8003f32:	9419      	str	r4, [sp, #100]	; 0x64
 8003f34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f36:	781a      	ldrb	r2, [r3, #0]
 8003f38:	2a0d      	cmp	r2, #13
 8003f3a:	d833      	bhi.n	8003fa4 <_strtod_l+0x9c>
 8003f3c:	2a09      	cmp	r2, #9
 8003f3e:	d237      	bcs.n	8003fb0 <_strtod_l+0xa8>
 8003f40:	2a00      	cmp	r2, #0
 8003f42:	d03f      	beq.n	8003fc4 <_strtod_l+0xbc>
 8003f44:	2300      	movs	r3, #0
 8003f46:	9309      	str	r3, [sp, #36]	; 0x24
 8003f48:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003f4a:	7833      	ldrb	r3, [r6, #0]
 8003f4c:	2b30      	cmp	r3, #48	; 0x30
 8003f4e:	f040 8101 	bne.w	8004154 <_strtod_l+0x24c>
 8003f52:	7873      	ldrb	r3, [r6, #1]
 8003f54:	2b58      	cmp	r3, #88	; 0x58
 8003f56:	d001      	beq.n	8003f5c <_strtod_l+0x54>
 8003f58:	2b78      	cmp	r3, #120	; 0x78
 8003f5a:	d16b      	bne.n	8004034 <_strtod_l+0x12c>
 8003f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f5e:	f8cd 9008 	str.w	r9, [sp, #8]
 8003f62:	9301      	str	r3, [sp, #4]
 8003f64:	ab1a      	add	r3, sp, #104	; 0x68
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	4aaa      	ldr	r2, [pc, #680]	; (8004214 <_strtod_l+0x30c>)
 8003f6a:	ab1b      	add	r3, sp, #108	; 0x6c
 8003f6c:	a919      	add	r1, sp, #100	; 0x64
 8003f6e:	4640      	mov	r0, r8
 8003f70:	f000 ff08 	bl	8004d84 <__gethex>
 8003f74:	f010 0407 	ands.w	r4, r0, #7
 8003f78:	4605      	mov	r5, r0
 8003f7a:	d005      	beq.n	8003f88 <_strtod_l+0x80>
 8003f7c:	2c06      	cmp	r4, #6
 8003f7e:	d12b      	bne.n	8003fd8 <_strtod_l+0xd0>
 8003f80:	2300      	movs	r3, #0
 8003f82:	3601      	adds	r6, #1
 8003f84:	9619      	str	r6, [sp, #100]	; 0x64
 8003f86:	9309      	str	r3, [sp, #36]	; 0x24
 8003f88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f040 859d 	bne.w	8004aca <_strtod_l+0xbc2>
 8003f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f92:	b1e3      	cbz	r3, 8003fce <_strtod_l+0xc6>
 8003f94:	4652      	mov	r2, sl
 8003f96:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	b01f      	add	sp, #124	; 0x7c
 8003fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa4:	2a2b      	cmp	r2, #43	; 0x2b
 8003fa6:	d006      	beq.n	8003fb6 <_strtod_l+0xae>
 8003fa8:	2a2d      	cmp	r2, #45	; 0x2d
 8003faa:	d013      	beq.n	8003fd4 <_strtod_l+0xcc>
 8003fac:	2a20      	cmp	r2, #32
 8003fae:	d1c9      	bne.n	8003f44 <_strtod_l+0x3c>
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	9319      	str	r3, [sp, #100]	; 0x64
 8003fb4:	e7be      	b.n	8003f34 <_strtod_l+0x2c>
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	9209      	str	r2, [sp, #36]	; 0x24
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	9219      	str	r2, [sp, #100]	; 0x64
 8003fbe:	785b      	ldrb	r3, [r3, #1]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1c1      	bne.n	8003f48 <_strtod_l+0x40>
 8003fc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003fc6:	9419      	str	r4, [sp, #100]	; 0x64
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f040 857c 	bne.w	8004ac6 <_strtod_l+0xbbe>
 8003fce:	4652      	mov	r2, sl
 8003fd0:	465b      	mov	r3, fp
 8003fd2:	e7e2      	b.n	8003f9a <_strtod_l+0x92>
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	e7ef      	b.n	8003fb8 <_strtod_l+0xb0>
 8003fd8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003fda:	b13a      	cbz	r2, 8003fec <_strtod_l+0xe4>
 8003fdc:	2135      	movs	r1, #53	; 0x35
 8003fde:	a81c      	add	r0, sp, #112	; 0x70
 8003fe0:	f001 fd7b 	bl	8005ada <__copybits>
 8003fe4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003fe6:	4640      	mov	r0, r8
 8003fe8:	f001 f9ff 	bl	80053ea <_Bfree>
 8003fec:	3c01      	subs	r4, #1
 8003fee:	2c04      	cmp	r4, #4
 8003ff0:	d808      	bhi.n	8004004 <_strtod_l+0xfc>
 8003ff2:	e8df f004 	tbb	[pc, r4]
 8003ff6:	030c      	.short	0x030c
 8003ff8:	1a17      	.short	0x1a17
 8003ffa:	0c          	.byte	0x0c
 8003ffb:	00          	.byte	0x00
 8003ffc:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8004000:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8004004:	0729      	lsls	r1, r5, #28
 8004006:	d5bf      	bpl.n	8003f88 <_strtod_l+0x80>
 8004008:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800400c:	e7bc      	b.n	8003f88 <_strtod_l+0x80>
 800400e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004010:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004012:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004016:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800401a:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800401e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004022:	e7ef      	b.n	8004004 <_strtod_l+0xfc>
 8004024:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8004220 <_strtod_l+0x318>
 8004028:	e7ec      	b.n	8004004 <_strtod_l+0xfc>
 800402a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800402e:	f04f 3aff 	mov.w	sl, #4294967295
 8004032:	e7e7      	b.n	8004004 <_strtod_l+0xfc>
 8004034:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	9219      	str	r2, [sp, #100]	; 0x64
 800403a:	785b      	ldrb	r3, [r3, #1]
 800403c:	2b30      	cmp	r3, #48	; 0x30
 800403e:	d0f9      	beq.n	8004034 <_strtod_l+0x12c>
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0a1      	beq.n	8003f88 <_strtod_l+0x80>
 8004044:	2301      	movs	r3, #1
 8004046:	9308      	str	r3, [sp, #32]
 8004048:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800404a:	220a      	movs	r2, #10
 800404c:	930a      	str	r3, [sp, #40]	; 0x28
 800404e:	2300      	movs	r3, #0
 8004050:	9305      	str	r3, [sp, #20]
 8004052:	9306      	str	r3, [sp, #24]
 8004054:	9304      	str	r3, [sp, #16]
 8004056:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004058:	7806      	ldrb	r6, [r0, #0]
 800405a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800405e:	b2d9      	uxtb	r1, r3
 8004060:	2909      	cmp	r1, #9
 8004062:	d979      	bls.n	8004158 <_strtod_l+0x250>
 8004064:	462a      	mov	r2, r5
 8004066:	6839      	ldr	r1, [r7, #0]
 8004068:	f002 f922 	bl	80062b0 <strncmp>
 800406c:	2800      	cmp	r0, #0
 800406e:	f000 8085 	beq.w	800417c <_strtod_l+0x274>
 8004072:	2000      	movs	r0, #0
 8004074:	4633      	mov	r3, r6
 8004076:	4602      	mov	r2, r0
 8004078:	4601      	mov	r1, r0
 800407a:	9d04      	ldr	r5, [sp, #16]
 800407c:	2b65      	cmp	r3, #101	; 0x65
 800407e:	d002      	beq.n	8004086 <_strtod_l+0x17e>
 8004080:	2b45      	cmp	r3, #69	; 0x45
 8004082:	f040 80ef 	bne.w	8004264 <_strtod_l+0x35c>
 8004086:	b925      	cbnz	r5, 8004092 <_strtod_l+0x18a>
 8004088:	b910      	cbnz	r0, 8004090 <_strtod_l+0x188>
 800408a:	9b08      	ldr	r3, [sp, #32]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d099      	beq.n	8003fc4 <_strtod_l+0xbc>
 8004090:	2500      	movs	r5, #0
 8004092:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8004094:	1c63      	adds	r3, r4, #1
 8004096:	9319      	str	r3, [sp, #100]	; 0x64
 8004098:	7863      	ldrb	r3, [r4, #1]
 800409a:	2b2b      	cmp	r3, #43	; 0x2b
 800409c:	f000 80cf 	beq.w	800423e <_strtod_l+0x336>
 80040a0:	2b2d      	cmp	r3, #45	; 0x2d
 80040a2:	f000 80d2 	beq.w	800424a <_strtod_l+0x342>
 80040a6:	2600      	movs	r6, #0
 80040a8:	9607      	str	r6, [sp, #28]
 80040aa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80040ae:	2e09      	cmp	r6, #9
 80040b0:	f200 80d7 	bhi.w	8004262 <_strtod_l+0x35a>
 80040b4:	2b30      	cmp	r3, #48	; 0x30
 80040b6:	f000 80ca 	beq.w	800424e <_strtod_l+0x346>
 80040ba:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80040be:	2e08      	cmp	r6, #8
 80040c0:	f200 80d0 	bhi.w	8004264 <_strtod_l+0x35c>
 80040c4:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80040c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80040ca:	f04f 0c0a 	mov.w	ip, #10
 80040ce:	461f      	mov	r7, r3
 80040d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80040d2:	1c5e      	adds	r6, r3, #1
 80040d4:	9619      	str	r6, [sp, #100]	; 0x64
 80040d6:	785b      	ldrb	r3, [r3, #1]
 80040d8:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 80040dc:	f1b9 0f09 	cmp.w	r9, #9
 80040e0:	f240 80ba 	bls.w	8004258 <_strtod_l+0x350>
 80040e4:	1bf6      	subs	r6, r6, r7
 80040e6:	2e08      	cmp	r6, #8
 80040e8:	f644 691f 	movw	r9, #19999	; 0x4e1f
 80040ec:	dc02      	bgt.n	80040f4 <_strtod_l+0x1ec>
 80040ee:	45f1      	cmp	r9, lr
 80040f0:	bfa8      	it	ge
 80040f2:	46f1      	movge	r9, lr
 80040f4:	9e07      	ldr	r6, [sp, #28]
 80040f6:	b10e      	cbz	r6, 80040fc <_strtod_l+0x1f4>
 80040f8:	f1c9 0900 	rsb	r9, r9, #0
 80040fc:	2d00      	cmp	r5, #0
 80040fe:	f040 80d7 	bne.w	80042b0 <_strtod_l+0x3a8>
 8004102:	2800      	cmp	r0, #0
 8004104:	f47f af40 	bne.w	8003f88 <_strtod_l+0x80>
 8004108:	9a08      	ldr	r2, [sp, #32]
 800410a:	2a00      	cmp	r2, #0
 800410c:	f47f af3c 	bne.w	8003f88 <_strtod_l+0x80>
 8004110:	2900      	cmp	r1, #0
 8004112:	f47f af57 	bne.w	8003fc4 <_strtod_l+0xbc>
 8004116:	2b4e      	cmp	r3, #78	; 0x4e
 8004118:	f000 80ad 	beq.w	8004276 <_strtod_l+0x36e>
 800411c:	f300 80a5 	bgt.w	800426a <_strtod_l+0x362>
 8004120:	2b49      	cmp	r3, #73	; 0x49
 8004122:	f47f af4f 	bne.w	8003fc4 <_strtod_l+0xbc>
 8004126:	493c      	ldr	r1, [pc, #240]	; (8004218 <_strtod_l+0x310>)
 8004128:	a819      	add	r0, sp, #100	; 0x64
 800412a:	f001 f85c 	bl	80051e6 <__match>
 800412e:	2800      	cmp	r0, #0
 8004130:	f43f af48 	beq.w	8003fc4 <_strtod_l+0xbc>
 8004134:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004136:	4939      	ldr	r1, [pc, #228]	; (800421c <_strtod_l+0x314>)
 8004138:	3b01      	subs	r3, #1
 800413a:	a819      	add	r0, sp, #100	; 0x64
 800413c:	9319      	str	r3, [sp, #100]	; 0x64
 800413e:	f001 f852 	bl	80051e6 <__match>
 8004142:	b910      	cbnz	r0, 800414a <_strtod_l+0x242>
 8004144:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004146:	3301      	adds	r3, #1
 8004148:	9319      	str	r3, [sp, #100]	; 0x64
 800414a:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8004220 <_strtod_l+0x318>
 800414e:	f04f 0a00 	mov.w	sl, #0
 8004152:	e719      	b.n	8003f88 <_strtod_l+0x80>
 8004154:	2300      	movs	r3, #0
 8004156:	e776      	b.n	8004046 <_strtod_l+0x13e>
 8004158:	9904      	ldr	r1, [sp, #16]
 800415a:	3001      	adds	r0, #1
 800415c:	2908      	cmp	r1, #8
 800415e:	bfd5      	itete	le
 8004160:	9906      	ldrle	r1, [sp, #24]
 8004162:	9905      	ldrgt	r1, [sp, #20]
 8004164:	fb02 3301 	mlale	r3, r2, r1, r3
 8004168:	fb02 3301 	mlagt	r3, r2, r1, r3
 800416c:	bfd4      	ite	le
 800416e:	9306      	strle	r3, [sp, #24]
 8004170:	9305      	strgt	r3, [sp, #20]
 8004172:	9b04      	ldr	r3, [sp, #16]
 8004174:	9019      	str	r0, [sp, #100]	; 0x64
 8004176:	3301      	adds	r3, #1
 8004178:	9304      	str	r3, [sp, #16]
 800417a:	e76c      	b.n	8004056 <_strtod_l+0x14e>
 800417c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800417e:	195a      	adds	r2, r3, r5
 8004180:	9219      	str	r2, [sp, #100]	; 0x64
 8004182:	9a04      	ldr	r2, [sp, #16]
 8004184:	5d5b      	ldrb	r3, [r3, r5]
 8004186:	2a00      	cmp	r2, #0
 8004188:	d154      	bne.n	8004234 <_strtod_l+0x32c>
 800418a:	4610      	mov	r0, r2
 800418c:	2b30      	cmp	r3, #48	; 0x30
 800418e:	d02a      	beq.n	80041e6 <_strtod_l+0x2de>
 8004190:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004194:	2a08      	cmp	r2, #8
 8004196:	f200 849d 	bhi.w	8004ad4 <_strtod_l+0xbcc>
 800419a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800419c:	920a      	str	r2, [sp, #40]	; 0x28
 800419e:	4602      	mov	r2, r0
 80041a0:	2000      	movs	r0, #0
 80041a2:	4605      	mov	r5, r0
 80041a4:	3b30      	subs	r3, #48	; 0x30
 80041a6:	f100 0101 	add.w	r1, r0, #1
 80041aa:	d011      	beq.n	80041d0 <_strtod_l+0x2c8>
 80041ac:	440a      	add	r2, r1
 80041ae:	260a      	movs	r6, #10
 80041b0:	4629      	mov	r1, r5
 80041b2:	eb00 0c05 	add.w	ip, r0, r5
 80041b6:	4561      	cmp	r1, ip
 80041b8:	d11b      	bne.n	80041f2 <_strtod_l+0x2ea>
 80041ba:	4428      	add	r0, r5
 80041bc:	2808      	cmp	r0, #8
 80041be:	f100 0501 	add.w	r5, r0, #1
 80041c2:	dc2f      	bgt.n	8004224 <_strtod_l+0x31c>
 80041c4:	210a      	movs	r1, #10
 80041c6:	9806      	ldr	r0, [sp, #24]
 80041c8:	fb01 3300 	mla	r3, r1, r0, r3
 80041cc:	9306      	str	r3, [sp, #24]
 80041ce:	2100      	movs	r1, #0
 80041d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80041d2:	1c58      	adds	r0, r3, #1
 80041d4:	9019      	str	r0, [sp, #100]	; 0x64
 80041d6:	4608      	mov	r0, r1
 80041d8:	785b      	ldrb	r3, [r3, #1]
 80041da:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80041de:	2909      	cmp	r1, #9
 80041e0:	d9e0      	bls.n	80041a4 <_strtod_l+0x29c>
 80041e2:	2101      	movs	r1, #1
 80041e4:	e74a      	b.n	800407c <_strtod_l+0x174>
 80041e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80041e8:	3001      	adds	r0, #1
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	9219      	str	r2, [sp, #100]	; 0x64
 80041ee:	785b      	ldrb	r3, [r3, #1]
 80041f0:	e7cc      	b.n	800418c <_strtod_l+0x284>
 80041f2:	3101      	adds	r1, #1
 80041f4:	f101 3eff 	add.w	lr, r1, #4294967295
 80041f8:	f1be 0f08 	cmp.w	lr, #8
 80041fc:	dc03      	bgt.n	8004206 <_strtod_l+0x2fe>
 80041fe:	9f06      	ldr	r7, [sp, #24]
 8004200:	4377      	muls	r7, r6
 8004202:	9706      	str	r7, [sp, #24]
 8004204:	e7d7      	b.n	80041b6 <_strtod_l+0x2ae>
 8004206:	2910      	cmp	r1, #16
 8004208:	bfde      	ittt	le
 800420a:	9f05      	ldrle	r7, [sp, #20]
 800420c:	4377      	mulle	r7, r6
 800420e:	9705      	strle	r7, [sp, #20]
 8004210:	e7d1      	b.n	80041b6 <_strtod_l+0x2ae>
 8004212:	bf00      	nop
 8004214:	08006490 	.word	0x08006490
 8004218:	08006484 	.word	0x08006484
 800421c:	08006487 	.word	0x08006487
 8004220:	7ff00000 	.word	0x7ff00000
 8004224:	2d10      	cmp	r5, #16
 8004226:	bfdf      	itttt	le
 8004228:	210a      	movle	r1, #10
 800422a:	9805      	ldrle	r0, [sp, #20]
 800422c:	fb01 3300 	mlale	r3, r1, r0, r3
 8004230:	9305      	strle	r3, [sp, #20]
 8004232:	e7cc      	b.n	80041ce <_strtod_l+0x2c6>
 8004234:	4602      	mov	r2, r0
 8004236:	9d04      	ldr	r5, [sp, #16]
 8004238:	e7cf      	b.n	80041da <_strtod_l+0x2d2>
 800423a:	2101      	movs	r1, #1
 800423c:	e724      	b.n	8004088 <_strtod_l+0x180>
 800423e:	2300      	movs	r3, #0
 8004240:	9307      	str	r3, [sp, #28]
 8004242:	1ca3      	adds	r3, r4, #2
 8004244:	9319      	str	r3, [sp, #100]	; 0x64
 8004246:	78a3      	ldrb	r3, [r4, #2]
 8004248:	e72f      	b.n	80040aa <_strtod_l+0x1a2>
 800424a:	2301      	movs	r3, #1
 800424c:	e7f8      	b.n	8004240 <_strtod_l+0x338>
 800424e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004250:	1c5e      	adds	r6, r3, #1
 8004252:	9619      	str	r6, [sp, #100]	; 0x64
 8004254:	785b      	ldrb	r3, [r3, #1]
 8004256:	e72d      	b.n	80040b4 <_strtod_l+0x1ac>
 8004258:	fb0c 3e0e 	mla	lr, ip, lr, r3
 800425c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004260:	e736      	b.n	80040d0 <_strtod_l+0x1c8>
 8004262:	9419      	str	r4, [sp, #100]	; 0x64
 8004264:	f04f 0900 	mov.w	r9, #0
 8004268:	e748      	b.n	80040fc <_strtod_l+0x1f4>
 800426a:	2b69      	cmp	r3, #105	; 0x69
 800426c:	f43f af5b 	beq.w	8004126 <_strtod_l+0x21e>
 8004270:	2b6e      	cmp	r3, #110	; 0x6e
 8004272:	f47f aea7 	bne.w	8003fc4 <_strtod_l+0xbc>
 8004276:	498c      	ldr	r1, [pc, #560]	; (80044a8 <_strtod_l+0x5a0>)
 8004278:	a819      	add	r0, sp, #100	; 0x64
 800427a:	f000 ffb4 	bl	80051e6 <__match>
 800427e:	2800      	cmp	r0, #0
 8004280:	f43f aea0 	beq.w	8003fc4 <_strtod_l+0xbc>
 8004284:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b28      	cmp	r3, #40	; 0x28
 800428a:	d10e      	bne.n	80042aa <_strtod_l+0x3a2>
 800428c:	aa1c      	add	r2, sp, #112	; 0x70
 800428e:	4987      	ldr	r1, [pc, #540]	; (80044ac <_strtod_l+0x5a4>)
 8004290:	a819      	add	r0, sp, #100	; 0x64
 8004292:	f000 ffbb 	bl	800520c <__hexnan>
 8004296:	2805      	cmp	r0, #5
 8004298:	d107      	bne.n	80042aa <_strtod_l+0x3a2>
 800429a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800429c:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80042a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80042a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80042a8:	e66e      	b.n	8003f88 <_strtod_l+0x80>
 80042aa:	f8df b210 	ldr.w	fp, [pc, #528]	; 80044bc <_strtod_l+0x5b4>
 80042ae:	e74e      	b.n	800414e <_strtod_l+0x246>
 80042b0:	9b04      	ldr	r3, [sp, #16]
 80042b2:	462c      	mov	r4, r5
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	bf08      	it	eq
 80042b8:	462b      	moveq	r3, r5
 80042ba:	2d10      	cmp	r5, #16
 80042bc:	bfa8      	it	ge
 80042be:	2410      	movge	r4, #16
 80042c0:	9806      	ldr	r0, [sp, #24]
 80042c2:	eba9 0902 	sub.w	r9, r9, r2
 80042c6:	9304      	str	r3, [sp, #16]
 80042c8:	f7fc f8a4 	bl	8000414 <__aeabi_ui2d>
 80042cc:	2c09      	cmp	r4, #9
 80042ce:	4682      	mov	sl, r0
 80042d0:	468b      	mov	fp, r1
 80042d2:	dd13      	ble.n	80042fc <_strtod_l+0x3f4>
 80042d4:	4b76      	ldr	r3, [pc, #472]	; (80044b0 <_strtod_l+0x5a8>)
 80042d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80042da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80042de:	f7fc f90f 	bl	8000500 <__aeabi_dmul>
 80042e2:	4606      	mov	r6, r0
 80042e4:	9805      	ldr	r0, [sp, #20]
 80042e6:	460f      	mov	r7, r1
 80042e8:	f7fc f894 	bl	8000414 <__aeabi_ui2d>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4630      	mov	r0, r6
 80042f2:	4639      	mov	r1, r7
 80042f4:	f7fb ff52 	bl	800019c <__adddf3>
 80042f8:	4682      	mov	sl, r0
 80042fa:	468b      	mov	fp, r1
 80042fc:	2d0f      	cmp	r5, #15
 80042fe:	dc36      	bgt.n	800436e <_strtod_l+0x466>
 8004300:	f1b9 0f00 	cmp.w	r9, #0
 8004304:	f43f ae40 	beq.w	8003f88 <_strtod_l+0x80>
 8004308:	dd24      	ble.n	8004354 <_strtod_l+0x44c>
 800430a:	f1b9 0f16 	cmp.w	r9, #22
 800430e:	dc0b      	bgt.n	8004328 <_strtod_l+0x420>
 8004310:	4652      	mov	r2, sl
 8004312:	465b      	mov	r3, fp
 8004314:	4d66      	ldr	r5, [pc, #408]	; (80044b0 <_strtod_l+0x5a8>)
 8004316:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 800431a:	e9d9 0100 	ldrd	r0, r1, [r9]
 800431e:	f7fc f8ef 	bl	8000500 <__aeabi_dmul>
 8004322:	4682      	mov	sl, r0
 8004324:	468b      	mov	fp, r1
 8004326:	e62f      	b.n	8003f88 <_strtod_l+0x80>
 8004328:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800432c:	4599      	cmp	r9, r3
 800432e:	dc1e      	bgt.n	800436e <_strtod_l+0x466>
 8004330:	4c5f      	ldr	r4, [pc, #380]	; (80044b0 <_strtod_l+0x5a8>)
 8004332:	f1c5 050f 	rsb	r5, r5, #15
 8004336:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800433a:	eba9 0505 	sub.w	r5, r9, r5
 800433e:	4652      	mov	r2, sl
 8004340:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004344:	465b      	mov	r3, fp
 8004346:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800434a:	f7fc f8d9 	bl	8000500 <__aeabi_dmul>
 800434e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004352:	e7e4      	b.n	800431e <_strtod_l+0x416>
 8004354:	f119 0f16 	cmn.w	r9, #22
 8004358:	db09      	blt.n	800436e <_strtod_l+0x466>
 800435a:	4d55      	ldr	r5, [pc, #340]	; (80044b0 <_strtod_l+0x5a8>)
 800435c:	4650      	mov	r0, sl
 800435e:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 8004362:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004366:	4659      	mov	r1, fp
 8004368:	f7fc f9f4 	bl	8000754 <__aeabi_ddiv>
 800436c:	e7d9      	b.n	8004322 <_strtod_l+0x41a>
 800436e:	1b2c      	subs	r4, r5, r4
 8004370:	444c      	add	r4, r9
 8004372:	2c00      	cmp	r4, #0
 8004374:	dd73      	ble.n	800445e <_strtod_l+0x556>
 8004376:	f014 030f 	ands.w	r3, r4, #15
 800437a:	d00a      	beq.n	8004392 <_strtod_l+0x48a>
 800437c:	494c      	ldr	r1, [pc, #304]	; (80044b0 <_strtod_l+0x5a8>)
 800437e:	4652      	mov	r2, sl
 8004380:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004384:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004388:	465b      	mov	r3, fp
 800438a:	f7fc f8b9 	bl	8000500 <__aeabi_dmul>
 800438e:	4682      	mov	sl, r0
 8004390:	468b      	mov	fp, r1
 8004392:	f034 040f 	bics.w	r4, r4, #15
 8004396:	d054      	beq.n	8004442 <_strtod_l+0x53a>
 8004398:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 800439c:	dd27      	ble.n	80043ee <_strtod_l+0x4e6>
 800439e:	f04f 0900 	mov.w	r9, #0
 80043a2:	f8cd 9010 	str.w	r9, [sp, #16]
 80043a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80043aa:	f8cd 9018 	str.w	r9, [sp, #24]
 80043ae:	2322      	movs	r3, #34	; 0x22
 80043b0:	f04f 0a00 	mov.w	sl, #0
 80043b4:	f8df b108 	ldr.w	fp, [pc, #264]	; 80044c0 <_strtod_l+0x5b8>
 80043b8:	f8c8 3000 	str.w	r3, [r8]
 80043bc:	9b07      	ldr	r3, [sp, #28]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f43f ade2 	beq.w	8003f88 <_strtod_l+0x80>
 80043c4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80043c6:	4640      	mov	r0, r8
 80043c8:	f001 f80f 	bl	80053ea <_Bfree>
 80043cc:	9906      	ldr	r1, [sp, #24]
 80043ce:	4640      	mov	r0, r8
 80043d0:	f001 f80b 	bl	80053ea <_Bfree>
 80043d4:	9904      	ldr	r1, [sp, #16]
 80043d6:	4640      	mov	r0, r8
 80043d8:	f001 f807 	bl	80053ea <_Bfree>
 80043dc:	9907      	ldr	r1, [sp, #28]
 80043de:	4640      	mov	r0, r8
 80043e0:	f001 f803 	bl	80053ea <_Bfree>
 80043e4:	4649      	mov	r1, r9
 80043e6:	4640      	mov	r0, r8
 80043e8:	f000 ffff 	bl	80053ea <_Bfree>
 80043ec:	e5cc      	b.n	8003f88 <_strtod_l+0x80>
 80043ee:	2300      	movs	r3, #0
 80043f0:	4650      	mov	r0, sl
 80043f2:	4659      	mov	r1, fp
 80043f4:	461f      	mov	r7, r3
 80043f6:	4e2f      	ldr	r6, [pc, #188]	; (80044b4 <_strtod_l+0x5ac>)
 80043f8:	1124      	asrs	r4, r4, #4
 80043fa:	2c01      	cmp	r4, #1
 80043fc:	dc24      	bgt.n	8004448 <_strtod_l+0x540>
 80043fe:	b10b      	cbz	r3, 8004404 <_strtod_l+0x4fc>
 8004400:	4682      	mov	sl, r0
 8004402:	468b      	mov	fp, r1
 8004404:	4b2b      	ldr	r3, [pc, #172]	; (80044b4 <_strtod_l+0x5ac>)
 8004406:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800440a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800440e:	4652      	mov	r2, sl
 8004410:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004414:	465b      	mov	r3, fp
 8004416:	f7fc f873 	bl	8000500 <__aeabi_dmul>
 800441a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800441e:	468b      	mov	fp, r1
 8004420:	460a      	mov	r2, r1
 8004422:	0d1b      	lsrs	r3, r3, #20
 8004424:	4924      	ldr	r1, [pc, #144]	; (80044b8 <_strtod_l+0x5b0>)
 8004426:	051b      	lsls	r3, r3, #20
 8004428:	428b      	cmp	r3, r1
 800442a:	4682      	mov	sl, r0
 800442c:	d8b7      	bhi.n	800439e <_strtod_l+0x496>
 800442e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004432:	428b      	cmp	r3, r1
 8004434:	bf86      	itte	hi
 8004436:	f04f 3aff 	movhi.w	sl, #4294967295
 800443a:	f8df b088 	ldrhi.w	fp, [pc, #136]	; 80044c4 <_strtod_l+0x5bc>
 800443e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004442:	2300      	movs	r3, #0
 8004444:	9305      	str	r3, [sp, #20]
 8004446:	e070      	b.n	800452a <_strtod_l+0x622>
 8004448:	07e2      	lsls	r2, r4, #31
 800444a:	d504      	bpl.n	8004456 <_strtod_l+0x54e>
 800444c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004450:	f7fc f856 	bl	8000500 <__aeabi_dmul>
 8004454:	2301      	movs	r3, #1
 8004456:	3701      	adds	r7, #1
 8004458:	1064      	asrs	r4, r4, #1
 800445a:	3608      	adds	r6, #8
 800445c:	e7cd      	b.n	80043fa <_strtod_l+0x4f2>
 800445e:	d0f0      	beq.n	8004442 <_strtod_l+0x53a>
 8004460:	4264      	negs	r4, r4
 8004462:	f014 020f 	ands.w	r2, r4, #15
 8004466:	d00a      	beq.n	800447e <_strtod_l+0x576>
 8004468:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <_strtod_l+0x5a8>)
 800446a:	4650      	mov	r0, sl
 800446c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004470:	4659      	mov	r1, fp
 8004472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004476:	f7fc f96d 	bl	8000754 <__aeabi_ddiv>
 800447a:	4682      	mov	sl, r0
 800447c:	468b      	mov	fp, r1
 800447e:	1124      	asrs	r4, r4, #4
 8004480:	d0df      	beq.n	8004442 <_strtod_l+0x53a>
 8004482:	2c1f      	cmp	r4, #31
 8004484:	dd20      	ble.n	80044c8 <_strtod_l+0x5c0>
 8004486:	f04f 0900 	mov.w	r9, #0
 800448a:	f8cd 9010 	str.w	r9, [sp, #16]
 800448e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004492:	f8cd 9018 	str.w	r9, [sp, #24]
 8004496:	2322      	movs	r3, #34	; 0x22
 8004498:	f04f 0a00 	mov.w	sl, #0
 800449c:	f04f 0b00 	mov.w	fp, #0
 80044a0:	f8c8 3000 	str.w	r3, [r8]
 80044a4:	e78a      	b.n	80043bc <_strtod_l+0x4b4>
 80044a6:	bf00      	nop
 80044a8:	0800648d 	.word	0x0800648d
 80044ac:	080064a4 	.word	0x080064a4
 80044b0:	08006518 	.word	0x08006518
 80044b4:	080064f0 	.word	0x080064f0
 80044b8:	7ca00000 	.word	0x7ca00000
 80044bc:	fff80000 	.word	0xfff80000
 80044c0:	7ff00000 	.word	0x7ff00000
 80044c4:	7fefffff 	.word	0x7fefffff
 80044c8:	f014 0310 	ands.w	r3, r4, #16
 80044cc:	bf18      	it	ne
 80044ce:	236a      	movne	r3, #106	; 0x6a
 80044d0:	4650      	mov	r0, sl
 80044d2:	9305      	str	r3, [sp, #20]
 80044d4:	4659      	mov	r1, fp
 80044d6:	2300      	movs	r3, #0
 80044d8:	4e9f      	ldr	r6, [pc, #636]	; (8004758 <_strtod_l+0x850>)
 80044da:	2c00      	cmp	r4, #0
 80044dc:	f300 8109 	bgt.w	80046f2 <_strtod_l+0x7ea>
 80044e0:	b10b      	cbz	r3, 80044e6 <_strtod_l+0x5de>
 80044e2:	4682      	mov	sl, r0
 80044e4:	468b      	mov	fp, r1
 80044e6:	9b05      	ldr	r3, [sp, #20]
 80044e8:	b1bb      	cbz	r3, 800451a <_strtod_l+0x612>
 80044ea:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80044ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	4659      	mov	r1, fp
 80044f6:	dd10      	ble.n	800451a <_strtod_l+0x612>
 80044f8:	2b1f      	cmp	r3, #31
 80044fa:	f340 8104 	ble.w	8004706 <_strtod_l+0x7fe>
 80044fe:	2b34      	cmp	r3, #52	; 0x34
 8004500:	bfd8      	it	le
 8004502:	f04f 32ff 	movle.w	r2, #4294967295
 8004506:	f04f 0a00 	mov.w	sl, #0
 800450a:	bfcf      	iteee	gt
 800450c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004510:	3b20      	suble	r3, #32
 8004512:	fa02 f303 	lslle.w	r3, r2, r3
 8004516:	ea03 0b01 	andle.w	fp, r3, r1
 800451a:	2200      	movs	r2, #0
 800451c:	2300      	movs	r3, #0
 800451e:	4650      	mov	r0, sl
 8004520:	4659      	mov	r1, fp
 8004522:	f7fc fa55 	bl	80009d0 <__aeabi_dcmpeq>
 8004526:	2800      	cmp	r0, #0
 8004528:	d1ad      	bne.n	8004486 <_strtod_l+0x57e>
 800452a:	9b06      	ldr	r3, [sp, #24]
 800452c:	9a04      	ldr	r2, [sp, #16]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004532:	462b      	mov	r3, r5
 8004534:	4640      	mov	r0, r8
 8004536:	f000 ffaa 	bl	800548e <__s2b>
 800453a:	9007      	str	r0, [sp, #28]
 800453c:	2800      	cmp	r0, #0
 800453e:	f43f af2e 	beq.w	800439e <_strtod_l+0x496>
 8004542:	f1b9 0f00 	cmp.w	r9, #0
 8004546:	f1c9 0300 	rsb	r3, r9, #0
 800454a:	bfa8      	it	ge
 800454c:	2300      	movge	r3, #0
 800454e:	930e      	str	r3, [sp, #56]	; 0x38
 8004550:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 8004554:	f04f 0900 	mov.w	r9, #0
 8004558:	930f      	str	r3, [sp, #60]	; 0x3c
 800455a:	f8cd 9010 	str.w	r9, [sp, #16]
 800455e:	9b07      	ldr	r3, [sp, #28]
 8004560:	4640      	mov	r0, r8
 8004562:	6859      	ldr	r1, [r3, #4]
 8004564:	f000 ff0d 	bl	8005382 <_Balloc>
 8004568:	9006      	str	r0, [sp, #24]
 800456a:	2800      	cmp	r0, #0
 800456c:	f43f af1f 	beq.w	80043ae <_strtod_l+0x4a6>
 8004570:	9b07      	ldr	r3, [sp, #28]
 8004572:	300c      	adds	r0, #12
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	f103 010c 	add.w	r1, r3, #12
 800457a:	3202      	adds	r2, #2
 800457c:	0092      	lsls	r2, r2, #2
 800457e:	f000 fef5 	bl	800536c <memcpy>
 8004582:	ab1c      	add	r3, sp, #112	; 0x70
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	ab1b      	add	r3, sp, #108	; 0x6c
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	4652      	mov	r2, sl
 800458c:	465b      	mov	r3, fp
 800458e:	4640      	mov	r0, r8
 8004590:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004594:	f001 fa2a 	bl	80059ec <__d2b>
 8004598:	901a      	str	r0, [sp, #104]	; 0x68
 800459a:	2800      	cmp	r0, #0
 800459c:	f43f af07 	beq.w	80043ae <_strtod_l+0x4a6>
 80045a0:	2101      	movs	r1, #1
 80045a2:	4640      	mov	r0, r8
 80045a4:	f000 ffff 	bl	80055a6 <__i2b>
 80045a8:	9004      	str	r0, [sp, #16]
 80045aa:	4603      	mov	r3, r0
 80045ac:	2800      	cmp	r0, #0
 80045ae:	f43f aefe 	beq.w	80043ae <_strtod_l+0x4a6>
 80045b2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80045b4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80045b6:	2d00      	cmp	r5, #0
 80045b8:	bfab      	itete	ge
 80045ba:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80045bc:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 80045be:	195e      	addge	r6, r3, r5
 80045c0:	1b5c      	sublt	r4, r3, r5
 80045c2:	9b05      	ldr	r3, [sp, #20]
 80045c4:	bfa8      	it	ge
 80045c6:	9c0f      	ldrge	r4, [sp, #60]	; 0x3c
 80045c8:	eba5 0503 	sub.w	r5, r5, r3
 80045cc:	4415      	add	r5, r2
 80045ce:	4b63      	ldr	r3, [pc, #396]	; (800475c <_strtod_l+0x854>)
 80045d0:	f105 35ff 	add.w	r5, r5, #4294967295
 80045d4:	bfb8      	it	lt
 80045d6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80045d8:	429d      	cmp	r5, r3
 80045da:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80045de:	f280 80a4 	bge.w	800472a <_strtod_l+0x822>
 80045e2:	1b5b      	subs	r3, r3, r5
 80045e4:	2b1f      	cmp	r3, #31
 80045e6:	eba2 0203 	sub.w	r2, r2, r3
 80045ea:	f04f 0701 	mov.w	r7, #1
 80045ee:	f300 8091 	bgt.w	8004714 <_strtod_l+0x80c>
 80045f2:	2500      	movs	r5, #0
 80045f4:	fa07 f303 	lsl.w	r3, r7, r3
 80045f8:	9314      	str	r3, [sp, #80]	; 0x50
 80045fa:	18b7      	adds	r7, r6, r2
 80045fc:	9b05      	ldr	r3, [sp, #20]
 80045fe:	42be      	cmp	r6, r7
 8004600:	4414      	add	r4, r2
 8004602:	441c      	add	r4, r3
 8004604:	4633      	mov	r3, r6
 8004606:	bfa8      	it	ge
 8004608:	463b      	movge	r3, r7
 800460a:	42a3      	cmp	r3, r4
 800460c:	bfa8      	it	ge
 800460e:	4623      	movge	r3, r4
 8004610:	2b00      	cmp	r3, #0
 8004612:	bfc2      	ittt	gt
 8004614:	1aff      	subgt	r7, r7, r3
 8004616:	1ae4      	subgt	r4, r4, r3
 8004618:	1af6      	subgt	r6, r6, r3
 800461a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800461c:	b1bb      	cbz	r3, 800464e <_strtod_l+0x746>
 800461e:	461a      	mov	r2, r3
 8004620:	9904      	ldr	r1, [sp, #16]
 8004622:	4640      	mov	r0, r8
 8004624:	f001 f854 	bl	80056d0 <__pow5mult>
 8004628:	9004      	str	r0, [sp, #16]
 800462a:	2800      	cmp	r0, #0
 800462c:	f43f aebf 	beq.w	80043ae <_strtod_l+0x4a6>
 8004630:	4601      	mov	r1, r0
 8004632:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004634:	4640      	mov	r0, r8
 8004636:	f000 ffbf 	bl	80055b8 <__multiply>
 800463a:	9008      	str	r0, [sp, #32]
 800463c:	2800      	cmp	r0, #0
 800463e:	f43f aeb6 	beq.w	80043ae <_strtod_l+0x4a6>
 8004642:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004644:	4640      	mov	r0, r8
 8004646:	f000 fed0 	bl	80053ea <_Bfree>
 800464a:	9b08      	ldr	r3, [sp, #32]
 800464c:	931a      	str	r3, [sp, #104]	; 0x68
 800464e:	2f00      	cmp	r7, #0
 8004650:	dc6f      	bgt.n	8004732 <_strtod_l+0x82a>
 8004652:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004654:	2b00      	cmp	r3, #0
 8004656:	d175      	bne.n	8004744 <_strtod_l+0x83c>
 8004658:	2c00      	cmp	r4, #0
 800465a:	dd08      	ble.n	800466e <_strtod_l+0x766>
 800465c:	4622      	mov	r2, r4
 800465e:	9906      	ldr	r1, [sp, #24]
 8004660:	4640      	mov	r0, r8
 8004662:	f001 f883 	bl	800576c <__lshift>
 8004666:	9006      	str	r0, [sp, #24]
 8004668:	2800      	cmp	r0, #0
 800466a:	f43f aea0 	beq.w	80043ae <_strtod_l+0x4a6>
 800466e:	2e00      	cmp	r6, #0
 8004670:	dd08      	ble.n	8004684 <_strtod_l+0x77c>
 8004672:	4632      	mov	r2, r6
 8004674:	9904      	ldr	r1, [sp, #16]
 8004676:	4640      	mov	r0, r8
 8004678:	f001 f878 	bl	800576c <__lshift>
 800467c:	9004      	str	r0, [sp, #16]
 800467e:	2800      	cmp	r0, #0
 8004680:	f43f ae95 	beq.w	80043ae <_strtod_l+0x4a6>
 8004684:	9a06      	ldr	r2, [sp, #24]
 8004686:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004688:	4640      	mov	r0, r8
 800468a:	f001 f8da 	bl	8005842 <__mdiff>
 800468e:	4681      	mov	r9, r0
 8004690:	2800      	cmp	r0, #0
 8004692:	f43f ae8c 	beq.w	80043ae <_strtod_l+0x4a6>
 8004696:	2400      	movs	r4, #0
 8004698:	68c3      	ldr	r3, [r0, #12]
 800469a:	9904      	ldr	r1, [sp, #16]
 800469c:	60c4      	str	r4, [r0, #12]
 800469e:	9308      	str	r3, [sp, #32]
 80046a0:	f001 f8b5 	bl	800580e <__mcmp>
 80046a4:	42a0      	cmp	r0, r4
 80046a6:	da5b      	bge.n	8004760 <_strtod_l+0x858>
 80046a8:	9b08      	ldr	r3, [sp, #32]
 80046aa:	b9f3      	cbnz	r3, 80046ea <_strtod_l+0x7e2>
 80046ac:	f1ba 0f00 	cmp.w	sl, #0
 80046b0:	d11b      	bne.n	80046ea <_strtod_l+0x7e2>
 80046b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80046b6:	b9c3      	cbnz	r3, 80046ea <_strtod_l+0x7e2>
 80046b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80046bc:	0d1b      	lsrs	r3, r3, #20
 80046be:	051b      	lsls	r3, r3, #20
 80046c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80046c4:	d911      	bls.n	80046ea <_strtod_l+0x7e2>
 80046c6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80046ca:	b91b      	cbnz	r3, 80046d4 <_strtod_l+0x7cc>
 80046cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	dd0a      	ble.n	80046ea <_strtod_l+0x7e2>
 80046d4:	4649      	mov	r1, r9
 80046d6:	2201      	movs	r2, #1
 80046d8:	4640      	mov	r0, r8
 80046da:	f001 f847 	bl	800576c <__lshift>
 80046de:	9904      	ldr	r1, [sp, #16]
 80046e0:	4681      	mov	r9, r0
 80046e2:	f001 f894 	bl	800580e <__mcmp>
 80046e6:	2800      	cmp	r0, #0
 80046e8:	dc6b      	bgt.n	80047c2 <_strtod_l+0x8ba>
 80046ea:	9b05      	ldr	r3, [sp, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d175      	bne.n	80047dc <_strtod_l+0x8d4>
 80046f0:	e668      	b.n	80043c4 <_strtod_l+0x4bc>
 80046f2:	07e2      	lsls	r2, r4, #31
 80046f4:	d504      	bpl.n	8004700 <_strtod_l+0x7f8>
 80046f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80046fa:	f7fb ff01 	bl	8000500 <__aeabi_dmul>
 80046fe:	2301      	movs	r3, #1
 8004700:	1064      	asrs	r4, r4, #1
 8004702:	3608      	adds	r6, #8
 8004704:	e6e9      	b.n	80044da <_strtod_l+0x5d2>
 8004706:	f04f 32ff 	mov.w	r2, #4294967295
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	ea03 0a0a 	and.w	sl, r3, sl
 8004712:	e702      	b.n	800451a <_strtod_l+0x612>
 8004714:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004718:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800471c:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004720:	35e2      	adds	r5, #226	; 0xe2
 8004722:	fa07 f505 	lsl.w	r5, r7, r5
 8004726:	9714      	str	r7, [sp, #80]	; 0x50
 8004728:	e767      	b.n	80045fa <_strtod_l+0x6f2>
 800472a:	2301      	movs	r3, #1
 800472c:	2500      	movs	r5, #0
 800472e:	9314      	str	r3, [sp, #80]	; 0x50
 8004730:	e763      	b.n	80045fa <_strtod_l+0x6f2>
 8004732:	463a      	mov	r2, r7
 8004734:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004736:	4640      	mov	r0, r8
 8004738:	f001 f818 	bl	800576c <__lshift>
 800473c:	901a      	str	r0, [sp, #104]	; 0x68
 800473e:	2800      	cmp	r0, #0
 8004740:	d187      	bne.n	8004652 <_strtod_l+0x74a>
 8004742:	e634      	b.n	80043ae <_strtod_l+0x4a6>
 8004744:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004746:	9906      	ldr	r1, [sp, #24]
 8004748:	4640      	mov	r0, r8
 800474a:	f000 ffc1 	bl	80056d0 <__pow5mult>
 800474e:	9006      	str	r0, [sp, #24]
 8004750:	2800      	cmp	r0, #0
 8004752:	d181      	bne.n	8004658 <_strtod_l+0x750>
 8004754:	e62b      	b.n	80043ae <_strtod_l+0x4a6>
 8004756:	bf00      	nop
 8004758:	080064b8 	.word	0x080064b8
 800475c:	fffffc02 	.word	0xfffffc02
 8004760:	f040 8086 	bne.w	8004870 <_strtod_l+0x968>
 8004764:	9a08      	ldr	r2, [sp, #32]
 8004766:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800476a:	b332      	cbz	r2, 80047ba <_strtod_l+0x8b2>
 800476c:	4aac      	ldr	r2, [pc, #688]	; (8004a20 <_strtod_l+0xb18>)
 800476e:	4659      	mov	r1, fp
 8004770:	4293      	cmp	r3, r2
 8004772:	d152      	bne.n	800481a <_strtod_l+0x912>
 8004774:	9b05      	ldr	r3, [sp, #20]
 8004776:	4650      	mov	r0, sl
 8004778:	b1d3      	cbz	r3, 80047b0 <_strtod_l+0x8a8>
 800477a:	4aaa      	ldr	r2, [pc, #680]	; (8004a24 <_strtod_l+0xb1c>)
 800477c:	f04f 34ff 	mov.w	r4, #4294967295
 8004780:	400a      	ands	r2, r1
 8004782:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004786:	d816      	bhi.n	80047b6 <_strtod_l+0x8ae>
 8004788:	0d12      	lsrs	r2, r2, #20
 800478a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800478e:	fa04 f303 	lsl.w	r3, r4, r3
 8004792:	4283      	cmp	r3, r0
 8004794:	d141      	bne.n	800481a <_strtod_l+0x912>
 8004796:	4aa4      	ldr	r2, [pc, #656]	; (8004a28 <_strtod_l+0xb20>)
 8004798:	4291      	cmp	r1, r2
 800479a:	d102      	bne.n	80047a2 <_strtod_l+0x89a>
 800479c:	3301      	adds	r3, #1
 800479e:	f43f ae06 	beq.w	80043ae <_strtod_l+0x4a6>
 80047a2:	4ba0      	ldr	r3, [pc, #640]	; (8004a24 <_strtod_l+0xb1c>)
 80047a4:	f04f 0a00 	mov.w	sl, #0
 80047a8:	400b      	ands	r3, r1
 80047aa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80047ae:	e79c      	b.n	80046ea <_strtod_l+0x7e2>
 80047b0:	f04f 33ff 	mov.w	r3, #4294967295
 80047b4:	e7ed      	b.n	8004792 <_strtod_l+0x88a>
 80047b6:	4623      	mov	r3, r4
 80047b8:	e7eb      	b.n	8004792 <_strtod_l+0x88a>
 80047ba:	bb73      	cbnz	r3, 800481a <_strtod_l+0x912>
 80047bc:	f1ba 0f00 	cmp.w	sl, #0
 80047c0:	d12b      	bne.n	800481a <_strtod_l+0x912>
 80047c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80047c6:	9a05      	ldr	r2, [sp, #20]
 80047c8:	0d1b      	lsrs	r3, r3, #20
 80047ca:	051b      	lsls	r3, r3, #20
 80047cc:	b1e2      	cbz	r2, 8004808 <_strtod_l+0x900>
 80047ce:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80047d2:	dc19      	bgt.n	8004808 <_strtod_l+0x900>
 80047d4:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80047d8:	f77f ae5d 	ble.w	8004496 <_strtod_l+0x58e>
 80047dc:	4b93      	ldr	r3, [pc, #588]	; (8004a2c <_strtod_l+0xb24>)
 80047de:	4650      	mov	r0, sl
 80047e0:	930d      	str	r3, [sp, #52]	; 0x34
 80047e2:	2300      	movs	r3, #0
 80047e4:	930c      	str	r3, [sp, #48]	; 0x30
 80047e6:	4659      	mov	r1, fp
 80047e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80047ec:	f7fb fe88 	bl	8000500 <__aeabi_dmul>
 80047f0:	4682      	mov	sl, r0
 80047f2:	468b      	mov	fp, r1
 80047f4:	2900      	cmp	r1, #0
 80047f6:	f47f ade5 	bne.w	80043c4 <_strtod_l+0x4bc>
 80047fa:	2800      	cmp	r0, #0
 80047fc:	f47f ade2 	bne.w	80043c4 <_strtod_l+0x4bc>
 8004800:	2322      	movs	r3, #34	; 0x22
 8004802:	f8c8 3000 	str.w	r3, [r8]
 8004806:	e5dd      	b.n	80043c4 <_strtod_l+0x4bc>
 8004808:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800480c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004810:	f04f 3aff 	mov.w	sl, #4294967295
 8004814:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004818:	e767      	b.n	80046ea <_strtod_l+0x7e2>
 800481a:	b19d      	cbz	r5, 8004844 <_strtod_l+0x93c>
 800481c:	ea15 0f0b 	tst.w	r5, fp
 8004820:	f43f af63 	beq.w	80046ea <_strtod_l+0x7e2>
 8004824:	9b08      	ldr	r3, [sp, #32]
 8004826:	9a05      	ldr	r2, [sp, #20]
 8004828:	4650      	mov	r0, sl
 800482a:	4659      	mov	r1, fp
 800482c:	b173      	cbz	r3, 800484c <_strtod_l+0x944>
 800482e:	f7ff fb49 	bl	8003ec4 <sulp>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800483a:	f7fb fcaf 	bl	800019c <__adddf3>
 800483e:	4682      	mov	sl, r0
 8004840:	468b      	mov	fp, r1
 8004842:	e752      	b.n	80046ea <_strtod_l+0x7e2>
 8004844:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004846:	ea13 0f0a 	tst.w	r3, sl
 800484a:	e7e9      	b.n	8004820 <_strtod_l+0x918>
 800484c:	f7ff fb3a 	bl	8003ec4 <sulp>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004858:	f7fb fc9e 	bl	8000198 <__aeabi_dsub>
 800485c:	2200      	movs	r2, #0
 800485e:	2300      	movs	r3, #0
 8004860:	4682      	mov	sl, r0
 8004862:	468b      	mov	fp, r1
 8004864:	f7fc f8b4 	bl	80009d0 <__aeabi_dcmpeq>
 8004868:	2800      	cmp	r0, #0
 800486a:	f47f ae14 	bne.w	8004496 <_strtod_l+0x58e>
 800486e:	e73c      	b.n	80046ea <_strtod_l+0x7e2>
 8004870:	9904      	ldr	r1, [sp, #16]
 8004872:	4648      	mov	r0, r9
 8004874:	f001 f909 	bl	8005a8a <__ratio>
 8004878:	2200      	movs	r2, #0
 800487a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800487e:	4606      	mov	r6, r0
 8004880:	460f      	mov	r7, r1
 8004882:	f7fc f8b9 	bl	80009f8 <__aeabi_dcmple>
 8004886:	2800      	cmp	r0, #0
 8004888:	d070      	beq.n	800496c <_strtod_l+0xa64>
 800488a:	9b08      	ldr	r3, [sp, #32]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d043      	beq.n	8004918 <_strtod_l+0xa10>
 8004890:	2600      	movs	r6, #0
 8004892:	4f67      	ldr	r7, [pc, #412]	; (8004a30 <_strtod_l+0xb28>)
 8004894:	4d66      	ldr	r5, [pc, #408]	; (8004a30 <_strtod_l+0xb28>)
 8004896:	4b63      	ldr	r3, [pc, #396]	; (8004a24 <_strtod_l+0xb1c>)
 8004898:	ea0b 0303 	and.w	r3, fp, r3
 800489c:	9314      	str	r3, [sp, #80]	; 0x50
 800489e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80048a0:	4b64      	ldr	r3, [pc, #400]	; (8004a34 <_strtod_l+0xb2c>)
 80048a2:	429a      	cmp	r2, r3
 80048a4:	f040 80ce 	bne.w	8004a44 <_strtod_l+0xb3c>
 80048a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80048ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80048b0:	4650      	mov	r0, sl
 80048b2:	4659      	mov	r1, fp
 80048b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80048b8:	f001 f822 	bl	8005900 <__ulp>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4630      	mov	r0, r6
 80048c2:	4639      	mov	r1, r7
 80048c4:	f7fb fe1c 	bl	8000500 <__aeabi_dmul>
 80048c8:	4652      	mov	r2, sl
 80048ca:	465b      	mov	r3, fp
 80048cc:	f7fb fc66 	bl	800019c <__adddf3>
 80048d0:	4a54      	ldr	r2, [pc, #336]	; (8004a24 <_strtod_l+0xb1c>)
 80048d2:	4b59      	ldr	r3, [pc, #356]	; (8004a38 <_strtod_l+0xb30>)
 80048d4:	400a      	ands	r2, r1
 80048d6:	429a      	cmp	r2, r3
 80048d8:	4682      	mov	sl, r0
 80048da:	d95d      	bls.n	8004998 <_strtod_l+0xa90>
 80048dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80048de:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d103      	bne.n	80048ee <_strtod_l+0x9e6>
 80048e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048e8:	3301      	adds	r3, #1
 80048ea:	f43f ad60 	beq.w	80043ae <_strtod_l+0x4a6>
 80048ee:	f04f 3aff 	mov.w	sl, #4294967295
 80048f2:	f8df b134 	ldr.w	fp, [pc, #308]	; 8004a28 <_strtod_l+0xb20>
 80048f6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80048f8:	4640      	mov	r0, r8
 80048fa:	f000 fd76 	bl	80053ea <_Bfree>
 80048fe:	9906      	ldr	r1, [sp, #24]
 8004900:	4640      	mov	r0, r8
 8004902:	f000 fd72 	bl	80053ea <_Bfree>
 8004906:	9904      	ldr	r1, [sp, #16]
 8004908:	4640      	mov	r0, r8
 800490a:	f000 fd6e 	bl	80053ea <_Bfree>
 800490e:	4649      	mov	r1, r9
 8004910:	4640      	mov	r0, r8
 8004912:	f000 fd6a 	bl	80053ea <_Bfree>
 8004916:	e622      	b.n	800455e <_strtod_l+0x656>
 8004918:	f1ba 0f00 	cmp.w	sl, #0
 800491c:	d118      	bne.n	8004950 <_strtod_l+0xa48>
 800491e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004922:	b9e3      	cbnz	r3, 800495e <_strtod_l+0xa56>
 8004924:	2200      	movs	r2, #0
 8004926:	4b42      	ldr	r3, [pc, #264]	; (8004a30 <_strtod_l+0xb28>)
 8004928:	4630      	mov	r0, r6
 800492a:	4639      	mov	r1, r7
 800492c:	f7fc f85a 	bl	80009e4 <__aeabi_dcmplt>
 8004930:	b9c8      	cbnz	r0, 8004966 <_strtod_l+0xa5e>
 8004932:	2200      	movs	r2, #0
 8004934:	4b41      	ldr	r3, [pc, #260]	; (8004a3c <_strtod_l+0xb34>)
 8004936:	4630      	mov	r0, r6
 8004938:	4639      	mov	r1, r7
 800493a:	f7fb fde1 	bl	8000500 <__aeabi_dmul>
 800493e:	4604      	mov	r4, r0
 8004940:	460d      	mov	r5, r1
 8004942:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004946:	9416      	str	r4, [sp, #88]	; 0x58
 8004948:	9317      	str	r3, [sp, #92]	; 0x5c
 800494a:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800494e:	e7a2      	b.n	8004896 <_strtod_l+0x98e>
 8004950:	f1ba 0f01 	cmp.w	sl, #1
 8004954:	d103      	bne.n	800495e <_strtod_l+0xa56>
 8004956:	f1bb 0f00 	cmp.w	fp, #0
 800495a:	f43f ad9c 	beq.w	8004496 <_strtod_l+0x58e>
 800495e:	2600      	movs	r6, #0
 8004960:	4f37      	ldr	r7, [pc, #220]	; (8004a40 <_strtod_l+0xb38>)
 8004962:	2400      	movs	r4, #0
 8004964:	e796      	b.n	8004894 <_strtod_l+0x98c>
 8004966:	9c08      	ldr	r4, [sp, #32]
 8004968:	4d34      	ldr	r5, [pc, #208]	; (8004a3c <_strtod_l+0xb34>)
 800496a:	e7ea      	b.n	8004942 <_strtod_l+0xa3a>
 800496c:	4b33      	ldr	r3, [pc, #204]	; (8004a3c <_strtod_l+0xb34>)
 800496e:	2200      	movs	r2, #0
 8004970:	4630      	mov	r0, r6
 8004972:	4639      	mov	r1, r7
 8004974:	f7fb fdc4 	bl	8000500 <__aeabi_dmul>
 8004978:	9b08      	ldr	r3, [sp, #32]
 800497a:	4604      	mov	r4, r0
 800497c:	460d      	mov	r5, r1
 800497e:	b933      	cbnz	r3, 800498e <_strtod_l+0xa86>
 8004980:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004984:	9010      	str	r0, [sp, #64]	; 0x40
 8004986:	9311      	str	r3, [sp, #68]	; 0x44
 8004988:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800498c:	e783      	b.n	8004896 <_strtod_l+0x98e>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004996:	e7f7      	b.n	8004988 <_strtod_l+0xa80>
 8004998:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 800499c:	9b05      	ldr	r3, [sp, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1a9      	bne.n	80048f6 <_strtod_l+0x9ee>
 80049a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80049a6:	0d1b      	lsrs	r3, r3, #20
 80049a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80049aa:	051b      	lsls	r3, r3, #20
 80049ac:	429a      	cmp	r2, r3
 80049ae:	465e      	mov	r6, fp
 80049b0:	d1a1      	bne.n	80048f6 <_strtod_l+0x9ee>
 80049b2:	4629      	mov	r1, r5
 80049b4:	4620      	mov	r0, r4
 80049b6:	f7fc f83d 	bl	8000a34 <__aeabi_d2iz>
 80049ba:	f7fb fd3b 	bl	8000434 <__aeabi_i2d>
 80049be:	460b      	mov	r3, r1
 80049c0:	4602      	mov	r2, r0
 80049c2:	4629      	mov	r1, r5
 80049c4:	4620      	mov	r0, r4
 80049c6:	f7fb fbe7 	bl	8000198 <__aeabi_dsub>
 80049ca:	9b08      	ldr	r3, [sp, #32]
 80049cc:	4604      	mov	r4, r0
 80049ce:	460d      	mov	r5, r1
 80049d0:	b933      	cbnz	r3, 80049e0 <_strtod_l+0xad8>
 80049d2:	f1ba 0f00 	cmp.w	sl, #0
 80049d6:	d103      	bne.n	80049e0 <_strtod_l+0xad8>
 80049d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80049dc:	2e00      	cmp	r6, #0
 80049de:	d06c      	beq.n	8004aba <_strtod_l+0xbb2>
 80049e0:	a30b      	add	r3, pc, #44	; (adr r3, 8004a10 <_strtod_l+0xb08>)
 80049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e6:	4620      	mov	r0, r4
 80049e8:	4629      	mov	r1, r5
 80049ea:	f7fb fffb 	bl	80009e4 <__aeabi_dcmplt>
 80049ee:	2800      	cmp	r0, #0
 80049f0:	f47f ace8 	bne.w	80043c4 <_strtod_l+0x4bc>
 80049f4:	a308      	add	r3, pc, #32	; (adr r3, 8004a18 <_strtod_l+0xb10>)
 80049f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fa:	4620      	mov	r0, r4
 80049fc:	4629      	mov	r1, r5
 80049fe:	f7fc f80f 	bl	8000a20 <__aeabi_dcmpgt>
 8004a02:	2800      	cmp	r0, #0
 8004a04:	f43f af77 	beq.w	80048f6 <_strtod_l+0x9ee>
 8004a08:	e4dc      	b.n	80043c4 <_strtod_l+0x4bc>
 8004a0a:	bf00      	nop
 8004a0c:	f3af 8000 	nop.w
 8004a10:	94a03595 	.word	0x94a03595
 8004a14:	3fdfffff 	.word	0x3fdfffff
 8004a18:	35afe535 	.word	0x35afe535
 8004a1c:	3fe00000 	.word	0x3fe00000
 8004a20:	000fffff 	.word	0x000fffff
 8004a24:	7ff00000 	.word	0x7ff00000
 8004a28:	7fefffff 	.word	0x7fefffff
 8004a2c:	39500000 	.word	0x39500000
 8004a30:	3ff00000 	.word	0x3ff00000
 8004a34:	7fe00000 	.word	0x7fe00000
 8004a38:	7c9fffff 	.word	0x7c9fffff
 8004a3c:	3fe00000 	.word	0x3fe00000
 8004a40:	bff00000 	.word	0xbff00000
 8004a44:	9b05      	ldr	r3, [sp, #20]
 8004a46:	b313      	cbz	r3, 8004a8e <_strtod_l+0xb86>
 8004a48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a4a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004a4e:	d81e      	bhi.n	8004a8e <_strtod_l+0xb86>
 8004a50:	a325      	add	r3, pc, #148	; (adr r3, 8004ae8 <_strtod_l+0xbe0>)
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	4620      	mov	r0, r4
 8004a58:	4629      	mov	r1, r5
 8004a5a:	f7fb ffcd 	bl	80009f8 <__aeabi_dcmple>
 8004a5e:	b190      	cbz	r0, 8004a86 <_strtod_l+0xb7e>
 8004a60:	4629      	mov	r1, r5
 8004a62:	4620      	mov	r0, r4
 8004a64:	f7fc f80e 	bl	8000a84 <__aeabi_d2uiz>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	bf08      	it	eq
 8004a6c:	2001      	moveq	r0, #1
 8004a6e:	f7fb fcd1 	bl	8000414 <__aeabi_ui2d>
 8004a72:	9b08      	ldr	r3, [sp, #32]
 8004a74:	4604      	mov	r4, r0
 8004a76:	460d      	mov	r5, r1
 8004a78:	b9d3      	cbnz	r3, 8004ab0 <_strtod_l+0xba8>
 8004a7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a7e:	9012      	str	r0, [sp, #72]	; 0x48
 8004a80:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a82:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004a86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004a88:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004a8c:	1a9f      	subs	r7, r3, r2
 8004a8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004a92:	f000 ff35 	bl	8005900 <__ulp>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	4639      	mov	r1, r7
 8004a9e:	f7fb fd2f 	bl	8000500 <__aeabi_dmul>
 8004aa2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004aa6:	f7fb fb79 	bl	800019c <__adddf3>
 8004aaa:	4682      	mov	sl, r0
 8004aac:	468b      	mov	fp, r1
 8004aae:	e775      	b.n	800499c <_strtod_l+0xa94>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004ab8:	e7e3      	b.n	8004a82 <_strtod_l+0xb7a>
 8004aba:	a30d      	add	r3, pc, #52	; (adr r3, 8004af0 <_strtod_l+0xbe8>)
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f7fb ff90 	bl	80009e4 <__aeabi_dcmplt>
 8004ac4:	e79d      	b.n	8004a02 <_strtod_l+0xafa>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8004aca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004acc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	f7ff ba5e 	b.w	8003f90 <_strtod_l+0x88>
 8004ad4:	2b65      	cmp	r3, #101	; 0x65
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	f43f abae 	beq.w	800423a <_strtod_l+0x332>
 8004ade:	4615      	mov	r5, r2
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	f7ff bacd 	b.w	8004080 <_strtod_l+0x178>
 8004ae6:	bf00      	nop
 8004ae8:	ffc00000 	.word	0xffc00000
 8004aec:	41dfffff 	.word	0x41dfffff
 8004af0:	94a03595 	.word	0x94a03595
 8004af4:	3fcfffff 	.word	0x3fcfffff

08004af8 <strtod>:
 8004af8:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <strtod+0x1c>)
 8004afa:	b410      	push	{r4}
 8004afc:	681c      	ldr	r4, [r3, #0]
 8004afe:	4a06      	ldr	r2, [pc, #24]	; (8004b18 <strtod+0x20>)
 8004b00:	6a23      	ldr	r3, [r4, #32]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	bf08      	it	eq
 8004b06:	4613      	moveq	r3, r2
 8004b08:	460a      	mov	r2, r1
 8004b0a:	4601      	mov	r1, r0
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	bc10      	pop	{r4}
 8004b10:	f7ff b9fa 	b.w	8003f08 <_strtod_l>
 8004b14:	20000004 	.word	0x20000004
 8004b18:	20000068 	.word	0x20000068

08004b1c <strtok>:
 8004b1c:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <strtok+0x50>)
 8004b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b22:	681d      	ldr	r5, [r3, #0]
 8004b24:	4606      	mov	r6, r0
 8004b26:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8004b28:	460f      	mov	r7, r1
 8004b2a:	b9b4      	cbnz	r4, 8004b5a <strtok+0x3e>
 8004b2c:	2050      	movs	r0, #80	; 0x50
 8004b2e:	f000 fc03 	bl	8005338 <malloc>
 8004b32:	65a8      	str	r0, [r5, #88]	; 0x58
 8004b34:	6004      	str	r4, [r0, #0]
 8004b36:	6044      	str	r4, [r0, #4]
 8004b38:	6084      	str	r4, [r0, #8]
 8004b3a:	60c4      	str	r4, [r0, #12]
 8004b3c:	6104      	str	r4, [r0, #16]
 8004b3e:	6144      	str	r4, [r0, #20]
 8004b40:	6184      	str	r4, [r0, #24]
 8004b42:	6284      	str	r4, [r0, #40]	; 0x28
 8004b44:	62c4      	str	r4, [r0, #44]	; 0x2c
 8004b46:	6304      	str	r4, [r0, #48]	; 0x30
 8004b48:	6344      	str	r4, [r0, #52]	; 0x34
 8004b4a:	6384      	str	r4, [r0, #56]	; 0x38
 8004b4c:	63c4      	str	r4, [r0, #60]	; 0x3c
 8004b4e:	6404      	str	r4, [r0, #64]	; 0x40
 8004b50:	6444      	str	r4, [r0, #68]	; 0x44
 8004b52:	6484      	str	r4, [r0, #72]	; 0x48
 8004b54:	64c4      	str	r4, [r0, #76]	; 0x4c
 8004b56:	7704      	strb	r4, [r0, #28]
 8004b58:	6244      	str	r4, [r0, #36]	; 0x24
 8004b5a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8004b5c:	4639      	mov	r1, r7
 8004b5e:	4630      	mov	r0, r6
 8004b60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b64:	2301      	movs	r3, #1
 8004b66:	f000 b803 	b.w	8004b70 <__strtok_r>
 8004b6a:	bf00      	nop
 8004b6c:	20000004 	.word	0x20000004

08004b70 <__strtok_r>:
 8004b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b72:	b918      	cbnz	r0, 8004b7c <__strtok_r+0xc>
 8004b74:	6810      	ldr	r0, [r2, #0]
 8004b76:	b908      	cbnz	r0, 8004b7c <__strtok_r+0xc>
 8004b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	460f      	mov	r7, r1
 8004b80:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004b84:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004b88:	b91e      	cbnz	r6, 8004b92 <__strtok_r+0x22>
 8004b8a:	b965      	cbnz	r5, 8004ba6 <__strtok_r+0x36>
 8004b8c:	6015      	str	r5, [r2, #0]
 8004b8e:	4628      	mov	r0, r5
 8004b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b92:	42b5      	cmp	r5, r6
 8004b94:	d1f6      	bne.n	8004b84 <__strtok_r+0x14>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1ef      	bne.n	8004b7a <__strtok_r+0xa>
 8004b9a:	6014      	str	r4, [r2, #0]
 8004b9c:	7003      	strb	r3, [r0, #0]
 8004b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ba0:	461c      	mov	r4, r3
 8004ba2:	e00c      	b.n	8004bbe <__strtok_r+0x4e>
 8004ba4:	b915      	cbnz	r5, 8004bac <__strtok_r+0x3c>
 8004ba6:	460e      	mov	r6, r1
 8004ba8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004bac:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004bb0:	42ab      	cmp	r3, r5
 8004bb2:	d1f7      	bne.n	8004ba4 <__strtok_r+0x34>
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0f3      	beq.n	8004ba0 <__strtok_r+0x30>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004bbe:	6014      	str	r4, [r2, #0]
 8004bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bc2 <_strtol_l.isra.0>:
 8004bc2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc6:	4680      	mov	r8, r0
 8004bc8:	4689      	mov	r9, r1
 8004bca:	4692      	mov	sl, r2
 8004bcc:	461f      	mov	r7, r3
 8004bce:	468b      	mov	fp, r1
 8004bd0:	465d      	mov	r5, fp
 8004bd2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004bd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004bd8:	f000 fba8 	bl	800532c <__locale_ctype_ptr_l>
 8004bdc:	4420      	add	r0, r4
 8004bde:	7846      	ldrb	r6, [r0, #1]
 8004be0:	f016 0608 	ands.w	r6, r6, #8
 8004be4:	d10b      	bne.n	8004bfe <_strtol_l.isra.0+0x3c>
 8004be6:	2c2d      	cmp	r4, #45	; 0x2d
 8004be8:	d10b      	bne.n	8004c02 <_strtol_l.isra.0+0x40>
 8004bea:	2601      	movs	r6, #1
 8004bec:	782c      	ldrb	r4, [r5, #0]
 8004bee:	f10b 0502 	add.w	r5, fp, #2
 8004bf2:	b167      	cbz	r7, 8004c0e <_strtol_l.isra.0+0x4c>
 8004bf4:	2f10      	cmp	r7, #16
 8004bf6:	d114      	bne.n	8004c22 <_strtol_l.isra.0+0x60>
 8004bf8:	2c30      	cmp	r4, #48	; 0x30
 8004bfa:	d00a      	beq.n	8004c12 <_strtol_l.isra.0+0x50>
 8004bfc:	e011      	b.n	8004c22 <_strtol_l.isra.0+0x60>
 8004bfe:	46ab      	mov	fp, r5
 8004c00:	e7e6      	b.n	8004bd0 <_strtol_l.isra.0+0xe>
 8004c02:	2c2b      	cmp	r4, #43	; 0x2b
 8004c04:	bf04      	itt	eq
 8004c06:	782c      	ldrbeq	r4, [r5, #0]
 8004c08:	f10b 0502 	addeq.w	r5, fp, #2
 8004c0c:	e7f1      	b.n	8004bf2 <_strtol_l.isra.0+0x30>
 8004c0e:	2c30      	cmp	r4, #48	; 0x30
 8004c10:	d127      	bne.n	8004c62 <_strtol_l.isra.0+0xa0>
 8004c12:	782b      	ldrb	r3, [r5, #0]
 8004c14:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004c18:	2b58      	cmp	r3, #88	; 0x58
 8004c1a:	d14b      	bne.n	8004cb4 <_strtol_l.isra.0+0xf2>
 8004c1c:	2710      	movs	r7, #16
 8004c1e:	786c      	ldrb	r4, [r5, #1]
 8004c20:	3502      	adds	r5, #2
 8004c22:	2e00      	cmp	r6, #0
 8004c24:	bf0c      	ite	eq
 8004c26:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004c2a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004c2e:	2200      	movs	r2, #0
 8004c30:	fbb1 fef7 	udiv	lr, r1, r7
 8004c34:	4610      	mov	r0, r2
 8004c36:	fb07 1c1e 	mls	ip, r7, lr, r1
 8004c3a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004c3e:	2b09      	cmp	r3, #9
 8004c40:	d811      	bhi.n	8004c66 <_strtol_l.isra.0+0xa4>
 8004c42:	461c      	mov	r4, r3
 8004c44:	42a7      	cmp	r7, r4
 8004c46:	dd1d      	ble.n	8004c84 <_strtol_l.isra.0+0xc2>
 8004c48:	1c53      	adds	r3, r2, #1
 8004c4a:	d007      	beq.n	8004c5c <_strtol_l.isra.0+0x9a>
 8004c4c:	4586      	cmp	lr, r0
 8004c4e:	d316      	bcc.n	8004c7e <_strtol_l.isra.0+0xbc>
 8004c50:	d101      	bne.n	8004c56 <_strtol_l.isra.0+0x94>
 8004c52:	45a4      	cmp	ip, r4
 8004c54:	db13      	blt.n	8004c7e <_strtol_l.isra.0+0xbc>
 8004c56:	2201      	movs	r2, #1
 8004c58:	fb00 4007 	mla	r0, r0, r7, r4
 8004c5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c60:	e7eb      	b.n	8004c3a <_strtol_l.isra.0+0x78>
 8004c62:	270a      	movs	r7, #10
 8004c64:	e7dd      	b.n	8004c22 <_strtol_l.isra.0+0x60>
 8004c66:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004c6a:	2b19      	cmp	r3, #25
 8004c6c:	d801      	bhi.n	8004c72 <_strtol_l.isra.0+0xb0>
 8004c6e:	3c37      	subs	r4, #55	; 0x37
 8004c70:	e7e8      	b.n	8004c44 <_strtol_l.isra.0+0x82>
 8004c72:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004c76:	2b19      	cmp	r3, #25
 8004c78:	d804      	bhi.n	8004c84 <_strtol_l.isra.0+0xc2>
 8004c7a:	3c57      	subs	r4, #87	; 0x57
 8004c7c:	e7e2      	b.n	8004c44 <_strtol_l.isra.0+0x82>
 8004c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c82:	e7eb      	b.n	8004c5c <_strtol_l.isra.0+0x9a>
 8004c84:	1c53      	adds	r3, r2, #1
 8004c86:	d108      	bne.n	8004c9a <_strtol_l.isra.0+0xd8>
 8004c88:	2322      	movs	r3, #34	; 0x22
 8004c8a:	4608      	mov	r0, r1
 8004c8c:	f8c8 3000 	str.w	r3, [r8]
 8004c90:	f1ba 0f00 	cmp.w	sl, #0
 8004c94:	d107      	bne.n	8004ca6 <_strtol_l.isra.0+0xe4>
 8004c96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c9a:	b106      	cbz	r6, 8004c9e <_strtol_l.isra.0+0xdc>
 8004c9c:	4240      	negs	r0, r0
 8004c9e:	f1ba 0f00 	cmp.w	sl, #0
 8004ca2:	d00c      	beq.n	8004cbe <_strtol_l.isra.0+0xfc>
 8004ca4:	b122      	cbz	r2, 8004cb0 <_strtol_l.isra.0+0xee>
 8004ca6:	3d01      	subs	r5, #1
 8004ca8:	f8ca 5000 	str.w	r5, [sl]
 8004cac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cb0:	464d      	mov	r5, r9
 8004cb2:	e7f9      	b.n	8004ca8 <_strtol_l.isra.0+0xe6>
 8004cb4:	2430      	movs	r4, #48	; 0x30
 8004cb6:	2f00      	cmp	r7, #0
 8004cb8:	d1b3      	bne.n	8004c22 <_strtol_l.isra.0+0x60>
 8004cba:	2708      	movs	r7, #8
 8004cbc:	e7b1      	b.n	8004c22 <_strtol_l.isra.0+0x60>
 8004cbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004cc4 <strtol>:
 8004cc4:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <strtol+0x24>)
 8004cc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cc8:	681c      	ldr	r4, [r3, #0]
 8004cca:	4d08      	ldr	r5, [pc, #32]	; (8004cec <strtol+0x28>)
 8004ccc:	6a23      	ldr	r3, [r4, #32]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	bf08      	it	eq
 8004cd2:	462b      	moveq	r3, r5
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	460a      	mov	r2, r1
 8004cda:	4601      	mov	r1, r0
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f7ff ff70 	bl	8004bc2 <_strtol_l.isra.0>
 8004ce2:	b003      	add	sp, #12
 8004ce4:	bd30      	pop	{r4, r5, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000004 	.word	0x20000004
 8004cec:	20000068 	.word	0x20000068

08004cf0 <rshift>:
 8004cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cf2:	6906      	ldr	r6, [r0, #16]
 8004cf4:	114b      	asrs	r3, r1, #5
 8004cf6:	42b3      	cmp	r3, r6
 8004cf8:	f100 0514 	add.w	r5, r0, #20
 8004cfc:	da2b      	bge.n	8004d56 <rshift+0x66>
 8004cfe:	f011 011f 	ands.w	r1, r1, #31
 8004d02:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8004d06:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8004d0a:	d108      	bne.n	8004d1e <rshift+0x2e>
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	42b2      	cmp	r2, r6
 8004d10:	460b      	mov	r3, r1
 8004d12:	d210      	bcs.n	8004d36 <rshift+0x46>
 8004d14:	f852 3b04 	ldr.w	r3, [r2], #4
 8004d18:	f841 3b04 	str.w	r3, [r1], #4
 8004d1c:	e7f7      	b.n	8004d0e <rshift+0x1e>
 8004d1e:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 8004d22:	462b      	mov	r3, r5
 8004d24:	f1c1 0e20 	rsb	lr, r1, #32
 8004d28:	3204      	adds	r2, #4
 8004d2a:	40cc      	lsrs	r4, r1
 8004d2c:	42b2      	cmp	r2, r6
 8004d2e:	d308      	bcc.n	8004d42 <rshift+0x52>
 8004d30:	601c      	str	r4, [r3, #0]
 8004d32:	b104      	cbz	r4, 8004d36 <rshift+0x46>
 8004d34:	3304      	adds	r3, #4
 8004d36:	1b5b      	subs	r3, r3, r5
 8004d38:	109b      	asrs	r3, r3, #2
 8004d3a:	6103      	str	r3, [r0, #16]
 8004d3c:	b903      	cbnz	r3, 8004d40 <rshift+0x50>
 8004d3e:	6143      	str	r3, [r0, #20]
 8004d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d42:	6817      	ldr	r7, [r2, #0]
 8004d44:	fa07 f70e 	lsl.w	r7, r7, lr
 8004d48:	433c      	orrs	r4, r7
 8004d4a:	f843 4b04 	str.w	r4, [r3], #4
 8004d4e:	f852 4b04 	ldr.w	r4, [r2], #4
 8004d52:	40cc      	lsrs	r4, r1
 8004d54:	e7ea      	b.n	8004d2c <rshift+0x3c>
 8004d56:	462b      	mov	r3, r5
 8004d58:	e7ed      	b.n	8004d36 <rshift+0x46>

08004d5a <__hexdig_fun>:
 8004d5a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004d5e:	2b09      	cmp	r3, #9
 8004d60:	d802      	bhi.n	8004d68 <__hexdig_fun+0xe>
 8004d62:	3820      	subs	r0, #32
 8004d64:	b2c0      	uxtb	r0, r0
 8004d66:	4770      	bx	lr
 8004d68:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004d6c:	2b05      	cmp	r3, #5
 8004d6e:	d801      	bhi.n	8004d74 <__hexdig_fun+0x1a>
 8004d70:	3847      	subs	r0, #71	; 0x47
 8004d72:	e7f7      	b.n	8004d64 <__hexdig_fun+0xa>
 8004d74:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004d78:	2b05      	cmp	r3, #5
 8004d7a:	d801      	bhi.n	8004d80 <__hexdig_fun+0x26>
 8004d7c:	3827      	subs	r0, #39	; 0x27
 8004d7e:	e7f1      	b.n	8004d64 <__hexdig_fun+0xa>
 8004d80:	2000      	movs	r0, #0
 8004d82:	4770      	bx	lr

08004d84 <__gethex>:
 8004d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d88:	b08b      	sub	sp, #44	; 0x2c
 8004d8a:	9002      	str	r0, [sp, #8]
 8004d8c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004d8e:	468a      	mov	sl, r1
 8004d90:	4690      	mov	r8, r2
 8004d92:	9306      	str	r3, [sp, #24]
 8004d94:	f000 facd 	bl	8005332 <__localeconv_l>
 8004d98:	6803      	ldr	r3, [r0, #0]
 8004d9a:	f04f 0b00 	mov.w	fp, #0
 8004d9e:	4618      	mov	r0, r3
 8004da0:	9303      	str	r3, [sp, #12]
 8004da2:	f7fb f9ed 	bl	8000180 <strlen>
 8004da6:	9b03      	ldr	r3, [sp, #12]
 8004da8:	9001      	str	r0, [sp, #4]
 8004daa:	4403      	add	r3, r0
 8004dac:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004db0:	9307      	str	r3, [sp, #28]
 8004db2:	f8da 3000 	ldr.w	r3, [sl]
 8004db6:	3302      	adds	r3, #2
 8004db8:	461f      	mov	r7, r3
 8004dba:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004dbe:	2830      	cmp	r0, #48	; 0x30
 8004dc0:	d06c      	beq.n	8004e9c <__gethex+0x118>
 8004dc2:	f7ff ffca 	bl	8004d5a <__hexdig_fun>
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	d16a      	bne.n	8004ea2 <__gethex+0x11e>
 8004dcc:	9a01      	ldr	r2, [sp, #4]
 8004dce:	9903      	ldr	r1, [sp, #12]
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	f001 fa6d 	bl	80062b0 <strncmp>
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	d166      	bne.n	8004ea8 <__gethex+0x124>
 8004dda:	9b01      	ldr	r3, [sp, #4]
 8004ddc:	5cf8      	ldrb	r0, [r7, r3]
 8004dde:	18fe      	adds	r6, r7, r3
 8004de0:	f7ff ffbb 	bl	8004d5a <__hexdig_fun>
 8004de4:	2800      	cmp	r0, #0
 8004de6:	d062      	beq.n	8004eae <__gethex+0x12a>
 8004de8:	4633      	mov	r3, r6
 8004dea:	7818      	ldrb	r0, [r3, #0]
 8004dec:	461f      	mov	r7, r3
 8004dee:	2830      	cmp	r0, #48	; 0x30
 8004df0:	f103 0301 	add.w	r3, r3, #1
 8004df4:	d0f9      	beq.n	8004dea <__gethex+0x66>
 8004df6:	f7ff ffb0 	bl	8004d5a <__hexdig_fun>
 8004dfa:	fab0 f580 	clz	r5, r0
 8004dfe:	4634      	mov	r4, r6
 8004e00:	f04f 0b01 	mov.w	fp, #1
 8004e04:	096d      	lsrs	r5, r5, #5
 8004e06:	463a      	mov	r2, r7
 8004e08:	4616      	mov	r6, r2
 8004e0a:	7830      	ldrb	r0, [r6, #0]
 8004e0c:	3201      	adds	r2, #1
 8004e0e:	f7ff ffa4 	bl	8004d5a <__hexdig_fun>
 8004e12:	2800      	cmp	r0, #0
 8004e14:	d1f8      	bne.n	8004e08 <__gethex+0x84>
 8004e16:	9a01      	ldr	r2, [sp, #4]
 8004e18:	9903      	ldr	r1, [sp, #12]
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	f001 fa48 	bl	80062b0 <strncmp>
 8004e20:	b950      	cbnz	r0, 8004e38 <__gethex+0xb4>
 8004e22:	b954      	cbnz	r4, 8004e3a <__gethex+0xb6>
 8004e24:	9b01      	ldr	r3, [sp, #4]
 8004e26:	18f4      	adds	r4, r6, r3
 8004e28:	4622      	mov	r2, r4
 8004e2a:	4616      	mov	r6, r2
 8004e2c:	7830      	ldrb	r0, [r6, #0]
 8004e2e:	3201      	adds	r2, #1
 8004e30:	f7ff ff93 	bl	8004d5a <__hexdig_fun>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d1f8      	bne.n	8004e2a <__gethex+0xa6>
 8004e38:	b10c      	cbz	r4, 8004e3e <__gethex+0xba>
 8004e3a:	1ba4      	subs	r4, r4, r6
 8004e3c:	00a4      	lsls	r4, r4, #2
 8004e3e:	7833      	ldrb	r3, [r6, #0]
 8004e40:	2b50      	cmp	r3, #80	; 0x50
 8004e42:	d001      	beq.n	8004e48 <__gethex+0xc4>
 8004e44:	2b70      	cmp	r3, #112	; 0x70
 8004e46:	d140      	bne.n	8004eca <__gethex+0x146>
 8004e48:	7873      	ldrb	r3, [r6, #1]
 8004e4a:	2b2b      	cmp	r3, #43	; 0x2b
 8004e4c:	d035      	beq.n	8004eba <__gethex+0x136>
 8004e4e:	2b2d      	cmp	r3, #45	; 0x2d
 8004e50:	d02f      	beq.n	8004eb2 <__gethex+0x12e>
 8004e52:	f04f 0900 	mov.w	r9, #0
 8004e56:	1c71      	adds	r1, r6, #1
 8004e58:	7808      	ldrb	r0, [r1, #0]
 8004e5a:	f7ff ff7e 	bl	8004d5a <__hexdig_fun>
 8004e5e:	1e43      	subs	r3, r0, #1
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b18      	cmp	r3, #24
 8004e64:	d831      	bhi.n	8004eca <__gethex+0x146>
 8004e66:	f1a0 0210 	sub.w	r2, r0, #16
 8004e6a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004e6e:	f7ff ff74 	bl	8004d5a <__hexdig_fun>
 8004e72:	1e43      	subs	r3, r0, #1
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b18      	cmp	r3, #24
 8004e78:	d922      	bls.n	8004ec0 <__gethex+0x13c>
 8004e7a:	f1b9 0f00 	cmp.w	r9, #0
 8004e7e:	d000      	beq.n	8004e82 <__gethex+0xfe>
 8004e80:	4252      	negs	r2, r2
 8004e82:	4414      	add	r4, r2
 8004e84:	f8ca 1000 	str.w	r1, [sl]
 8004e88:	b30d      	cbz	r5, 8004ece <__gethex+0x14a>
 8004e8a:	f1bb 0f00 	cmp.w	fp, #0
 8004e8e:	bf14      	ite	ne
 8004e90:	2700      	movne	r7, #0
 8004e92:	2706      	moveq	r7, #6
 8004e94:	4638      	mov	r0, r7
 8004e96:	b00b      	add	sp, #44	; 0x2c
 8004e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e9c:	f10b 0b01 	add.w	fp, fp, #1
 8004ea0:	e78a      	b.n	8004db8 <__gethex+0x34>
 8004ea2:	2500      	movs	r5, #0
 8004ea4:	462c      	mov	r4, r5
 8004ea6:	e7ae      	b.n	8004e06 <__gethex+0x82>
 8004ea8:	463e      	mov	r6, r7
 8004eaa:	2501      	movs	r5, #1
 8004eac:	e7c7      	b.n	8004e3e <__gethex+0xba>
 8004eae:	4604      	mov	r4, r0
 8004eb0:	e7fb      	b.n	8004eaa <__gethex+0x126>
 8004eb2:	f04f 0901 	mov.w	r9, #1
 8004eb6:	1cb1      	adds	r1, r6, #2
 8004eb8:	e7ce      	b.n	8004e58 <__gethex+0xd4>
 8004eba:	f04f 0900 	mov.w	r9, #0
 8004ebe:	e7fa      	b.n	8004eb6 <__gethex+0x132>
 8004ec0:	230a      	movs	r3, #10
 8004ec2:	fb03 0202 	mla	r2, r3, r2, r0
 8004ec6:	3a10      	subs	r2, #16
 8004ec8:	e7cf      	b.n	8004e6a <__gethex+0xe6>
 8004eca:	4631      	mov	r1, r6
 8004ecc:	e7da      	b.n	8004e84 <__gethex+0x100>
 8004ece:	4629      	mov	r1, r5
 8004ed0:	1bf3      	subs	r3, r6, r7
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	2b07      	cmp	r3, #7
 8004ed6:	dc49      	bgt.n	8004f6c <__gethex+0x1e8>
 8004ed8:	9802      	ldr	r0, [sp, #8]
 8004eda:	f000 fa52 	bl	8005382 <_Balloc>
 8004ede:	f04f 0b00 	mov.w	fp, #0
 8004ee2:	4605      	mov	r5, r0
 8004ee4:	46da      	mov	sl, fp
 8004ee6:	9b01      	ldr	r3, [sp, #4]
 8004ee8:	f100 0914 	add.w	r9, r0, #20
 8004eec:	f1c3 0301 	rsb	r3, r3, #1
 8004ef0:	f8cd 9010 	str.w	r9, [sp, #16]
 8004ef4:	9308      	str	r3, [sp, #32]
 8004ef6:	42b7      	cmp	r7, r6
 8004ef8:	d33b      	bcc.n	8004f72 <__gethex+0x1ee>
 8004efa:	9804      	ldr	r0, [sp, #16]
 8004efc:	f840 ab04 	str.w	sl, [r0], #4
 8004f00:	eba0 0009 	sub.w	r0, r0, r9
 8004f04:	1080      	asrs	r0, r0, #2
 8004f06:	6128      	str	r0, [r5, #16]
 8004f08:	0147      	lsls	r7, r0, #5
 8004f0a:	4650      	mov	r0, sl
 8004f0c:	f000 fafd 	bl	800550a <__hi0bits>
 8004f10:	f8d8 6000 	ldr.w	r6, [r8]
 8004f14:	1a3f      	subs	r7, r7, r0
 8004f16:	42b7      	cmp	r7, r6
 8004f18:	dd64      	ble.n	8004fe4 <__gethex+0x260>
 8004f1a:	1bbf      	subs	r7, r7, r6
 8004f1c:	4639      	mov	r1, r7
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f000 fdf5 	bl	8005b0e <__any_on>
 8004f24:	4682      	mov	sl, r0
 8004f26:	b178      	cbz	r0, 8004f48 <__gethex+0x1c4>
 8004f28:	f04f 0a01 	mov.w	sl, #1
 8004f2c:	1e7b      	subs	r3, r7, #1
 8004f2e:	1159      	asrs	r1, r3, #5
 8004f30:	f003 021f 	and.w	r2, r3, #31
 8004f34:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004f38:	fa0a f202 	lsl.w	r2, sl, r2
 8004f3c:	420a      	tst	r2, r1
 8004f3e:	d003      	beq.n	8004f48 <__gethex+0x1c4>
 8004f40:	4553      	cmp	r3, sl
 8004f42:	dc46      	bgt.n	8004fd2 <__gethex+0x24e>
 8004f44:	f04f 0a02 	mov.w	sl, #2
 8004f48:	4639      	mov	r1, r7
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	f7ff fed0 	bl	8004cf0 <rshift>
 8004f50:	443c      	add	r4, r7
 8004f52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004f56:	429c      	cmp	r4, r3
 8004f58:	dd52      	ble.n	8005000 <__gethex+0x27c>
 8004f5a:	4629      	mov	r1, r5
 8004f5c:	9802      	ldr	r0, [sp, #8]
 8004f5e:	f000 fa44 	bl	80053ea <_Bfree>
 8004f62:	2300      	movs	r3, #0
 8004f64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004f66:	27a3      	movs	r7, #163	; 0xa3
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	e793      	b.n	8004e94 <__gethex+0x110>
 8004f6c:	3101      	adds	r1, #1
 8004f6e:	105b      	asrs	r3, r3, #1
 8004f70:	e7b0      	b.n	8004ed4 <__gethex+0x150>
 8004f72:	1e73      	subs	r3, r6, #1
 8004f74:	9305      	str	r3, [sp, #20]
 8004f76:	9a07      	ldr	r2, [sp, #28]
 8004f78:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d018      	beq.n	8004fb2 <__gethex+0x22e>
 8004f80:	f1bb 0f20 	cmp.w	fp, #32
 8004f84:	d107      	bne.n	8004f96 <__gethex+0x212>
 8004f86:	9b04      	ldr	r3, [sp, #16]
 8004f88:	f8c3 a000 	str.w	sl, [r3]
 8004f8c:	f04f 0a00 	mov.w	sl, #0
 8004f90:	46d3      	mov	fp, sl
 8004f92:	3304      	adds	r3, #4
 8004f94:	9304      	str	r3, [sp, #16]
 8004f96:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8004f9a:	f7ff fede 	bl	8004d5a <__hexdig_fun>
 8004f9e:	f000 000f 	and.w	r0, r0, #15
 8004fa2:	fa00 f00b 	lsl.w	r0, r0, fp
 8004fa6:	ea4a 0a00 	orr.w	sl, sl, r0
 8004faa:	f10b 0b04 	add.w	fp, fp, #4
 8004fae:	9b05      	ldr	r3, [sp, #20]
 8004fb0:	e00d      	b.n	8004fce <__gethex+0x24a>
 8004fb2:	9b05      	ldr	r3, [sp, #20]
 8004fb4:	9a08      	ldr	r2, [sp, #32]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	429f      	cmp	r7, r3
 8004fba:	d8e1      	bhi.n	8004f80 <__gethex+0x1fc>
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	9a01      	ldr	r2, [sp, #4]
 8004fc0:	9903      	ldr	r1, [sp, #12]
 8004fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8004fc4:	f001 f974 	bl	80062b0 <strncmp>
 8004fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	d1d8      	bne.n	8004f80 <__gethex+0x1fc>
 8004fce:	461e      	mov	r6, r3
 8004fd0:	e791      	b.n	8004ef6 <__gethex+0x172>
 8004fd2:	1eb9      	subs	r1, r7, #2
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	f000 fd9a 	bl	8005b0e <__any_on>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d0b2      	beq.n	8004f44 <__gethex+0x1c0>
 8004fde:	f04f 0a03 	mov.w	sl, #3
 8004fe2:	e7b1      	b.n	8004f48 <__gethex+0x1c4>
 8004fe4:	da09      	bge.n	8004ffa <__gethex+0x276>
 8004fe6:	1bf7      	subs	r7, r6, r7
 8004fe8:	4629      	mov	r1, r5
 8004fea:	463a      	mov	r2, r7
 8004fec:	9802      	ldr	r0, [sp, #8]
 8004fee:	f000 fbbd 	bl	800576c <__lshift>
 8004ff2:	4605      	mov	r5, r0
 8004ff4:	1be4      	subs	r4, r4, r7
 8004ff6:	f100 0914 	add.w	r9, r0, #20
 8004ffa:	f04f 0a00 	mov.w	sl, #0
 8004ffe:	e7a8      	b.n	8004f52 <__gethex+0x1ce>
 8005000:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005004:	4284      	cmp	r4, r0
 8005006:	da6b      	bge.n	80050e0 <__gethex+0x35c>
 8005008:	1b04      	subs	r4, r0, r4
 800500a:	42a6      	cmp	r6, r4
 800500c:	dc2e      	bgt.n	800506c <__gethex+0x2e8>
 800500e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d022      	beq.n	800505c <__gethex+0x2d8>
 8005016:	2b03      	cmp	r3, #3
 8005018:	d024      	beq.n	8005064 <__gethex+0x2e0>
 800501a:	2b01      	cmp	r3, #1
 800501c:	d115      	bne.n	800504a <__gethex+0x2c6>
 800501e:	42a6      	cmp	r6, r4
 8005020:	d113      	bne.n	800504a <__gethex+0x2c6>
 8005022:	2e01      	cmp	r6, #1
 8005024:	dc0b      	bgt.n	800503e <__gethex+0x2ba>
 8005026:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800502a:	9a06      	ldr	r2, [sp, #24]
 800502c:	2762      	movs	r7, #98	; 0x62
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	2301      	movs	r3, #1
 8005032:	612b      	str	r3, [r5, #16]
 8005034:	f8c9 3000 	str.w	r3, [r9]
 8005038:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800503a:	601d      	str	r5, [r3, #0]
 800503c:	e72a      	b.n	8004e94 <__gethex+0x110>
 800503e:	1e71      	subs	r1, r6, #1
 8005040:	4628      	mov	r0, r5
 8005042:	f000 fd64 	bl	8005b0e <__any_on>
 8005046:	2800      	cmp	r0, #0
 8005048:	d1ed      	bne.n	8005026 <__gethex+0x2a2>
 800504a:	4629      	mov	r1, r5
 800504c:	9802      	ldr	r0, [sp, #8]
 800504e:	f000 f9cc 	bl	80053ea <_Bfree>
 8005052:	2300      	movs	r3, #0
 8005054:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005056:	2750      	movs	r7, #80	; 0x50
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	e71b      	b.n	8004e94 <__gethex+0x110>
 800505c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0e1      	beq.n	8005026 <__gethex+0x2a2>
 8005062:	e7f2      	b.n	800504a <__gethex+0x2c6>
 8005064:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1dd      	bne.n	8005026 <__gethex+0x2a2>
 800506a:	e7ee      	b.n	800504a <__gethex+0x2c6>
 800506c:	1e67      	subs	r7, r4, #1
 800506e:	f1ba 0f00 	cmp.w	sl, #0
 8005072:	d132      	bne.n	80050da <__gethex+0x356>
 8005074:	b127      	cbz	r7, 8005080 <__gethex+0x2fc>
 8005076:	4639      	mov	r1, r7
 8005078:	4628      	mov	r0, r5
 800507a:	f000 fd48 	bl	8005b0e <__any_on>
 800507e:	4682      	mov	sl, r0
 8005080:	2301      	movs	r3, #1
 8005082:	117a      	asrs	r2, r7, #5
 8005084:	f007 071f 	and.w	r7, r7, #31
 8005088:	fa03 f707 	lsl.w	r7, r3, r7
 800508c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005090:	4621      	mov	r1, r4
 8005092:	421f      	tst	r7, r3
 8005094:	f04f 0702 	mov.w	r7, #2
 8005098:	4628      	mov	r0, r5
 800509a:	bf18      	it	ne
 800509c:	f04a 0a02 	orrne.w	sl, sl, #2
 80050a0:	1b36      	subs	r6, r6, r4
 80050a2:	f7ff fe25 	bl	8004cf0 <rshift>
 80050a6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80050aa:	f1ba 0f00 	cmp.w	sl, #0
 80050ae:	d045      	beq.n	800513c <__gethex+0x3b8>
 80050b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d015      	beq.n	80050e4 <__gethex+0x360>
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d017      	beq.n	80050ec <__gethex+0x368>
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d109      	bne.n	80050d4 <__gethex+0x350>
 80050c0:	f01a 0f02 	tst.w	sl, #2
 80050c4:	d006      	beq.n	80050d4 <__gethex+0x350>
 80050c6:	f8d9 3000 	ldr.w	r3, [r9]
 80050ca:	ea4a 0a03 	orr.w	sl, sl, r3
 80050ce:	f01a 0f01 	tst.w	sl, #1
 80050d2:	d10e      	bne.n	80050f2 <__gethex+0x36e>
 80050d4:	f047 0710 	orr.w	r7, r7, #16
 80050d8:	e030      	b.n	800513c <__gethex+0x3b8>
 80050da:	f04f 0a01 	mov.w	sl, #1
 80050de:	e7cf      	b.n	8005080 <__gethex+0x2fc>
 80050e0:	2701      	movs	r7, #1
 80050e2:	e7e2      	b.n	80050aa <__gethex+0x326>
 80050e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050e6:	f1c3 0301 	rsb	r3, r3, #1
 80050ea:	9315      	str	r3, [sp, #84]	; 0x54
 80050ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0f0      	beq.n	80050d4 <__gethex+0x350>
 80050f2:	2000      	movs	r0, #0
 80050f4:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80050f8:	f105 0314 	add.w	r3, r5, #20
 80050fc:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8005100:	eb03 010a 	add.w	r1, r3, sl
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	f1b2 3fff 	cmp.w	r2, #4294967295
 800510a:	d01c      	beq.n	8005146 <__gethex+0x3c2>
 800510c:	3201      	adds	r2, #1
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	2f02      	cmp	r7, #2
 8005112:	f105 0314 	add.w	r3, r5, #20
 8005116:	d138      	bne.n	800518a <__gethex+0x406>
 8005118:	f8d8 2000 	ldr.w	r2, [r8]
 800511c:	3a01      	subs	r2, #1
 800511e:	4296      	cmp	r6, r2
 8005120:	d10a      	bne.n	8005138 <__gethex+0x3b4>
 8005122:	2201      	movs	r2, #1
 8005124:	1171      	asrs	r1, r6, #5
 8005126:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800512a:	f006 061f 	and.w	r6, r6, #31
 800512e:	fa02 f606 	lsl.w	r6, r2, r6
 8005132:	421e      	tst	r6, r3
 8005134:	bf18      	it	ne
 8005136:	4617      	movne	r7, r2
 8005138:	f047 0720 	orr.w	r7, r7, #32
 800513c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800513e:	601d      	str	r5, [r3, #0]
 8005140:	9b06      	ldr	r3, [sp, #24]
 8005142:	601c      	str	r4, [r3, #0]
 8005144:	e6a6      	b.n	8004e94 <__gethex+0x110>
 8005146:	f843 0b04 	str.w	r0, [r3], #4
 800514a:	4299      	cmp	r1, r3
 800514c:	d8da      	bhi.n	8005104 <__gethex+0x380>
 800514e:	68ab      	ldr	r3, [r5, #8]
 8005150:	4599      	cmp	r9, r3
 8005152:	db12      	blt.n	800517a <__gethex+0x3f6>
 8005154:	6869      	ldr	r1, [r5, #4]
 8005156:	9802      	ldr	r0, [sp, #8]
 8005158:	3101      	adds	r1, #1
 800515a:	f000 f912 	bl	8005382 <_Balloc>
 800515e:	4683      	mov	fp, r0
 8005160:	692a      	ldr	r2, [r5, #16]
 8005162:	f105 010c 	add.w	r1, r5, #12
 8005166:	3202      	adds	r2, #2
 8005168:	0092      	lsls	r2, r2, #2
 800516a:	300c      	adds	r0, #12
 800516c:	f000 f8fe 	bl	800536c <memcpy>
 8005170:	4629      	mov	r1, r5
 8005172:	9802      	ldr	r0, [sp, #8]
 8005174:	f000 f939 	bl	80053ea <_Bfree>
 8005178:	465d      	mov	r5, fp
 800517a:	692b      	ldr	r3, [r5, #16]
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	612a      	str	r2, [r5, #16]
 8005180:	2201      	movs	r2, #1
 8005182:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005186:	615a      	str	r2, [r3, #20]
 8005188:	e7c2      	b.n	8005110 <__gethex+0x38c>
 800518a:	692a      	ldr	r2, [r5, #16]
 800518c:	4591      	cmp	r9, r2
 800518e:	da0b      	bge.n	80051a8 <__gethex+0x424>
 8005190:	2101      	movs	r1, #1
 8005192:	4628      	mov	r0, r5
 8005194:	f7ff fdac 	bl	8004cf0 <rshift>
 8005198:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800519c:	3401      	adds	r4, #1
 800519e:	429c      	cmp	r4, r3
 80051a0:	f73f aedb 	bgt.w	8004f5a <__gethex+0x1d6>
 80051a4:	2701      	movs	r7, #1
 80051a6:	e7c7      	b.n	8005138 <__gethex+0x3b4>
 80051a8:	f016 061f 	ands.w	r6, r6, #31
 80051ac:	d0fa      	beq.n	80051a4 <__gethex+0x420>
 80051ae:	449a      	add	sl, r3
 80051b0:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80051b4:	f000 f9a9 	bl	800550a <__hi0bits>
 80051b8:	f1c6 0620 	rsb	r6, r6, #32
 80051bc:	42b0      	cmp	r0, r6
 80051be:	dbe7      	blt.n	8005190 <__gethex+0x40c>
 80051c0:	e7f0      	b.n	80051a4 <__gethex+0x420>

080051c2 <L_shift>:
 80051c2:	f1c2 0208 	rsb	r2, r2, #8
 80051c6:	0092      	lsls	r2, r2, #2
 80051c8:	b570      	push	{r4, r5, r6, lr}
 80051ca:	f1c2 0620 	rsb	r6, r2, #32
 80051ce:	6843      	ldr	r3, [r0, #4]
 80051d0:	6804      	ldr	r4, [r0, #0]
 80051d2:	fa03 f506 	lsl.w	r5, r3, r6
 80051d6:	432c      	orrs	r4, r5
 80051d8:	40d3      	lsrs	r3, r2
 80051da:	6004      	str	r4, [r0, #0]
 80051dc:	f840 3f04 	str.w	r3, [r0, #4]!
 80051e0:	4288      	cmp	r0, r1
 80051e2:	d3f4      	bcc.n	80051ce <L_shift+0xc>
 80051e4:	bd70      	pop	{r4, r5, r6, pc}

080051e6 <__match>:
 80051e6:	b530      	push	{r4, r5, lr}
 80051e8:	6803      	ldr	r3, [r0, #0]
 80051ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051ee:	3301      	adds	r3, #1
 80051f0:	b914      	cbnz	r4, 80051f8 <__match+0x12>
 80051f2:	6003      	str	r3, [r0, #0]
 80051f4:	2001      	movs	r0, #1
 80051f6:	bd30      	pop	{r4, r5, pc}
 80051f8:	781a      	ldrb	r2, [r3, #0]
 80051fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80051fe:	2d19      	cmp	r5, #25
 8005200:	bf98      	it	ls
 8005202:	3220      	addls	r2, #32
 8005204:	42a2      	cmp	r2, r4
 8005206:	d0f0      	beq.n	80051ea <__match+0x4>
 8005208:	2000      	movs	r0, #0
 800520a:	bd30      	pop	{r4, r5, pc}

0800520c <__hexnan>:
 800520c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005210:	2500      	movs	r5, #0
 8005212:	680b      	ldr	r3, [r1, #0]
 8005214:	4682      	mov	sl, r0
 8005216:	115f      	asrs	r7, r3, #5
 8005218:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800521c:	f013 031f 	ands.w	r3, r3, #31
 8005220:	bf18      	it	ne
 8005222:	3704      	addne	r7, #4
 8005224:	1f3e      	subs	r6, r7, #4
 8005226:	4690      	mov	r8, r2
 8005228:	46b1      	mov	r9, r6
 800522a:	4634      	mov	r4, r6
 800522c:	46ab      	mov	fp, r5
 800522e:	b087      	sub	sp, #28
 8005230:	6801      	ldr	r1, [r0, #0]
 8005232:	9302      	str	r3, [sp, #8]
 8005234:	f847 5c04 	str.w	r5, [r7, #-4]
 8005238:	9501      	str	r5, [sp, #4]
 800523a:	784a      	ldrb	r2, [r1, #1]
 800523c:	1c4b      	adds	r3, r1, #1
 800523e:	9303      	str	r3, [sp, #12]
 8005240:	b342      	cbz	r2, 8005294 <__hexnan+0x88>
 8005242:	4610      	mov	r0, r2
 8005244:	9105      	str	r1, [sp, #20]
 8005246:	9204      	str	r2, [sp, #16]
 8005248:	f7ff fd87 	bl	8004d5a <__hexdig_fun>
 800524c:	2800      	cmp	r0, #0
 800524e:	d143      	bne.n	80052d8 <__hexnan+0xcc>
 8005250:	9a04      	ldr	r2, [sp, #16]
 8005252:	9905      	ldr	r1, [sp, #20]
 8005254:	2a20      	cmp	r2, #32
 8005256:	d818      	bhi.n	800528a <__hexnan+0x7e>
 8005258:	9b01      	ldr	r3, [sp, #4]
 800525a:	459b      	cmp	fp, r3
 800525c:	dd13      	ble.n	8005286 <__hexnan+0x7a>
 800525e:	454c      	cmp	r4, r9
 8005260:	d206      	bcs.n	8005270 <__hexnan+0x64>
 8005262:	2d07      	cmp	r5, #7
 8005264:	dc04      	bgt.n	8005270 <__hexnan+0x64>
 8005266:	462a      	mov	r2, r5
 8005268:	4649      	mov	r1, r9
 800526a:	4620      	mov	r0, r4
 800526c:	f7ff ffa9 	bl	80051c2 <L_shift>
 8005270:	4544      	cmp	r4, r8
 8005272:	d944      	bls.n	80052fe <__hexnan+0xf2>
 8005274:	2300      	movs	r3, #0
 8005276:	f1a4 0904 	sub.w	r9, r4, #4
 800527a:	f844 3c04 	str.w	r3, [r4, #-4]
 800527e:	461d      	mov	r5, r3
 8005280:	464c      	mov	r4, r9
 8005282:	f8cd b004 	str.w	fp, [sp, #4]
 8005286:	9903      	ldr	r1, [sp, #12]
 8005288:	e7d7      	b.n	800523a <__hexnan+0x2e>
 800528a:	2a29      	cmp	r2, #41	; 0x29
 800528c:	d14a      	bne.n	8005324 <__hexnan+0x118>
 800528e:	3102      	adds	r1, #2
 8005290:	f8ca 1000 	str.w	r1, [sl]
 8005294:	f1bb 0f00 	cmp.w	fp, #0
 8005298:	d044      	beq.n	8005324 <__hexnan+0x118>
 800529a:	454c      	cmp	r4, r9
 800529c:	d206      	bcs.n	80052ac <__hexnan+0xa0>
 800529e:	2d07      	cmp	r5, #7
 80052a0:	dc04      	bgt.n	80052ac <__hexnan+0xa0>
 80052a2:	462a      	mov	r2, r5
 80052a4:	4649      	mov	r1, r9
 80052a6:	4620      	mov	r0, r4
 80052a8:	f7ff ff8b 	bl	80051c2 <L_shift>
 80052ac:	4544      	cmp	r4, r8
 80052ae:	d928      	bls.n	8005302 <__hexnan+0xf6>
 80052b0:	4643      	mov	r3, r8
 80052b2:	f854 2b04 	ldr.w	r2, [r4], #4
 80052b6:	42a6      	cmp	r6, r4
 80052b8:	f843 2b04 	str.w	r2, [r3], #4
 80052bc:	d2f9      	bcs.n	80052b2 <__hexnan+0xa6>
 80052be:	2200      	movs	r2, #0
 80052c0:	f843 2b04 	str.w	r2, [r3], #4
 80052c4:	429e      	cmp	r6, r3
 80052c6:	d2fb      	bcs.n	80052c0 <__hexnan+0xb4>
 80052c8:	6833      	ldr	r3, [r6, #0]
 80052ca:	b91b      	cbnz	r3, 80052d4 <__hexnan+0xc8>
 80052cc:	4546      	cmp	r6, r8
 80052ce:	d127      	bne.n	8005320 <__hexnan+0x114>
 80052d0:	2301      	movs	r3, #1
 80052d2:	6033      	str	r3, [r6, #0]
 80052d4:	2005      	movs	r0, #5
 80052d6:	e026      	b.n	8005326 <__hexnan+0x11a>
 80052d8:	3501      	adds	r5, #1
 80052da:	2d08      	cmp	r5, #8
 80052dc:	f10b 0b01 	add.w	fp, fp, #1
 80052e0:	dd06      	ble.n	80052f0 <__hexnan+0xe4>
 80052e2:	4544      	cmp	r4, r8
 80052e4:	d9cf      	bls.n	8005286 <__hexnan+0x7a>
 80052e6:	2300      	movs	r3, #0
 80052e8:	2501      	movs	r5, #1
 80052ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80052ee:	3c04      	subs	r4, #4
 80052f0:	6822      	ldr	r2, [r4, #0]
 80052f2:	f000 000f 	and.w	r0, r0, #15
 80052f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80052fa:	6020      	str	r0, [r4, #0]
 80052fc:	e7c3      	b.n	8005286 <__hexnan+0x7a>
 80052fe:	2508      	movs	r5, #8
 8005300:	e7c1      	b.n	8005286 <__hexnan+0x7a>
 8005302:	9b02      	ldr	r3, [sp, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0df      	beq.n	80052c8 <__hexnan+0xbc>
 8005308:	f04f 32ff 	mov.w	r2, #4294967295
 800530c:	f1c3 0320 	rsb	r3, r3, #32
 8005310:	fa22 f303 	lsr.w	r3, r2, r3
 8005314:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005318:	401a      	ands	r2, r3
 800531a:	f847 2c04 	str.w	r2, [r7, #-4]
 800531e:	e7d3      	b.n	80052c8 <__hexnan+0xbc>
 8005320:	3e04      	subs	r6, #4
 8005322:	e7d1      	b.n	80052c8 <__hexnan+0xbc>
 8005324:	2004      	movs	r0, #4
 8005326:	b007      	add	sp, #28
 8005328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800532c <__locale_ctype_ptr_l>:
 800532c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005330:	4770      	bx	lr

08005332 <__localeconv_l>:
 8005332:	30f0      	adds	r0, #240	; 0xf0
 8005334:	4770      	bx	lr
	...

08005338 <malloc>:
 8005338:	4b02      	ldr	r3, [pc, #8]	; (8005344 <malloc+0xc>)
 800533a:	4601      	mov	r1, r0
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	f000 bc61 	b.w	8005c04 <_malloc_r>
 8005342:	bf00      	nop
 8005344:	20000004 	.word	0x20000004

08005348 <__ascii_mbtowc>:
 8005348:	b082      	sub	sp, #8
 800534a:	b901      	cbnz	r1, 800534e <__ascii_mbtowc+0x6>
 800534c:	a901      	add	r1, sp, #4
 800534e:	b142      	cbz	r2, 8005362 <__ascii_mbtowc+0x1a>
 8005350:	b14b      	cbz	r3, 8005366 <__ascii_mbtowc+0x1e>
 8005352:	7813      	ldrb	r3, [r2, #0]
 8005354:	600b      	str	r3, [r1, #0]
 8005356:	7812      	ldrb	r2, [r2, #0]
 8005358:	1c10      	adds	r0, r2, #0
 800535a:	bf18      	it	ne
 800535c:	2001      	movne	r0, #1
 800535e:	b002      	add	sp, #8
 8005360:	4770      	bx	lr
 8005362:	4610      	mov	r0, r2
 8005364:	e7fb      	b.n	800535e <__ascii_mbtowc+0x16>
 8005366:	f06f 0001 	mvn.w	r0, #1
 800536a:	e7f8      	b.n	800535e <__ascii_mbtowc+0x16>

0800536c <memcpy>:
 800536c:	b510      	push	{r4, lr}
 800536e:	1e43      	subs	r3, r0, #1
 8005370:	440a      	add	r2, r1
 8005372:	4291      	cmp	r1, r2
 8005374:	d100      	bne.n	8005378 <memcpy+0xc>
 8005376:	bd10      	pop	{r4, pc}
 8005378:	f811 4b01 	ldrb.w	r4, [r1], #1
 800537c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005380:	e7f7      	b.n	8005372 <memcpy+0x6>

08005382 <_Balloc>:
 8005382:	b570      	push	{r4, r5, r6, lr}
 8005384:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005386:	4604      	mov	r4, r0
 8005388:	460e      	mov	r6, r1
 800538a:	b93d      	cbnz	r5, 800539c <_Balloc+0x1a>
 800538c:	2010      	movs	r0, #16
 800538e:	f7ff ffd3 	bl	8005338 <malloc>
 8005392:	6260      	str	r0, [r4, #36]	; 0x24
 8005394:	6045      	str	r5, [r0, #4]
 8005396:	6085      	str	r5, [r0, #8]
 8005398:	6005      	str	r5, [r0, #0]
 800539a:	60c5      	str	r5, [r0, #12]
 800539c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800539e:	68eb      	ldr	r3, [r5, #12]
 80053a0:	b183      	cbz	r3, 80053c4 <_Balloc+0x42>
 80053a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80053aa:	b9b8      	cbnz	r0, 80053dc <_Balloc+0x5a>
 80053ac:	2101      	movs	r1, #1
 80053ae:	fa01 f506 	lsl.w	r5, r1, r6
 80053b2:	1d6a      	adds	r2, r5, #5
 80053b4:	0092      	lsls	r2, r2, #2
 80053b6:	4620      	mov	r0, r4
 80053b8:	f000 fbca 	bl	8005b50 <_calloc_r>
 80053bc:	b160      	cbz	r0, 80053d8 <_Balloc+0x56>
 80053be:	6046      	str	r6, [r0, #4]
 80053c0:	6085      	str	r5, [r0, #8]
 80053c2:	e00e      	b.n	80053e2 <_Balloc+0x60>
 80053c4:	2221      	movs	r2, #33	; 0x21
 80053c6:	2104      	movs	r1, #4
 80053c8:	4620      	mov	r0, r4
 80053ca:	f000 fbc1 	bl	8005b50 <_calloc_r>
 80053ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053d0:	60e8      	str	r0, [r5, #12]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e4      	bne.n	80053a2 <_Balloc+0x20>
 80053d8:	2000      	movs	r0, #0
 80053da:	bd70      	pop	{r4, r5, r6, pc}
 80053dc:	6802      	ldr	r2, [r0, #0]
 80053de:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80053e2:	2300      	movs	r3, #0
 80053e4:	6103      	str	r3, [r0, #16]
 80053e6:	60c3      	str	r3, [r0, #12]
 80053e8:	bd70      	pop	{r4, r5, r6, pc}

080053ea <_Bfree>:
 80053ea:	b570      	push	{r4, r5, r6, lr}
 80053ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80053ee:	4606      	mov	r6, r0
 80053f0:	460d      	mov	r5, r1
 80053f2:	b93c      	cbnz	r4, 8005404 <_Bfree+0x1a>
 80053f4:	2010      	movs	r0, #16
 80053f6:	f7ff ff9f 	bl	8005338 <malloc>
 80053fa:	6270      	str	r0, [r6, #36]	; 0x24
 80053fc:	6044      	str	r4, [r0, #4]
 80053fe:	6084      	str	r4, [r0, #8]
 8005400:	6004      	str	r4, [r0, #0]
 8005402:	60c4      	str	r4, [r0, #12]
 8005404:	b13d      	cbz	r5, 8005416 <_Bfree+0x2c>
 8005406:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005408:	686a      	ldr	r2, [r5, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005410:	6029      	str	r1, [r5, #0]
 8005412:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005416:	bd70      	pop	{r4, r5, r6, pc}

08005418 <__multadd>:
 8005418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800541c:	461f      	mov	r7, r3
 800541e:	4606      	mov	r6, r0
 8005420:	460c      	mov	r4, r1
 8005422:	2300      	movs	r3, #0
 8005424:	690d      	ldr	r5, [r1, #16]
 8005426:	f101 0e14 	add.w	lr, r1, #20
 800542a:	f8de 0000 	ldr.w	r0, [lr]
 800542e:	3301      	adds	r3, #1
 8005430:	b281      	uxth	r1, r0
 8005432:	fb02 7101 	mla	r1, r2, r1, r7
 8005436:	0c00      	lsrs	r0, r0, #16
 8005438:	0c0f      	lsrs	r7, r1, #16
 800543a:	fb02 7000 	mla	r0, r2, r0, r7
 800543e:	b289      	uxth	r1, r1
 8005440:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005444:	429d      	cmp	r5, r3
 8005446:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800544a:	f84e 1b04 	str.w	r1, [lr], #4
 800544e:	dcec      	bgt.n	800542a <__multadd+0x12>
 8005450:	b1d7      	cbz	r7, 8005488 <__multadd+0x70>
 8005452:	68a3      	ldr	r3, [r4, #8]
 8005454:	429d      	cmp	r5, r3
 8005456:	db12      	blt.n	800547e <__multadd+0x66>
 8005458:	6861      	ldr	r1, [r4, #4]
 800545a:	4630      	mov	r0, r6
 800545c:	3101      	adds	r1, #1
 800545e:	f7ff ff90 	bl	8005382 <_Balloc>
 8005462:	4680      	mov	r8, r0
 8005464:	6922      	ldr	r2, [r4, #16]
 8005466:	f104 010c 	add.w	r1, r4, #12
 800546a:	3202      	adds	r2, #2
 800546c:	0092      	lsls	r2, r2, #2
 800546e:	300c      	adds	r0, #12
 8005470:	f7ff ff7c 	bl	800536c <memcpy>
 8005474:	4621      	mov	r1, r4
 8005476:	4630      	mov	r0, r6
 8005478:	f7ff ffb7 	bl	80053ea <_Bfree>
 800547c:	4644      	mov	r4, r8
 800547e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005482:	3501      	adds	r5, #1
 8005484:	615f      	str	r7, [r3, #20]
 8005486:	6125      	str	r5, [r4, #16]
 8005488:	4620      	mov	r0, r4
 800548a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800548e <__s2b>:
 800548e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005492:	4615      	mov	r5, r2
 8005494:	2209      	movs	r2, #9
 8005496:	461f      	mov	r7, r3
 8005498:	3308      	adds	r3, #8
 800549a:	460c      	mov	r4, r1
 800549c:	fb93 f3f2 	sdiv	r3, r3, r2
 80054a0:	4606      	mov	r6, r0
 80054a2:	2201      	movs	r2, #1
 80054a4:	2100      	movs	r1, #0
 80054a6:	429a      	cmp	r2, r3
 80054a8:	db20      	blt.n	80054ec <__s2b+0x5e>
 80054aa:	4630      	mov	r0, r6
 80054ac:	f7ff ff69 	bl	8005382 <_Balloc>
 80054b0:	9b08      	ldr	r3, [sp, #32]
 80054b2:	2d09      	cmp	r5, #9
 80054b4:	6143      	str	r3, [r0, #20]
 80054b6:	f04f 0301 	mov.w	r3, #1
 80054ba:	6103      	str	r3, [r0, #16]
 80054bc:	dd19      	ble.n	80054f2 <__s2b+0x64>
 80054be:	f104 0909 	add.w	r9, r4, #9
 80054c2:	46c8      	mov	r8, r9
 80054c4:	442c      	add	r4, r5
 80054c6:	f818 3b01 	ldrb.w	r3, [r8], #1
 80054ca:	4601      	mov	r1, r0
 80054cc:	3b30      	subs	r3, #48	; 0x30
 80054ce:	220a      	movs	r2, #10
 80054d0:	4630      	mov	r0, r6
 80054d2:	f7ff ffa1 	bl	8005418 <__multadd>
 80054d6:	45a0      	cmp	r8, r4
 80054d8:	d1f5      	bne.n	80054c6 <__s2b+0x38>
 80054da:	f1a5 0408 	sub.w	r4, r5, #8
 80054de:	444c      	add	r4, r9
 80054e0:	1b2d      	subs	r5, r5, r4
 80054e2:	1963      	adds	r3, r4, r5
 80054e4:	42bb      	cmp	r3, r7
 80054e6:	db07      	blt.n	80054f8 <__s2b+0x6a>
 80054e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ec:	0052      	lsls	r2, r2, #1
 80054ee:	3101      	adds	r1, #1
 80054f0:	e7d9      	b.n	80054a6 <__s2b+0x18>
 80054f2:	340a      	adds	r4, #10
 80054f4:	2509      	movs	r5, #9
 80054f6:	e7f3      	b.n	80054e0 <__s2b+0x52>
 80054f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80054fc:	4601      	mov	r1, r0
 80054fe:	3b30      	subs	r3, #48	; 0x30
 8005500:	220a      	movs	r2, #10
 8005502:	4630      	mov	r0, r6
 8005504:	f7ff ff88 	bl	8005418 <__multadd>
 8005508:	e7eb      	b.n	80054e2 <__s2b+0x54>

0800550a <__hi0bits>:
 800550a:	0c02      	lsrs	r2, r0, #16
 800550c:	0412      	lsls	r2, r2, #16
 800550e:	4603      	mov	r3, r0
 8005510:	b9b2      	cbnz	r2, 8005540 <__hi0bits+0x36>
 8005512:	0403      	lsls	r3, r0, #16
 8005514:	2010      	movs	r0, #16
 8005516:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800551a:	bf04      	itt	eq
 800551c:	021b      	lsleq	r3, r3, #8
 800551e:	3008      	addeq	r0, #8
 8005520:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005524:	bf04      	itt	eq
 8005526:	011b      	lsleq	r3, r3, #4
 8005528:	3004      	addeq	r0, #4
 800552a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800552e:	bf04      	itt	eq
 8005530:	009b      	lsleq	r3, r3, #2
 8005532:	3002      	addeq	r0, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	db06      	blt.n	8005546 <__hi0bits+0x3c>
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	d503      	bpl.n	8005544 <__hi0bits+0x3a>
 800553c:	3001      	adds	r0, #1
 800553e:	4770      	bx	lr
 8005540:	2000      	movs	r0, #0
 8005542:	e7e8      	b.n	8005516 <__hi0bits+0xc>
 8005544:	2020      	movs	r0, #32
 8005546:	4770      	bx	lr

08005548 <__lo0bits>:
 8005548:	6803      	ldr	r3, [r0, #0]
 800554a:	4601      	mov	r1, r0
 800554c:	f013 0207 	ands.w	r2, r3, #7
 8005550:	d00b      	beq.n	800556a <__lo0bits+0x22>
 8005552:	07da      	lsls	r2, r3, #31
 8005554:	d423      	bmi.n	800559e <__lo0bits+0x56>
 8005556:	0798      	lsls	r0, r3, #30
 8005558:	bf49      	itett	mi
 800555a:	085b      	lsrmi	r3, r3, #1
 800555c:	089b      	lsrpl	r3, r3, #2
 800555e:	2001      	movmi	r0, #1
 8005560:	600b      	strmi	r3, [r1, #0]
 8005562:	bf5c      	itt	pl
 8005564:	600b      	strpl	r3, [r1, #0]
 8005566:	2002      	movpl	r0, #2
 8005568:	4770      	bx	lr
 800556a:	b298      	uxth	r0, r3
 800556c:	b9a8      	cbnz	r0, 800559a <__lo0bits+0x52>
 800556e:	2010      	movs	r0, #16
 8005570:	0c1b      	lsrs	r3, r3, #16
 8005572:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005576:	bf04      	itt	eq
 8005578:	0a1b      	lsreq	r3, r3, #8
 800557a:	3008      	addeq	r0, #8
 800557c:	071a      	lsls	r2, r3, #28
 800557e:	bf04      	itt	eq
 8005580:	091b      	lsreq	r3, r3, #4
 8005582:	3004      	addeq	r0, #4
 8005584:	079a      	lsls	r2, r3, #30
 8005586:	bf04      	itt	eq
 8005588:	089b      	lsreq	r3, r3, #2
 800558a:	3002      	addeq	r0, #2
 800558c:	07da      	lsls	r2, r3, #31
 800558e:	d402      	bmi.n	8005596 <__lo0bits+0x4e>
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	d006      	beq.n	80055a2 <__lo0bits+0x5a>
 8005594:	3001      	adds	r0, #1
 8005596:	600b      	str	r3, [r1, #0]
 8005598:	4770      	bx	lr
 800559a:	4610      	mov	r0, r2
 800559c:	e7e9      	b.n	8005572 <__lo0bits+0x2a>
 800559e:	2000      	movs	r0, #0
 80055a0:	4770      	bx	lr
 80055a2:	2020      	movs	r0, #32
 80055a4:	4770      	bx	lr

080055a6 <__i2b>:
 80055a6:	b510      	push	{r4, lr}
 80055a8:	460c      	mov	r4, r1
 80055aa:	2101      	movs	r1, #1
 80055ac:	f7ff fee9 	bl	8005382 <_Balloc>
 80055b0:	2201      	movs	r2, #1
 80055b2:	6144      	str	r4, [r0, #20]
 80055b4:	6102      	str	r2, [r0, #16]
 80055b6:	bd10      	pop	{r4, pc}

080055b8 <__multiply>:
 80055b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	4614      	mov	r4, r2
 80055be:	690a      	ldr	r2, [r1, #16]
 80055c0:	6923      	ldr	r3, [r4, #16]
 80055c2:	4689      	mov	r9, r1
 80055c4:	429a      	cmp	r2, r3
 80055c6:	bfbe      	ittt	lt
 80055c8:	460b      	movlt	r3, r1
 80055ca:	46a1      	movlt	r9, r4
 80055cc:	461c      	movlt	r4, r3
 80055ce:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80055d2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80055d6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80055da:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80055de:	eb07 060a 	add.w	r6, r7, sl
 80055e2:	429e      	cmp	r6, r3
 80055e4:	bfc8      	it	gt
 80055e6:	3101      	addgt	r1, #1
 80055e8:	f7ff fecb 	bl	8005382 <_Balloc>
 80055ec:	f100 0514 	add.w	r5, r0, #20
 80055f0:	462b      	mov	r3, r5
 80055f2:	2200      	movs	r2, #0
 80055f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80055f8:	4543      	cmp	r3, r8
 80055fa:	d316      	bcc.n	800562a <__multiply+0x72>
 80055fc:	f104 0214 	add.w	r2, r4, #20
 8005600:	f109 0114 	add.w	r1, r9, #20
 8005604:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8005608:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	9c01      	ldr	r4, [sp, #4]
 8005610:	4613      	mov	r3, r2
 8005612:	4294      	cmp	r4, r2
 8005614:	d80c      	bhi.n	8005630 <__multiply+0x78>
 8005616:	2e00      	cmp	r6, #0
 8005618:	dd03      	ble.n	8005622 <__multiply+0x6a>
 800561a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800561e:	2b00      	cmp	r3, #0
 8005620:	d054      	beq.n	80056cc <__multiply+0x114>
 8005622:	6106      	str	r6, [r0, #16]
 8005624:	b003      	add	sp, #12
 8005626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800562a:	f843 2b04 	str.w	r2, [r3], #4
 800562e:	e7e3      	b.n	80055f8 <__multiply+0x40>
 8005630:	f8b3 a000 	ldrh.w	sl, [r3]
 8005634:	3204      	adds	r2, #4
 8005636:	f1ba 0f00 	cmp.w	sl, #0
 800563a:	d020      	beq.n	800567e <__multiply+0xc6>
 800563c:	46ae      	mov	lr, r5
 800563e:	4689      	mov	r9, r1
 8005640:	f04f 0c00 	mov.w	ip, #0
 8005644:	f859 4b04 	ldr.w	r4, [r9], #4
 8005648:	f8be b000 	ldrh.w	fp, [lr]
 800564c:	b2a3      	uxth	r3, r4
 800564e:	fb0a b303 	mla	r3, sl, r3, fp
 8005652:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8005656:	f8de 4000 	ldr.w	r4, [lr]
 800565a:	4463      	add	r3, ip
 800565c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005660:	fb0a c40b 	mla	r4, sl, fp, ip
 8005664:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005668:	b29b      	uxth	r3, r3
 800566a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800566e:	454f      	cmp	r7, r9
 8005670:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005674:	f84e 3b04 	str.w	r3, [lr], #4
 8005678:	d8e4      	bhi.n	8005644 <__multiply+0x8c>
 800567a:	f8ce c000 	str.w	ip, [lr]
 800567e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8005682:	f1b9 0f00 	cmp.w	r9, #0
 8005686:	d01f      	beq.n	80056c8 <__multiply+0x110>
 8005688:	46ae      	mov	lr, r5
 800568a:	468c      	mov	ip, r1
 800568c:	f04f 0a00 	mov.w	sl, #0
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	f8bc 4000 	ldrh.w	r4, [ip]
 8005696:	f8be b002 	ldrh.w	fp, [lr, #2]
 800569a:	b29b      	uxth	r3, r3
 800569c:	fb09 b404 	mla	r4, r9, r4, fp
 80056a0:	44a2      	add	sl, r4
 80056a2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80056a6:	f84e 3b04 	str.w	r3, [lr], #4
 80056aa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80056ae:	f8be 4000 	ldrh.w	r4, [lr]
 80056b2:	0c1b      	lsrs	r3, r3, #16
 80056b4:	fb09 4303 	mla	r3, r9, r3, r4
 80056b8:	4567      	cmp	r7, ip
 80056ba:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80056be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056c2:	d8e6      	bhi.n	8005692 <__multiply+0xda>
 80056c4:	f8ce 3000 	str.w	r3, [lr]
 80056c8:	3504      	adds	r5, #4
 80056ca:	e7a0      	b.n	800560e <__multiply+0x56>
 80056cc:	3e01      	subs	r6, #1
 80056ce:	e7a2      	b.n	8005616 <__multiply+0x5e>

080056d0 <__pow5mult>:
 80056d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056d4:	4615      	mov	r5, r2
 80056d6:	f012 0203 	ands.w	r2, r2, #3
 80056da:	4606      	mov	r6, r0
 80056dc:	460f      	mov	r7, r1
 80056de:	d007      	beq.n	80056f0 <__pow5mult+0x20>
 80056e0:	4c21      	ldr	r4, [pc, #132]	; (8005768 <__pow5mult+0x98>)
 80056e2:	3a01      	subs	r2, #1
 80056e4:	2300      	movs	r3, #0
 80056e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80056ea:	f7ff fe95 	bl	8005418 <__multadd>
 80056ee:	4607      	mov	r7, r0
 80056f0:	10ad      	asrs	r5, r5, #2
 80056f2:	d035      	beq.n	8005760 <__pow5mult+0x90>
 80056f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80056f6:	b93c      	cbnz	r4, 8005708 <__pow5mult+0x38>
 80056f8:	2010      	movs	r0, #16
 80056fa:	f7ff fe1d 	bl	8005338 <malloc>
 80056fe:	6270      	str	r0, [r6, #36]	; 0x24
 8005700:	6044      	str	r4, [r0, #4]
 8005702:	6084      	str	r4, [r0, #8]
 8005704:	6004      	str	r4, [r0, #0]
 8005706:	60c4      	str	r4, [r0, #12]
 8005708:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800570c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005710:	b94c      	cbnz	r4, 8005726 <__pow5mult+0x56>
 8005712:	f240 2171 	movw	r1, #625	; 0x271
 8005716:	4630      	mov	r0, r6
 8005718:	f7ff ff45 	bl	80055a6 <__i2b>
 800571c:	2300      	movs	r3, #0
 800571e:	4604      	mov	r4, r0
 8005720:	f8c8 0008 	str.w	r0, [r8, #8]
 8005724:	6003      	str	r3, [r0, #0]
 8005726:	f04f 0800 	mov.w	r8, #0
 800572a:	07eb      	lsls	r3, r5, #31
 800572c:	d50a      	bpl.n	8005744 <__pow5mult+0x74>
 800572e:	4639      	mov	r1, r7
 8005730:	4622      	mov	r2, r4
 8005732:	4630      	mov	r0, r6
 8005734:	f7ff ff40 	bl	80055b8 <__multiply>
 8005738:	4681      	mov	r9, r0
 800573a:	4639      	mov	r1, r7
 800573c:	4630      	mov	r0, r6
 800573e:	f7ff fe54 	bl	80053ea <_Bfree>
 8005742:	464f      	mov	r7, r9
 8005744:	106d      	asrs	r5, r5, #1
 8005746:	d00b      	beq.n	8005760 <__pow5mult+0x90>
 8005748:	6820      	ldr	r0, [r4, #0]
 800574a:	b938      	cbnz	r0, 800575c <__pow5mult+0x8c>
 800574c:	4622      	mov	r2, r4
 800574e:	4621      	mov	r1, r4
 8005750:	4630      	mov	r0, r6
 8005752:	f7ff ff31 	bl	80055b8 <__multiply>
 8005756:	6020      	str	r0, [r4, #0]
 8005758:	f8c0 8000 	str.w	r8, [r0]
 800575c:	4604      	mov	r4, r0
 800575e:	e7e4      	b.n	800572a <__pow5mult+0x5a>
 8005760:	4638      	mov	r0, r7
 8005762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005766:	bf00      	nop
 8005768:	080065e0 	.word	0x080065e0

0800576c <__lshift>:
 800576c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005770:	460c      	mov	r4, r1
 8005772:	4607      	mov	r7, r0
 8005774:	4616      	mov	r6, r2
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800577c:	eb0a 0903 	add.w	r9, sl, r3
 8005780:	6849      	ldr	r1, [r1, #4]
 8005782:	68a3      	ldr	r3, [r4, #8]
 8005784:	f109 0501 	add.w	r5, r9, #1
 8005788:	42ab      	cmp	r3, r5
 800578a:	db31      	blt.n	80057f0 <__lshift+0x84>
 800578c:	4638      	mov	r0, r7
 800578e:	f7ff fdf8 	bl	8005382 <_Balloc>
 8005792:	2200      	movs	r2, #0
 8005794:	4680      	mov	r8, r0
 8005796:	4611      	mov	r1, r2
 8005798:	f100 0314 	add.w	r3, r0, #20
 800579c:	4552      	cmp	r2, sl
 800579e:	db2a      	blt.n	80057f6 <__lshift+0x8a>
 80057a0:	6920      	ldr	r0, [r4, #16]
 80057a2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80057a6:	f104 0114 	add.w	r1, r4, #20
 80057aa:	f016 021f 	ands.w	r2, r6, #31
 80057ae:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80057b2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80057b6:	d022      	beq.n	80057fe <__lshift+0x92>
 80057b8:	2000      	movs	r0, #0
 80057ba:	f1c2 0c20 	rsb	ip, r2, #32
 80057be:	680e      	ldr	r6, [r1, #0]
 80057c0:	4096      	lsls	r6, r2
 80057c2:	4330      	orrs	r0, r6
 80057c4:	f843 0b04 	str.w	r0, [r3], #4
 80057c8:	f851 0b04 	ldr.w	r0, [r1], #4
 80057cc:	458e      	cmp	lr, r1
 80057ce:	fa20 f00c 	lsr.w	r0, r0, ip
 80057d2:	d8f4      	bhi.n	80057be <__lshift+0x52>
 80057d4:	6018      	str	r0, [r3, #0]
 80057d6:	b108      	cbz	r0, 80057dc <__lshift+0x70>
 80057d8:	f109 0502 	add.w	r5, r9, #2
 80057dc:	3d01      	subs	r5, #1
 80057de:	4638      	mov	r0, r7
 80057e0:	f8c8 5010 	str.w	r5, [r8, #16]
 80057e4:	4621      	mov	r1, r4
 80057e6:	f7ff fe00 	bl	80053ea <_Bfree>
 80057ea:	4640      	mov	r0, r8
 80057ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f0:	3101      	adds	r1, #1
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	e7c8      	b.n	8005788 <__lshift+0x1c>
 80057f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80057fa:	3201      	adds	r2, #1
 80057fc:	e7ce      	b.n	800579c <__lshift+0x30>
 80057fe:	3b04      	subs	r3, #4
 8005800:	f851 2b04 	ldr.w	r2, [r1], #4
 8005804:	458e      	cmp	lr, r1
 8005806:	f843 2f04 	str.w	r2, [r3, #4]!
 800580a:	d8f9      	bhi.n	8005800 <__lshift+0x94>
 800580c:	e7e6      	b.n	80057dc <__lshift+0x70>

0800580e <__mcmp>:
 800580e:	6903      	ldr	r3, [r0, #16]
 8005810:	690a      	ldr	r2, [r1, #16]
 8005812:	b530      	push	{r4, r5, lr}
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	d10c      	bne.n	8005832 <__mcmp+0x24>
 8005818:	0092      	lsls	r2, r2, #2
 800581a:	3014      	adds	r0, #20
 800581c:	3114      	adds	r1, #20
 800581e:	1884      	adds	r4, r0, r2
 8005820:	4411      	add	r1, r2
 8005822:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005826:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800582a:	4295      	cmp	r5, r2
 800582c:	d003      	beq.n	8005836 <__mcmp+0x28>
 800582e:	d305      	bcc.n	800583c <__mcmp+0x2e>
 8005830:	2301      	movs	r3, #1
 8005832:	4618      	mov	r0, r3
 8005834:	bd30      	pop	{r4, r5, pc}
 8005836:	42a0      	cmp	r0, r4
 8005838:	d3f3      	bcc.n	8005822 <__mcmp+0x14>
 800583a:	e7fa      	b.n	8005832 <__mcmp+0x24>
 800583c:	f04f 33ff 	mov.w	r3, #4294967295
 8005840:	e7f7      	b.n	8005832 <__mcmp+0x24>

08005842 <__mdiff>:
 8005842:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005846:	460d      	mov	r5, r1
 8005848:	4607      	mov	r7, r0
 800584a:	4611      	mov	r1, r2
 800584c:	4628      	mov	r0, r5
 800584e:	4614      	mov	r4, r2
 8005850:	f7ff ffdd 	bl	800580e <__mcmp>
 8005854:	1e06      	subs	r6, r0, #0
 8005856:	d108      	bne.n	800586a <__mdiff+0x28>
 8005858:	4631      	mov	r1, r6
 800585a:	4638      	mov	r0, r7
 800585c:	f7ff fd91 	bl	8005382 <_Balloc>
 8005860:	2301      	movs	r3, #1
 8005862:	6146      	str	r6, [r0, #20]
 8005864:	6103      	str	r3, [r0, #16]
 8005866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586a:	bfa4      	itt	ge
 800586c:	4623      	movge	r3, r4
 800586e:	462c      	movge	r4, r5
 8005870:	4638      	mov	r0, r7
 8005872:	6861      	ldr	r1, [r4, #4]
 8005874:	bfa6      	itte	ge
 8005876:	461d      	movge	r5, r3
 8005878:	2600      	movge	r6, #0
 800587a:	2601      	movlt	r6, #1
 800587c:	f7ff fd81 	bl	8005382 <_Balloc>
 8005880:	f04f 0c00 	mov.w	ip, #0
 8005884:	60c6      	str	r6, [r0, #12]
 8005886:	692b      	ldr	r3, [r5, #16]
 8005888:	6926      	ldr	r6, [r4, #16]
 800588a:	f104 0214 	add.w	r2, r4, #20
 800588e:	f105 0914 	add.w	r9, r5, #20
 8005892:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005896:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800589a:	f100 0114 	add.w	r1, r0, #20
 800589e:	f852 ab04 	ldr.w	sl, [r2], #4
 80058a2:	f859 5b04 	ldr.w	r5, [r9], #4
 80058a6:	fa1f f38a 	uxth.w	r3, sl
 80058aa:	4463      	add	r3, ip
 80058ac:	b2ac      	uxth	r4, r5
 80058ae:	1b1b      	subs	r3, r3, r4
 80058b0:	0c2c      	lsrs	r4, r5, #16
 80058b2:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80058b6:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80058c0:	45c8      	cmp	r8, r9
 80058c2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80058c6:	4696      	mov	lr, r2
 80058c8:	f841 4b04 	str.w	r4, [r1], #4
 80058cc:	d8e7      	bhi.n	800589e <__mdiff+0x5c>
 80058ce:	45be      	cmp	lr, r7
 80058d0:	d305      	bcc.n	80058de <__mdiff+0x9c>
 80058d2:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80058d6:	b18b      	cbz	r3, 80058fc <__mdiff+0xba>
 80058d8:	6106      	str	r6, [r0, #16]
 80058da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058de:	f85e 4b04 	ldr.w	r4, [lr], #4
 80058e2:	b2a2      	uxth	r2, r4
 80058e4:	4462      	add	r2, ip
 80058e6:	1413      	asrs	r3, r2, #16
 80058e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80058ec:	b292      	uxth	r2, r2
 80058ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80058f2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80058f6:	f841 2b04 	str.w	r2, [r1], #4
 80058fa:	e7e8      	b.n	80058ce <__mdiff+0x8c>
 80058fc:	3e01      	subs	r6, #1
 80058fe:	e7e8      	b.n	80058d2 <__mdiff+0x90>

08005900 <__ulp>:
 8005900:	4b10      	ldr	r3, [pc, #64]	; (8005944 <__ulp+0x44>)
 8005902:	400b      	ands	r3, r1
 8005904:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005908:	2b00      	cmp	r3, #0
 800590a:	dd02      	ble.n	8005912 <__ulp+0x12>
 800590c:	2000      	movs	r0, #0
 800590e:	4619      	mov	r1, r3
 8005910:	4770      	bx	lr
 8005912:	425b      	negs	r3, r3
 8005914:	151b      	asrs	r3, r3, #20
 8005916:	2b13      	cmp	r3, #19
 8005918:	f04f 0000 	mov.w	r0, #0
 800591c:	f04f 0100 	mov.w	r1, #0
 8005920:	dc04      	bgt.n	800592c <__ulp+0x2c>
 8005922:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005926:	fa42 f103 	asr.w	r1, r2, r3
 800592a:	4770      	bx	lr
 800592c:	2201      	movs	r2, #1
 800592e:	3b14      	subs	r3, #20
 8005930:	2b1e      	cmp	r3, #30
 8005932:	bfce      	itee	gt
 8005934:	4613      	movgt	r3, r2
 8005936:	f1c3 031f 	rsble	r3, r3, #31
 800593a:	fa02 f303 	lslle.w	r3, r2, r3
 800593e:	4618      	mov	r0, r3
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	7ff00000 	.word	0x7ff00000

08005948 <__b2d>:
 8005948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800594c:	6907      	ldr	r7, [r0, #16]
 800594e:	f100 0914 	add.w	r9, r0, #20
 8005952:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8005956:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800595a:	f1a7 0804 	sub.w	r8, r7, #4
 800595e:	4630      	mov	r0, r6
 8005960:	f7ff fdd3 	bl	800550a <__hi0bits>
 8005964:	f1c0 0320 	rsb	r3, r0, #32
 8005968:	280a      	cmp	r0, #10
 800596a:	600b      	str	r3, [r1, #0]
 800596c:	491e      	ldr	r1, [pc, #120]	; (80059e8 <__b2d+0xa0>)
 800596e:	dc17      	bgt.n	80059a0 <__b2d+0x58>
 8005970:	45c1      	cmp	r9, r8
 8005972:	bf28      	it	cs
 8005974:	2200      	movcs	r2, #0
 8005976:	f1c0 0e0b 	rsb	lr, r0, #11
 800597a:	fa26 f30e 	lsr.w	r3, r6, lr
 800597e:	bf38      	it	cc
 8005980:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005984:	ea43 0501 	orr.w	r5, r3, r1
 8005988:	f100 0315 	add.w	r3, r0, #21
 800598c:	fa06 f303 	lsl.w	r3, r6, r3
 8005990:	fa22 f20e 	lsr.w	r2, r2, lr
 8005994:	ea43 0402 	orr.w	r4, r3, r2
 8005998:	4620      	mov	r0, r4
 800599a:	4629      	mov	r1, r5
 800599c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059a0:	45c1      	cmp	r9, r8
 80059a2:	bf3a      	itte	cc
 80059a4:	f1a7 0808 	subcc.w	r8, r7, #8
 80059a8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80059ac:	2200      	movcs	r2, #0
 80059ae:	f1b0 030b 	subs.w	r3, r0, #11
 80059b2:	d015      	beq.n	80059e0 <__b2d+0x98>
 80059b4:	409e      	lsls	r6, r3
 80059b6:	f1c3 0720 	rsb	r7, r3, #32
 80059ba:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80059be:	fa22 f107 	lsr.w	r1, r2, r7
 80059c2:	45c8      	cmp	r8, r9
 80059c4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80059c8:	ea46 0501 	orr.w	r5, r6, r1
 80059cc:	bf94      	ite	ls
 80059ce:	2100      	movls	r1, #0
 80059d0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80059d4:	fa02 f003 	lsl.w	r0, r2, r3
 80059d8:	40f9      	lsrs	r1, r7
 80059da:	ea40 0401 	orr.w	r4, r0, r1
 80059de:	e7db      	b.n	8005998 <__b2d+0x50>
 80059e0:	ea46 0501 	orr.w	r5, r6, r1
 80059e4:	4614      	mov	r4, r2
 80059e6:	e7d7      	b.n	8005998 <__b2d+0x50>
 80059e8:	3ff00000 	.word	0x3ff00000

080059ec <__d2b>:
 80059ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80059f0:	461c      	mov	r4, r3
 80059f2:	2101      	movs	r1, #1
 80059f4:	4690      	mov	r8, r2
 80059f6:	9e08      	ldr	r6, [sp, #32]
 80059f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80059fa:	f7ff fcc2 	bl	8005382 <_Balloc>
 80059fe:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005a02:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005a06:	4607      	mov	r7, r0
 8005a08:	bb34      	cbnz	r4, 8005a58 <__d2b+0x6c>
 8005a0a:	9201      	str	r2, [sp, #4]
 8005a0c:	f1b8 0f00 	cmp.w	r8, #0
 8005a10:	d027      	beq.n	8005a62 <__d2b+0x76>
 8005a12:	a802      	add	r0, sp, #8
 8005a14:	f840 8d08 	str.w	r8, [r0, #-8]!
 8005a18:	f7ff fd96 	bl	8005548 <__lo0bits>
 8005a1c:	9900      	ldr	r1, [sp, #0]
 8005a1e:	b1f0      	cbz	r0, 8005a5e <__d2b+0x72>
 8005a20:	9a01      	ldr	r2, [sp, #4]
 8005a22:	f1c0 0320 	rsb	r3, r0, #32
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	430b      	orrs	r3, r1
 8005a2c:	40c2      	lsrs	r2, r0
 8005a2e:	617b      	str	r3, [r7, #20]
 8005a30:	9201      	str	r2, [sp, #4]
 8005a32:	9b01      	ldr	r3, [sp, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	bf14      	ite	ne
 8005a38:	2102      	movne	r1, #2
 8005a3a:	2101      	moveq	r1, #1
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	6139      	str	r1, [r7, #16]
 8005a40:	b1c4      	cbz	r4, 8005a74 <__d2b+0x88>
 8005a42:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005a46:	4404      	add	r4, r0
 8005a48:	6034      	str	r4, [r6, #0]
 8005a4a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005a4e:	6028      	str	r0, [r5, #0]
 8005a50:	4638      	mov	r0, r7
 8005a52:	b002      	add	sp, #8
 8005a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a58:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005a5c:	e7d5      	b.n	8005a0a <__d2b+0x1e>
 8005a5e:	6179      	str	r1, [r7, #20]
 8005a60:	e7e7      	b.n	8005a32 <__d2b+0x46>
 8005a62:	a801      	add	r0, sp, #4
 8005a64:	f7ff fd70 	bl	8005548 <__lo0bits>
 8005a68:	2101      	movs	r1, #1
 8005a6a:	9b01      	ldr	r3, [sp, #4]
 8005a6c:	6139      	str	r1, [r7, #16]
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	3020      	adds	r0, #32
 8005a72:	e7e5      	b.n	8005a40 <__d2b+0x54>
 8005a74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005a78:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005a7c:	6030      	str	r0, [r6, #0]
 8005a7e:	6918      	ldr	r0, [r3, #16]
 8005a80:	f7ff fd43 	bl	800550a <__hi0bits>
 8005a84:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005a88:	e7e1      	b.n	8005a4e <__d2b+0x62>

08005a8a <__ratio>:
 8005a8a:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005a8e:	4688      	mov	r8, r1
 8005a90:	4669      	mov	r1, sp
 8005a92:	4681      	mov	r9, r0
 8005a94:	f7ff ff58 	bl	8005948 <__b2d>
 8005a98:	460d      	mov	r5, r1
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	a901      	add	r1, sp, #4
 8005a9e:	4640      	mov	r0, r8
 8005aa0:	f7ff ff52 	bl	8005948 <__b2d>
 8005aa4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005aa8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005aac:	9e00      	ldr	r6, [sp, #0]
 8005aae:	1a9a      	subs	r2, r3, r2
 8005ab0:	9b01      	ldr	r3, [sp, #4]
 8005ab2:	1af3      	subs	r3, r6, r3
 8005ab4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	bfd6      	itet	le
 8005abc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005ac0:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8005ac4:	eb01 5103 	addle.w	r1, r1, r3, lsl #20
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4620      	mov	r0, r4
 8005ace:	4629      	mov	r1, r5
 8005ad0:	f7fa fe40 	bl	8000754 <__aeabi_ddiv>
 8005ad4:	b002      	add	sp, #8
 8005ad6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08005ada <__copybits>:
 8005ada:	3901      	subs	r1, #1
 8005adc:	b510      	push	{r4, lr}
 8005ade:	1149      	asrs	r1, r1, #5
 8005ae0:	6914      	ldr	r4, [r2, #16]
 8005ae2:	3101      	adds	r1, #1
 8005ae4:	f102 0314 	add.w	r3, r2, #20
 8005ae8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005aec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005af0:	42a3      	cmp	r3, r4
 8005af2:	4602      	mov	r2, r0
 8005af4:	d303      	bcc.n	8005afe <__copybits+0x24>
 8005af6:	2300      	movs	r3, #0
 8005af8:	428a      	cmp	r2, r1
 8005afa:	d305      	bcc.n	8005b08 <__copybits+0x2e>
 8005afc:	bd10      	pop	{r4, pc}
 8005afe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b02:	f840 2b04 	str.w	r2, [r0], #4
 8005b06:	e7f3      	b.n	8005af0 <__copybits+0x16>
 8005b08:	f842 3b04 	str.w	r3, [r2], #4
 8005b0c:	e7f4      	b.n	8005af8 <__copybits+0x1e>

08005b0e <__any_on>:
 8005b0e:	f100 0214 	add.w	r2, r0, #20
 8005b12:	6900      	ldr	r0, [r0, #16]
 8005b14:	114b      	asrs	r3, r1, #5
 8005b16:	4298      	cmp	r0, r3
 8005b18:	b510      	push	{r4, lr}
 8005b1a:	db11      	blt.n	8005b40 <__any_on+0x32>
 8005b1c:	dd0a      	ble.n	8005b34 <__any_on+0x26>
 8005b1e:	f011 011f 	ands.w	r1, r1, #31
 8005b22:	d007      	beq.n	8005b34 <__any_on+0x26>
 8005b24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005b28:	fa24 f001 	lsr.w	r0, r4, r1
 8005b2c:	fa00 f101 	lsl.w	r1, r0, r1
 8005b30:	428c      	cmp	r4, r1
 8005b32:	d10b      	bne.n	8005b4c <__any_on+0x3e>
 8005b34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d803      	bhi.n	8005b44 <__any_on+0x36>
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	bd10      	pop	{r4, pc}
 8005b40:	4603      	mov	r3, r0
 8005b42:	e7f7      	b.n	8005b34 <__any_on+0x26>
 8005b44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b48:	2900      	cmp	r1, #0
 8005b4a:	d0f5      	beq.n	8005b38 <__any_on+0x2a>
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	bd10      	pop	{r4, pc}

08005b50 <_calloc_r>:
 8005b50:	b538      	push	{r3, r4, r5, lr}
 8005b52:	fb02 f401 	mul.w	r4, r2, r1
 8005b56:	4621      	mov	r1, r4
 8005b58:	f000 f854 	bl	8005c04 <_malloc_r>
 8005b5c:	4605      	mov	r5, r0
 8005b5e:	b118      	cbz	r0, 8005b68 <_calloc_r+0x18>
 8005b60:	4622      	mov	r2, r4
 8005b62:	2100      	movs	r1, #0
 8005b64:	f7fe f97a 	bl	8003e5c <memset>
 8005b68:	4628      	mov	r0, r5
 8005b6a:	bd38      	pop	{r3, r4, r5, pc}

08005b6c <_free_r>:
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	4605      	mov	r5, r0
 8005b70:	2900      	cmp	r1, #0
 8005b72:	d043      	beq.n	8005bfc <_free_r+0x90>
 8005b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b78:	1f0c      	subs	r4, r1, #4
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	bfb8      	it	lt
 8005b7e:	18e4      	addlt	r4, r4, r3
 8005b80:	f000 fbdd 	bl	800633e <__malloc_lock>
 8005b84:	4a1e      	ldr	r2, [pc, #120]	; (8005c00 <_free_r+0x94>)
 8005b86:	6813      	ldr	r3, [r2, #0]
 8005b88:	4610      	mov	r0, r2
 8005b8a:	b933      	cbnz	r3, 8005b9a <_free_r+0x2e>
 8005b8c:	6063      	str	r3, [r4, #4]
 8005b8e:	6014      	str	r4, [r2, #0]
 8005b90:	4628      	mov	r0, r5
 8005b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b96:	f000 bbd3 	b.w	8006340 <__malloc_unlock>
 8005b9a:	42a3      	cmp	r3, r4
 8005b9c:	d90b      	bls.n	8005bb6 <_free_r+0x4a>
 8005b9e:	6821      	ldr	r1, [r4, #0]
 8005ba0:	1862      	adds	r2, r4, r1
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	bf01      	itttt	eq
 8005ba6:	681a      	ldreq	r2, [r3, #0]
 8005ba8:	685b      	ldreq	r3, [r3, #4]
 8005baa:	1852      	addeq	r2, r2, r1
 8005bac:	6022      	streq	r2, [r4, #0]
 8005bae:	6063      	str	r3, [r4, #4]
 8005bb0:	6004      	str	r4, [r0, #0]
 8005bb2:	e7ed      	b.n	8005b90 <_free_r+0x24>
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	b10a      	cbz	r2, 8005bbe <_free_r+0x52>
 8005bba:	42a2      	cmp	r2, r4
 8005bbc:	d9fa      	bls.n	8005bb4 <_free_r+0x48>
 8005bbe:	6819      	ldr	r1, [r3, #0]
 8005bc0:	1858      	adds	r0, r3, r1
 8005bc2:	42a0      	cmp	r0, r4
 8005bc4:	d10b      	bne.n	8005bde <_free_r+0x72>
 8005bc6:	6820      	ldr	r0, [r4, #0]
 8005bc8:	4401      	add	r1, r0
 8005bca:	1858      	adds	r0, r3, r1
 8005bcc:	4282      	cmp	r2, r0
 8005bce:	6019      	str	r1, [r3, #0]
 8005bd0:	d1de      	bne.n	8005b90 <_free_r+0x24>
 8005bd2:	6810      	ldr	r0, [r2, #0]
 8005bd4:	6852      	ldr	r2, [r2, #4]
 8005bd6:	4401      	add	r1, r0
 8005bd8:	6019      	str	r1, [r3, #0]
 8005bda:	605a      	str	r2, [r3, #4]
 8005bdc:	e7d8      	b.n	8005b90 <_free_r+0x24>
 8005bde:	d902      	bls.n	8005be6 <_free_r+0x7a>
 8005be0:	230c      	movs	r3, #12
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	e7d4      	b.n	8005b90 <_free_r+0x24>
 8005be6:	6820      	ldr	r0, [r4, #0]
 8005be8:	1821      	adds	r1, r4, r0
 8005bea:	428a      	cmp	r2, r1
 8005bec:	bf01      	itttt	eq
 8005bee:	6811      	ldreq	r1, [r2, #0]
 8005bf0:	6852      	ldreq	r2, [r2, #4]
 8005bf2:	1809      	addeq	r1, r1, r0
 8005bf4:	6021      	streq	r1, [r4, #0]
 8005bf6:	6062      	str	r2, [r4, #4]
 8005bf8:	605c      	str	r4, [r3, #4]
 8005bfa:	e7c9      	b.n	8005b90 <_free_r+0x24>
 8005bfc:	bd38      	pop	{r3, r4, r5, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000208 	.word	0x20000208

08005c04 <_malloc_r>:
 8005c04:	b570      	push	{r4, r5, r6, lr}
 8005c06:	1ccd      	adds	r5, r1, #3
 8005c08:	f025 0503 	bic.w	r5, r5, #3
 8005c0c:	3508      	adds	r5, #8
 8005c0e:	2d0c      	cmp	r5, #12
 8005c10:	bf38      	it	cc
 8005c12:	250c      	movcc	r5, #12
 8005c14:	2d00      	cmp	r5, #0
 8005c16:	4606      	mov	r6, r0
 8005c18:	db01      	blt.n	8005c1e <_malloc_r+0x1a>
 8005c1a:	42a9      	cmp	r1, r5
 8005c1c:	d903      	bls.n	8005c26 <_malloc_r+0x22>
 8005c1e:	230c      	movs	r3, #12
 8005c20:	6033      	str	r3, [r6, #0]
 8005c22:	2000      	movs	r0, #0
 8005c24:	bd70      	pop	{r4, r5, r6, pc}
 8005c26:	f000 fb8a 	bl	800633e <__malloc_lock>
 8005c2a:	4a23      	ldr	r2, [pc, #140]	; (8005cb8 <_malloc_r+0xb4>)
 8005c2c:	6814      	ldr	r4, [r2, #0]
 8005c2e:	4621      	mov	r1, r4
 8005c30:	b991      	cbnz	r1, 8005c58 <_malloc_r+0x54>
 8005c32:	4c22      	ldr	r4, [pc, #136]	; (8005cbc <_malloc_r+0xb8>)
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	b91b      	cbnz	r3, 8005c40 <_malloc_r+0x3c>
 8005c38:	4630      	mov	r0, r6
 8005c3a:	f000 fb29 	bl	8006290 <_sbrk_r>
 8005c3e:	6020      	str	r0, [r4, #0]
 8005c40:	4629      	mov	r1, r5
 8005c42:	4630      	mov	r0, r6
 8005c44:	f000 fb24 	bl	8006290 <_sbrk_r>
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	d126      	bne.n	8005c9a <_malloc_r+0x96>
 8005c4c:	230c      	movs	r3, #12
 8005c4e:	4630      	mov	r0, r6
 8005c50:	6033      	str	r3, [r6, #0]
 8005c52:	f000 fb75 	bl	8006340 <__malloc_unlock>
 8005c56:	e7e4      	b.n	8005c22 <_malloc_r+0x1e>
 8005c58:	680b      	ldr	r3, [r1, #0]
 8005c5a:	1b5b      	subs	r3, r3, r5
 8005c5c:	d41a      	bmi.n	8005c94 <_malloc_r+0x90>
 8005c5e:	2b0b      	cmp	r3, #11
 8005c60:	d90f      	bls.n	8005c82 <_malloc_r+0x7e>
 8005c62:	600b      	str	r3, [r1, #0]
 8005c64:	18cc      	adds	r4, r1, r3
 8005c66:	50cd      	str	r5, [r1, r3]
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f000 fb69 	bl	8006340 <__malloc_unlock>
 8005c6e:	f104 000b 	add.w	r0, r4, #11
 8005c72:	1d23      	adds	r3, r4, #4
 8005c74:	f020 0007 	bic.w	r0, r0, #7
 8005c78:	1ac3      	subs	r3, r0, r3
 8005c7a:	d01b      	beq.n	8005cb4 <_malloc_r+0xb0>
 8005c7c:	425a      	negs	r2, r3
 8005c7e:	50e2      	str	r2, [r4, r3]
 8005c80:	bd70      	pop	{r4, r5, r6, pc}
 8005c82:	428c      	cmp	r4, r1
 8005c84:	bf0b      	itete	eq
 8005c86:	6863      	ldreq	r3, [r4, #4]
 8005c88:	684b      	ldrne	r3, [r1, #4]
 8005c8a:	6013      	streq	r3, [r2, #0]
 8005c8c:	6063      	strne	r3, [r4, #4]
 8005c8e:	bf18      	it	ne
 8005c90:	460c      	movne	r4, r1
 8005c92:	e7e9      	b.n	8005c68 <_malloc_r+0x64>
 8005c94:	460c      	mov	r4, r1
 8005c96:	6849      	ldr	r1, [r1, #4]
 8005c98:	e7ca      	b.n	8005c30 <_malloc_r+0x2c>
 8005c9a:	1cc4      	adds	r4, r0, #3
 8005c9c:	f024 0403 	bic.w	r4, r4, #3
 8005ca0:	42a0      	cmp	r0, r4
 8005ca2:	d005      	beq.n	8005cb0 <_malloc_r+0xac>
 8005ca4:	1a21      	subs	r1, r4, r0
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	f000 faf2 	bl	8006290 <_sbrk_r>
 8005cac:	3001      	adds	r0, #1
 8005cae:	d0cd      	beq.n	8005c4c <_malloc_r+0x48>
 8005cb0:	6025      	str	r5, [r4, #0]
 8005cb2:	e7d9      	b.n	8005c68 <_malloc_r+0x64>
 8005cb4:	bd70      	pop	{r4, r5, r6, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000208 	.word	0x20000208
 8005cbc:	2000020c 	.word	0x2000020c

08005cc0 <__ssputs_r>:
 8005cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	688e      	ldr	r6, [r1, #8]
 8005cc6:	4682      	mov	sl, r0
 8005cc8:	429e      	cmp	r6, r3
 8005cca:	460c      	mov	r4, r1
 8005ccc:	4691      	mov	r9, r2
 8005cce:	4698      	mov	r8, r3
 8005cd0:	d835      	bhi.n	8005d3e <__ssputs_r+0x7e>
 8005cd2:	898a      	ldrh	r2, [r1, #12]
 8005cd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005cd8:	d031      	beq.n	8005d3e <__ssputs_r+0x7e>
 8005cda:	2302      	movs	r3, #2
 8005cdc:	6825      	ldr	r5, [r4, #0]
 8005cde:	6909      	ldr	r1, [r1, #16]
 8005ce0:	1a6f      	subs	r7, r5, r1
 8005ce2:	6965      	ldr	r5, [r4, #20]
 8005ce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ce8:	fb95 f5f3 	sdiv	r5, r5, r3
 8005cec:	f108 0301 	add.w	r3, r8, #1
 8005cf0:	443b      	add	r3, r7
 8005cf2:	429d      	cmp	r5, r3
 8005cf4:	bf38      	it	cc
 8005cf6:	461d      	movcc	r5, r3
 8005cf8:	0553      	lsls	r3, r2, #21
 8005cfa:	d531      	bpl.n	8005d60 <__ssputs_r+0xa0>
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	f7ff ff81 	bl	8005c04 <_malloc_r>
 8005d02:	4606      	mov	r6, r0
 8005d04:	b950      	cbnz	r0, 8005d1c <__ssputs_r+0x5c>
 8005d06:	230c      	movs	r3, #12
 8005d08:	f8ca 3000 	str.w	r3, [sl]
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d16:	81a3      	strh	r3, [r4, #12]
 8005d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1c:	463a      	mov	r2, r7
 8005d1e:	6921      	ldr	r1, [r4, #16]
 8005d20:	f7ff fb24 	bl	800536c <memcpy>
 8005d24:	89a3      	ldrh	r3, [r4, #12]
 8005d26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2e:	81a3      	strh	r3, [r4, #12]
 8005d30:	6126      	str	r6, [r4, #16]
 8005d32:	443e      	add	r6, r7
 8005d34:	6026      	str	r6, [r4, #0]
 8005d36:	4646      	mov	r6, r8
 8005d38:	6165      	str	r5, [r4, #20]
 8005d3a:	1bed      	subs	r5, r5, r7
 8005d3c:	60a5      	str	r5, [r4, #8]
 8005d3e:	4546      	cmp	r6, r8
 8005d40:	bf28      	it	cs
 8005d42:	4646      	movcs	r6, r8
 8005d44:	4649      	mov	r1, r9
 8005d46:	4632      	mov	r2, r6
 8005d48:	6820      	ldr	r0, [r4, #0]
 8005d4a:	f000 fade 	bl	800630a <memmove>
 8005d4e:	68a3      	ldr	r3, [r4, #8]
 8005d50:	2000      	movs	r0, #0
 8005d52:	1b9b      	subs	r3, r3, r6
 8005d54:	60a3      	str	r3, [r4, #8]
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	441e      	add	r6, r3
 8005d5a:	6026      	str	r6, [r4, #0]
 8005d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d60:	462a      	mov	r2, r5
 8005d62:	f000 faee 	bl	8006342 <_realloc_r>
 8005d66:	4606      	mov	r6, r0
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d1e1      	bne.n	8005d30 <__ssputs_r+0x70>
 8005d6c:	6921      	ldr	r1, [r4, #16]
 8005d6e:	4650      	mov	r0, sl
 8005d70:	f7ff fefc 	bl	8005b6c <_free_r>
 8005d74:	e7c7      	b.n	8005d06 <__ssputs_r+0x46>
	...

08005d78 <_svfiprintf_r>:
 8005d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	b09d      	sub	sp, #116	; 0x74
 8005d7e:	9303      	str	r3, [sp, #12]
 8005d80:	898b      	ldrh	r3, [r1, #12]
 8005d82:	4680      	mov	r8, r0
 8005d84:	061c      	lsls	r4, r3, #24
 8005d86:	460d      	mov	r5, r1
 8005d88:	4616      	mov	r6, r2
 8005d8a:	d50f      	bpl.n	8005dac <_svfiprintf_r+0x34>
 8005d8c:	690b      	ldr	r3, [r1, #16]
 8005d8e:	b96b      	cbnz	r3, 8005dac <_svfiprintf_r+0x34>
 8005d90:	2140      	movs	r1, #64	; 0x40
 8005d92:	f7ff ff37 	bl	8005c04 <_malloc_r>
 8005d96:	6028      	str	r0, [r5, #0]
 8005d98:	6128      	str	r0, [r5, #16]
 8005d9a:	b928      	cbnz	r0, 8005da8 <_svfiprintf_r+0x30>
 8005d9c:	230c      	movs	r3, #12
 8005d9e:	f8c8 3000 	str.w	r3, [r8]
 8005da2:	f04f 30ff 	mov.w	r0, #4294967295
 8005da6:	e0c4      	b.n	8005f32 <_svfiprintf_r+0x1ba>
 8005da8:	2340      	movs	r3, #64	; 0x40
 8005daa:	616b      	str	r3, [r5, #20]
 8005dac:	2300      	movs	r3, #0
 8005dae:	9309      	str	r3, [sp, #36]	; 0x24
 8005db0:	2320      	movs	r3, #32
 8005db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005db6:	2330      	movs	r3, #48	; 0x30
 8005db8:	f04f 0b01 	mov.w	fp, #1
 8005dbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dc0:	4637      	mov	r7, r6
 8005dc2:	463c      	mov	r4, r7
 8005dc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d13c      	bne.n	8005e46 <_svfiprintf_r+0xce>
 8005dcc:	ebb7 0a06 	subs.w	sl, r7, r6
 8005dd0:	d00b      	beq.n	8005dea <_svfiprintf_r+0x72>
 8005dd2:	4653      	mov	r3, sl
 8005dd4:	4632      	mov	r2, r6
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	4640      	mov	r0, r8
 8005dda:	f7ff ff71 	bl	8005cc0 <__ssputs_r>
 8005dde:	3001      	adds	r0, #1
 8005de0:	f000 80a2 	beq.w	8005f28 <_svfiprintf_r+0x1b0>
 8005de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005de6:	4453      	add	r3, sl
 8005de8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dea:	783b      	ldrb	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 809b 	beq.w	8005f28 <_svfiprintf_r+0x1b0>
 8005df2:	2300      	movs	r3, #0
 8005df4:	f04f 32ff 	mov.w	r2, #4294967295
 8005df8:	9304      	str	r3, [sp, #16]
 8005dfa:	9307      	str	r3, [sp, #28]
 8005dfc:	9205      	str	r2, [sp, #20]
 8005dfe:	9306      	str	r3, [sp, #24]
 8005e00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e04:	931a      	str	r3, [sp, #104]	; 0x68
 8005e06:	2205      	movs	r2, #5
 8005e08:	7821      	ldrb	r1, [r4, #0]
 8005e0a:	4850      	ldr	r0, [pc, #320]	; (8005f4c <_svfiprintf_r+0x1d4>)
 8005e0c:	f000 fa6f 	bl	80062ee <memchr>
 8005e10:	1c67      	adds	r7, r4, #1
 8005e12:	9b04      	ldr	r3, [sp, #16]
 8005e14:	b9d8      	cbnz	r0, 8005e4e <_svfiprintf_r+0xd6>
 8005e16:	06d9      	lsls	r1, r3, #27
 8005e18:	bf44      	itt	mi
 8005e1a:	2220      	movmi	r2, #32
 8005e1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e20:	071a      	lsls	r2, r3, #28
 8005e22:	bf44      	itt	mi
 8005e24:	222b      	movmi	r2, #43	; 0x2b
 8005e26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e2a:	7822      	ldrb	r2, [r4, #0]
 8005e2c:	2a2a      	cmp	r2, #42	; 0x2a
 8005e2e:	d016      	beq.n	8005e5e <_svfiprintf_r+0xe6>
 8005e30:	2100      	movs	r1, #0
 8005e32:	200a      	movs	r0, #10
 8005e34:	9a07      	ldr	r2, [sp, #28]
 8005e36:	4627      	mov	r7, r4
 8005e38:	783b      	ldrb	r3, [r7, #0]
 8005e3a:	3401      	adds	r4, #1
 8005e3c:	3b30      	subs	r3, #48	; 0x30
 8005e3e:	2b09      	cmp	r3, #9
 8005e40:	d950      	bls.n	8005ee4 <_svfiprintf_r+0x16c>
 8005e42:	b1c9      	cbz	r1, 8005e78 <_svfiprintf_r+0x100>
 8005e44:	e011      	b.n	8005e6a <_svfiprintf_r+0xf2>
 8005e46:	2b25      	cmp	r3, #37	; 0x25
 8005e48:	d0c0      	beq.n	8005dcc <_svfiprintf_r+0x54>
 8005e4a:	4627      	mov	r7, r4
 8005e4c:	e7b9      	b.n	8005dc2 <_svfiprintf_r+0x4a>
 8005e4e:	4a3f      	ldr	r2, [pc, #252]	; (8005f4c <_svfiprintf_r+0x1d4>)
 8005e50:	463c      	mov	r4, r7
 8005e52:	1a80      	subs	r0, r0, r2
 8005e54:	fa0b f000 	lsl.w	r0, fp, r0
 8005e58:	4318      	orrs	r0, r3
 8005e5a:	9004      	str	r0, [sp, #16]
 8005e5c:	e7d3      	b.n	8005e06 <_svfiprintf_r+0x8e>
 8005e5e:	9a03      	ldr	r2, [sp, #12]
 8005e60:	1d11      	adds	r1, r2, #4
 8005e62:	6812      	ldr	r2, [r2, #0]
 8005e64:	9103      	str	r1, [sp, #12]
 8005e66:	2a00      	cmp	r2, #0
 8005e68:	db01      	blt.n	8005e6e <_svfiprintf_r+0xf6>
 8005e6a:	9207      	str	r2, [sp, #28]
 8005e6c:	e004      	b.n	8005e78 <_svfiprintf_r+0x100>
 8005e6e:	4252      	negs	r2, r2
 8005e70:	f043 0302 	orr.w	r3, r3, #2
 8005e74:	9207      	str	r2, [sp, #28]
 8005e76:	9304      	str	r3, [sp, #16]
 8005e78:	783b      	ldrb	r3, [r7, #0]
 8005e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e7c:	d10d      	bne.n	8005e9a <_svfiprintf_r+0x122>
 8005e7e:	787b      	ldrb	r3, [r7, #1]
 8005e80:	1c79      	adds	r1, r7, #1
 8005e82:	2b2a      	cmp	r3, #42	; 0x2a
 8005e84:	d132      	bne.n	8005eec <_svfiprintf_r+0x174>
 8005e86:	9b03      	ldr	r3, [sp, #12]
 8005e88:	3702      	adds	r7, #2
 8005e8a:	1d1a      	adds	r2, r3, #4
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	9203      	str	r2, [sp, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	bfb8      	it	lt
 8005e94:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e98:	9305      	str	r3, [sp, #20]
 8005e9a:	4c2d      	ldr	r4, [pc, #180]	; (8005f50 <_svfiprintf_r+0x1d8>)
 8005e9c:	2203      	movs	r2, #3
 8005e9e:	7839      	ldrb	r1, [r7, #0]
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f000 fa24 	bl	80062ee <memchr>
 8005ea6:	b138      	cbz	r0, 8005eb8 <_svfiprintf_r+0x140>
 8005ea8:	2340      	movs	r3, #64	; 0x40
 8005eaa:	1b00      	subs	r0, r0, r4
 8005eac:	fa03 f000 	lsl.w	r0, r3, r0
 8005eb0:	9b04      	ldr	r3, [sp, #16]
 8005eb2:	3701      	adds	r7, #1
 8005eb4:	4303      	orrs	r3, r0
 8005eb6:	9304      	str	r3, [sp, #16]
 8005eb8:	7839      	ldrb	r1, [r7, #0]
 8005eba:	2206      	movs	r2, #6
 8005ebc:	4825      	ldr	r0, [pc, #148]	; (8005f54 <_svfiprintf_r+0x1dc>)
 8005ebe:	1c7e      	adds	r6, r7, #1
 8005ec0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ec4:	f000 fa13 	bl	80062ee <memchr>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	d035      	beq.n	8005f38 <_svfiprintf_r+0x1c0>
 8005ecc:	4b22      	ldr	r3, [pc, #136]	; (8005f58 <_svfiprintf_r+0x1e0>)
 8005ece:	b9fb      	cbnz	r3, 8005f10 <_svfiprintf_r+0x198>
 8005ed0:	9b03      	ldr	r3, [sp, #12]
 8005ed2:	3307      	adds	r3, #7
 8005ed4:	f023 0307 	bic.w	r3, r3, #7
 8005ed8:	3308      	adds	r3, #8
 8005eda:	9303      	str	r3, [sp, #12]
 8005edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ede:	444b      	add	r3, r9
 8005ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ee2:	e76d      	b.n	8005dc0 <_svfiprintf_r+0x48>
 8005ee4:	fb00 3202 	mla	r2, r0, r2, r3
 8005ee8:	2101      	movs	r1, #1
 8005eea:	e7a4      	b.n	8005e36 <_svfiprintf_r+0xbe>
 8005eec:	2300      	movs	r3, #0
 8005eee:	240a      	movs	r4, #10
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	9305      	str	r3, [sp, #20]
 8005ef4:	460f      	mov	r7, r1
 8005ef6:	783a      	ldrb	r2, [r7, #0]
 8005ef8:	3101      	adds	r1, #1
 8005efa:	3a30      	subs	r2, #48	; 0x30
 8005efc:	2a09      	cmp	r2, #9
 8005efe:	d903      	bls.n	8005f08 <_svfiprintf_r+0x190>
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0ca      	beq.n	8005e9a <_svfiprintf_r+0x122>
 8005f04:	9005      	str	r0, [sp, #20]
 8005f06:	e7c8      	b.n	8005e9a <_svfiprintf_r+0x122>
 8005f08:	fb04 2000 	mla	r0, r4, r0, r2
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e7f1      	b.n	8005ef4 <_svfiprintf_r+0x17c>
 8005f10:	ab03      	add	r3, sp, #12
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	462a      	mov	r2, r5
 8005f16:	4b11      	ldr	r3, [pc, #68]	; (8005f5c <_svfiprintf_r+0x1e4>)
 8005f18:	a904      	add	r1, sp, #16
 8005f1a:	4640      	mov	r0, r8
 8005f1c:	f3af 8000 	nop.w
 8005f20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005f24:	4681      	mov	r9, r0
 8005f26:	d1d9      	bne.n	8005edc <_svfiprintf_r+0x164>
 8005f28:	89ab      	ldrh	r3, [r5, #12]
 8005f2a:	065b      	lsls	r3, r3, #25
 8005f2c:	f53f af39 	bmi.w	8005da2 <_svfiprintf_r+0x2a>
 8005f30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f32:	b01d      	add	sp, #116	; 0x74
 8005f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f38:	ab03      	add	r3, sp, #12
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	462a      	mov	r2, r5
 8005f3e:	4b07      	ldr	r3, [pc, #28]	; (8005f5c <_svfiprintf_r+0x1e4>)
 8005f40:	a904      	add	r1, sp, #16
 8005f42:	4640      	mov	r0, r8
 8005f44:	f000 f884 	bl	8006050 <_printf_i>
 8005f48:	e7ea      	b.n	8005f20 <_svfiprintf_r+0x1a8>
 8005f4a:	bf00      	nop
 8005f4c:	080065ec 	.word	0x080065ec
 8005f50:	080065f2 	.word	0x080065f2
 8005f54:	080065f6 	.word	0x080065f6
 8005f58:	00000000 	.word	0x00000000
 8005f5c:	08005cc1 	.word	0x08005cc1

08005f60 <_printf_common>:
 8005f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f64:	4691      	mov	r9, r2
 8005f66:	461f      	mov	r7, r3
 8005f68:	688a      	ldr	r2, [r1, #8]
 8005f6a:	690b      	ldr	r3, [r1, #16]
 8005f6c:	4606      	mov	r6, r0
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	bfb8      	it	lt
 8005f72:	4613      	movlt	r3, r2
 8005f74:	f8c9 3000 	str.w	r3, [r9]
 8005f78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f82:	b112      	cbz	r2, 8005f8a <_printf_common+0x2a>
 8005f84:	3301      	adds	r3, #1
 8005f86:	f8c9 3000 	str.w	r3, [r9]
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	0699      	lsls	r1, r3, #26
 8005f8e:	bf42      	ittt	mi
 8005f90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f94:	3302      	addmi	r3, #2
 8005f96:	f8c9 3000 	strmi.w	r3, [r9]
 8005f9a:	6825      	ldr	r5, [r4, #0]
 8005f9c:	f015 0506 	ands.w	r5, r5, #6
 8005fa0:	d107      	bne.n	8005fb2 <_printf_common+0x52>
 8005fa2:	f104 0a19 	add.w	sl, r4, #25
 8005fa6:	68e3      	ldr	r3, [r4, #12]
 8005fa8:	f8d9 2000 	ldr.w	r2, [r9]
 8005fac:	1a9b      	subs	r3, r3, r2
 8005fae:	429d      	cmp	r5, r3
 8005fb0:	db2a      	blt.n	8006008 <_printf_common+0xa8>
 8005fb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005fb6:	6822      	ldr	r2, [r4, #0]
 8005fb8:	3300      	adds	r3, #0
 8005fba:	bf18      	it	ne
 8005fbc:	2301      	movne	r3, #1
 8005fbe:	0692      	lsls	r2, r2, #26
 8005fc0:	d42f      	bmi.n	8006022 <_printf_common+0xc2>
 8005fc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fc6:	4639      	mov	r1, r7
 8005fc8:	4630      	mov	r0, r6
 8005fca:	47c0      	blx	r8
 8005fcc:	3001      	adds	r0, #1
 8005fce:	d022      	beq.n	8006016 <_printf_common+0xb6>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	68e5      	ldr	r5, [r4, #12]
 8005fd4:	f003 0306 	and.w	r3, r3, #6
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	bf18      	it	ne
 8005fdc:	2500      	movne	r5, #0
 8005fde:	f8d9 2000 	ldr.w	r2, [r9]
 8005fe2:	f04f 0900 	mov.w	r9, #0
 8005fe6:	bf08      	it	eq
 8005fe8:	1aad      	subeq	r5, r5, r2
 8005fea:	68a3      	ldr	r3, [r4, #8]
 8005fec:	6922      	ldr	r2, [r4, #16]
 8005fee:	bf08      	it	eq
 8005ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	bfc4      	itt	gt
 8005ff8:	1a9b      	subgt	r3, r3, r2
 8005ffa:	18ed      	addgt	r5, r5, r3
 8005ffc:	341a      	adds	r4, #26
 8005ffe:	454d      	cmp	r5, r9
 8006000:	d11b      	bne.n	800603a <_printf_common+0xda>
 8006002:	2000      	movs	r0, #0
 8006004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006008:	2301      	movs	r3, #1
 800600a:	4652      	mov	r2, sl
 800600c:	4639      	mov	r1, r7
 800600e:	4630      	mov	r0, r6
 8006010:	47c0      	blx	r8
 8006012:	3001      	adds	r0, #1
 8006014:	d103      	bne.n	800601e <_printf_common+0xbe>
 8006016:	f04f 30ff 	mov.w	r0, #4294967295
 800601a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800601e:	3501      	adds	r5, #1
 8006020:	e7c1      	b.n	8005fa6 <_printf_common+0x46>
 8006022:	2030      	movs	r0, #48	; 0x30
 8006024:	18e1      	adds	r1, r4, r3
 8006026:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006030:	4422      	add	r2, r4
 8006032:	3302      	adds	r3, #2
 8006034:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006038:	e7c3      	b.n	8005fc2 <_printf_common+0x62>
 800603a:	2301      	movs	r3, #1
 800603c:	4622      	mov	r2, r4
 800603e:	4639      	mov	r1, r7
 8006040:	4630      	mov	r0, r6
 8006042:	47c0      	blx	r8
 8006044:	3001      	adds	r0, #1
 8006046:	d0e6      	beq.n	8006016 <_printf_common+0xb6>
 8006048:	f109 0901 	add.w	r9, r9, #1
 800604c:	e7d7      	b.n	8005ffe <_printf_common+0x9e>
	...

08006050 <_printf_i>:
 8006050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006054:	4617      	mov	r7, r2
 8006056:	7e0a      	ldrb	r2, [r1, #24]
 8006058:	b085      	sub	sp, #20
 800605a:	2a6e      	cmp	r2, #110	; 0x6e
 800605c:	4698      	mov	r8, r3
 800605e:	4606      	mov	r6, r0
 8006060:	460c      	mov	r4, r1
 8006062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006064:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006068:	f000 80bc 	beq.w	80061e4 <_printf_i+0x194>
 800606c:	d81a      	bhi.n	80060a4 <_printf_i+0x54>
 800606e:	2a63      	cmp	r2, #99	; 0x63
 8006070:	d02e      	beq.n	80060d0 <_printf_i+0x80>
 8006072:	d80a      	bhi.n	800608a <_printf_i+0x3a>
 8006074:	2a00      	cmp	r2, #0
 8006076:	f000 80c8 	beq.w	800620a <_printf_i+0x1ba>
 800607a:	2a58      	cmp	r2, #88	; 0x58
 800607c:	f000 808a 	beq.w	8006194 <_printf_i+0x144>
 8006080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006084:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006088:	e02a      	b.n	80060e0 <_printf_i+0x90>
 800608a:	2a64      	cmp	r2, #100	; 0x64
 800608c:	d001      	beq.n	8006092 <_printf_i+0x42>
 800608e:	2a69      	cmp	r2, #105	; 0x69
 8006090:	d1f6      	bne.n	8006080 <_printf_i+0x30>
 8006092:	6821      	ldr	r1, [r4, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	f011 0f80 	tst.w	r1, #128	; 0x80
 800609a:	d023      	beq.n	80060e4 <_printf_i+0x94>
 800609c:	1d11      	adds	r1, r2, #4
 800609e:	6019      	str	r1, [r3, #0]
 80060a0:	6813      	ldr	r3, [r2, #0]
 80060a2:	e027      	b.n	80060f4 <_printf_i+0xa4>
 80060a4:	2a73      	cmp	r2, #115	; 0x73
 80060a6:	f000 80b4 	beq.w	8006212 <_printf_i+0x1c2>
 80060aa:	d808      	bhi.n	80060be <_printf_i+0x6e>
 80060ac:	2a6f      	cmp	r2, #111	; 0x6f
 80060ae:	d02a      	beq.n	8006106 <_printf_i+0xb6>
 80060b0:	2a70      	cmp	r2, #112	; 0x70
 80060b2:	d1e5      	bne.n	8006080 <_printf_i+0x30>
 80060b4:	680a      	ldr	r2, [r1, #0]
 80060b6:	f042 0220 	orr.w	r2, r2, #32
 80060ba:	600a      	str	r2, [r1, #0]
 80060bc:	e003      	b.n	80060c6 <_printf_i+0x76>
 80060be:	2a75      	cmp	r2, #117	; 0x75
 80060c0:	d021      	beq.n	8006106 <_printf_i+0xb6>
 80060c2:	2a78      	cmp	r2, #120	; 0x78
 80060c4:	d1dc      	bne.n	8006080 <_printf_i+0x30>
 80060c6:	2278      	movs	r2, #120	; 0x78
 80060c8:	496f      	ldr	r1, [pc, #444]	; (8006288 <_printf_i+0x238>)
 80060ca:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80060ce:	e064      	b.n	800619a <_printf_i+0x14a>
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80060d6:	1d11      	adds	r1, r2, #4
 80060d8:	6019      	str	r1, [r3, #0]
 80060da:	6813      	ldr	r3, [r2, #0]
 80060dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060e0:	2301      	movs	r3, #1
 80060e2:	e0a3      	b.n	800622c <_printf_i+0x1dc>
 80060e4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80060e8:	f102 0104 	add.w	r1, r2, #4
 80060ec:	6019      	str	r1, [r3, #0]
 80060ee:	d0d7      	beq.n	80060a0 <_printf_i+0x50>
 80060f0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	da03      	bge.n	8006100 <_printf_i+0xb0>
 80060f8:	222d      	movs	r2, #45	; 0x2d
 80060fa:	425b      	negs	r3, r3
 80060fc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006100:	4962      	ldr	r1, [pc, #392]	; (800628c <_printf_i+0x23c>)
 8006102:	220a      	movs	r2, #10
 8006104:	e017      	b.n	8006136 <_printf_i+0xe6>
 8006106:	6820      	ldr	r0, [r4, #0]
 8006108:	6819      	ldr	r1, [r3, #0]
 800610a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800610e:	d003      	beq.n	8006118 <_printf_i+0xc8>
 8006110:	1d08      	adds	r0, r1, #4
 8006112:	6018      	str	r0, [r3, #0]
 8006114:	680b      	ldr	r3, [r1, #0]
 8006116:	e006      	b.n	8006126 <_printf_i+0xd6>
 8006118:	f010 0f40 	tst.w	r0, #64	; 0x40
 800611c:	f101 0004 	add.w	r0, r1, #4
 8006120:	6018      	str	r0, [r3, #0]
 8006122:	d0f7      	beq.n	8006114 <_printf_i+0xc4>
 8006124:	880b      	ldrh	r3, [r1, #0]
 8006126:	2a6f      	cmp	r2, #111	; 0x6f
 8006128:	bf14      	ite	ne
 800612a:	220a      	movne	r2, #10
 800612c:	2208      	moveq	r2, #8
 800612e:	4957      	ldr	r1, [pc, #348]	; (800628c <_printf_i+0x23c>)
 8006130:	2000      	movs	r0, #0
 8006132:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006136:	6865      	ldr	r5, [r4, #4]
 8006138:	2d00      	cmp	r5, #0
 800613a:	60a5      	str	r5, [r4, #8]
 800613c:	f2c0 809c 	blt.w	8006278 <_printf_i+0x228>
 8006140:	6820      	ldr	r0, [r4, #0]
 8006142:	f020 0004 	bic.w	r0, r0, #4
 8006146:	6020      	str	r0, [r4, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d13f      	bne.n	80061cc <_printf_i+0x17c>
 800614c:	2d00      	cmp	r5, #0
 800614e:	f040 8095 	bne.w	800627c <_printf_i+0x22c>
 8006152:	4675      	mov	r5, lr
 8006154:	2a08      	cmp	r2, #8
 8006156:	d10b      	bne.n	8006170 <_printf_i+0x120>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	07da      	lsls	r2, r3, #31
 800615c:	d508      	bpl.n	8006170 <_printf_i+0x120>
 800615e:	6923      	ldr	r3, [r4, #16]
 8006160:	6862      	ldr	r2, [r4, #4]
 8006162:	429a      	cmp	r2, r3
 8006164:	bfde      	ittt	le
 8006166:	2330      	movle	r3, #48	; 0x30
 8006168:	f805 3c01 	strble.w	r3, [r5, #-1]
 800616c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006170:	ebae 0305 	sub.w	r3, lr, r5
 8006174:	6123      	str	r3, [r4, #16]
 8006176:	f8cd 8000 	str.w	r8, [sp]
 800617a:	463b      	mov	r3, r7
 800617c:	aa03      	add	r2, sp, #12
 800617e:	4621      	mov	r1, r4
 8006180:	4630      	mov	r0, r6
 8006182:	f7ff feed 	bl	8005f60 <_printf_common>
 8006186:	3001      	adds	r0, #1
 8006188:	d155      	bne.n	8006236 <_printf_i+0x1e6>
 800618a:	f04f 30ff 	mov.w	r0, #4294967295
 800618e:	b005      	add	sp, #20
 8006190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006194:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006198:	493c      	ldr	r1, [pc, #240]	; (800628c <_printf_i+0x23c>)
 800619a:	6822      	ldr	r2, [r4, #0]
 800619c:	6818      	ldr	r0, [r3, #0]
 800619e:	f012 0f80 	tst.w	r2, #128	; 0x80
 80061a2:	f100 0504 	add.w	r5, r0, #4
 80061a6:	601d      	str	r5, [r3, #0]
 80061a8:	d001      	beq.n	80061ae <_printf_i+0x15e>
 80061aa:	6803      	ldr	r3, [r0, #0]
 80061ac:	e002      	b.n	80061b4 <_printf_i+0x164>
 80061ae:	0655      	lsls	r5, r2, #25
 80061b0:	d5fb      	bpl.n	80061aa <_printf_i+0x15a>
 80061b2:	8803      	ldrh	r3, [r0, #0]
 80061b4:	07d0      	lsls	r0, r2, #31
 80061b6:	bf44      	itt	mi
 80061b8:	f042 0220 	orrmi.w	r2, r2, #32
 80061bc:	6022      	strmi	r2, [r4, #0]
 80061be:	b91b      	cbnz	r3, 80061c8 <_printf_i+0x178>
 80061c0:	6822      	ldr	r2, [r4, #0]
 80061c2:	f022 0220 	bic.w	r2, r2, #32
 80061c6:	6022      	str	r2, [r4, #0]
 80061c8:	2210      	movs	r2, #16
 80061ca:	e7b1      	b.n	8006130 <_printf_i+0xe0>
 80061cc:	4675      	mov	r5, lr
 80061ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80061d2:	fb02 3310 	mls	r3, r2, r0, r3
 80061d6:	5ccb      	ldrb	r3, [r1, r3]
 80061d8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80061dc:	4603      	mov	r3, r0
 80061de:	2800      	cmp	r0, #0
 80061e0:	d1f5      	bne.n	80061ce <_printf_i+0x17e>
 80061e2:	e7b7      	b.n	8006154 <_printf_i+0x104>
 80061e4:	6808      	ldr	r0, [r1, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80061ec:	6949      	ldr	r1, [r1, #20]
 80061ee:	d004      	beq.n	80061fa <_printf_i+0x1aa>
 80061f0:	1d10      	adds	r0, r2, #4
 80061f2:	6018      	str	r0, [r3, #0]
 80061f4:	6813      	ldr	r3, [r2, #0]
 80061f6:	6019      	str	r1, [r3, #0]
 80061f8:	e007      	b.n	800620a <_printf_i+0x1ba>
 80061fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061fe:	f102 0004 	add.w	r0, r2, #4
 8006202:	6018      	str	r0, [r3, #0]
 8006204:	6813      	ldr	r3, [r2, #0]
 8006206:	d0f6      	beq.n	80061f6 <_printf_i+0x1a6>
 8006208:	8019      	strh	r1, [r3, #0]
 800620a:	2300      	movs	r3, #0
 800620c:	4675      	mov	r5, lr
 800620e:	6123      	str	r3, [r4, #16]
 8006210:	e7b1      	b.n	8006176 <_printf_i+0x126>
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	1d11      	adds	r1, r2, #4
 8006216:	6019      	str	r1, [r3, #0]
 8006218:	6815      	ldr	r5, [r2, #0]
 800621a:	2100      	movs	r1, #0
 800621c:	6862      	ldr	r2, [r4, #4]
 800621e:	4628      	mov	r0, r5
 8006220:	f000 f865 	bl	80062ee <memchr>
 8006224:	b108      	cbz	r0, 800622a <_printf_i+0x1da>
 8006226:	1b40      	subs	r0, r0, r5
 8006228:	6060      	str	r0, [r4, #4]
 800622a:	6863      	ldr	r3, [r4, #4]
 800622c:	6123      	str	r3, [r4, #16]
 800622e:	2300      	movs	r3, #0
 8006230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006234:	e79f      	b.n	8006176 <_printf_i+0x126>
 8006236:	6923      	ldr	r3, [r4, #16]
 8006238:	462a      	mov	r2, r5
 800623a:	4639      	mov	r1, r7
 800623c:	4630      	mov	r0, r6
 800623e:	47c0      	blx	r8
 8006240:	3001      	adds	r0, #1
 8006242:	d0a2      	beq.n	800618a <_printf_i+0x13a>
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	079b      	lsls	r3, r3, #30
 8006248:	d507      	bpl.n	800625a <_printf_i+0x20a>
 800624a:	2500      	movs	r5, #0
 800624c:	f104 0919 	add.w	r9, r4, #25
 8006250:	68e3      	ldr	r3, [r4, #12]
 8006252:	9a03      	ldr	r2, [sp, #12]
 8006254:	1a9b      	subs	r3, r3, r2
 8006256:	429d      	cmp	r5, r3
 8006258:	db05      	blt.n	8006266 <_printf_i+0x216>
 800625a:	68e0      	ldr	r0, [r4, #12]
 800625c:	9b03      	ldr	r3, [sp, #12]
 800625e:	4298      	cmp	r0, r3
 8006260:	bfb8      	it	lt
 8006262:	4618      	movlt	r0, r3
 8006264:	e793      	b.n	800618e <_printf_i+0x13e>
 8006266:	2301      	movs	r3, #1
 8006268:	464a      	mov	r2, r9
 800626a:	4639      	mov	r1, r7
 800626c:	4630      	mov	r0, r6
 800626e:	47c0      	blx	r8
 8006270:	3001      	adds	r0, #1
 8006272:	d08a      	beq.n	800618a <_printf_i+0x13a>
 8006274:	3501      	adds	r5, #1
 8006276:	e7eb      	b.n	8006250 <_printf_i+0x200>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1a7      	bne.n	80061cc <_printf_i+0x17c>
 800627c:	780b      	ldrb	r3, [r1, #0]
 800627e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006282:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006286:	e765      	b.n	8006154 <_printf_i+0x104>
 8006288:	0800660e 	.word	0x0800660e
 800628c:	080065fd 	.word	0x080065fd

08006290 <_sbrk_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	2300      	movs	r3, #0
 8006294:	4c05      	ldr	r4, [pc, #20]	; (80062ac <_sbrk_r+0x1c>)
 8006296:	4605      	mov	r5, r0
 8006298:	4608      	mov	r0, r1
 800629a:	6023      	str	r3, [r4, #0]
 800629c:	f000 f880 	bl	80063a0 <_sbrk>
 80062a0:	1c43      	adds	r3, r0, #1
 80062a2:	d102      	bne.n	80062aa <_sbrk_r+0x1a>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	b103      	cbz	r3, 80062aa <_sbrk_r+0x1a>
 80062a8:	602b      	str	r3, [r5, #0]
 80062aa:	bd38      	pop	{r3, r4, r5, pc}
 80062ac:	20000500 	.word	0x20000500

080062b0 <strncmp>:
 80062b0:	b510      	push	{r4, lr}
 80062b2:	b16a      	cbz	r2, 80062d0 <strncmp+0x20>
 80062b4:	3901      	subs	r1, #1
 80062b6:	1884      	adds	r4, r0, r2
 80062b8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80062bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d103      	bne.n	80062cc <strncmp+0x1c>
 80062c4:	42a0      	cmp	r0, r4
 80062c6:	d001      	beq.n	80062cc <strncmp+0x1c>
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1f5      	bne.n	80062b8 <strncmp+0x8>
 80062cc:	1a98      	subs	r0, r3, r2
 80062ce:	bd10      	pop	{r4, pc}
 80062d0:	4610      	mov	r0, r2
 80062d2:	bd10      	pop	{r4, pc}

080062d4 <__ascii_wctomb>:
 80062d4:	b149      	cbz	r1, 80062ea <__ascii_wctomb+0x16>
 80062d6:	2aff      	cmp	r2, #255	; 0xff
 80062d8:	bf8b      	itete	hi
 80062da:	238a      	movhi	r3, #138	; 0x8a
 80062dc:	700a      	strbls	r2, [r1, #0]
 80062de:	6003      	strhi	r3, [r0, #0]
 80062e0:	2001      	movls	r0, #1
 80062e2:	bf88      	it	hi
 80062e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80062e8:	4770      	bx	lr
 80062ea:	4608      	mov	r0, r1
 80062ec:	4770      	bx	lr

080062ee <memchr>:
 80062ee:	b510      	push	{r4, lr}
 80062f0:	b2c9      	uxtb	r1, r1
 80062f2:	4402      	add	r2, r0
 80062f4:	4290      	cmp	r0, r2
 80062f6:	4603      	mov	r3, r0
 80062f8:	d101      	bne.n	80062fe <memchr+0x10>
 80062fa:	2000      	movs	r0, #0
 80062fc:	bd10      	pop	{r4, pc}
 80062fe:	781c      	ldrb	r4, [r3, #0]
 8006300:	3001      	adds	r0, #1
 8006302:	428c      	cmp	r4, r1
 8006304:	d1f6      	bne.n	80062f4 <memchr+0x6>
 8006306:	4618      	mov	r0, r3
 8006308:	bd10      	pop	{r4, pc}

0800630a <memmove>:
 800630a:	4288      	cmp	r0, r1
 800630c:	b510      	push	{r4, lr}
 800630e:	eb01 0302 	add.w	r3, r1, r2
 8006312:	d803      	bhi.n	800631c <memmove+0x12>
 8006314:	1e42      	subs	r2, r0, #1
 8006316:	4299      	cmp	r1, r3
 8006318:	d10c      	bne.n	8006334 <memmove+0x2a>
 800631a:	bd10      	pop	{r4, pc}
 800631c:	4298      	cmp	r0, r3
 800631e:	d2f9      	bcs.n	8006314 <memmove+0xa>
 8006320:	1881      	adds	r1, r0, r2
 8006322:	1ad2      	subs	r2, r2, r3
 8006324:	42d3      	cmn	r3, r2
 8006326:	d100      	bne.n	800632a <memmove+0x20>
 8006328:	bd10      	pop	{r4, pc}
 800632a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800632e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006332:	e7f7      	b.n	8006324 <memmove+0x1a>
 8006334:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006338:	f802 4f01 	strb.w	r4, [r2, #1]!
 800633c:	e7eb      	b.n	8006316 <memmove+0xc>

0800633e <__malloc_lock>:
 800633e:	4770      	bx	lr

08006340 <__malloc_unlock>:
 8006340:	4770      	bx	lr

08006342 <_realloc_r>:
 8006342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006344:	4607      	mov	r7, r0
 8006346:	4614      	mov	r4, r2
 8006348:	460e      	mov	r6, r1
 800634a:	b921      	cbnz	r1, 8006356 <_realloc_r+0x14>
 800634c:	4611      	mov	r1, r2
 800634e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006352:	f7ff bc57 	b.w	8005c04 <_malloc_r>
 8006356:	b922      	cbnz	r2, 8006362 <_realloc_r+0x20>
 8006358:	f7ff fc08 	bl	8005b6c <_free_r>
 800635c:	4625      	mov	r5, r4
 800635e:	4628      	mov	r0, r5
 8006360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006362:	f000 f814 	bl	800638e <_malloc_usable_size_r>
 8006366:	4284      	cmp	r4, r0
 8006368:	d90f      	bls.n	800638a <_realloc_r+0x48>
 800636a:	4621      	mov	r1, r4
 800636c:	4638      	mov	r0, r7
 800636e:	f7ff fc49 	bl	8005c04 <_malloc_r>
 8006372:	4605      	mov	r5, r0
 8006374:	2800      	cmp	r0, #0
 8006376:	d0f2      	beq.n	800635e <_realloc_r+0x1c>
 8006378:	4631      	mov	r1, r6
 800637a:	4622      	mov	r2, r4
 800637c:	f7fe fff6 	bl	800536c <memcpy>
 8006380:	4631      	mov	r1, r6
 8006382:	4638      	mov	r0, r7
 8006384:	f7ff fbf2 	bl	8005b6c <_free_r>
 8006388:	e7e9      	b.n	800635e <_realloc_r+0x1c>
 800638a:	4635      	mov	r5, r6
 800638c:	e7e7      	b.n	800635e <_realloc_r+0x1c>

0800638e <_malloc_usable_size_r>:
 800638e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006392:	2800      	cmp	r0, #0
 8006394:	f1a0 0004 	sub.w	r0, r0, #4
 8006398:	bfbc      	itt	lt
 800639a:	580b      	ldrlt	r3, [r1, r0]
 800639c:	18c0      	addlt	r0, r0, r3
 800639e:	4770      	bx	lr

080063a0 <_sbrk>:
 80063a0:	4b04      	ldr	r3, [pc, #16]	; (80063b4 <_sbrk+0x14>)
 80063a2:	4602      	mov	r2, r0
 80063a4:	6819      	ldr	r1, [r3, #0]
 80063a6:	b909      	cbnz	r1, 80063ac <_sbrk+0xc>
 80063a8:	4903      	ldr	r1, [pc, #12]	; (80063b8 <_sbrk+0x18>)
 80063aa:	6019      	str	r1, [r3, #0]
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	4402      	add	r2, r0
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	4770      	bx	lr
 80063b4:	20000210 	.word	0x20000210
 80063b8:	20000504 	.word	0x20000504

080063bc <_init>:
 80063bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063be:	bf00      	nop
 80063c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c2:	bc08      	pop	{r3}
 80063c4:	469e      	mov	lr, r3
 80063c6:	4770      	bx	lr

080063c8 <_fini>:
 80063c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ca:	bf00      	nop
 80063cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ce:	bc08      	pop	{r3}
 80063d0:	469e      	mov	lr, r3
 80063d2:	4770      	bx	lr
