
SysTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067e0  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08006920  08006920  00016920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006c84  08006c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d4  20000000  08006c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000174c  200001d8  08006e5c  000201d8  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20001924  08006e5c  00021924  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019659  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003290  00000000  00000000  00039856  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000643d  00000000  00000000  0003cae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008d8  00000000  00000000  00042f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e38  00000000  00000000  00043800  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006308  00000000  00000000  00044638  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003355  00000000  00000000  0004a940  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004dc95  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000026b0  00000000  00000000  0004dd14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d8 	.word	0x200001d8
 800015c:	00000000 	.word	0x00000000
 8000160:	08006908 	.word	0x08006908

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001dc 	.word	0x200001dc
 800017c:	08006908 	.word	0x08006908

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f092 0f00 	teq	r2, #0
 800047a:	bf14      	ite	ne
 800047c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e720      	b.n	80002d4 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aedc 	beq.w	8000282 <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6c1      	b.n	8000282 <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	; 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c20:	f1a2 0201 	sub.w	r2, r2, #1
 8000c24:	d1ed      	bne.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fmul>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d06f      	beq.n	8000e78 <__aeabi_fmul+0xf8>
 8000d98:	441a      	add	r2, r3
 8000d9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9e:	0240      	lsls	r0, r0, #9
 8000da0:	bf18      	it	ne
 8000da2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da6:	d01e      	beq.n	8000de6 <__aeabi_fmul+0x66>
 8000da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db4:	fba0 3101 	umull	r3, r1, r0, r1
 8000db8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc0:	bf3e      	ittt	cc
 8000dc2:	0049      	lslcc	r1, r1, #1
 8000dc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc8:	005b      	lslcc	r3, r3, #1
 8000dca:	ea40 0001 	orr.w	r0, r0, r1
 8000dce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd2:	2afd      	cmp	r2, #253	; 0xfd
 8000dd4:	d81d      	bhi.n	8000e12 <__aeabi_fmul+0x92>
 8000dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dde:	bf08      	it	eq
 8000de0:	f020 0001 	biceq.w	r0, r0, #1
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dee:	bf08      	it	eq
 8000df0:	0249      	lsleq	r1, r1, #9
 8000df2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfa:	3a7f      	subs	r2, #127	; 0x7f
 8000dfc:	bfc2      	ittt	gt
 8000dfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e06:	4770      	bxgt	lr
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	3a01      	subs	r2, #1
 8000e12:	dc5d      	bgt.n	8000ed0 <__aeabi_fmul+0x150>
 8000e14:	f112 0f19 	cmn.w	r2, #25
 8000e18:	bfdc      	itt	le
 8000e1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1e:	4770      	bxle	lr
 8000e20:	f1c2 0200 	rsb	r2, r2, #0
 8000e24:	0041      	lsls	r1, r0, #1
 8000e26:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2a:	f1c2 0220 	rsb	r2, r2, #32
 8000e2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e36:	f140 0000 	adc.w	r0, r0, #0
 8000e3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3e:	bf08      	it	eq
 8000e40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e44:	4770      	bx	lr
 8000e46:	f092 0f00 	teq	r2, #0
 8000e4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0040      	lsleq	r0, r0, #1
 8000e52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e56:	3a01      	subeq	r2, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xce>
 8000e5a:	ea40 000c 	orr.w	r0, r0, ip
 8000e5e:	f093 0f00 	teq	r3, #0
 8000e62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0049      	lsleq	r1, r1, #1
 8000e6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6e:	3b01      	subeq	r3, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xe6>
 8000e72:	ea41 010c 	orr.w	r1, r1, ip
 8000e76:	e78f      	b.n	8000d98 <__aeabi_fmul+0x18>
 8000e78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	bf18      	it	ne
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d00a      	beq.n	8000e9e <__aeabi_fmul+0x11e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1d8      	bne.n	8000e46 <__aeabi_fmul+0xc6>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	bf17      	itett	ne
 8000ea4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea8:	4608      	moveq	r0, r1
 8000eaa:	f091 0f00 	teqne	r1, #0
 8000eae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb2:	d014      	beq.n	8000ede <__aeabi_fmul+0x15e>
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	d101      	bne.n	8000ebe <__aeabi_fmul+0x13e>
 8000eba:	0242      	lsls	r2, r0, #9
 8000ebc:	d10f      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ebe:	ea93 0f0c 	teq	r3, ip
 8000ec2:	d103      	bne.n	8000ecc <__aeabi_fmul+0x14c>
 8000ec4:	024b      	lsls	r3, r1, #9
 8000ec6:	bf18      	it	ne
 8000ec8:	4608      	movne	r0, r1
 8000eca:	d108      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000edc:	4770      	bx	lr
 8000ede:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee6:	4770      	bx	lr

08000ee8 <__aeabi_fdiv>:
 8000ee8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef0:	bf1e      	ittt	ne
 8000ef2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef6:	ea92 0f0c 	teqne	r2, ip
 8000efa:	ea93 0f0c 	teqne	r3, ip
 8000efe:	d069      	beq.n	8000fd4 <__aeabi_fdiv+0xec>
 8000f00:	eba2 0203 	sub.w	r2, r2, r3
 8000f04:	ea80 0c01 	eor.w	ip, r0, r1
 8000f08:	0249      	lsls	r1, r1, #9
 8000f0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0e:	d037      	beq.n	8000f80 <__aeabi_fdiv+0x98>
 8000f10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f20:	428b      	cmp	r3, r1
 8000f22:	bf38      	it	cc
 8000f24:	005b      	lslcc	r3, r3, #1
 8000f26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	bf24      	itt	cs
 8000f32:	1a5b      	subcs	r3, r3, r1
 8000f34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4a:	bf24      	itt	cs
 8000f4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f58:	bf24      	itt	cs
 8000f5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	bf18      	it	ne
 8000f66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6a:	d1e0      	bne.n	8000f2e <__aeabi_fdiv+0x46>
 8000f6c:	2afd      	cmp	r2, #253	; 0xfd
 8000f6e:	f63f af50 	bhi.w	8000e12 <__aeabi_fmul+0x92>
 8000f72:	428b      	cmp	r3, r1
 8000f74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f78:	bf08      	it	eq
 8000f7a:	f020 0001 	biceq.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f88:	327f      	adds	r2, #127	; 0x7f
 8000f8a:	bfc2      	ittt	gt
 8000f8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f94:	4770      	bxgt	lr
 8000f96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	3a01      	subs	r2, #1
 8000fa0:	e737      	b.n	8000e12 <__aeabi_fmul+0x92>
 8000fa2:	f092 0f00 	teq	r2, #0
 8000fa6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0040      	lsleq	r0, r0, #1
 8000fae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb2:	3a01      	subeq	r2, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xc2>
 8000fb6:	ea40 000c 	orr.w	r0, r0, ip
 8000fba:	f093 0f00 	teq	r3, #0
 8000fbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0049      	lsleq	r1, r1, #1
 8000fc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fca:	3b01      	subeq	r3, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xda>
 8000fce:	ea41 010c 	orr.w	r1, r1, ip
 8000fd2:	e795      	b.n	8000f00 <__aeabi_fdiv+0x18>
 8000fd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd8:	ea92 0f0c 	teq	r2, ip
 8000fdc:	d108      	bne.n	8000ff0 <__aeabi_fdiv+0x108>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	f47f af7d 	bne.w	8000ede <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	f47f af70 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8000fec:	4608      	mov	r0, r1
 8000fee:	e776      	b.n	8000ede <__aeabi_fmul+0x15e>
 8000ff0:	ea93 0f0c 	teq	r3, ip
 8000ff4:	d104      	bne.n	8001000 <__aeabi_fdiv+0x118>
 8000ff6:	024b      	lsls	r3, r1, #9
 8000ff8:	f43f af4c 	beq.w	8000e94 <__aeabi_fmul+0x114>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e76e      	b.n	8000ede <__aeabi_fmul+0x15e>
 8001000:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001004:	bf18      	it	ne
 8001006:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100a:	d1ca      	bne.n	8000fa2 <__aeabi_fdiv+0xba>
 800100c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001010:	f47f af5c 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8001014:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001018:	f47f af3c 	bne.w	8000e94 <__aeabi_fmul+0x114>
 800101c:	e75f      	b.n	8000ede <__aeabi_fmul+0x15e>
 800101e:	bf00      	nop

08001020 <__gesf2>:
 8001020:	f04f 3cff 	mov.w	ip, #4294967295
 8001024:	e006      	b.n	8001034 <__cmpsf2+0x4>
 8001026:	bf00      	nop

08001028 <__lesf2>:
 8001028:	f04f 0c01 	mov.w	ip, #1
 800102c:	e002      	b.n	8001034 <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__cmpsf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001040:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001044:	bf18      	it	ne
 8001046:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104a:	d011      	beq.n	8001070 <__cmpsf2+0x40>
 800104c:	b001      	add	sp, #4
 800104e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001052:	bf18      	it	ne
 8001054:	ea90 0f01 	teqne	r0, r1
 8001058:	bf58      	it	pl
 800105a:	ebb2 0003 	subspl.w	r0, r2, r3
 800105e:	bf88      	it	hi
 8001060:	17c8      	asrhi	r0, r1, #31
 8001062:	bf38      	it	cc
 8001064:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001068:	bf18      	it	ne
 800106a:	f040 0001 	orrne.w	r0, r0, #1
 800106e:	4770      	bx	lr
 8001070:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001074:	d102      	bne.n	800107c <__cmpsf2+0x4c>
 8001076:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107a:	d105      	bne.n	8001088 <__cmpsf2+0x58>
 800107c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001080:	d1e4      	bne.n	800104c <__cmpsf2+0x1c>
 8001082:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001086:	d0e1      	beq.n	800104c <__cmpsf2+0x1c>
 8001088:	f85d 0b04 	ldr.w	r0, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <__aeabi_cfrcmple>:
 8001090:	4684      	mov	ip, r0
 8001092:	4608      	mov	r0, r1
 8001094:	4661      	mov	r1, ip
 8001096:	e7ff      	b.n	8001098 <__aeabi_cfcmpeq>

08001098 <__aeabi_cfcmpeq>:
 8001098:	b50f      	push	{r0, r1, r2, r3, lr}
 800109a:	f7ff ffc9 	bl	8001030 <__cmpsf2>
 800109e:	2800      	cmp	r0, #0
 80010a0:	bf48      	it	mi
 80010a2:	f110 0f00 	cmnmi.w	r0, #0
 80010a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a8 <__aeabi_fcmpeq>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff fff4 	bl	8001098 <__aeabi_cfcmpeq>
 80010b0:	bf0c      	ite	eq
 80010b2:	2001      	moveq	r0, #1
 80010b4:	2000      	movne	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmplt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffea 	bl	8001098 <__aeabi_cfcmpeq>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmple>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffe0 	bl	8001098 <__aeabi_cfcmpeq>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpge>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffd2 	bl	8001090 <__aeabi_cfrcmple>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpgt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffc8 	bl	8001090 <__aeabi_cfrcmple>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_f2iz>:
 800110c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001114:	d30f      	bcc.n	8001136 <__aeabi_f2iz+0x2a>
 8001116:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d90d      	bls.n	800113c <__aeabi_f2iz+0x30>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001128:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	bf18      	it	ne
 8001132:	4240      	negne	r0, r0
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr
 800113c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001140:	d101      	bne.n	8001146 <__aeabi_f2iz+0x3a>
 8001142:	0242      	lsls	r2, r0, #9
 8001144:	d105      	bne.n	8001152 <__aeabi_f2iz+0x46>
 8001146:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114a:	bf08      	it	eq
 800114c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr

08001158 <__aeabi_f2uiz>:
 8001158:	0042      	lsls	r2, r0, #1
 800115a:	d20e      	bcs.n	800117a <__aeabi_f2uiz+0x22>
 800115c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001160:	d30b      	bcc.n	800117a <__aeabi_f2uiz+0x22>
 8001162:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001166:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116a:	d409      	bmi.n	8001180 <__aeabi_f2uiz+0x28>
 800116c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001170:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001174:	fa23 f002 	lsr.w	r0, r3, r2
 8001178:	4770      	bx	lr
 800117a:	f04f 0000 	mov.w	r0, #0
 800117e:	4770      	bx	lr
 8001180:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001184:	d101      	bne.n	800118a <__aeabi_f2uiz+0x32>
 8001186:	0242      	lsls	r2, r0, #9
 8001188:	d102      	bne.n	8001190 <__aeabi_f2uiz+0x38>
 800118a:	f04f 30ff 	mov.w	r0, #4294967295
 800118e:	4770      	bx	lr
 8001190:	f04f 0000 	mov.w	r0, #0
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop

08001198 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_InitTick+0x24>)
{
 800119a:	b510      	push	{r4, lr}
 800119c:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80011a8:	f000 f876 	bl	8001298 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	4621      	mov	r1, r4
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f000 f830 	bl	8001218 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80011b8:	2000      	movs	r0, #0
 80011ba:	bd10      	pop	{r4, pc}
 80011bc:	20000000 	.word	0x20000000

080011c0 <HAL_Init>:
{
 80011c0:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c2:	2003      	movs	r0, #3
 80011c4:	f000 f816 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff ffe5 	bl	8001198 <HAL_InitTick>
  HAL_MspInit();
 80011ce:	f002 fd27 	bl	8003c20 <HAL_MspInit>
}
 80011d2:	2000      	movs	r0, #0
 80011d4:	bd08      	pop	{r3, pc}
	...

080011d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80011d8:	4a02      	ldr	r2, [pc, #8]	; (80011e4 <HAL_IncTick+0xc>)
 80011da:	6813      	ldr	r3, [r2, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000214 	.word	0x20000214

080011e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011e8:	4b01      	ldr	r3, [pc, #4]	; (80011f0 <HAL_GetTick+0x8>)
 80011ea:	6818      	ldr	r0, [r3, #0]
}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000214 	.word	0x20000214

080011f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80011f6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80011fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001202:	041b      	lsls	r3, r3, #16
 8001204:	0c1b      	lsrs	r3, r3, #16
 8001206:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800120a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800120e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001210:	60d3      	str	r3, [r2, #12]
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121a:	b530      	push	{r4, r5, lr}
 800121c:	68dc      	ldr	r4, [r3, #12]
 800121e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001222:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	2b04      	cmp	r3, #4
 800122a:	bf28      	it	cs
 800122c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001234:	bf98      	it	ls
 8001236:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	fa05 f303 	lsl.w	r3, r5, r3
 800123c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001240:	bf88      	it	hi
 8001242:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4019      	ands	r1, r3
 8001246:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	fa05 f404 	lsl.w	r4, r5, r4
 800124c:	3c01      	subs	r4, #1
 800124e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001250:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001252:	ea42 0201 	orr.w	r2, r2, r1
 8001256:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	bfaf      	iteee	ge
 800125c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	4b06      	ldrlt	r3, [pc, #24]	; (800127c <HAL_NVIC_SetPriority+0x64>)
 8001262:	f000 000f 	andlt.w	r0, r0, #15
 8001266:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	bfa5      	ittet	ge
 800126a:	b2d2      	uxtbge	r2, r2
 800126c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001276:	bd30      	pop	{r4, r5, pc}
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	e000ed14 	.word	0xe000ed14

08001280 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001280:	2301      	movs	r3, #1
 8001282:	0942      	lsrs	r2, r0, #5
 8001284:	f000 001f 	and.w	r0, r0, #31
 8001288:	fa03 f000 	lsl.w	r0, r3, r0
 800128c:	4b01      	ldr	r3, [pc, #4]	; (8001294 <HAL_NVIC_EnableIRQ+0x14>)
 800128e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100

08001298 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	3801      	subs	r0, #1
 800129a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800129e:	d20a      	bcs.n	80012b6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000e010 	.word	0xe000e010
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80012c6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	bf0c      	ite	eq
 80012cc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80012d0:	f022 0204 	bicne.w	r2, r2, #4
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	4770      	bx	lr
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80012dc:	4770      	bx	lr

080012de <HAL_SYSTICK_IRQHandler>:
{
 80012de:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80012e0:	f7ff fffc 	bl	80012dc <HAL_SYSTICK_Callback>
 80012e4:	bd08      	pop	{r3, pc}
	...

080012e8 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 80012e8:	2300      	movs	r3, #0
{ 
 80012ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ee:	4a62      	ldr	r2, [pc, #392]	; (8001478 <HAL_GPIO_Init+0x190>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80012f0:	f8d1 8000 	ldr.w	r8, [r1]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f4:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8001480 <HAL_GPIO_Init+0x198>
{ 
 80012f8:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80012fa:	fa38 f403 	lsrs.w	r4, r8, r3
 80012fe:	d102      	bne.n	8001306 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  } 
}
 8001300:	b005      	add	sp, #20
 8001302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001306:	2401      	movs	r4, #1
 8001308:	409c      	lsls	r4, r3
    if(iocurrent)
 800130a:	ea18 0604 	ands.w	r6, r8, r4
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800130e:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 8001310:	f000 80a7 	beq.w	8001462 <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001314:	684c      	ldr	r4, [r1, #4]
 8001316:	f024 0a10 	bic.w	sl, r4, #16
 800131a:	f1ba 0f02 	cmp.w	sl, #2
 800131e:	d116      	bne.n	800134e <HAL_GPIO_Init+0x66>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001320:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 8001324:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001328:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800132c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001330:	f8dc 5020 	ldr.w	r5, [ip, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001334:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001338:	fa0e fe0b 	lsl.w	lr, lr, fp
 800133c:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001340:	690d      	ldr	r5, [r1, #16]
 8001342:	fa05 f50b 	lsl.w	r5, r5, fp
 8001346:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 800134a:	f8cc 5020 	str.w	r5, [ip, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800134e:	2503      	movs	r5, #3
 8001350:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001354:	fa05 f50c 	lsl.w	r5, r5, ip
 8001358:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 800135a:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800135e:	f004 0e03 	and.w	lr, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001362:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001366:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800136a:	f10a 3aff 	add.w	sl, sl, #4294967295
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800136e:	ea4e 0e0b 	orr.w	lr, lr, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001372:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8001376:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800137a:	d816      	bhi.n	80013aa <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR; 
 800137c:	f8d0 e008 	ldr.w	lr, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001380:	68cf      	ldr	r7, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001382:	ea05 0e0e 	and.w	lr, r5, lr
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001386:	fa07 fa0c 	lsl.w	sl, r7, ip
 800138a:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800138e:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8001392:	f8d0 e004 	ldr.w	lr, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001396:	9f01      	ldr	r7, [sp, #4]
 8001398:	ea2e 0707 	bic.w	r7, lr, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800139c:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80013a0:	fa0e fe03 	lsl.w	lr, lr, r3
 80013a4:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80013a8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80013aa:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80013ac:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80013ae:	688f      	ldr	r7, [r1, #8]
 80013b0:	fa07 f70c 	lsl.w	r7, r7, ip
 80013b4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80013b6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80013b8:	00e5      	lsls	r5, r4, #3
 80013ba:	d552      	bpl.n	8001462 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80013bc:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c0:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80013c4:	f023 0703 	bic.w	r7, r3, #3
 80013c8:	f045 0501 	orr.w	r5, r5, #1
 80013cc:	f8c9 5020 	str.w	r5, [r9, #32]
 80013d0:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80013d4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80013d8:	f005 0501 	and.w	r5, r5, #1
 80013dc:	9503      	str	r5, [sp, #12]
 80013de:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80013e2:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	9d03      	ldr	r5, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80013e8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 80013ec:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80013ee:	fa0e fe0c 	lsl.w	lr, lr, ip
 80013f2:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013f6:	4d21      	ldr	r5, [pc, #132]	; (800147c <HAL_GPIO_Init+0x194>)
 80013f8:	42a8      	cmp	r0, r5
 80013fa:	d034      	beq.n	8001466 <HAL_GPIO_Init+0x17e>
 80013fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001400:	42a8      	cmp	r0, r5
 8001402:	d032      	beq.n	800146a <HAL_GPIO_Init+0x182>
 8001404:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001408:	42a8      	cmp	r0, r5
 800140a:	d030      	beq.n	800146e <HAL_GPIO_Init+0x186>
 800140c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001410:	42a8      	cmp	r0, r5
 8001412:	d02e      	beq.n	8001472 <HAL_GPIO_Init+0x18a>
 8001414:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001418:	42a8      	cmp	r0, r5
 800141a:	bf14      	ite	ne
 800141c:	2505      	movne	r5, #5
 800141e:	2504      	moveq	r5, #4
 8001420:	fa05 f50c 	lsl.w	r5, r5, ip
 8001424:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001428:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800142a:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 800142c:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800142e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001432:	bf0c      	ite	eq
 8001434:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8001436:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8001438:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800143a:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800143c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001440:	bf0c      	ite	eq
 8001442:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8001444:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8001446:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001448:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800144a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800144e:	bf0c      	ite	eq
 8001450:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8001452:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8001454:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001456:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001458:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800145a:	bf54      	ite	pl
 800145c:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 800145e:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8001460:	60d5      	str	r5, [r2, #12]
    position++;
 8001462:	3301      	adds	r3, #1
 8001464:	e749      	b.n	80012fa <HAL_GPIO_Init+0x12>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001466:	2500      	movs	r5, #0
 8001468:	e7da      	b.n	8001420 <HAL_GPIO_Init+0x138>
 800146a:	2501      	movs	r5, #1
 800146c:	e7d8      	b.n	8001420 <HAL_GPIO_Init+0x138>
 800146e:	2502      	movs	r5, #2
 8001470:	e7d6      	b.n	8001420 <HAL_GPIO_Init+0x138>
 8001472:	2503      	movs	r5, #3
 8001474:	e7d4      	b.n	8001420 <HAL_GPIO_Init+0x138>
 8001476:	bf00      	nop
 8001478:	40010400 	.word	0x40010400
 800147c:	40020000 	.word	0x40020000
 8001480:	40023800 	.word	0x40023800

08001484 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001484:	b10a      	cbz	r2, 800148a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001486:	6181      	str	r1, [r0, #24]
 8001488:	4770      	bx	lr
 800148a:	0409      	lsls	r1, r1, #16
 800148c:	e7fb      	b.n	8001486 <HAL_GPIO_WritePin+0x2>
	...

08001490 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8001492:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800149a:	d00c      	beq.n	80014b6 <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 800149c:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 800149e:	491a      	ldr	r1, [pc, #104]	; (8001508 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80014a0:	680b      	ldr	r3, [r1, #0]
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80014aa:	6808      	ldr	r0, [r1, #0]
 80014ac:	f000 0001 	and.w	r0, r0, #1
 80014b0:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 80014b2:	b002      	add	sp, #8
 80014b4:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80014b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b8:	4914      	ldr	r1, [pc, #80]	; (800150c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80014ba:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80014be:	d00f      	beq.n	80014e0 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80014c0:	680a      	ldr	r2, [r1, #0]
 80014c2:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80014c6:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 80014ca:	d1e7      	bne.n	800149c <RCC_SetFlashLatencyFromMSIRange+0xc>
 80014cc:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80014d0:	d1e4      	bne.n	800149c <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 80014d2:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80014d4:	6813      	ldr	r3, [r2, #0]
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 80014dc:	2201      	movs	r2, #1
 80014de:	e7de      	b.n	800149e <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24
 80014e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ea:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80014ee:	9201      	str	r2, [sp, #4]
 80014f0:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80014f2:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80014f6:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fa:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80014fe:	6259      	str	r1, [r3, #36]	; 0x24
 8001500:	e7e1      	b.n	80014c6 <RCC_SetFlashLatencyFromMSIRange+0x36>
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	40023c00 	.word	0x40023c00
 800150c:	40007000 	.word	0x40007000

08001510 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001510:	6803      	ldr	r3, [r0, #0]
{
 8001512:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001516:	07d9      	lsls	r1, r3, #31
{
 8001518:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151a:	d46a      	bmi.n	80015f2 <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151c:	6823      	ldr	r3, [r4, #0]
 800151e:	079a      	lsls	r2, r3, #30
 8001520:	f100 80e6 	bmi.w	80016f0 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	06de      	lsls	r6, r3, #27
 8001528:	d555      	bpl.n	80015d6 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800152a:	4dc1      	ldr	r5, [pc, #772]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 800152c:	68ab      	ldr	r3, [r5, #8]
 800152e:	f013 0f0c 	tst.w	r3, #12
 8001532:	f040 8183 	bne.w	800183c <HAL_RCC_OscConfig+0x32c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800153e:	6829      	ldr	r1, [r5, #0]
 8001540:	fa93 f3a3 	rbit	r3, r3
 8001544:	fab3 f383 	clz	r3, r3
 8001548:	2201      	movs	r2, #1
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	420b      	tst	r3, r1
 8001554:	d002      	beq.n	800155c <HAL_RCC_OscConfig+0x4c>
 8001556:	69a3      	ldr	r3, [r4, #24]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d06e      	beq.n	800163a <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800155c:	4db4      	ldr	r5, [pc, #720]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 800155e:	6a20      	ldr	r0, [r4, #32]
 8001560:	686b      	ldr	r3, [r5, #4]
 8001562:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001566:	4298      	cmp	r0, r3
 8001568:	f240 814a 	bls.w	8001800 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800156c:	f7ff ff90 	bl	8001490 <RCC_SetFlashLatencyFromMSIRange>
 8001570:	2800      	cmp	r0, #0
 8001572:	d162      	bne.n	800163a <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001574:	686b      	ldr	r3, [r5, #4]
 8001576:	6a22      	ldr	r2, [r4, #32]
 8001578:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800157c:	4313      	orrs	r3, r2
 800157e:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001580:	6869      	ldr	r1, [r5, #4]
 8001582:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001586:	fa93 f3a3 	rbit	r3, r3
 800158a:	fab3 f283 	clz	r2, r3
 800158e:	69e3      	ldr	r3, [r4, #28]
 8001590:	4093      	lsls	r3, r2
 8001592:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001596:	4313      	orrs	r3, r2
 8001598:	606b      	str	r3, [r5, #4]
 800159a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800159e:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80015a2:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80015a6:	4ba2      	ldr	r3, [pc, #648]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 80015a8:	21f0      	movs	r1, #240	; 0xf0
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	fa91 f1a1 	rbit	r1, r1
 80015b0:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80015b4:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80015b6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80015ba:	40c3      	lsrs	r3, r0
 80015bc:	1c58      	adds	r0, r3, #1
 80015be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80015c2:	40ca      	lsrs	r2, r1
 80015c4:	499b      	ldr	r1, [pc, #620]	; (8001834 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80015c6:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80015c8:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 80015ca:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80015cc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80015ce:	4a9a      	ldr	r2, [pc, #616]	; (8001838 <HAL_RCC_OscConfig+0x328>)
 80015d0:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80015d2:	f7ff fde1 	bl	8001198 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	071d      	lsls	r5, r3, #28
 80015da:	f100 8191 	bmi.w	8001900 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	0758      	lsls	r0, r3, #29
 80015e2:	f100 81d3 	bmi.w	800198c <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015e8:	2a00      	cmp	r2, #0
 80015ea:	f040 8257 	bne.w	8001a9c <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 80015ee:	2000      	movs	r0, #0
 80015f0:	e024      	b.n	800163c <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015f2:	4b8f      	ldr	r3, [pc, #572]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	f002 020c 	and.w	r2, r2, #12
 80015fa:	2a08      	cmp	r2, #8
 80015fc:	d007      	beq.n	800160e <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	f002 020c 	and.w	r2, r2, #12
 8001604:	2a0c      	cmp	r2, #12
 8001606:	d11c      	bne.n	8001642 <HAL_RCC_OscConfig+0x132>
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	03db      	lsls	r3, r3, #15
 800160c:	d519      	bpl.n	8001642 <HAL_RCC_OscConfig+0x132>
 800160e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001612:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001616:	4a86      	ldr	r2, [pc, #536]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 8001618:	6811      	ldr	r1, [r2, #0]
 800161a:	fa93 f3a3 	rbit	r3, r3
 800161e:	fab3 f383 	clz	r3, r3
 8001622:	2201      	movs	r2, #1
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	420b      	tst	r3, r1
 800162e:	f43f af75 	beq.w	800151c <HAL_RCC_OscConfig+0xc>
 8001632:	6863      	ldr	r3, [r4, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	f47f af71 	bne.w	800151c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800163a:	2001      	movs	r0, #1
}
 800163c:	b003      	add	sp, #12
 800163e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001642:	6863      	ldr	r3, [r4, #4]
 8001644:	4d7a      	ldr	r5, [pc, #488]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 8001646:	2b01      	cmp	r3, #1
 8001648:	d120      	bne.n	800168c <HAL_RCC_OscConfig+0x17c>
 800164a:	682b      	ldr	r3, [r5, #0]
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001652:	f7ff fdc9 	bl	80011e8 <HAL_GetTick>
 8001656:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800165a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165c:	2601      	movs	r6, #1
 800165e:	4f74      	ldr	r7, [pc, #464]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 8001660:	fa95 f3a5 	rbit	r3, r5
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	fa95 f3a5 	rbit	r3, r5
 800166a:	fab3 f383 	clz	r3, r3
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	fa06 f303 	lsl.w	r3, r6, r3
 8001676:	4213      	tst	r3, r2
 8001678:	f47f af50 	bne.w	800151c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fdb4 	bl	80011e8 <HAL_GetTick>
 8001680:	eba0 0008 	sub.w	r0, r0, r8
 8001684:	2864      	cmp	r0, #100	; 0x64
 8001686:	d9eb      	bls.n	8001660 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8001688:	2003      	movs	r0, #3
 800168a:	e7d7      	b.n	800163c <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168c:	bb13      	cbnz	r3, 80016d4 <HAL_RCC_OscConfig+0x1c4>
 800168e:	682b      	ldr	r3, [r5, #0]
 8001690:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001698:	602b      	str	r3, [r5, #0]
 800169a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169c:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016a4:	f7ff fda0 	bl	80011e8 <HAL_GetTick>
 80016a8:	4680      	mov	r8, r0
 80016aa:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	682a      	ldr	r2, [r5, #0]
 80016b0:	fa96 f3a6 	rbit	r3, r6
 80016b4:	fab3 f383 	clz	r3, r3
 80016b8:	f003 031f 	and.w	r3, r3, #31
 80016bc:	fa07 f303 	lsl.w	r3, r7, r3
 80016c0:	4213      	tst	r3, r2
 80016c2:	f43f af2b 	beq.w	800151c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c6:	f7ff fd8f 	bl	80011e8 <HAL_GetTick>
 80016ca:	eba0 0008 	sub.w	r0, r0, r8
 80016ce:	2864      	cmp	r0, #100	; 0x64
 80016d0:	d9eb      	bls.n	80016aa <HAL_RCC_OscConfig+0x19a>
 80016d2:	e7d9      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	682b      	ldr	r3, [r5, #0]
 80016d8:	d103      	bne.n	80016e2 <HAL_RCC_OscConfig+0x1d2>
 80016da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016de:	602b      	str	r3, [r5, #0]
 80016e0:	e7b3      	b.n	800164a <HAL_RCC_OscConfig+0x13a>
 80016e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e6:	602b      	str	r3, [r5, #0]
 80016e8:	682b      	ldr	r3, [r5, #0]
 80016ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ee:	e7af      	b.n	8001650 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016f0:	4b4f      	ldr	r3, [pc, #316]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	f002 020c 	and.w	r2, r2, #12
 80016f8:	2a04      	cmp	r2, #4
 80016fa:	d007      	beq.n	800170c <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	f002 020c 	and.w	r2, r2, #12
 8001702:	2a0c      	cmp	r2, #12
 8001704:	d124      	bne.n	8001750 <HAL_RCC_OscConfig+0x240>
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	03df      	lsls	r7, r3, #15
 800170a:	d421      	bmi.n	8001750 <HAL_RCC_OscConfig+0x240>
 800170c:	2302      	movs	r3, #2
 800170e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	4a47      	ldr	r2, [pc, #284]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 8001714:	6810      	ldr	r0, [r2, #0]
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	2101      	movs	r1, #1
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	4203      	tst	r3, r0
 800172a:	4613      	mov	r3, r2
 800172c:	d002      	beq.n	8001734 <HAL_RCC_OscConfig+0x224>
 800172e:	68e2      	ldr	r2, [r4, #12]
 8001730:	428a      	cmp	r2, r1
 8001732:	d182      	bne.n	800163a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001734:	6858      	ldr	r0, [r3, #4]
 8001736:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 800173a:	fa92 f2a2 	rbit	r2, r2
 800173e:	fab2 f182 	clz	r1, r2
 8001742:	6922      	ldr	r2, [r4, #16]
 8001744:	408a      	lsls	r2, r1
 8001746:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 800174a:	430a      	orrs	r2, r1
 800174c:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174e:	e6e9      	b.n	8001524 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001750:	68e2      	ldr	r2, [r4, #12]
 8001752:	2501      	movs	r5, #1
 8001754:	b382      	cbz	r2, 80017b8 <HAL_RCC_OscConfig+0x2a8>
 8001756:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 800175a:	fab3 f383 	clz	r3, r3
 800175e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001762:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800176a:	f7ff fd3d 	bl	80011e8 <HAL_GetTick>
 800176e:	2702      	movs	r7, #2
 8001770:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001772:	4e2f      	ldr	r6, [pc, #188]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 8001774:	fa97 f3a7 	rbit	r3, r7
 8001778:	6832      	ldr	r2, [r6, #0]
 800177a:	fa97 f3a7 	rbit	r3, r7
 800177e:	fab3 f383 	clz	r3, r3
 8001782:	f003 031f 	and.w	r3, r3, #31
 8001786:	fa05 f303 	lsl.w	r3, r5, r3
 800178a:	4213      	tst	r3, r2
 800178c:	d00d      	beq.n	80017aa <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178e:	6871      	ldr	r1, [r6, #4]
 8001790:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001794:	fa93 f3a3 	rbit	r3, r3
 8001798:	fab3 f283 	clz	r2, r3
 800179c:	6923      	ldr	r3, [r4, #16]
 800179e:	4093      	lsls	r3, r2
 80017a0:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 80017a4:	4313      	orrs	r3, r2
 80017a6:	6073      	str	r3, [r6, #4]
 80017a8:	e6bc      	b.n	8001524 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017aa:	f7ff fd1d 	bl	80011e8 <HAL_GetTick>
 80017ae:	eba0 0008 	sub.w	r0, r0, r8
 80017b2:	2802      	cmp	r0, #2
 80017b4:	d9de      	bls.n	8001774 <HAL_RCC_OscConfig+0x264>
 80017b6:	e767      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
 80017b8:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80017bc:	fab3 f383 	clz	r3, r3
 80017c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017c4:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017cc:	f7ff fd0c 	bl	80011e8 <HAL_GetTick>
 80017d0:	2602      	movs	r6, #2
 80017d2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d4:	4f16      	ldr	r7, [pc, #88]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 80017d6:	fa96 f3a6 	rbit	r3, r6
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	fa96 f3a6 	rbit	r3, r6
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	fa05 f303 	lsl.w	r3, r5, r3
 80017ec:	4213      	tst	r3, r2
 80017ee:	f43f ae99 	beq.w	8001524 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f2:	f7ff fcf9 	bl	80011e8 <HAL_GetTick>
 80017f6:	eba0 0008 	sub.w	r0, r0, r8
 80017fa:	2802      	cmp	r0, #2
 80017fc:	d9eb      	bls.n	80017d6 <HAL_RCC_OscConfig+0x2c6>
 80017fe:	e743      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001800:	686b      	ldr	r3, [r5, #4]
 8001802:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001806:	4303      	orrs	r3, r0
 8001808:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800180a:	6869      	ldr	r1, [r5, #4]
 800180c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001810:	fa93 f3a3 	rbit	r3, r3
 8001814:	fab3 f283 	clz	r2, r3
 8001818:	69e3      	ldr	r3, [r4, #28]
 800181a:	4093      	lsls	r3, r2
 800181c:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001820:	4313      	orrs	r3, r2
 8001822:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001824:	f7ff fe34 	bl	8001490 <RCC_SetFlashLatencyFromMSIRange>
 8001828:	2800      	cmp	r0, #0
 800182a:	f43f aeb6 	beq.w	800159a <HAL_RCC_OscConfig+0x8a>
 800182e:	e704      	b.n	800163a <HAL_RCC_OscConfig+0x12a>
 8001830:	40023800 	.word	0x40023800
 8001834:	080069a2 	.word	0x080069a2
 8001838:	20000000 	.word	0x20000000
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800183c:	69a2      	ldr	r2, [r4, #24]
 800183e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001842:	2a00      	cmp	r2, #0
 8001844:	d037      	beq.n	80018b6 <HAL_RCC_OscConfig+0x3a6>
 8001846:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	2601      	movs	r6, #1
 8001850:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001854:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800185c:	f7ff fcc4 	bl	80011e8 <HAL_GetTick>
 8001860:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001864:	4680      	mov	r8, r0
 8001866:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800186a:	682a      	ldr	r2, [r5, #0]
 800186c:	fa97 f3a7 	rbit	r3, r7
 8001870:	fab3 f383 	clz	r3, r3
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	fa06 f303 	lsl.w	r3, r6, r3
 800187c:	4213      	tst	r3, r2
 800187e:	d013      	beq.n	80018a8 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001880:	686b      	ldr	r3, [r5, #4]
 8001882:	6a22      	ldr	r2, [r4, #32]
 8001884:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001888:	4313      	orrs	r3, r2
 800188a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800188c:	6869      	ldr	r1, [r5, #4]
 800188e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	fab3 f283 	clz	r2, r3
 800189a:	69e3      	ldr	r3, [r4, #28]
 800189c:	4093      	lsls	r3, r2
 800189e:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 80018a2:	4313      	orrs	r3, r2
 80018a4:	606b      	str	r3, [r5, #4]
 80018a6:	e696      	b.n	80015d6 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018a8:	f7ff fc9e 	bl	80011e8 <HAL_GetTick>
 80018ac:	eba0 0008 	sub.w	r0, r0, r8
 80018b0:	2802      	cmp	r0, #2
 80018b2:	d9d8      	bls.n	8001866 <HAL_RCC_OscConfig+0x356>
 80018b4:	e6e8      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
 80018b6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018c2:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018ca:	f7ff fc8d 	bl	80011e8 <HAL_GetTick>
 80018ce:	f44f 7600 	mov.w	r6, #512	; 0x200
 80018d2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80018d4:	2701      	movs	r7, #1
 80018d6:	fa96 f3a6 	rbit	r3, r6
 80018da:	682a      	ldr	r2, [r5, #0]
 80018dc:	fa96 f3a6 	rbit	r3, r6
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	fa07 f303 	lsl.w	r3, r7, r3
 80018ec:	4213      	tst	r3, r2
 80018ee:	f43f ae72 	beq.w	80015d6 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018f2:	f7ff fc79 	bl	80011e8 <HAL_GetTick>
 80018f6:	eba0 0008 	sub.w	r0, r0, r8
 80018fa:	2802      	cmp	r0, #2
 80018fc:	d9eb      	bls.n	80018d6 <HAL_RCC_OscConfig+0x3c6>
 80018fe:	e6c3      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001900:	6962      	ldr	r2, [r4, #20]
 8001902:	2501      	movs	r5, #1
 8001904:	49a9      	ldr	r1, [pc, #676]	; (8001bac <HAL_RCC_OscConfig+0x69c>)
 8001906:	b302      	cbz	r2, 800194a <HAL_RCC_OscConfig+0x43a>
 8001908:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 800190c:	fab3 f383 	clz	r3, r3
 8001910:	440b      	add	r3, r1
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8001916:	f7ff fc67 	bl	80011e8 <HAL_GetTick>
 800191a:	2602      	movs	r6, #2
 800191c:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	4fa4      	ldr	r7, [pc, #656]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 8001920:	fa96 f3a6 	rbit	r3, r6
 8001924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001926:	fa96 f3a6 	rbit	r3, r6
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	fa05 f303 	lsl.w	r3, r5, r3
 8001936:	4213      	tst	r3, r2
 8001938:	f47f ae51 	bne.w	80015de <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193c:	f7ff fc54 	bl	80011e8 <HAL_GetTick>
 8001940:	eba0 0008 	sub.w	r0, r0, r8
 8001944:	2802      	cmp	r0, #2
 8001946:	d9eb      	bls.n	8001920 <HAL_RCC_OscConfig+0x410>
 8001948:	e69e      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
 800194a:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 800194e:	fab3 f383 	clz	r3, r3
 8001952:	440b      	add	r3, r1
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001958:	f7ff fc46 	bl	80011e8 <HAL_GetTick>
 800195c:	2602      	movs	r6, #2
 800195e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001960:	4f93      	ldr	r7, [pc, #588]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 8001962:	fa96 f3a6 	rbit	r3, r6
 8001966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001968:	fa96 f3a6 	rbit	r3, r6
 800196c:	fab3 f383 	clz	r3, r3
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	fa05 f303 	lsl.w	r3, r5, r3
 8001978:	4213      	tst	r3, r2
 800197a:	f43f ae30 	beq.w	80015de <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800197e:	f7ff fc33 	bl	80011e8 <HAL_GetTick>
 8001982:	eba0 0008 	sub.w	r0, r0, r8
 8001986:	2802      	cmp	r0, #2
 8001988:	d9eb      	bls.n	8001962 <HAL_RCC_OscConfig+0x452>
 800198a:	e67d      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198c:	4b88      	ldr	r3, [pc, #544]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 800198e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001990:	00d1      	lsls	r1, r2, #3
 8001992:	d434      	bmi.n	80019fe <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8001994:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001998:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800199c:	625a      	str	r2, [r3, #36]	; 0x24
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	4d82      	ldr	r5, [pc, #520]	; (8001bb4 <HAL_RCC_OscConfig+0x6a4>)
 80019aa:	682b      	ldr	r3, [r5, #0]
 80019ac:	05da      	lsls	r2, r3, #23
 80019ae:	d528      	bpl.n	8001a02 <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b0:	68a3      	ldr	r3, [r4, #8]
 80019b2:	4d7f      	ldr	r5, [pc, #508]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d134      	bne.n	8001a22 <HAL_RCC_OscConfig+0x512>
 80019b8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80019ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019be:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80019c0:	f7ff fc12 	bl	80011e8 <HAL_GetTick>
 80019c4:	f44f 7500 	mov.w	r5, #512	; 0x200
 80019c8:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ca:	2701      	movs	r7, #1
 80019cc:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8001bb0 <HAL_RCC_OscConfig+0x6a0>
 80019d0:	fa95 f3a5 	rbit	r3, r5
 80019d4:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80019d8:	fa95 f3a5 	rbit	r3, r5
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	fa07 f303 	lsl.w	r3, r7, r3
 80019e8:	4213      	tst	r3, r2
 80019ea:	d04e      	beq.n	8001a8a <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 80019ec:	2e00      	cmp	r6, #0
 80019ee:	f43f adfa 	beq.w	80015e6 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f2:	4a6f      	ldr	r2, [pc, #444]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 80019f4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80019f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019fa:	6253      	str	r3, [r2, #36]	; 0x24
 80019fc:	e5f3      	b.n	80015e6 <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 80019fe:	2600      	movs	r6, #0
 8001a00:	e7d2      	b.n	80019a8 <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a02:	682b      	ldr	r3, [r5, #0]
 8001a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a08:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fbed 	bl	80011e8 <HAL_GetTick>
 8001a0e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	682b      	ldr	r3, [r5, #0]
 8001a12:	05db      	lsls	r3, r3, #23
 8001a14:	d4cc      	bmi.n	80019b0 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a16:	f7ff fbe7 	bl	80011e8 <HAL_GetTick>
 8001a1a:	1bc0      	subs	r0, r0, r7
 8001a1c:	2864      	cmp	r0, #100	; 0x64
 8001a1e:	d9f7      	bls.n	8001a10 <HAL_RCC_OscConfig+0x500>
 8001a20:	e632      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a22:	bb23      	cbnz	r3, 8001a6e <HAL_RCC_OscConfig+0x55e>
 8001a24:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a26:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001a2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a2e:	636b      	str	r3, [r5, #52]	; 0x34
 8001a30:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a32:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a3a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001a3c:	f7ff fbd4 	bl	80011e8 <HAL_GetTick>
 8001a40:	4681      	mov	r9, r0
 8001a42:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a46:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001a48:	fa97 f3a7 	rbit	r3, r7
 8001a4c:	fab3 f383 	clz	r3, r3
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	fa08 f303 	lsl.w	r3, r8, r3
 8001a58:	4213      	tst	r3, r2
 8001a5a:	d0c7      	beq.n	80019ec <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a5c:	f7ff fbc4 	bl	80011e8 <HAL_GetTick>
 8001a60:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a64:	eba0 0009 	sub.w	r0, r0, r9
 8001a68:	4298      	cmp	r0, r3
 8001a6a:	d9ea      	bls.n	8001a42 <HAL_RCC_OscConfig+0x532>
 8001a6c:	e60c      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6e:	2b05      	cmp	r3, #5
 8001a70:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a72:	d103      	bne.n	8001a7c <HAL_RCC_OscConfig+0x56c>
 8001a74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a78:	636b      	str	r3, [r5, #52]	; 0x34
 8001a7a:	e79d      	b.n	80019b8 <HAL_RCC_OscConfig+0x4a8>
 8001a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a80:	636b      	str	r3, [r5, #52]	; 0x34
 8001a82:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a88:	e799      	b.n	80019be <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a8a:	f7ff fbad 	bl	80011e8 <HAL_GetTick>
 8001a8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a92:	eba0 0009 	sub.w	r0, r0, r9
 8001a96:	4298      	cmp	r0, r3
 8001a98:	d99a      	bls.n	80019d0 <HAL_RCC_OscConfig+0x4c0>
 8001a9a:	e5f5      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a9c:	4d44      	ldr	r5, [pc, #272]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 8001a9e:	68ab      	ldr	r3, [r5, #8]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b0c      	cmp	r3, #12
 8001aa6:	f43f adc8 	beq.w	800163a <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aaa:	2a02      	cmp	r2, #2
 8001aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ab0:	d156      	bne.n	8001b60 <HAL_RCC_OscConfig+0x650>
 8001ab2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	2200      	movs	r2, #0
 8001abc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ac0:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fb8e 	bl	80011e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001acc:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 8001ace:	4680      	mov	r8, r0
 8001ad0:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad4:	2501      	movs	r5, #1
 8001ad6:	fa97 f3a7 	rbit	r3, r7
 8001ada:	6832      	ldr	r2, [r6, #0]
 8001adc:	fa97 f3a7 	rbit	r3, r7
 8001ae0:	fab3 f383 	clz	r3, r3
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	fa05 f303 	lsl.w	r3, r5, r3
 8001aec:	4213      	tst	r3, r2
 8001aee:	d130      	bne.n	8001b52 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af0:	68b2      	ldr	r2, [r6, #8]
 8001af2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001af4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001af6:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8001afa:	430b      	orrs	r3, r1
 8001afc:	4313      	orrs	r3, r2
 8001afe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60b3      	str	r3, [r6, #8]
 8001b04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b08:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001b0c:	fab3 f383 	clz	r3, r3
 8001b10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b14:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fb64 	bl	80011e8 <HAL_GetTick>
 8001b20:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001b24:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b26:	2501      	movs	r5, #1
 8001b28:	4e21      	ldr	r6, [pc, #132]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 8001b2a:	fa94 f3a4 	rbit	r3, r4
 8001b2e:	6832      	ldr	r2, [r6, #0]
 8001b30:	fa94 f3a4 	rbit	r3, r4
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	fa05 f303 	lsl.w	r3, r5, r3
 8001b40:	4213      	tst	r3, r2
 8001b42:	f47f ad54 	bne.w	80015ee <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b46:	f7ff fb4f 	bl	80011e8 <HAL_GetTick>
 8001b4a:	1bc0      	subs	r0, r0, r7
 8001b4c:	2802      	cmp	r0, #2
 8001b4e:	d9ec      	bls.n	8001b2a <HAL_RCC_OscConfig+0x61a>
 8001b50:	e59a      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b52:	f7ff fb49 	bl	80011e8 <HAL_GetTick>
 8001b56:	eba0 0008 	sub.w	r0, r0, r8
 8001b5a:	2802      	cmp	r0, #2
 8001b5c:	d9bb      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x5c6>
 8001b5e:	e593      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
 8001b60:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b6e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b76:	f7ff fb37 	bl	80011e8 <HAL_GetTick>
 8001b7a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001b7e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b80:	2601      	movs	r6, #1
 8001b82:	fa94 f3a4 	rbit	r3, r4
 8001b86:	682a      	ldr	r2, [r5, #0]
 8001b88:	fa94 f3a4 	rbit	r3, r4
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	fa06 f303 	lsl.w	r3, r6, r3
 8001b98:	4213      	tst	r3, r2
 8001b9a:	f43f ad28 	beq.w	80015ee <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff fb23 	bl	80011e8 <HAL_GetTick>
 8001ba2:	1bc0      	subs	r0, r0, r7
 8001ba4:	2802      	cmp	r0, #2
 8001ba6:	d9ec      	bls.n	8001b82 <HAL_RCC_OscConfig+0x672>
 8001ba8:	e56e      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
 8001baa:	bf00      	nop
 8001bac:	1091c1a0 	.word	0x1091c1a0
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40007000 	.word	0x40007000

08001bb8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001bb8:	491e      	ldr	r1, [pc, #120]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8001bba:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8001bbc:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8001bbe:	f003 020c 	and.w	r2, r3, #12
 8001bc2:	2a08      	cmp	r2, #8
 8001bc4:	d005      	beq.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x1a>
 8001bc6:	2a0c      	cmp	r2, #12
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x1e>
 8001bca:	2a04      	cmp	r2, #4
 8001bcc:	d122      	bne.n	8001c14 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 8001bce:	481a      	ldr	r0, [pc, #104]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x80>)
}
 8001bd0:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001bd2:	481a      	ldr	r0, [pc, #104]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x84>)
 8001bd4:	bd10      	pop	{r4, pc}
 8001bd6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001bda:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001bde:	fab2 f282 	clz	r2, r2
 8001be2:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8001be6:	fa20 f202 	lsr.w	r2, r0, r2
 8001bea:	4815      	ldr	r0, [pc, #84]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x88>)
 8001bec:	5c84      	ldrb	r4, [r0, r2]
 8001bee:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8001bf2:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001bf6:	fab0 f280 	clz	r2, r0
 8001bfa:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bfe:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001c00:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c02:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8001c04:	bf4c      	ite	mi
 8001c06:	4b0d      	ldrmi	r3, [pc, #52]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8001c08:	4b0b      	ldrpl	r3, [pc, #44]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001c0a:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 8001c0c:	4363      	muls	r3, r4
 8001c0e:	fbb3 f0f0 	udiv	r0, r3, r0
 8001c12:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8001c14:	6848      	ldr	r0, [r1, #4]
 8001c16:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8001c26:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8001c28:	1c43      	adds	r3, r0, #1
 8001c2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c2e:	4098      	lsls	r0, r3
 8001c30:	bd10      	pop	{r4, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	00f42400 	.word	0x00f42400
 8001c3c:	007a1200 	.word	0x007a1200
 8001c40:	080069ba 	.word	0x080069ba

08001c44 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c44:	4b6a      	ldr	r3, [pc, #424]	; (8001df0 <HAL_RCC_ClockConfig+0x1ac>)
{
 8001c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c4a:	681a      	ldr	r2, [r3, #0]
{
 8001c4c:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c4e:	f002 0201 	and.w	r2, r2, #1
 8001c52:	428a      	cmp	r2, r1
{
 8001c54:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c56:	d330      	bcc.n	8001cba <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c58:	6832      	ldr	r2, [r6, #0]
 8001c5a:	0794      	lsls	r4, r2, #30
 8001c5c:	d440      	bmi.n	8001ce0 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5e:	07d0      	lsls	r0, r2, #31
 8001c60:	d446      	bmi.n	8001cf0 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c62:	4b63      	ldr	r3, [pc, #396]	; (8001df0 <HAL_RCC_ClockConfig+0x1ac>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	f002 0201 	and.w	r2, r2, #1
 8001c6a:	4295      	cmp	r5, r2
 8001c6c:	f0c0 80ae 	bcc.w	8001dcc <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c70:	6832      	ldr	r2, [r6, #0]
 8001c72:	0751      	lsls	r1, r2, #29
 8001c74:	f100 80b3 	bmi.w	8001dde <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c78:	0713      	lsls	r3, r2, #28
 8001c7a:	d507      	bpl.n	8001c8c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c7c:	4a5d      	ldr	r2, [pc, #372]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c7e:	6931      	ldr	r1, [r6, #16]
 8001c80:	6893      	ldr	r3, [r2, #8]
 8001c82:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001c86:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c8a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c8c:	f7ff ff94 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 8001c90:	4b58      	ldr	r3, [pc, #352]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c92:	22f0      	movs	r2, #240	; 0xf0
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	fa92 f2a2 	rbit	r2, r2
 8001c9a:	fab2 f282 	clz	r2, r2
 8001c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca2:	40d3      	lsrs	r3, r2
 8001ca4:	4a54      	ldr	r2, [pc, #336]	; (8001df8 <HAL_RCC_ClockConfig+0x1b4>)
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	40d8      	lsrs	r0, r3
 8001caa:	4b54      	ldr	r3, [pc, #336]	; (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001cac:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff fa72 	bl	8001198 <HAL_InitTick>
  return HAL_OK;
 8001cb4:	2000      	movs	r0, #0
}
 8001cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	2901      	cmp	r1, #1
 8001cbc:	bf02      	ittt	eq
 8001cbe:	681a      	ldreq	r2, [r3, #0]
 8001cc0:	f042 0204 	orreq.w	r2, r2, #4
 8001cc4:	601a      	streq	r2, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	f022 0201 	bic.w	r2, r2, #1
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	4299      	cmp	r1, r3
 8001cd8:	d0be      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001cda:	2001      	movs	r0, #1
 8001cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce0:	4944      	ldr	r1, [pc, #272]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001ce2:	68b0      	ldr	r0, [r6, #8]
 8001ce4:	688b      	ldr	r3, [r1, #8]
 8001ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cea:	4303      	orrs	r3, r0
 8001cec:	608b      	str	r3, [r1, #8]
 8001cee:	e7b6      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf0:	6872      	ldr	r2, [r6, #4]
 8001cf2:	4940      	ldr	r1, [pc, #256]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001cf4:	2a02      	cmp	r2, #2
 8001cf6:	d10f      	bne.n	8001d18 <HAL_RCC_ClockConfig+0xd4>
 8001cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cfc:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001d00:	6808      	ldr	r0, [r1, #0]
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	4203      	tst	r3, r0
 8001d16:	e013      	b.n	8001d40 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d18:	2a03      	cmp	r2, #3
 8001d1a:	d102      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xde>
 8001d1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d20:	e7ec      	b.n	8001cfc <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d22:	2a01      	cmp	r2, #1
 8001d24:	d129      	bne.n	8001d7a <HAL_RCC_ClockConfig+0x136>
 8001d26:	2302      	movs	r3, #2
 8001d28:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	6809      	ldr	r1, [r1, #0]
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001d40:	d0cb      	beq.n	8001cda <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d42:	4c2c      	ldr	r4, [pc, #176]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d44:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d48:	68a3      	ldr	r3, [r4, #8]
 8001d4a:	f023 0303 	bic.w	r3, r3, #3
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001d52:	f7ff fa49 	bl	80011e8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d56:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001d58:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d110      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d5e:	68a3      	ldr	r3, [r4, #8]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	f43f af7c 	beq.w	8001c62 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6a:	f7ff fa3d 	bl	80011e8 <HAL_GetTick>
 8001d6e:	1bc0      	subs	r0, r0, r7
 8001d70:	4540      	cmp	r0, r8
 8001d72:	d9f4      	bls.n	8001d5e <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8001d74:	2003      	movs	r0, #3
 8001d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d7e:	e7bd      	b.n	8001cfc <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d10b      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d84:	68a3      	ldr	r3, [r4, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	f43f af69 	beq.w	8001c62 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d90:	f7ff fa2a 	bl	80011e8 <HAL_GetTick>
 8001d94:	1bc0      	subs	r0, r0, r7
 8001d96:	4540      	cmp	r0, r8
 8001d98:	d9f4      	bls.n	8001d84 <HAL_RCC_ClockConfig+0x140>
 8001d9a:	e7eb      	b.n	8001d74 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d110      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001da0:	68a3      	ldr	r3, [r4, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	f43f af5b 	beq.w	8001c62 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dac:	f7ff fa1c 	bl	80011e8 <HAL_GetTick>
 8001db0:	1bc0      	subs	r0, r0, r7
 8001db2:	4540      	cmp	r0, r8
 8001db4:	d9f4      	bls.n	8001da0 <HAL_RCC_ClockConfig+0x15c>
 8001db6:	e7dd      	b.n	8001d74 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db8:	f7ff fa16 	bl	80011e8 <HAL_GetTick>
 8001dbc:	1bc0      	subs	r0, r0, r7
 8001dbe:	4540      	cmp	r0, r8
 8001dc0:	d8d8      	bhi.n	8001d74 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001dc2:	68a3      	ldr	r3, [r4, #8]
 8001dc4:	f013 0f0c 	tst.w	r3, #12
 8001dc8:	d1f6      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x174>
 8001dca:	e74a      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	f022 0201 	bic.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	07da      	lsls	r2, r3, #31
 8001dd8:	f53f af7f 	bmi.w	8001cda <HAL_RCC_ClockConfig+0x96>
 8001ddc:	e748      	b.n	8001c70 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dde:	4905      	ldr	r1, [pc, #20]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001de0:	68f0      	ldr	r0, [r6, #12]
 8001de2:	688b      	ldr	r3, [r1, #8]
 8001de4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001de8:	4303      	orrs	r3, r0
 8001dea:	608b      	str	r3, [r1, #8]
 8001dec:	e744      	b.n	8001c78 <HAL_RCC_ClockConfig+0x34>
 8001dee:	bf00      	nop
 8001df0:	40023c00 	.word	0x40023c00
 8001df4:	40023800 	.word	0x40023800
 8001df8:	080069a2 	.word	0x080069a2
 8001dfc:	20000000 	.word	0x20000000

08001e00 <HAL_RCC_GetHCLKFreq>:
}
 8001e00:	4b01      	ldr	r3, [pc, #4]	; (8001e08 <HAL_RCC_GetHCLKFreq+0x8>)
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000000 	.word	0x20000000

08001e0c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	fa92 f2a2 	rbit	r2, r2
 8001e18:	fab2 f282 	clz	r2, r2
 8001e1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e20:	40d3      	lsrs	r3, r2
 8001e22:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e24:	5cd3      	ldrb	r3, [r2, r3]
 8001e26:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001e28:	6810      	ldr	r0, [r2, #0]
}    
 8001e2a:	40d8      	lsrs	r0, r3
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	080069b2 	.word	0x080069b2
 8001e38:	20000000 	.word	0x20000000

08001e3c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e3e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	fa92 f2a2 	rbit	r2, r2
 8001e48:	fab2 f282 	clz	r2, r2
 8001e4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001e50:	40d3      	lsrs	r3, r2
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e54:	5cd3      	ldrb	r3, [r2, r3]
 8001e56:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001e58:	6810      	ldr	r0, [r2, #0]
} 
 8001e5a:	40d8      	lsrs	r0, r3
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	080069b2 	.word	0x080069b2
 8001e68:	20000000 	.word	0x20000000

08001e6c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e6c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8001e70:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e72:	d00e      	beq.n	8001e92 <TIM_Base_SetConfig+0x26>
 8001e74:	4a1c      	ldr	r2, [pc, #112]	; (8001ee8 <TIM_Base_SetConfig+0x7c>)
 8001e76:	4290      	cmp	r0, r2
 8001e78:	d00b      	beq.n	8001e92 <TIM_Base_SetConfig+0x26>
 8001e7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e7e:	4290      	cmp	r0, r2
 8001e80:	d007      	beq.n	8001e92 <TIM_Base_SetConfig+0x26>
 8001e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e86:	4290      	cmp	r0, r2
 8001e88:	d003      	beq.n	8001e92 <TIM_Base_SetConfig+0x26>
 8001e8a:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8001e8e:	4290      	cmp	r0, r2
 8001e90:	d116      	bne.n	8001ec0 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001e92:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e98:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 8001e9c:	ea43 0302 	orr.w	r3, r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ea0:	d015      	beq.n	8001ece <TIM_Base_SetConfig+0x62>
 8001ea2:	4a11      	ldr	r2, [pc, #68]	; (8001ee8 <TIM_Base_SetConfig+0x7c>)
 8001ea4:	4290      	cmp	r0, r2
 8001ea6:	d012      	beq.n	8001ece <TIM_Base_SetConfig+0x62>
 8001ea8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eac:	4290      	cmp	r0, r2
 8001eae:	d00e      	beq.n	8001ece <TIM_Base_SetConfig+0x62>
 8001eb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eb4:	4290      	cmp	r0, r2
 8001eb6:	d00a      	beq.n	8001ece <TIM_Base_SetConfig+0x62>
 8001eb8:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8001ebc:	4290      	cmp	r0, r2
 8001ebe:	d006      	beq.n	8001ece <TIM_Base_SetConfig+0x62>
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <TIM_Base_SetConfig+0x80>)
 8001ec2:	4290      	cmp	r0, r2
 8001ec4:	d003      	beq.n	8001ece <TIM_Base_SetConfig+0x62>
 8001ec6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eca:	4290      	cmp	r0, r2
 8001ecc:	d103      	bne.n	8001ed6 <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ece:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ed4:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001ed6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ed8:	688b      	ldr	r3, [r1, #8]
 8001eda:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001edc:	680b      	ldr	r3, [r1, #0]
 8001ede:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler */
  TIMx->EGR = TIM_EGR_UG;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	6143      	str	r3, [r0, #20]
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40010c00 	.word	0x40010c00

08001ef0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ef0:	6a03      	ldr	r3, [r0, #32]
{
 8001ef2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001efa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001efc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001efe:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f00:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f02:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001f06:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f08:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001f0a:	f023 0302 	bic.w	r3, r3, #2

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f0e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f10:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f12:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8001f14:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8001f16:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f18:	6203      	str	r3, [r0, #32]
 8001f1a:	bd30      	pop	{r4, r5, pc}

08001f1c <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f1c:	6a03      	ldr	r3, [r0, #32]
{
 8001f1e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f20:	f023 0310 	bic.w	r3, r3, #16
 8001f24:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f26:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f2a:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001f2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f2e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001f32:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001f36:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001f38:	f023 0320 	bic.w	r3, r3, #32

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f3c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f3e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f40:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001f42:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCR2 = OC_Config->Pulse;
 8001f46:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f48:	6203      	str	r3, [r0, #32]
 8001f4a:	bd30      	pop	{r4, r5, pc}

08001f4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001f4c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f4e:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001f50:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f54:	f024 0401 	bic.w	r4, r4, #1
 8001f58:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f5a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001f5c:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001f5e:	d00e      	beq.n	8001f7e <TIM_TI1_SetConfig+0x32>
 8001f60:	4e10      	ldr	r6, [pc, #64]	; (8001fa4 <TIM_TI1_SetConfig+0x58>)
 8001f62:	42b0      	cmp	r0, r6
 8001f64:	d00b      	beq.n	8001f7e <TIM_TI1_SetConfig+0x32>
 8001f66:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f6a:	42b0      	cmp	r0, r6
 8001f6c:	d007      	beq.n	8001f7e <TIM_TI1_SetConfig+0x32>
 8001f6e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f72:	42b0      	cmp	r0, r6
 8001f74:	d003      	beq.n	8001f7e <TIM_TI1_SetConfig+0x32>
 8001f76:	f506 467c 	add.w	r6, r6, #64512	; 0xfc00
 8001f7a:	42b0      	cmp	r0, r6
 8001f7c:	d10f      	bne.n	8001f9e <TIM_TI1_SetConfig+0x52>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001f7e:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8001f82:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 8001f84:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f86:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 8001f8a:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f8c:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001f90:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 8001f94:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001f96:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f98:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f9a:	6201      	str	r1, [r0, #32]
}
 8001f9c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001f9e:	f044 0201 	orr.w	r2, r4, #1
 8001fa2:	e7ef      	b.n	8001f84 <TIM_TI1_SetConfig+0x38>
 8001fa4:	40000400 	.word	0x40000400

08001fa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001fa8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001faa:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001fac:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8001fae:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001fb0:	ea23 0304 	bic.w	r3, r3, r4
 8001fb4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001fb6:	6a03      	ldr	r3, [r0, #32]
 8001fb8:	408a      	lsls	r2, r1
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	6202      	str	r2, [r0, #32]
 8001fbe:	bd10      	pop	{r4, pc}

08001fc0 <HAL_TIM_Base_Init>:
{
 8001fc0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001fc2:	4604      	mov	r4, r0
 8001fc4:	b1a0      	cbz	r0, 8001ff0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001fc6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001fca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fce:	b91b      	cbnz	r3, 8001fd8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001fd0:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_Base_MspInit(htim);
 8001fd4:	f001 ffd2 	bl	8003f7c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001fd8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fda:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001fdc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe0:	1d21      	adds	r1, r4, #4
 8001fe2:	f7ff ff43 	bl	8001e6c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001fe6:	2301      	movs	r3, #1
  return HAL_OK;
 8001fe8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001fea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001fee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ff0:	2001      	movs	r0, #1
}
 8001ff2:	bd10      	pop	{r4, pc}

08001ff4 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ff4:	6803      	ldr	r3, [r0, #0]
}
 8001ff6:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]
}
 8002008:	4770      	bx	lr

0800200a <HAL_TIM_PWM_MspInit>:
 800200a:	4770      	bx	lr

0800200c <HAL_TIM_PWM_Init>:
{
 800200c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800200e:	4604      	mov	r4, r0
 8002010:	b1a0      	cbz	r0, 800203c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002012:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002016:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800201a:	b91b      	cbnz	r3, 8002024 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800201c:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_PWM_MspInit(htim);
 8002020:	f7ff fff3 	bl	800200a <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002024:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002026:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002028:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800202c:	1d21      	adds	r1, r4, #4
 800202e:	f7ff ff1d 	bl	8001e6c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002032:	2301      	movs	r3, #1
  return HAL_OK;
 8002034:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002036:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800203a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800203c:	2001      	movs	r0, #1
}
 800203e:	bd10      	pop	{r4, pc}

08002040 <HAL_TIM_IC_MspInit>:
 8002040:	4770      	bx	lr

08002042 <HAL_TIM_IC_Init>:
{
 8002042:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002044:	4604      	mov	r4, r0
 8002046:	b1a0      	cbz	r0, 8002072 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002048:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800204c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002050:	b91b      	cbnz	r3, 800205a <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002052:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_IC_MspInit(htim);
 8002056:	f7ff fff3 	bl	8002040 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800205a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800205c:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800205e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002062:	1d21      	adds	r1, r4, #4
 8002064:	f7ff ff02 	bl	8001e6c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002068:	2301      	movs	r3, #1
  return HAL_OK;
 800206a:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800206c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002070:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002072:	2001      	movs	r0, #1
}
 8002074:	bd10      	pop	{r4, pc}

08002076 <HAL_TIM_IC_Start>:
{
 8002076:	b510      	push	{r4, lr}
 8002078:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800207a:	2201      	movs	r2, #1
 800207c:	6800      	ldr	r0, [r0, #0]
 800207e:	f7ff ff93 	bl	8001fa8 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8002082:	6822      	ldr	r2, [r4, #0]
}
 8002084:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8002086:	6813      	ldr	r3, [r2, #0]
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6013      	str	r3, [r2, #0]
}
 800208e:	bd10      	pop	{r4, pc}

08002090 <HAL_TIM_PWM_Start>:
 8002090:	f7ff bff1 	b.w	8002076 <HAL_TIM_IC_Start>

08002094 <HAL_TIM_IC_Start_IT>:
{
 8002094:	b510      	push	{r4, lr}
 8002096:	4604      	mov	r4, r0
  switch (Channel)
 8002098:	290c      	cmp	r1, #12
 800209a:	d80d      	bhi.n	80020b8 <HAL_TIM_IC_Start_IT+0x24>
 800209c:	e8df f001 	tbb	[pc, r1]
 80020a0:	0c0c0c07 	.word	0x0c0c0c07
 80020a4:	0c0c0c17 	.word	0x0c0c0c17
 80020a8:	0c0c0c1c 	.word	0x0c0c0c1c
 80020ac:	21          	.byte	0x21
 80020ad:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80020ae:	6802      	ldr	r2, [r0, #0]
 80020b0:	68d3      	ldr	r3, [r2, #12]
 80020b2:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80020b6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020b8:	6820      	ldr	r0, [r4, #0]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f7ff ff74 	bl	8001fa8 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 80020c0:	6822      	ldr	r2, [r4, #0]
}
 80020c2:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 80020c4:	6813      	ldr	r3, [r2, #0]
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80020ce:	6802      	ldr	r2, [r0, #0]
 80020d0:	68d3      	ldr	r3, [r2, #12]
 80020d2:	f043 0304 	orr.w	r3, r3, #4
 80020d6:	e7ee      	b.n	80020b6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80020d8:	6802      	ldr	r2, [r0, #0]
 80020da:	68d3      	ldr	r3, [r2, #12]
 80020dc:	f043 0308 	orr.w	r3, r3, #8
 80020e0:	e7e9      	b.n	80020b6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80020e2:	6802      	ldr	r2, [r0, #0]
 80020e4:	68d3      	ldr	r3, [r2, #12]
 80020e6:	f043 0310 	orr.w	r3, r3, #16
 80020ea:	e7e4      	b.n	80020b6 <HAL_TIM_IC_Start_IT+0x22>

080020ec <HAL_TIM_Encoder_Init>:
{
 80020ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ee:	460c      	mov	r4, r1
  if(htim == NULL)
 80020f0:	4605      	mov	r5, r0
 80020f2:	2800      	cmp	r0, #0
 80020f4:	d041      	beq.n	800217a <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 80020f6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80020fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020fe:	b91b      	cbnz	r3, 8002108 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8002100:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_Encoder_MspInit(htim);
 8002104:	f001 fef8 	bl	8003ef8 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002108:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;
 800210a:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800210c:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;
 8002110:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002114:	6883      	ldr	r3, [r0, #8]
 8002116:	f023 0307 	bic.w	r3, r3, #7
 800211a:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800211c:	f7ff fea6 	bl	8001e6c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8002120:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8002122:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002124:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8002126:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 8002128:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 800212a:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 800212c:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800212e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002132:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 8002136:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800213a:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800213c:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 8002140:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
 8002142:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800214a:	68e1      	ldr	r1, [r4, #12]
  tmpccer = htim->Instance->CCER;
 800214c:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 800214e:	430b      	orrs	r3, r1
 8002150:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002152:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 8002156:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800215a:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 800215c:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800215e:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 8002162:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8002164:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8002166:	6183      	str	r3, [r0, #24]
  htim->State= HAL_TIM_STATE_READY;
 8002168:	2301      	movs	r3, #1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 800216a:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 800216e:	4317      	orrs	r7, r2
  htim->Instance->CCER = tmpccer;
 8002170:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 8002172:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  return HAL_OK;
 8002176:	2000      	movs	r0, #0
 8002178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800217a:	2001      	movs	r0, #1
}
 800217c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800217e <HAL_TIM_Encoder_Start>:
{
 800217e:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8002180:	b189      	cbz	r1, 80021a6 <HAL_TIM_Encoder_Start+0x28>
 8002182:	2904      	cmp	r1, #4
 8002184:	d007      	beq.n	8002196 <HAL_TIM_Encoder_Start+0x18>
  TIMx->CCER &= ~tmp;
 8002186:	6a1a      	ldr	r2, [r3, #32]
 8002188:	f022 0201 	bic.w	r2, r2, #1
 800218c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800218e:	6a1a      	ldr	r2, [r3, #32]
 8002190:	f042 0201 	orr.w	r2, r2, #1
 8002194:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8002196:	6a1a      	ldr	r2, [r3, #32]
 8002198:	f022 0210 	bic.w	r2, r2, #16
 800219c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800219e:	6a1a      	ldr	r2, [r3, #32]
 80021a0:	f042 0210 	orr.w	r2, r2, #16
 80021a4:	e006      	b.n	80021b4 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80021ae:	6a1a      	ldr	r2, [r3, #32]
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 80021b6:	681a      	ldr	r2, [r3, #0]
}
 80021b8:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
}
 80021c0:	4770      	bx	lr

080021c2 <HAL_TIM_IC_ConfigChannel>:
{
 80021c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80021c4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 80021c8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80021ca:	2b01      	cmp	r3, #1
{
 80021cc:	460d      	mov	r5, r1
 80021ce:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80021d2:	d019      	beq.n	8002208 <HAL_TIM_IC_ConfigChannel+0x46>
 80021d4:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80021d6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  __HAL_LOCK(htim);
 80021da:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (Channel == TIM_CHANNEL_1)
 80021de:	b9a2      	cbnz	r2, 800220a <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 80021e0:	68cb      	ldr	r3, [r1, #12]
 80021e2:	6820      	ldr	r0, [r4, #0]
 80021e4:	c906      	ldmia	r1, {r1, r2}
 80021e6:	f7ff feb1 	bl	8001f4c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80021ea:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80021ec:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80021ee:	699a      	ldr	r2, [r3, #24]
 80021f0:	f022 020c 	bic.w	r2, r2, #12
 80021f4:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80021f6:	699a      	ldr	r2, [r3, #24]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80021fc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80021fe:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002200:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(htim);
 8002204:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8002208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 800220a:	2a04      	cmp	r2, #4
 800220c:	688e      	ldr	r6, [r1, #8]
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	c982      	ldmia	r1, {r1, r7}
 8002212:	68e8      	ldr	r0, [r5, #12]
 8002214:	d11f      	bne.n	8002256 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002216:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 8002218:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800221a:	f022 0210 	bic.w	r2, r2, #16
 800221e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002220:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8002222:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002224:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8);
 8002228:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 800222c:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800222e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002232:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 8002234:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002236:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800223a:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800223e:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8002240:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002242:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800224a:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8);
 800224c:	699a      	ldr	r2, [r3, #24]
 800224e:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002252:	619e      	str	r6, [r3, #24]
 8002254:	e7d2      	b.n	80021fc <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8002256:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002258:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 800225a:	d11c      	bne.n	8002296 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800225c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002260:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002262:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 8002264:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002266:	f022 0203 	bic.w	r2, r2, #3
  tmpccer = TIMx->CCER;
 800226a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= TIM_ICSelection;
 800226c:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 800226e:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002270:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002274:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 8002276:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002278:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800227c:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002280:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8002282:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002284:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	f022 020c 	bic.w	r2, r2, #12
 800228c:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
 8002292:	61de      	str	r6, [r3, #28]
 8002294:	e7b2      	b.n	80021fc <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002296:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800229a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800229c:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 800229e:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80022a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccer = TIMx->CCER;
 80022a4:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= (TIM_ICSelection << 8);
 80022a6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80022aa:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 80022ae:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80022b0:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 80022b2:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80022b4:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80022b8:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80022bc:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 80022be:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 80022c0:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80022c2:	69da      	ldr	r2, [r3, #28]
 80022c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80022c8:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
 80022ca:	69da      	ldr	r2, [r3, #28]
 80022cc:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80022d0:	e7df      	b.n	8002292 <HAL_TIM_IC_ConfigChannel+0xd0>

080022d2 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80022d2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 80022d6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80022d8:	2b01      	cmp	r3, #1
{
 80022da:	4605      	mov	r5, r0
 80022dc:	460c      	mov	r4, r1
 80022de:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80022e2:	d025      	beq.n	8002330 <HAL_TIM_PWM_ConfigChannel+0x5e>
 80022e4:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80022e6:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
  __HAL_LOCK(htim);
 80022ea:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
  switch (Channel)
 80022ee:	2a0c      	cmp	r2, #12
 80022f0:	d818      	bhi.n	8002324 <HAL_TIM_PWM_ConfigChannel+0x52>
 80022f2:	e8df f002 	tbb	[pc, r2]
 80022f6:	1707      	.short	0x1707
 80022f8:	171e1717 	.word	0x171e1717
 80022fc:	172f1717 	.word	0x172f1717
 8002300:	1717      	.short	0x1717
 8002302:	52          	.byte	0x52
 8002303:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002304:	6828      	ldr	r0, [r5, #0]
 8002306:	f7ff fdf3 	bl	8001ef0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800230a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800230c:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800230e:	699a      	ldr	r2, [r3, #24]
 8002310:	f042 0208 	orr.w	r2, r2, #8
 8002314:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002316:	699a      	ldr	r2, [r3, #24]
 8002318:	f022 0204 	bic.w	r2, r2, #4
 800231c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800231e:	699a      	ldr	r2, [r3, #24]
 8002320:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002322:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002324:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002326:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002328:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  __HAL_UNLOCK(htim);
 800232c:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
}
 8002330:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002332:	6828      	ldr	r0, [r5, #0]
 8002334:	f7ff fdf2 	bl	8001f1c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002338:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800233a:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002344:	699a      	ldr	r2, [r3, #24]
 8002346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800234c:	699a      	ldr	r2, [r3, #24]
 800234e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002352:	e7e6      	b.n	8002322 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002354:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= OC_Config->OCMode;
 8002356:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002358:	6a1a      	ldr	r2, [r3, #32]
 800235a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800235e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8002360:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002362:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002364:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8002366:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800236a:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800236e:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002370:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8002372:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002374:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002376:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002378:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  TIMx->CCR3 = OC_Config->Pulse;
 800237c:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800237e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002380:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002382:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002384:	f042 0208 	orr.w	r2, r2, #8
 8002388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800238a:	69da      	ldr	r2, [r3, #28]
 800238c:	f022 0204 	bic.w	r2, r2, #4
 8002390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002392:	69da      	ldr	r2, [r3, #28]
 8002394:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002396:	61da      	str	r2, [r3, #28]
    break;
 8002398:	e7c4      	b.n	8002324 <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800239a:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= (OC_Config->OCMode << 8);
 800239c:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800239e:	6a1a      	ldr	r2, [r3, #32]
 80023a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023a4:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80023a6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80023a8:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80023aa:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80023ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023b0:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 80023b4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 80023b8:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 80023ba:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80023bc:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80023be:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12);
 80023c0:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 80023c4:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80023c6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023c8:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80023ca:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023d2:	69da      	ldr	r2, [r3, #28]
 80023d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80023da:	69da      	ldr	r2, [r3, #28]
 80023dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023e0:	e7d9      	b.n	8002396 <HAL_TIM_PWM_ConfigChannel+0xc4>

080023e2 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80023e2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 80023e6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	f04f 0302 	mov.w	r3, #2
 80023ee:	d01c      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x48>
 80023f0:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80023f2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  tmpsmcr = htim->Instance->SMCR;
 80023f6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80023f8:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  tmpsmcr = htim->Instance->SMCR;
 80023fc:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023fe:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002402:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002406:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002408:	680a      	ldr	r2, [r1, #0]
 800240a:	2a40      	cmp	r2, #64	; 0x40
 800240c:	d079      	beq.n	8002502 <HAL_TIM_ConfigClockSource+0x120>
 800240e:	d819      	bhi.n	8002444 <HAL_TIM_ConfigClockSource+0x62>
 8002410:	2a10      	cmp	r2, #16
 8002412:	f000 8093 	beq.w	800253c <HAL_TIM_ConfigClockSource+0x15a>
 8002416:	d80a      	bhi.n	800242e <HAL_TIM_ConfigClockSource+0x4c>
 8002418:	2a00      	cmp	r2, #0
 800241a:	f000 8089 	beq.w	8002530 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 800241e:	2301      	movs	r3, #1
 8002420:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  __HAL_UNLOCK(htim);
 8002424:	2300      	movs	r3, #0
 8002426:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  __HAL_LOCK(htim);
 800242a:	4618      	mov	r0, r3
}
 800242c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800242e:	2a20      	cmp	r2, #32
 8002430:	f000 808a 	beq.w	8002548 <HAL_TIM_ConfigClockSource+0x166>
 8002434:	2a30      	cmp	r2, #48	; 0x30
 8002436:	d1f2      	bne.n	800241e <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 8002438:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800243a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800243e:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002442:	e036      	b.n	80024b2 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002444:	2a70      	cmp	r2, #112	; 0x70
 8002446:	d036      	beq.n	80024b6 <HAL_TIM_ConfigClockSource+0xd4>
 8002448:	d81b      	bhi.n	8002482 <HAL_TIM_ConfigClockSource+0xa0>
 800244a:	2a50      	cmp	r2, #80	; 0x50
 800244c:	d042      	beq.n	80024d4 <HAL_TIM_ConfigClockSource+0xf2>
 800244e:	2a60      	cmp	r2, #96	; 0x60
 8002450:	d1e5      	bne.n	800241e <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002452:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002454:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002456:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800245a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800245c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800245e:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002460:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002462:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002466:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 800246a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12);
 800246e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002472:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002474:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002476:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002478:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800247c:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002480:	e017      	b.n	80024b2 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002482:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002486:	d011      	beq.n	80024ac <HAL_TIM_ConfigClockSource+0xca>
 8002488:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800248c:	d1c7      	bne.n	800241e <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800248e:	688a      	ldr	r2, [r1, #8]
 8002490:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002492:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002494:	68c9      	ldr	r1, [r1, #12]
 8002496:	432a      	orrs	r2, r5
  tmpsmcr &= (uint32_t)(~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 8002498:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800249c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024a0:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80024a2:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024aa:	e002      	b.n	80024b2 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	e7b3      	b.n	800241e <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80024b6:	688a      	ldr	r2, [r1, #8]
 80024b8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80024ba:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80024bc:	68c9      	ldr	r1, [r1, #12]
 80024be:	432a      	orrs	r2, r5
  tmpsmcr &= (uint32_t)(~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 80024c0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80024c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024c8:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80024ca:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80024cc:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ce:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80024d2:	e7ee      	b.n	80024b2 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024d4:	684c      	ldr	r4, [r1, #4]
 80024d6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80024d8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024da:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024dc:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024e0:	f025 0501 	bic.w	r5, r5, #1
 80024e4:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024e6:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80024e8:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 80024ee:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80024f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024f4:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80024f6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80024f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80024fc:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002500:	e7d7      	b.n	80024b2 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002502:	684c      	ldr	r4, [r1, #4]
 8002504:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002506:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002508:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800250a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800250e:	f025 0501 	bic.w	r5, r5, #1
 8002512:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002514:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002516:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002518:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 800251c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002520:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002522:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002524:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002526:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800252a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 800252e:	e7c0      	b.n	80024b2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002530:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002532:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002536:	f042 0207 	orr.w	r2, r2, #7
 800253a:	e7ba      	b.n	80024b2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800253c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800253e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002542:	f042 0217 	orr.w	r2, r2, #23
 8002546:	e7b4      	b.n	80024b2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002548:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800254a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800254e:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002552:	e7ae      	b.n	80024b2 <HAL_TIM_ConfigClockSource+0xd0>

08002554 <HAL_TIM_OC_DelayElapsedCallback>:
 8002554:	4770      	bx	lr

08002556 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002556:	4770      	bx	lr

08002558 <HAL_TIM_TriggerCallback>:
 8002558:	4770      	bx	lr

0800255a <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800255a:	6803      	ldr	r3, [r0, #0]
{
 800255c:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800255e:	691a      	ldr	r2, [r3, #16]
{
 8002560:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002562:	0791      	lsls	r1, r2, #30
 8002564:	d50e      	bpl.n	8002584 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	0792      	lsls	r2, r2, #30
 800256a:	d50b      	bpl.n	8002584 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800256c:	f06f 0202 	mvn.w	r2, #2
 8002570:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002572:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002574:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002576:	7502      	strb	r2, [r0, #20]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002578:	0799      	lsls	r1, r3, #30
 800257a:	d05c      	beq.n	8002636 <HAL_TIM_IRQHandler+0xdc>
          HAL_TIM_IC_CaptureCallback(htim);
 800257c:	f001 f8d8 	bl	8003730 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002580:	2300      	movs	r3, #0
 8002582:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	0752      	lsls	r2, r2, #29
 800258a:	d510      	bpl.n	80025ae <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	0750      	lsls	r0, r2, #29
 8002590:	d50d      	bpl.n	80025ae <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002592:	f06f 0204 	mvn.w	r2, #4
 8002596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002598:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800259a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800259c:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800259e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80025a2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80025a4:	d04d      	beq.n	8002642 <HAL_TIM_IRQHandler+0xe8>
        HAL_TIM_IC_CaptureCallback(htim);
 80025a6:	f001 f8c3 	bl	8003730 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	2300      	movs	r3, #0
 80025ac:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	0711      	lsls	r1, r2, #28
 80025b4:	d50f      	bpl.n	80025d6 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	0712      	lsls	r2, r2, #28
 80025ba:	d50c      	bpl.n	80025d6 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025bc:	f06f 0208 	mvn.w	r2, #8
 80025c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025c2:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80025c4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025c6:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80025c8:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80025ca:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80025cc:	d03f      	beq.n	800264e <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80025ce:	f001 f8af 	bl	8003730 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d2:	2300      	movs	r3, #0
 80025d4:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	06d0      	lsls	r0, r2, #27
 80025dc:	d510      	bpl.n	8002600 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	06d1      	lsls	r1, r2, #27
 80025e2:	d50d      	bpl.n	8002600 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025e4:	f06f 0210 	mvn.w	r2, #16
 80025e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ea:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80025ec:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ee:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80025f0:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80025f4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80025f6:	d030      	beq.n	800265a <HAL_TIM_IRQHandler+0x100>
        HAL_TIM_IC_CaptureCallback(htim);
 80025f8:	f001 f89a 	bl	8003730 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fc:	2300      	movs	r3, #0
 80025fe:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002600:	6823      	ldr	r3, [r4, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	07d2      	lsls	r2, r2, #31
 8002606:	d508      	bpl.n	800261a <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	07d0      	lsls	r0, r2, #31
 800260c:	d505      	bpl.n	800261a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800260e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002612:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002614:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002616:	f000 fc83 	bl	8002f20 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	0651      	lsls	r1, r2, #25
 8002620:	d508      	bpl.n	8002634 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	0652      	lsls	r2, r2, #25
 8002626:	d505      	bpl.n	8002634 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002628:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800262c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800262e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002630:	f7ff ff92 	bl	8002558 <HAL_TIM_TriggerCallback>
 8002634:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002636:	f7ff ff8d 	bl	8002554 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800263a:	4620      	mov	r0, r4
 800263c:	f7ff ff8b 	bl	8002556 <HAL_TIM_PWM_PulseFinishedCallback>
 8002640:	e79e      	b.n	8002580 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002642:	f7ff ff87 	bl	8002554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002646:	4620      	mov	r0, r4
 8002648:	f7ff ff85 	bl	8002556 <HAL_TIM_PWM_PulseFinishedCallback>
 800264c:	e7ad      	b.n	80025aa <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	f7ff ff81 	bl	8002554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002652:	4620      	mov	r0, r4
 8002654:	f7ff ff7f 	bl	8002556 <HAL_TIM_PWM_PulseFinishedCallback>
 8002658:	e7bb      	b.n	80025d2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800265a:	f7ff ff7b 	bl	8002554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265e:	4620      	mov	r0, r4
 8002660:	f7ff ff79 	bl	8002556 <HAL_TIM_PWM_PulseFinishedCallback>
 8002664:	e7ca      	b.n	80025fc <HAL_TIM_IRQHandler+0xa2>

08002666 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002666:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 800266a:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800266c:	2b01      	cmp	r3, #1
 800266e:	f04f 0302 	mov.w	r3, #2
 8002672:	d018      	beq.n	80026a6 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002674:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002678:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800267a:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800267c:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800267e:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002680:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002684:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	4322      	orrs	r2, r4
 800268a:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002692:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	430a      	orrs	r2, r1
 8002698:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800269a:	2301      	movs	r3, #1
 800269c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  __HAL_UNLOCK(htim);
 80026a0:	2300      	movs	r3, #0
 80026a2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  __HAL_LOCK(htim);
 80026a6:	4618      	mov	r0, r3

  return HAL_OK;
}
 80026a8:	bd10      	pop	{r4, pc}
	...

080026ac <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026b0:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026b2:	6805      	ldr	r5, [r0, #0]
 80026b4:	68c2      	ldr	r2, [r0, #12]
 80026b6:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026b8:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026be:	4313      	orrs	r3, r2
 80026c0:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026c2:	6883      	ldr	r3, [r0, #8]
 80026c4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 80026c6:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026c8:	4303      	orrs	r3, r0
 80026ca:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80026ce:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026d2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 80026d4:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026d8:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80026da:	4313      	orrs	r3, r2
 80026dc:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026de:	696b      	ldr	r3, [r5, #20]
 80026e0:	f8d9 2018 	ldr.w	r2, [r9, #24]
 80026e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e8:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ea:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026ee:	616b      	str	r3, [r5, #20]
 80026f0:	4b7e      	ldr	r3, [pc, #504]	; (80028ec <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026f2:	d17f      	bne.n	80027f4 <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 80026f4:	429d      	cmp	r5, r3
 80026f6:	f04f 0419 	mov.w	r4, #25
 80026fa:	d147      	bne.n	800278c <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80026fc:	f7ff fb9e 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 8002700:	fb04 f300 	mul.w	r3, r4, r0
 8002704:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8002708:	f04f 0864 	mov.w	r8, #100	; 0x64
 800270c:	007f      	lsls	r7, r7, #1
 800270e:	fbb3 f3f7 	udiv	r3, r3, r7
 8002712:	fbb3 f3f8 	udiv	r3, r3, r8
 8002716:	011f      	lsls	r7, r3, #4
 8002718:	f7ff fb90 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 800271c:	4360      	muls	r0, r4
 800271e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fbb0 f6f3 	udiv	r6, r0, r3
 8002728:	f7ff fb88 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 800272c:	4360      	muls	r0, r4
 800272e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fbb0 f3f3 	udiv	r3, r0, r3
 8002738:	fbb3 f3f8 	udiv	r3, r3, r8
 800273c:	fb08 6313 	mls	r3, r8, r3, r6
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	3332      	adds	r3, #50	; 0x32
 8002744:	fbb3 f3f8 	udiv	r3, r3, r8
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 800274e:	f7ff fb75 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 8002752:	4360      	muls	r0, r4
 8002754:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002758:	0052      	lsls	r2, r2, #1
 800275a:	fbb0 faf2 	udiv	sl, r0, r2
 800275e:	f7ff fb6d 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002762:	4360      	muls	r0, r4
 8002764:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	fbb0 f3f3 	udiv	r3, r0, r3
 800276e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002772:	fb08 a313 	mls	r3, r8, r3, sl
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	3332      	adds	r3, #50	; 0x32
 800277a:	fbb3 f3f8 	udiv	r3, r3, r8
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002784:	4433      	add	r3, r6
 8002786:	60ab      	str	r3, [r5, #8]
 8002788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800278c:	f7ff fb3e 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8002790:	fb04 f300 	mul.w	r3, r4, r0
 8002794:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8002798:	f04f 0864 	mov.w	r8, #100	; 0x64
 800279c:	007f      	lsls	r7, r7, #1
 800279e:	fbb3 f3f7 	udiv	r3, r3, r7
 80027a2:	fbb3 f3f8 	udiv	r3, r3, r8
 80027a6:	011f      	lsls	r7, r3, #4
 80027a8:	f7ff fb30 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 80027ac:	4360      	muls	r0, r4
 80027ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	fbb0 f6f3 	udiv	r6, r0, r3
 80027b8:	f7ff fb28 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 80027bc:	4360      	muls	r0, r4
 80027be:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c8:	fbb3 f3f8 	udiv	r3, r3, r8
 80027cc:	fb08 6313 	mls	r3, r8, r3, r6
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	3332      	adds	r3, #50	; 0x32
 80027d4:	fbb3 f3f8 	udiv	r3, r3, r8
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 80027de:	f7ff fb15 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 80027e2:	4360      	muls	r0, r4
 80027e4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80027e8:	0052      	lsls	r2, r2, #1
 80027ea:	fbb0 faf2 	udiv	sl, r0, r2
 80027ee:	f7ff fb0d 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 80027f2:	e7b6      	b.n	8002762 <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 80027f4:	429d      	cmp	r5, r3
 80027f6:	f04f 0419 	mov.w	r4, #25
 80027fa:	d143      	bne.n	8002884 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027fc:	f7ff fb1e 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 8002800:	fb04 f300 	mul.w	r3, r4, r0
 8002804:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002808:	f04f 0864 	mov.w	r8, #100	; 0x64
 800280c:	00b6      	lsls	r6, r6, #2
 800280e:	fbb3 f3f6 	udiv	r3, r3, r6
 8002812:	fbb3 f3f8 	udiv	r3, r3, r8
 8002816:	011e      	lsls	r6, r3, #4
 8002818:	f7ff fb10 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 800281c:	4360      	muls	r0, r4
 800281e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	fbb0 f7f3 	udiv	r7, r0, r3
 8002828:	f7ff fb08 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 800282c:	4360      	muls	r0, r4
 800282e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	fbb0 f3f3 	udiv	r3, r0, r3
 8002838:	fbb3 f3f8 	udiv	r3, r3, r8
 800283c:	fb08 7313 	mls	r3, r8, r3, r7
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	3332      	adds	r3, #50	; 0x32
 8002844:	fbb3 f3f8 	udiv	r3, r3, r8
 8002848:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800284c:	f7ff faf6 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 8002850:	4360      	muls	r0, r4
 8002852:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002856:	0092      	lsls	r2, r2, #2
 8002858:	fbb0 faf2 	udiv	sl, r0, r2
 800285c:	f7ff faee 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002860:	4360      	muls	r0, r4
 8002862:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	fbb0 f3f3 	udiv	r3, r0, r3
 800286c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002870:	fb08 a313 	mls	r3, r8, r3, sl
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	3332      	adds	r3, #50	; 0x32
 8002878:	fbb3 f3f8 	udiv	r3, r3, r8
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	433b      	orrs	r3, r7
 8002882:	e77f      	b.n	8002784 <UART_SetConfig+0xd8>
 8002884:	f7ff fac2 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8002888:	fb04 f300 	mul.w	r3, r4, r0
 800288c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002890:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002894:	00b6      	lsls	r6, r6, #2
 8002896:	fbb3 f3f6 	udiv	r3, r3, r6
 800289a:	fbb3 f3f8 	udiv	r3, r3, r8
 800289e:	011e      	lsls	r6, r3, #4
 80028a0:	f7ff fab4 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 80028a4:	4360      	muls	r0, r4
 80028a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	fbb0 f7f3 	udiv	r7, r0, r3
 80028b0:	f7ff faac 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 80028b4:	4360      	muls	r0, r4
 80028b6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c0:	fbb3 f3f8 	udiv	r3, r3, r8
 80028c4:	fb08 7313 	mls	r3, r8, r3, r7
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	3332      	adds	r3, #50	; 0x32
 80028cc:	fbb3 f3f8 	udiv	r3, r3, r8
 80028d0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80028d4:	f7ff fa9a 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 80028d8:	4360      	muls	r0, r4
 80028da:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80028de:	0092      	lsls	r2, r2, #2
 80028e0:	fbb0 faf2 	udiv	sl, r0, r2
 80028e4:	f7ff fa92 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 80028e8:	e7ba      	b.n	8002860 <UART_SetConfig+0x1b4>
 80028ea:	bf00      	nop
 80028ec:	40013800 	.word	0x40013800

080028f0 <UART_WaitOnFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 80028f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f2:	4604      	mov	r4, r0
 80028f4:	460e      	mov	r6, r1
 80028f6:	4615      	mov	r5, r2
  tickstart = HAL_GetTick();
 80028f8:	f7fe fc76 	bl	80011e8 <HAL_GetTick>
 80028fc:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80028fe:	6822      	ldr	r2, [r4, #0]
 8002900:	6813      	ldr	r3, [r2, #0]
 8002902:	ea36 0303 	bics.w	r3, r6, r3
 8002906:	d101      	bne.n	800290c <UART_WaitOnFlagUntilTimeout.constprop.1+0x1c>
  return HAL_OK;
 8002908:	2000      	movs	r0, #0
}
 800290a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 800290c:	1c6b      	adds	r3, r5, #1
 800290e:	d0f7      	beq.n	8002900 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002910:	b9c5      	cbnz	r5, 8002944 <UART_WaitOnFlagUntilTimeout.constprop.1+0x54>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002912:	6823      	ldr	r3, [r4, #0]
          return HAL_TIMEOUT;
 8002914:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800291c:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	f022 0220 	bic.w	r2, r2, #32
 8002924:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800292c:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800292e:	695a      	ldr	r2, [r3, #20]
 8002930:	f022 0201 	bic.w	r2, r2, #1
 8002934:	615a      	str	r2, [r3, #20]
          huart->State= HAL_UART_STATE_READY;
 8002936:	2301      	movs	r3, #1
 8002938:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
          __HAL_UNLOCK(huart);
 800293c:	2300      	movs	r3, #0
 800293e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002944:	f7fe fc50 	bl	80011e8 <HAL_GetTick>
 8002948:	1bc0      	subs	r0, r0, r7
 800294a:	4285      	cmp	r5, r0
 800294c:	d2d7      	bcs.n	80028fe <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 800294e:	e7e0      	b.n	8002912 <UART_WaitOnFlagUntilTimeout.constprop.1+0x22>

08002950 <HAL_UART_Init>:
{
 8002950:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002952:	4604      	mov	r4, r0
 8002954:	b330      	cbz	r0, 80029a4 <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 8002956:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800295a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800295e:	b91b      	cbnz	r3, 8002968 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002960:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002964:	f001 fca2 	bl	80042ac <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 8002968:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 800296a:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 800296c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002970:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002972:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002974:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002978:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800297a:	f7ff fe97 	bl	80026ac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800297e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002980:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002988:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002990:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002998:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 800299a:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800299c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 800299e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80029a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029a4:	2001      	movs	r0, #1
}
 80029a6:	bd10      	pop	{r4, pc}

080029a8 <HAL_UART_Transmit>:
{
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	460d      	mov	r5, r1
  tmp_state = huart->State;
 80029ac:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
{
 80029b0:	4604      	mov	r4, r0
  tmp_state = huart->State;
 80029b2:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 80029b4:	2901      	cmp	r1, #1
{
 80029b6:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 80029b8:	d001      	beq.n	80029be <HAL_UART_Transmit+0x16>
 80029ba:	2922      	cmp	r1, #34	; 0x22
 80029bc:	d14d      	bne.n	8002a5a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0))
 80029be:	2d00      	cmp	r5, #0
 80029c0:	d049      	beq.n	8002a56 <HAL_UART_Transmit+0xae>
 80029c2:	2a00      	cmp	r2, #0
 80029c4:	d047      	beq.n	8002a56 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80029c6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d045      	beq.n	8002a5a <HAL_UART_Transmit+0xb2>
 80029ce:	2301      	movs	r3, #1
 80029d0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80029d8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 80029dc:	84a2      	strh	r2, [r4, #36]	; 0x24
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80029de:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80029e0:	bf0c      	ite	eq
 80029e2:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 80029e4:	2312      	movne	r3, #18
    huart->TxXferCount = Size;
 80029e6:	84e2      	strh	r2, [r4, #38]	; 0x26
      huart->State = HAL_UART_STATE_BUSY_TX;
 80029e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    while(huart->TxXferCount > 0)
 80029ec:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80029ee:	b98a      	cbnz	r2, 8002a14 <HAL_UART_Transmit+0x6c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80029f0:	4632      	mov	r2, r6
 80029f2:	2140      	movs	r1, #64	; 0x40
 80029f4:	4620      	mov	r0, r4
 80029f6:	f7ff ff7b 	bl	80028f0 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80029fa:	b9c0      	cbnz	r0, 8002a2e <HAL_UART_Transmit+0x86>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80029fc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002a00:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002a02:	bf0c      	ite	eq
 8002a04:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 8002a06:	2301      	movne	r3, #1
 8002a08:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 8002a12:	bd70      	pop	{r4, r5, r6, pc}
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a14:	68a3      	ldr	r3, [r4, #8]
      huart->TxXferCount--;
 8002a16:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->TxXferCount--;
 8002a1c:	84e2      	strh	r2, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002a1e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002a22:	4632      	mov	r2, r6
 8002a24:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a26:	d10d      	bne.n	8002a44 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002a28:	f7ff ff62 	bl	80028f0 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8002a2c:	b108      	cbz	r0, 8002a32 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002a2e:	2003      	movs	r0, #3
 8002a30:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002a32:	882b      	ldrh	r3, [r5, #0]
 8002a34:	6822      	ldr	r2, [r4, #0]
 8002a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a3a:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002a3c:	6923      	ldr	r3, [r4, #16]
 8002a3e:	b943      	cbnz	r3, 8002a52 <HAL_UART_Transmit+0xaa>
          pData +=2;
 8002a40:	3502      	adds	r5, #2
 8002a42:	e7d3      	b.n	80029ec <HAL_UART_Transmit+0x44>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002a44:	f7ff ff54 	bl	80028f0 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	d1f0      	bne.n	8002a2e <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002a4c:	6823      	ldr	r3, [r4, #0]
 8002a4e:	782a      	ldrb	r2, [r5, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	3501      	adds	r5, #1
 8002a54:	e7ca      	b.n	80029ec <HAL_UART_Transmit+0x44>
      return  HAL_ERROR;
 8002a56:	2001      	movs	r0, #1
 8002a58:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8002a5a:	2002      	movs	r0, #2
}
 8002a5c:	bd70      	pop	{r4, r5, r6, pc}

08002a5e <HAL_UART_Receive_IT>:
  tmp_state = huart->State;
 8002a5e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002a62:	b2db      	uxtb	r3, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d001      	beq.n	8002a6c <HAL_UART_Receive_IT+0xe>
 8002a68:	2b12      	cmp	r3, #18
 8002a6a:	d128      	bne.n	8002abe <HAL_UART_Receive_IT+0x60>
    if((pData == NULL ) || (Size == 0))
 8002a6c:	b329      	cbz	r1, 8002aba <HAL_UART_Receive_IT+0x5c>
 8002a6e:	b322      	cbz	r2, 8002aba <HAL_UART_Receive_IT+0x5c>
    __HAL_LOCK(huart);
 8002a70:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d022      	beq.n	8002abe <HAL_UART_Receive_IT+0x60>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxXferSize = Size;
 8002a82:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002a84:	85c2      	strh	r2, [r0, #46]	; 0x2e
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8002a86:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002a8a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8002a8e:	2a12      	cmp	r2, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002a90:	bf0c      	ite	eq
 8002a92:	2232      	moveq	r2, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002a94:	2222      	movne	r2, #34	; 0x22
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a96:	6803      	ldr	r3, [r0, #0]
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002a98:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a9c:	68da      	ldr	r2, [r3, #12]
    huart->pRxBuffPtr = pData;
 8002a9e:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002aa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa4:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002aa6:	695a      	ldr	r2, [r3, #20]
    return HAL_OK;
 8002aa8:	2000      	movs	r0, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	f042 0220 	orr.w	r2, r2, #32
 8002ab6:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8002ab8:	4770      	bx	lr
      return HAL_ERROR;
 8002aba:	2001      	movs	r0, #1
 8002abc:	4770      	bx	lr
    return HAL_BUSY;
 8002abe:	2002      	movs	r0, #2
}
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_UART_TxCpltCallback>:
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_UART_ErrorCallback>:
{
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_UART_IRQHandler>:
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8002ac6:	6802      	ldr	r2, [r0, #0]
{
 8002ac8:	b513      	push	{r0, r1, r4, lr}
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8002aca:	6811      	ldr	r1, [r2, #0]
{
 8002acc:	4604      	mov	r4, r0
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002ace:	07c9      	lsls	r1, r1, #31
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8002ad0:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002ad2:	d505      	bpl.n	8002ae0 <HAL_UART_IRQHandler+0x1a>
 8002ad4:	05db      	lsls	r3, r3, #23
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ad6:	bf42      	ittt	mi
 8002ad8:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 8002ada:	f043 0301 	orrmi.w	r3, r3, #1
 8002ade:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8002ae0:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002ae2:	6953      	ldr	r3, [r2, #20]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002ae4:	0788      	lsls	r0, r1, #30
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002ae6:	f003 0301 	and.w	r3, r3, #1
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002aea:	d504      	bpl.n	8002af6 <HAL_UART_IRQHandler+0x30>
 8002aec:	b11b      	cbz	r3, 8002af6 <HAL_UART_IRQHandler+0x30>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aee:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002af0:	f041 0104 	orr.w	r1, r1, #4
 8002af4:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8002af6:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002af8:	0749      	lsls	r1, r1, #29
 8002afa:	d504      	bpl.n	8002b06 <HAL_UART_IRQHandler+0x40>
 8002afc:	b11b      	cbz	r3, 8002b06 <HAL_UART_IRQHandler+0x40>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002afe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002b00:	f041 0102 	orr.w	r1, r1, #2
 8002b04:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8002b06:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002b08:	0708      	lsls	r0, r1, #28
 8002b0a:	d504      	bpl.n	8002b16 <HAL_UART_IRQHandler+0x50>
 8002b0c:	b11b      	cbz	r3, 8002b16 <HAL_UART_IRQHandler+0x50>
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b10:	f043 0308 	orr.w	r3, r3, #8
 8002b14:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8002b16:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 8002b18:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002b1a:	0689      	lsls	r1, r1, #26
 8002b1c:	d533      	bpl.n	8002b86 <HAL_UART_IRQHandler+0xc0>
 8002b1e:	0698      	lsls	r0, r3, #26
 8002b20:	d531      	bpl.n	8002b86 <HAL_UART_IRQHandler+0xc0>
  tmp_state = huart->State; 
 8002b22:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8002b26:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002b2a:	2b22      	cmp	r3, #34	; 0x22
 8002b2c:	d12b      	bne.n	8002b86 <HAL_UART_IRQHandler+0xc0>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b2e:	68a3      	ldr	r3, [r4, #8]
 8002b30:	6921      	ldr	r1, [r4, #16]
 8002b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b38:	d176      	bne.n	8002c28 <HAL_UART_IRQHandler+0x162>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b3a:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002b3c:	2900      	cmp	r1, #0
 8002b3e:	d16f      	bne.n	8002c20 <HAL_UART_IRQHandler+0x15a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b44:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1;
 8002b48:	62a3      	str	r3, [r4, #40]	; 0x28
    if(--huart->RxXferCount == 0)
 8002b4a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8002b52:	b9c3      	cbnz	r3, 8002b86 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b54:	6823      	ldr	r3, [r4, #0]
      HAL_UART_RxCpltCallback(huart);
 8002b56:	4620      	mov	r0, r4
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	f022 0220 	bic.w	r2, r2, #32
 8002b5e:	60da      	str	r2, [r3, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002b60:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002b64:	2a32      	cmp	r2, #50	; 0x32
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b66:	bf17      	itett	ne
 8002b68:	68da      	ldrne	r2, [r3, #12]
        huart->State = HAL_UART_STATE_BUSY_TX;
 8002b6a:	2312      	moveq	r3, #18
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b6c:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 8002b70:	60da      	strne	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b72:	bf1f      	itttt	ne
 8002b74:	695a      	ldrne	r2, [r3, #20]
 8002b76:	f022 0201 	bicne.w	r2, r2, #1
 8002b7a:	615a      	strne	r2, [r3, #20]
        huart->State = HAL_UART_STATE_READY;
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 8002b82:	f000 f965 	bl	8002e50 <HAL_UART_RxCpltCallback>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8002b86:	6823      	ldr	r3, [r4, #0]
 8002b88:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8002b8a:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002b8c:	0609      	lsls	r1, r1, #24
 8002b8e:	d522      	bpl.n	8002bd6 <HAL_UART_IRQHandler+0x110>
 8002b90:	0610      	lsls	r0, r2, #24
 8002b92:	d520      	bpl.n	8002bd6 <HAL_UART_IRQHandler+0x110>
  tmp_state = huart->State;
 8002b94:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8002b98:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8002b9c:	2a12      	cmp	r2, #18
 8002b9e:	d11a      	bne.n	8002bd6 <HAL_UART_IRQHandler+0x110>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ba0:	68a2      	ldr	r2, [r4, #8]
 8002ba2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002ba6:	6a22      	ldr	r2, [r4, #32]
 8002ba8:	d14c      	bne.n	8002c44 <HAL_UART_IRQHandler+0x17e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002baa:	8811      	ldrh	r1, [r2, #0]
 8002bac:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002bb0:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002bb2:	6921      	ldr	r1, [r4, #16]
 8002bb4:	2900      	cmp	r1, #0
 8002bb6:	d143      	bne.n	8002c40 <HAL_UART_IRQHandler+0x17a>
        huart->pTxBuffPtr += 2;
 8002bb8:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1;
 8002bba:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0)
 8002bbc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002bbe:	3a01      	subs	r2, #1
 8002bc0:	b292      	uxth	r2, r2
 8002bc2:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002bc4:	b93a      	cbnz	r2, 8002bd6 <HAL_UART_IRQHandler+0x110>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bcc:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bd4:	60da      	str	r2, [r3, #12]
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8002bd6:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8002bd8:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002bda:	0649      	lsls	r1, r1, #25
 8002bdc:	d510      	bpl.n	8002c00 <HAL_UART_IRQHandler+0x13a>
 8002bde:	0652      	lsls	r2, r2, #25
 8002be0:	d50e      	bpl.n	8002c00 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002be2:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002be4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bea:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002bec:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002bf0:	2b32      	cmp	r3, #50	; 0x32
    huart->State = HAL_UART_STATE_BUSY_RX;
 8002bf2:	bf0c      	ite	eq
 8002bf4:	2322      	moveq	r3, #34	; 0x22
    huart->State = HAL_UART_STATE_READY;
 8002bf6:	2301      	movne	r3, #1
 8002bf8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002bfc:	f7ff ff61 	bl	8002ac2 <HAL_UART_TxCpltCallback>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c02:	b15b      	cbz	r3, 8002c1c <HAL_UART_IRQHandler+0x156>
    __HAL_UART_CLEAR_PEFLAG(huart);
 8002c04:	6823      	ldr	r3, [r4, #0]
    HAL_UART_ErrorCallback(huart);
 8002c06:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_PEFLAG(huart);
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	9201      	str	r2, [sp, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	9b01      	ldr	r3, [sp, #4]
    huart->State = HAL_UART_STATE_READY;
 8002c12:	2301      	movs	r3, #1
 8002c14:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 8002c18:	f7ff ff54 	bl	8002ac4 <HAL_UART_ErrorCallback>
}
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	f823 2b01 	strh.w	r2, [r3], #1
 8002c26:	e78f      	b.n	8002b48 <HAL_UART_IRQHandler+0x82>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002c28:	b921      	cbnz	r1, 8002c34 <HAL_UART_IRQHandler+0x16e>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c2a:	1c59      	adds	r1, r3, #1
 8002c2c:	6852      	ldr	r2, [r2, #4]
 8002c2e:	62a1      	str	r1, [r4, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	e78a      	b.n	8002b4a <HAL_UART_IRQHandler+0x84>
 8002c34:	6852      	ldr	r2, [r2, #4]
 8002c36:	1c59      	adds	r1, r3, #1
 8002c38:	62a1      	str	r1, [r4, #40]	; 0x28
 8002c3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c3e:	e7f7      	b.n	8002c30 <HAL_UART_IRQHandler+0x16a>
        huart->pTxBuffPtr += 1;
 8002c40:	3201      	adds	r2, #1
 8002c42:	e7ba      	b.n	8002bba <HAL_UART_IRQHandler+0xf4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c44:	1c51      	adds	r1, r2, #1
 8002c46:	6221      	str	r1, [r4, #32]
 8002c48:	7812      	ldrb	r2, [r2, #0]
 8002c4a:	605a      	str	r2, [r3, #4]
 8002c4c:	e7b6      	b.n	8002bbc <HAL_UART_IRQHandler+0xf6>
	...

08002c50 <EXE_CMD>:
		}
		//signal ready for new command
		Transfer_cplt = 0;
	}
}
void EXE_CMD(char*command, TIM_HandleTypeDef* Fan_TIM, UART_HandleTypeDef* huart){
 8002c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c54:	b0b3      	sub	sp, #204	; 0xcc
 8002c56:	460e      	mov	r6, r1
	char cleaningbuffer[100];
	//copy command into buffer
	strcpy(cleaningbuffer, command);
 8002c58:	4601      	mov	r1, r0
 8002c5a:	4668      	mov	r0, sp
void EXE_CMD(char*command, TIM_HandleTypeDef* Fan_TIM, UART_HandleTypeDef* huart){
 8002c5c:	4615      	mov	r5, r2
	strcpy(cleaningbuffer, command);
 8002c5e:	f001 fbcf 	bl	8004400 <strcpy>

	char* tkpnt;
	//get first token
	tkpnt = strtok(cleaningbuffer, " ");
 8002c62:	4971      	ldr	r1, [pc, #452]	; (8002e28 <EXE_CMD+0x1d8>)
 8002c64:	4668      	mov	r0, sp
 8002c66:	f002 fa11 	bl	800508c <strtok>
	if(strncmp(tkpnt, "s",1)==0){
 8002c6a:	7804      	ldrb	r4, [r0, #0]
	tkpnt = strtok(cleaningbuffer, " ");
 8002c6c:	4607      	mov	r7, r0
	if(strncmp(tkpnt, "s",1)==0){
 8002c6e:	2c73      	cmp	r4, #115	; 0x73
 8002c70:	d107      	bne.n	8002c82 <EXE_CMD+0x32>
		/*
		 * Stop command, immediately stops all PWM, Brakes, and zeros all targets
		 */
		__HAL_TIM_SetCompare(Fan_TIM, TIM_CHANNEL_1, 0);
 8002c72:	2200      	movs	r2, #0
 8002c74:	6833      	ldr	r3, [r6, #0]
 8002c76:	635a      	str	r2, [r3, #52]	; 0x34
		Stop_Motors();
	}else if(strncmp(tkpnt, "sm",2)==0){
		/*
		 * Stop motor command, immediately stops motor PWM, Brakes, and zeros all targets
		 */
		Stop_Motors();
 8002c78:	f000 fd24 	bl	80036c4 <Stop_Motors>
	}else{
		char buffer[25];
		uint8_t len = sprintf(buffer,"Invalid Command\r\n"); //sprintf will return the length of 'buffer'
		HAL_UART_Transmit(huart, buffer, len, 1000);
	}
}
 8002c7c:	b033      	add	sp, #204	; 0xcc
 8002c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	}else if(strncmp(tkpnt, "sm",2)==0){
 8002c82:	2202      	movs	r2, #2
 8002c84:	4969      	ldr	r1, [pc, #420]	; (8002e2c <EXE_CMD+0x1dc>)
 8002c86:	f001 fbc3 	bl	8004410 <strncmp>
 8002c8a:	2800      	cmp	r0, #0
 8002c8c:	d0f4      	beq.n	8002c78 <EXE_CMD+0x28>
	}else if(strncmp(tkpnt, "sf",2)==0){
 8002c8e:	2202      	movs	r2, #2
 8002c90:	4967      	ldr	r1, [pc, #412]	; (8002e30 <EXE_CMD+0x1e0>)
 8002c92:	4638      	mov	r0, r7
 8002c94:	f001 fbbc 	bl	8004410 <strncmp>
 8002c98:	b910      	cbnz	r0, 8002ca0 <EXE_CMD+0x50>
		__HAL_TIM_SetCompare(Fan_TIM, TIM_CHANNEL_1, 0);
 8002c9a:	6833      	ldr	r3, [r6, #0]
		__HAL_TIM_SetCompare(Fan_TIM, TIM_CHANNEL_1, pwm);
 8002c9c:	6358      	str	r0, [r3, #52]	; 0x34
 8002c9e:	e7ed      	b.n	8002c7c <EXE_CMD+0x2c>
	}else if (strncmp(tkpnt, "r",1)==0){
 8002ca0:	2c72      	cmp	r4, #114	; 0x72
 8002ca2:	d11a      	bne.n	8002cda <EXE_CMD+0x8a>
		tkpnt = strtok(NULL, " ");
 8002ca4:	4960      	ldr	r1, [pc, #384]	; (8002e28 <EXE_CMD+0x1d8>)
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f002 f9f0 	bl	800508c <strtok>
		float rotomega = atof(tkpnt);
 8002cac:	f001 fb51 	bl	8004352 <atof>
 8002cb0:	4606      	mov	r6, r0
 8002cb2:	460f      	mov	r7, r1
		tkpnt = strtok(NULL, " ");
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	495c      	ldr	r1, [pc, #368]	; (8002e28 <EXE_CMD+0x1d8>)
 8002cb8:	f002 f9e8 	bl	800508c <strtok>
		float rotphi = atof(tkpnt);
 8002cbc:	f001 fb49 	bl	8004352 <atof>
 8002cc0:	f7fd ff00 	bl	8000ac4 <__aeabi_d2f>
		float rotomega = atof(tkpnt);
 8002cc4:	4639      	mov	r1, r7
		float rotphi = atof(tkpnt);
 8002cc6:	4604      	mov	r4, r0
		float rotomega = atof(tkpnt);
 8002cc8:	4630      	mov	r0, r6
 8002cca:	f7fd fefb 	bl	8000ac4 <__aeabi_d2f>
		setArc(rotR, rotomega, rotphi);
 8002cce:	4622      	mov	r2, r4
 8002cd0:	4601      	mov	r1, r0
 8002cd2:	2000      	movs	r0, #0
		setArc(rotR, rotomega, rotphi);
 8002cd4:	f000 f9e8 	bl	80030a8 <setArc>
 8002cd8:	e7d0      	b.n	8002c7c <EXE_CMD+0x2c>
	}else if(strncmp(tkpnt, "f",1)==0){
 8002cda:	2c66      	cmp	r4, #102	; 0x66
 8002cdc:	d108      	bne.n	8002cf0 <EXE_CMD+0xa0>
		tkpnt = strtok(NULL, " ");
 8002cde:	4952      	ldr	r1, [pc, #328]	; (8002e28 <EXE_CMD+0x1d8>)
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f002 f9d3 	bl	800508c <strtok>
		int pwm = atoi(tkpnt);
 8002ce6:	f001 fb37 	bl	8004358 <atoi>
		__HAL_TIM_SetCompare(Fan_TIM, TIM_CHANNEL_1, pwm);
 8002cea:	6833      	ldr	r3, [r6, #0]
		pwm = pwm + 255;
 8002cec:	30ff      	adds	r0, #255	; 0xff
 8002cee:	e7d5      	b.n	8002c9c <EXE_CMD+0x4c>
	}else if(strncmp(tkpnt, "l",1)==0){
 8002cf0:	2c6c      	cmp	r4, #108	; 0x6c
 8002cf2:	d118      	bne.n	8002d26 <EXE_CMD+0xd6>
		tkpnt = strtok(NULL, " ");
 8002cf4:	494c      	ldr	r1, [pc, #304]	; (8002e28 <EXE_CMD+0x1d8>)
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f002 f9c8 	bl	800508c <strtok>
		float lindis = atof(tkpnt);
 8002cfc:	f001 fb29 	bl	8004352 <atof>
 8002d00:	4606      	mov	r6, r0
 8002d02:	460f      	mov	r7, r1
		tkpnt = strtok(NULL, " ");
 8002d04:	2000      	movs	r0, #0
 8002d06:	4948      	ldr	r1, [pc, #288]	; (8002e28 <EXE_CMD+0x1d8>)
 8002d08:	f002 f9c0 	bl	800508c <strtok>
		float linspd = atof(tkpnt);
 8002d0c:	f001 fb21 	bl	8004352 <atof>
 8002d10:	f7fd fed8 	bl	8000ac4 <__aeabi_d2f>
 8002d14:	4604      	mov	r4, r0
		float lindis = atof(tkpnt);
 8002d16:	4639      	mov	r1, r7
 8002d18:	4630      	mov	r0, r6
 8002d1a:	f7fd fed3 	bl	8000ac4 <__aeabi_d2f>
		setLin(lindis, linspd);
 8002d1e:	4621      	mov	r1, r4
 8002d20:	f000 fa8e 	bl	8003240 <setLin>
 8002d24:	e7aa      	b.n	8002c7c <EXE_CMD+0x2c>
	}else if(strncmp(tkpnt, "a",1)==0){
 8002d26:	2c61      	cmp	r4, #97	; 0x61
 8002d28:	d124      	bne.n	8002d74 <EXE_CMD+0x124>
		tkpnt = strtok(NULL, " ");
 8002d2a:	493f      	ldr	r1, [pc, #252]	; (8002e28 <EXE_CMD+0x1d8>)
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f002 f9ad 	bl	800508c <strtok>
		float rotR = atof(tkpnt);
 8002d32:	f001 fb0e 	bl	8004352 <atof>
 8002d36:	4606      	mov	r6, r0
 8002d38:	460f      	mov	r7, r1
		tkpnt = strtok(NULL, " ");
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	493a      	ldr	r1, [pc, #232]	; (8002e28 <EXE_CMD+0x1d8>)
 8002d3e:	f002 f9a5 	bl	800508c <strtok>
		float rotomega = atof(tkpnt);
 8002d42:	f001 fb06 	bl	8004352 <atof>
 8002d46:	4680      	mov	r8, r0
 8002d48:	4689      	mov	r9, r1
		tkpnt = strtok(NULL, " ");
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	4936      	ldr	r1, [pc, #216]	; (8002e28 <EXE_CMD+0x1d8>)
 8002d4e:	f002 f99d 	bl	800508c <strtok>
		float rotphi = atof(tkpnt);
 8002d52:	f001 fafe 	bl	8004352 <atof>
 8002d56:	f7fd feb5 	bl	8000ac4 <__aeabi_d2f>
		float rotomega = atof(tkpnt);
 8002d5a:	4649      	mov	r1, r9
		float rotphi = atof(tkpnt);
 8002d5c:	4605      	mov	r5, r0
		float rotomega = atof(tkpnt);
 8002d5e:	4640      	mov	r0, r8
 8002d60:	f7fd feb0 	bl	8000ac4 <__aeabi_d2f>
 8002d64:	4604      	mov	r4, r0
		float rotR = atof(tkpnt);
 8002d66:	4639      	mov	r1, r7
 8002d68:	4630      	mov	r0, r6
 8002d6a:	f7fd feab 	bl	8000ac4 <__aeabi_d2f>
		setArc(rotR, rotomega, rotphi);
 8002d6e:	462a      	mov	r2, r5
 8002d70:	4621      	mov	r1, r4
 8002d72:	e7af      	b.n	8002cd4 <EXE_CMD+0x84>
	}else if(strncmp(tkpnt, "t",1)==0){
 8002d74:	2c74      	cmp	r4, #116	; 0x74
 8002d76:	d10f      	bne.n	8002d98 <EXE_CMD+0x148>
		uint8_t len=sprintf(buffer,"%i\r\n", millis()); //sprintf will return the length of 'buffer'
 8002d78:	f000 f8e4 	bl	8002f44 <millis>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	a819      	add	r0, sp, #100	; 0x64
 8002d82:	492c      	ldr	r1, [pc, #176]	; (8002e34 <EXE_CMD+0x1e4>)
 8002d84:	f001 fb18 	bl	80043b8 <siprintf>
		HAL_UART_Transmit(huart, buffer, len, 1000);
 8002d88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d8c:	b2c2      	uxtb	r2, r0
		HAL_UART_Transmit(huart, buffer, len, 1000);
 8002d8e:	a919      	add	r1, sp, #100	; 0x64
 8002d90:	4628      	mov	r0, r5
 8002d92:	f7ff fe09 	bl	80029a8 <HAL_UART_Transmit>
}
 8002d96:	e771      	b.n	8002c7c <EXE_CMD+0x2c>
	}else if(strncmp(tkpnt, "d",1)==0){
 8002d98:	2c64      	cmp	r4, #100	; 0x64
 8002d9a:	d109      	bne.n	8002db0 <EXE_CMD+0x160>
		tkpnt = strtok(NULL, " ");
 8002d9c:	4922      	ldr	r1, [pc, #136]	; (8002e28 <EXE_CMD+0x1d8>)
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f002 f974 	bl	800508c <strtok>
		int16_t pwm = atoi(tkpnt);
 8002da4:	f001 fad8 	bl	8004358 <atoi>
		Run_MotorPWM(pwm);
 8002da8:	b200      	sxth	r0, r0
 8002daa:	f000 fc4f 	bl	800364c <Run_MotorPWM>
 8002dae:	e765      	b.n	8002c7c <EXE_CMD+0x2c>
	}else if(strncmp(tkpnt, "e",1)==0){
 8002db0:	2c65      	cmp	r4, #101	; 0x65
 8002db2:	d130      	bne.n	8002e16 <EXE_CMD+0x1c6>
		uint8_t len = sprintf(buffer,"Right Encoder Delta :%i\r\n", Get_RightEncoderPos()); //sprintf will return the length of 'buffer'
 8002db4:	f000 faa0 	bl	80032f8 <Get_RightEncoderPos>
 8002db8:	491f      	ldr	r1, [pc, #124]	; (8002e38 <EXE_CMD+0x1e8>)
 8002dba:	4602      	mov	r2, r0
 8002dbc:	a819      	add	r0, sp, #100	; 0x64
 8002dbe:	f001 fafb 	bl	80043b8 <siprintf>
		HAL_UART_Transmit(huart, buffer, len, 1000);
 8002dc2:	a919      	add	r1, sp, #100	; 0x64
 8002dc4:	b2c2      	uxtb	r2, r0
 8002dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dca:	4628      	mov	r0, r5
 8002dcc:	f7ff fdec 	bl	80029a8 <HAL_UART_Transmit>
		len = sprintf(buffer,"Right Encoder:%i\r\n", TIM3->CNT); //sprintf will return the length of 'buffer'
 8002dd0:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <EXE_CMD+0x1ec>)
 8002dd2:	491b      	ldr	r1, [pc, #108]	; (8002e40 <EXE_CMD+0x1f0>)
 8002dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd6:	a819      	add	r0, sp, #100	; 0x64
 8002dd8:	f001 faee 	bl	80043b8 <siprintf>
		HAL_UART_Transmit(huart, buffer, len, 1000);
 8002ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002de0:	b2c2      	uxtb	r2, r0
 8002de2:	a919      	add	r1, sp, #100	; 0x64
 8002de4:	4628      	mov	r0, r5
 8002de6:	f7ff fddf 	bl	80029a8 <HAL_UART_Transmit>
		len = sprintf(buffer,"Left Encoder Delta:%i\r\n", Get_LeftEncoderPos());
 8002dea:	f000 fa7f 	bl	80032ec <Get_LeftEncoderPos>
 8002dee:	4915      	ldr	r1, [pc, #84]	; (8002e44 <EXE_CMD+0x1f4>)
 8002df0:	4602      	mov	r2, r0
 8002df2:	a819      	add	r0, sp, #100	; 0x64
 8002df4:	f001 fae0 	bl	80043b8 <siprintf>
		HAL_UART_Transmit(huart, buffer, len, 1000);
 8002df8:	a919      	add	r1, sp, #100	; 0x64
 8002dfa:	b2c2      	uxtb	r2, r0
 8002dfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e00:	4628      	mov	r0, r5
 8002e02:	f7ff fdd1 	bl	80029a8 <HAL_UART_Transmit>
		len = sprintf(buffer,"Left Encoder:%i\r\n", TIM2->CNT); //sprintf will return the length of 'buffer'
 8002e06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e0a:	490f      	ldr	r1, [pc, #60]	; (8002e48 <EXE_CMD+0x1f8>)
 8002e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e0e:	a819      	add	r0, sp, #100	; 0x64
 8002e10:	f001 fad2 	bl	80043b8 <siprintf>
 8002e14:	e7b8      	b.n	8002d88 <EXE_CMD+0x138>
		uint8_t len = sprintf(buffer,"Invalid Command\r\n"); //sprintf will return the length of 'buffer'
 8002e16:	490d      	ldr	r1, [pc, #52]	; (8002e4c <EXE_CMD+0x1fc>)
 8002e18:	a819      	add	r0, sp, #100	; 0x64
 8002e1a:	f001 faf1 	bl	8004400 <strcpy>
		HAL_UART_Transmit(huart, buffer, len, 1000);
 8002e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e22:	2211      	movs	r2, #17
 8002e24:	e7b3      	b.n	8002d8e <EXE_CMD+0x13e>
 8002e26:	bf00      	nop
 8002e28:	08006b50 	.word	0x08006b50
 8002e2c:	08006920 	.word	0x08006920
 8002e30:	08006923 	.word	0x08006923
 8002e34:	0800693b 	.word	0x0800693b
 8002e38:	08006926 	.word	0x08006926
 8002e3c:	40000400 	.word	0x40000400
 8002e40:	08006940 	.word	0x08006940
 8002e44:	08006953 	.word	0x08006953
 8002e48:	0800696b 	.word	0x0800696b
 8002e4c:	0800697d 	.word	0x0800697d

08002e50 <HAL_UART_RxCpltCallback>:
//Interrupt callback routine
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	//when character received
    uint8_t i;
    if (huart->Instance == USART1)  //current UART
 8002e50:	6802      	ldr	r2, [r0, #0]
 8002e52:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <HAL_UART_RxCpltCallback+0x48>)
{
 8002e54:	b430      	push	{r4, r5}
    if (huart->Instance == USART1)  //current UART
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d11c      	bne.n	8002e94 <HAL_UART_RxCpltCallback+0x44>
	{
		if (Rx_indx == 0) {
 8002e5a:	4a10      	ldr	r2, [pc, #64]	; (8002e9c <HAL_UART_RxCpltCallback+0x4c>)
 8002e5c:	7813      	ldrb	r3, [r2, #0]
 8002e5e:	b143      	cbz	r3, 8002e72 <HAL_UART_RxCpltCallback+0x22>
			//clear Rx_Buffer before receiving new data
			for (i=0;i<100;i++) Rx_Buffer[i]=0;
		}

		if (Rx_data[0] != 13) //if received data different from ASCII 13 (carriage return \r)
 8002e60:	490f      	ldr	r1, [pc, #60]	; (8002ea0 <HAL_UART_RxCpltCallback+0x50>)
 8002e62:	7809      	ldrb	r1, [r1, #0]
 8002e64:	290d      	cmp	r1, #13
 8002e66:	d10c      	bne.n	8002e82 <HAL_UART_RxCpltCallback+0x32>
		{
			Rx_Buffer[Rx_indx++] = Rx_data[0];    //add data to Rx_Buffer
		}
		else            //if received data = 13
		{
			Transfer_cplt = Rx_indx;//transfer complete, data is ready to read
 8002e68:	490e      	ldr	r1, [pc, #56]	; (8002ea4 <HAL_UART_RxCpltCallback+0x54>)
 8002e6a:	700b      	strb	r3, [r1, #0]
			Rx_indx=0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	7013      	strb	r3, [r2, #0]
 8002e70:	e00b      	b.n	8002e8a <HAL_UART_RxCpltCallback+0x3a>
 8002e72:	4619      	mov	r1, r3
			for (i=0;i<100;i++) Rx_Buffer[i]=0;
 8002e74:	461d      	mov	r5, r3
 8002e76:	4c0c      	ldr	r4, [pc, #48]	; (8002ea8 <HAL_UART_RxCpltCallback+0x58>)
 8002e78:	550d      	strb	r5, [r1, r4]
 8002e7a:	3101      	adds	r1, #1
 8002e7c:	2964      	cmp	r1, #100	; 0x64
 8002e7e:	d1fb      	bne.n	8002e78 <HAL_UART_RxCpltCallback+0x28>
 8002e80:	e7ee      	b.n	8002e60 <HAL_UART_RxCpltCallback+0x10>
			Rx_Buffer[Rx_indx++] = Rx_data[0];    //add data to Rx_Buffer
 8002e82:	1c5c      	adds	r4, r3, #1
 8002e84:	7014      	strb	r4, [r2, #0]
 8002e86:	4a08      	ldr	r2, [pc, #32]	; (8002ea8 <HAL_UART_RxCpltCallback+0x58>)
 8002e88:	54d1      	strb	r1, [r2, r3]
		}

		HAL_UART_Receive_IT(huart, Rx_data, 1);   //activate UART receive interrupt every time
 8002e8a:	2201      	movs	r2, #1
	}

}
 8002e8c:	bc30      	pop	{r4, r5}
		HAL_UART_Receive_IT(huart, Rx_data, 1);   //activate UART receive interrupt every time
 8002e8e:	4904      	ldr	r1, [pc, #16]	; (8002ea0 <HAL_UART_RxCpltCallback+0x50>)
 8002e90:	f7ff bde5 	b.w	8002a5e <HAL_UART_Receive_IT>
}
 8002e94:	bc30      	pop	{r4, r5}
 8002e96:	4770      	bx	lr
 8002e98:	40013800 	.word	0x40013800
 8002e9c:	20000219 	.word	0x20000219
 8002ea0:	2000021a 	.word	0x2000021a
 8002ea4:	20000218 	.word	0x20000218
 8002ea8:	2000021c 	.word	0x2000021c

08002eac <UART_ReadStart>:
//Wrapper function to force recieve interrupt start
void UART_ReadStart(UART_HandleTypeDef *huart){
	HAL_UART_Receive_IT(huart, Rx_data, 1);
 8002eac:	2201      	movs	r2, #1
 8002eae:	4901      	ldr	r1, [pc, #4]	; (8002eb4 <UART_ReadStart+0x8>)
 8002eb0:	f7ff bdd5 	b.w	8002a5e <HAL_UART_Receive_IT>
 8002eb4:	2000021a 	.word	0x2000021a

08002eb8 <Parse_CMD>:
void Parse_CMD(TIM_HandleTypeDef* Fan_TIM,UART_HandleTypeDef* huart){
 8002eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(Transfer_cplt >= 1){
 8002eba:	4c16      	ldr	r4, [pc, #88]	; (8002f14 <Parse_CMD+0x5c>)
void Parse_CMD(TIM_HandleTypeDef* Fan_TIM,UART_HandleTypeDef* huart){
 8002ebc:	b0a1      	sub	sp, #132	; 0x84
 8002ebe:	4607      	mov	r7, r0
	UART_ReadStart(huart);
 8002ec0:	4608      	mov	r0, r1
void Parse_CMD(TIM_HandleTypeDef* Fan_TIM,UART_HandleTypeDef* huart){
 8002ec2:	460d      	mov	r5, r1
	UART_ReadStart(huart);
 8002ec4:	f7ff fff2 	bl	8002eac <UART_ReadStart>
	if(Transfer_cplt >= 1){
 8002ec8:	7823      	ldrb	r3, [r4, #0]
 8002eca:	b303      	cbz	r3, 8002f0e <Parse_CMD+0x56>
		memset(cmd,0,sizeof cmd);
 8002ecc:	2264      	movs	r2, #100	; 0x64
 8002ece:	2100      	movs	r1, #0
 8002ed0:	a807      	add	r0, sp, #28
 8002ed2:	f001 fa69 	bl	80043a8 <memset>
		strcpy(cmd, Rx_Buffer);
 8002ed6:	4910      	ldr	r1, [pc, #64]	; (8002f18 <Parse_CMD+0x60>)
 8002ed8:	a807      	add	r0, sp, #28
 8002eda:	f001 fa91 	bl	8004400 <strcpy>
		uint8_t len = sprintf(buffer,"string:%s\r\n", cmd); //sprintf will return the length of 'buffer'
 8002ede:	aa07      	add	r2, sp, #28
 8002ee0:	490e      	ldr	r1, [pc, #56]	; (8002f1c <Parse_CMD+0x64>)
 8002ee2:	4668      	mov	r0, sp
 8002ee4:	f001 fa68 	bl	80043b8 <siprintf>
		cmd[Transfer_cplt]='\0';
 8002ee8:	2600      	movs	r6, #0
		HAL_UART_Transmit(huart, buffer, len, 1000);
 8002eea:	b2c2      	uxtb	r2, r0
 8002eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ef0:	4669      	mov	r1, sp
 8002ef2:	4628      	mov	r0, r5
 8002ef4:	f7ff fd58 	bl	80029a8 <HAL_UART_Transmit>
		cmd[Transfer_cplt]='\0';
 8002ef8:	7823      	ldrb	r3, [r4, #0]
 8002efa:	aa20      	add	r2, sp, #128	; 0x80
 8002efc:	4413      	add	r3, r2
			EXE_CMD(cmd, Fan_TIM, huart);
 8002efe:	4639      	mov	r1, r7
 8002f00:	462a      	mov	r2, r5
 8002f02:	a807      	add	r0, sp, #28
		cmd[Transfer_cplt]='\0';
 8002f04:	f803 6c64 	strb.w	r6, [r3, #-100]
			EXE_CMD(cmd, Fan_TIM, huart);
 8002f08:	f7ff fea2 	bl	8002c50 <EXE_CMD>
		Transfer_cplt = 0;
 8002f0c:	7026      	strb	r6, [r4, #0]
}
 8002f0e:	b021      	add	sp, #132	; 0x84
 8002f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000218 	.word	0x20000218
 8002f18:	2000021c 	.word	0x2000021c
 8002f1c:	0800698f 	.word	0x0800698f

08002f20 <HAL_TIM_PeriodElapsedCallback>:
//internal clock counter
uint64_t timeElapsed = 0;
//general timer callback, maybe not a great idea if we need to have other period elapsed callbacks
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if (htim->Instance==TIM6) //check if the interrupt comes from TIM3
 8002f20:	6802      	ldr	r2, [r0, #0]
 8002f22:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d107      	bne.n	8002f38 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		timeElapsed++;
 8002f28:	4905      	ldr	r1, [pc, #20]	; (8002f40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f2a:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002f2e:	3201      	adds	r2, #1
 8002f30:	f143 0300 	adc.w	r3, r3, #0
 8002f34:	e9c1 2300 	strd	r2, r3, [r1]
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40001000 	.word	0x40001000
 8002f40:	200001f8 	.word	0x200001f8

08002f44 <millis>:
	}
}
//returns time in milliseconds since beginning of timer interrupt
uint64_t millis(){
	return timeElapsed;
}
 8002f44:	4b01      	ldr	r3, [pc, #4]	; (8002f4c <millis+0x8>)
 8002f46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f4a:	4770      	bx	lr
 8002f4c:	200001f8 	.word	0x200001f8

08002f50 <initCOM>:
struct cmdqueue COM;
//char** queue;
char buildqueue[QUEUESIZE][100];
char deqtemp[100];
void initCOM(){
	COM.back = QUEUESIZE-1;
 8002f50:	2318      	movs	r3, #24
 8002f52:	4a0b      	ldr	r2, [pc, #44]	; (8002f80 <initCOM+0x30>)
void initCOM(){
 8002f54:	b530      	push	{r4, r5, lr}
	COM.back = QUEUESIZE-1;
 8002f56:	7053      	strb	r3, [r2, #1]
	COM.front = 0;
 8002f58:	2300      	movs	r3, #0
	COM.size = 0;
	COM.capacity = (uint8_t)QUEUESIZE;
 8002f5a:	2119      	movs	r1, #25
	for(int i = 0; i<QUEUESIZE; i++){
		for(int j=0; j<100; j++){
			COM.cmds[i][j] = 0;
 8002f5c:	461c      	mov	r4, r3
	for(int i = 0; i<QUEUESIZE; i++){
 8002f5e:	f640 15c4 	movw	r5, #2500	; 0x9c4
	COM.front = 0;
 8002f62:	7013      	strb	r3, [r2, #0]
	COM.size = 0;
 8002f64:	7093      	strb	r3, [r2, #2]
	COM.capacity = (uint8_t)QUEUESIZE;
 8002f66:	70d1      	strb	r1, [r2, #3]
void initCOM(){
 8002f68:	2100      	movs	r1, #0
			COM.cmds[i][j] = 0;
 8002f6a:	18c8      	adds	r0, r1, r3
		for(int j=0; j<100; j++){
 8002f6c:	3101      	adds	r1, #1
			COM.cmds[i][j] = 0;
 8002f6e:	4410      	add	r0, r2
		for(int j=0; j<100; j++){
 8002f70:	2964      	cmp	r1, #100	; 0x64
			COM.cmds[i][j] = 0;
 8002f72:	7104      	strb	r4, [r0, #4]
		for(int j=0; j<100; j++){
 8002f74:	d1f9      	bne.n	8002f6a <initCOM+0x1a>
 8002f76:	3364      	adds	r3, #100	; 0x64
	for(int i = 0; i<QUEUESIZE; i++){
 8002f78:	42ab      	cmp	r3, r5
 8002f7a:	d1f5      	bne.n	8002f68 <initCOM+0x18>
 8002f7c:	bd30      	pop	{r4, r5, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000c44 	.word	0x20000c44

08002f84 <isEmpty>:
	if(COM.size == COM.capacity) return true;
	return false;

}
int isEmpty(){
	if (COM.size == 0) return true;
 8002f84:	4b02      	ldr	r3, [pc, #8]	; (8002f90 <isEmpty+0xc>)
 8002f86:	7898      	ldrb	r0, [r3, #2]
	return false;
}
 8002f88:	fab0 f080 	clz	r0, r0
 8002f8c:	0940      	lsrs	r0, r0, #5
 8002f8e:	4770      	bx	lr
 8002f90:	20000c44 	.word	0x20000c44

08002f94 <deq>:
char* deq(){
 8002f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(isEmpty()){
 8002f96:	f7ff fff5 	bl	8002f84 <isEmpty>
 8002f9a:	4606      	mov	r6, r0
 8002f9c:	b9d8      	cbnz	r0, 8002fd6 <deq+0x42>
		return "";
	}

	strcpy(deqtemp, COM.cmds[COM.front]);
 8002f9e:	2764      	movs	r7, #100	; 0x64
 8002fa0:	4c0e      	ldr	r4, [pc, #56]	; (8002fdc <deq+0x48>)
 8002fa2:	480f      	ldr	r0, [pc, #60]	; (8002fe0 <deq+0x4c>)
 8002fa4:	7825      	ldrb	r5, [r4, #0]
 8002fa6:	fb07 4505 	mla	r5, r7, r5, r4
 8002faa:	3504      	adds	r5, #4
 8002fac:	4629      	mov	r1, r5
 8002fae:	f001 fa27 	bl	8004400 <strcpy>
	char*item = deqtemp;
	memset(COM.cmds[COM.front],0, sizeof COM.cmds[COM.front]);
 8002fb2:	463a      	mov	r2, r7
 8002fb4:	4631      	mov	r1, r6
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	f001 f9f6 	bl	80043a8 <memset>
	COM.front = (COM.front + 1) % COM.capacity;
 8002fbc:	7823      	ldrb	r3, [r4, #0]
 8002fbe:	78e1      	ldrb	r1, [r4, #3]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	fb93 f2f1 	sdiv	r2, r3, r1
 8002fc6:	fb01 3312 	mls	r3, r1, r2, r3
 8002fca:	7023      	strb	r3, [r4, #0]
	COM.size -=1;
 8002fcc:	78a3      	ldrb	r3, [r4, #2]
	return item;
 8002fce:	4804      	ldr	r0, [pc, #16]	; (8002fe0 <deq+0x4c>)
	COM.size -=1;
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	70a3      	strb	r3, [r4, #2]
	return item;
 8002fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return "";
 8002fd6:	4803      	ldr	r0, [pc, #12]	; (8002fe4 <deq+0x50>)
}
 8002fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000c44 	.word	0x20000c44
 8002fe0:	2000160c 	.word	0x2000160c
 8002fe4:	0800698e 	.word	0x0800698e

08002fe8 <initMot>:
#include "WW_Loc.h"
struct motor left;
struct motor right;
//initiate right and left motor data structures. Also initializes PID controllers.
void initMot(TIM_HandleTypeDef* TIM_RightEnc, TIM_HandleTypeDef* TIM_LeftEnc,
		TIM_HandleTypeDef* TIM_RightMot, TIM_HandleTypeDef* TIM_LeftMot){
 8002fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	right.prevcount = __HAL_TIM_GET_COUNTER(TIM_RightEnc);
 8002fec:	6804      	ldr	r4, [r0, #0]
 8002fee:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 8003090 <initMot+0xa8>
 8002ff2:	6a64      	ldr	r4, [r4, #36]	; 0x24

	left.setRPM = 0.0;
	left.setDis = 0.0;
	left.distance_traveled = 0.0f;

	PIDInit(&right.PID, KP, KI, KD, .1, ((float)PID_PERIOD)/1000.0, 255, AUTOMATIC, DIRECT);
 8002ff4:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8003094 <initMot+0xac>
	right.prevcount = __HAL_TIM_GET_COUNTER(TIM_RightEnc);
 8002ff8:	f8ae 4010 	strh.w	r4, [lr, #16]
	left.prevcount = __HAL_TIM_GET_COUNTER(TIM_LeftEnc);
 8002ffc:	680c      	ldr	r4, [r1, #0]
	PIDInit(&right.PID, KP, KI, KD, .1, ((float)PID_PERIOD)/1000.0, 255, AUTOMATIC, DIRECT);
 8002ffe:	4f21      	ldr	r7, [pc, #132]	; (8003084 <initMot+0x9c>)
	left.prevcount = __HAL_TIM_GET_COUNTER(TIM_LeftEnc);
 8003000:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003002:	4c21      	ldr	r4, [pc, #132]	; (8003088 <initMot+0xa0>)
	PIDInit(&right.PID, KP, KI, KD, .1, ((float)PID_PERIOD)/1000.0, 255, AUTOMATIC, DIRECT);
 8003004:	4e21      	ldr	r6, [pc, #132]	; (800308c <initMot+0xa4>)
	left.pwm = TIM_LeftMot;
 8003006:	61a3      	str	r3, [r4, #24]
	right.setRPM = 0.0;
 8003008:	2300      	movs	r3, #0
	left.prevcount = __HAL_TIM_GET_COUNTER(TIM_LeftEnc);
 800300a:	8225      	strh	r5, [r4, #16]
	right.setRPM = 0.0;
 800300c:	f8ce 3000 	str.w	r3, [lr]
	right.setDis = 0.0;
 8003010:	f8ce 300c 	str.w	r3, [lr, #12]
	right.distance_traveled = 0.0f;
 8003014:	f8ce 3008 	str.w	r3, [lr, #8]
	left.setRPM = 0.0;
 8003018:	6023      	str	r3, [r4, #0]
	left.setDis = 0.0;
 800301a:	60e3      	str	r3, [r4, #12]
	left.distance_traveled = 0.0f;
 800301c:	60a3      	str	r3, [r4, #8]
	right.dir = false;
 800301e:	2500      	movs	r5, #0
	PIDInit(&right.PID, KP, KI, KD, .1, ((float)PID_PERIOD)/1000.0, 255, AUTOMATIC, DIRECT);
 8003020:	2301      	movs	r3, #1
 8003022:	f8df a074 	ldr.w	sl, [pc, #116]	; 8003098 <initMot+0xb0>
 8003026:	f8df 9074 	ldr.w	r9, [pc, #116]	; 800309c <initMot+0xb4>
 800302a:	f8df b074 	ldr.w	fp, [pc, #116]	; 80030a0 <initMot+0xb8>
		TIM_HandleTypeDef* TIM_RightMot, TIM_HandleTypeDef* TIM_LeftMot){
 800302e:	b087      	sub	sp, #28
	right.encoder = TIM_RightEnc;
 8003030:	f8ce 0014 	str.w	r0, [lr, #20]
	right.pwm = TIM_RightMot;
 8003034:	f8ce 2018 	str.w	r2, [lr, #24]
	left.encoder = TIM_LeftEnc;
 8003038:	6161      	str	r1, [r4, #20]
	right.dir = false;
 800303a:	f88e 5004 	strb.w	r5, [lr, #4]
	left.dir = false;
 800303e:	7125      	strb	r5, [r4, #4]
	PIDInit(&right.PID, KP, KI, KD, .1, ((float)PID_PERIOD)/1000.0, 255, AUTOMATIC, DIRECT);
 8003040:	f10e 001c 	add.w	r0, lr, #28
 8003044:	9303      	str	r3, [sp, #12]
 8003046:	463a      	mov	r2, r7
 8003048:	4643      	mov	r3, r8
 800304a:	4631      	mov	r1, r6
 800304c:	9504      	str	r5, [sp, #16]
 800304e:	f8cd a008 	str.w	sl, [sp, #8]
 8003052:	f8cd 9004 	str.w	r9, [sp, #4]
 8003056:	f8cd b000 	str.w	fp, [sp]
 800305a:	f000 fdb1 	bl	8003bc0 <PIDInit>
	PIDInit(&left.PID, KP, KI, KD, .1, ((float)PID_PERIOD)/1000.0, 255, AUTOMATIC, DIRECT);
 800305e:	2301      	movs	r3, #1
 8003060:	9504      	str	r5, [sp, #16]
 8003062:	9303      	str	r3, [sp, #12]
 8003064:	f8cd a008 	str.w	sl, [sp, #8]
 8003068:	f8cd 9004 	str.w	r9, [sp, #4]
 800306c:	f8cd b000 	str.w	fp, [sp]
 8003070:	4643      	mov	r3, r8
 8003072:	463a      	mov	r2, r7
 8003074:	4631      	mov	r1, r6
 8003076:	f104 001c 	add.w	r0, r4, #28
 800307a:	f000 fda1 	bl	8003bc0 <PIDInit>

}
 800307e:	b007      	add	sp, #28
 8003080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003084:	40533333 	.word	0x40533333
 8003088:	200016c8 	.word	0x200016c8
 800308c:	3f666666 	.word	0x3f666666
 8003090:	20001670 	.word	0x20001670
 8003094:	3d8f5c29 	.word	0x3d8f5c29
 8003098:	437f0000 	.word	0x437f0000
 800309c:	3ccccccd 	.word	0x3ccccccd
 80030a0:	3dcccccd 	.word	0x3dcccccd
 80030a4:	00000000 	.word	0x00000000

080030a8 <setArc>:
//sets targets for arc move
void setArc(float R/*mm*/, float w/*degrees/s*/, float phi/*degrees*/){
 80030a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ac:	4606      	mov	r6, r0
 80030ae:	b085      	sub	sp, #20
	float scalingfactor = 60.0/360.0;//(seconds/minute)/(degrees/revolution)
	right.setRPM = (w*(R+CENTERDIS))*scalingfactor*(1/WHEELRAD);
 80030b0:	4608      	mov	r0, r1
void setArc(float R/*mm*/, float w/*degrees/s*/, float phi/*degrees*/){
 80030b2:	9203      	str	r2, [sp, #12]
	right.setRPM = (w*(R+CENTERDIS))*scalingfactor*(1/WHEELRAD);
 80030b4:	f7fd f9d0 	bl	8000458 <__aeabi_f2d>
 80030b8:	e9cd 0100 	strd	r0, r1, [sp]
 80030bc:	4630      	mov	r0, r6
 80030be:	f7fd f9cb 	bl	8000458 <__aeabi_f2d>
 80030c2:	a353      	add	r3, pc, #332	; (adr r3, 8003210 <setArc+0x168>)
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	4606      	mov	r6, r0
 80030ca:	460f      	mov	r7, r1
 80030cc:	f7fd f866 	bl	800019c <__adddf3>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4680      	mov	r8, r0
 80030d6:	4689      	mov	r9, r1
 80030d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80030dc:	f7fd fa10 	bl	8000500 <__aeabi_dmul>
 80030e0:	a34d      	add	r3, pc, #308	; (adr r3, 8003218 <setArc+0x170>)
 80030e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e6:	f7fd fa0b 	bl	8000500 <__aeabi_dmul>
 80030ea:	a34d      	add	r3, pc, #308	; (adr r3, 8003220 <setArc+0x178>)
 80030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f0:	f7fd fa06 	bl	8000500 <__aeabi_dmul>
 80030f4:	f7fd fce6 	bl	8000ac4 <__aeabi_d2f>
	left.setRPM = (w*(R-CENTERDIS))*scalingfactor*(1/WHEELRAD);
 80030f8:	a345      	add	r3, pc, #276	; (adr r3, 8003210 <setArc+0x168>)
 80030fa:	e9d3 2300 	ldrd	r2, r3, [r3]
	right.setRPM = (w*(R+CENTERDIS))*scalingfactor*(1/WHEELRAD);
 80030fe:	4d4c      	ldr	r5, [pc, #304]	; (8003230 <setArc+0x188>)
 8003100:	4682      	mov	sl, r0
 8003102:	6028      	str	r0, [r5, #0]
	left.setRPM = (w*(R-CENTERDIS))*scalingfactor*(1/WHEELRAD);
 8003104:	4639      	mov	r1, r7
 8003106:	4630      	mov	r0, r6
 8003108:	f7fd f846 	bl	8000198 <__aeabi_dsub>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4606      	mov	r6, r0
 8003112:	460f      	mov	r7, r1
 8003114:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003118:	f7fd f9f2 	bl	8000500 <__aeabi_dmul>
 800311c:	a33e      	add	r3, pc, #248	; (adr r3, 8003218 <setArc+0x170>)
 800311e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003122:	f7fd f9ed 	bl	8000500 <__aeabi_dmul>
 8003126:	a33e      	add	r3, pc, #248	; (adr r3, 8003220 <setArc+0x178>)
 8003128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312c:	f7fd f9e8 	bl	8000500 <__aeabi_dmul>
 8003130:	f7fd fcc8 	bl	8000ac4 <__aeabi_d2f>
 8003134:	4c3f      	ldr	r4, [pc, #252]	; (8003234 <setArc+0x18c>)
 8003136:	4683      	mov	fp, r0
 8003138:	6020      	str	r0, [r4, #0]
	//set appropriate values for reverse operation
	if (right.setRPM < 0){
 800313a:	2100      	movs	r1, #0
 800313c:	4650      	mov	r0, sl
 800313e:	f7fd ffbd 	bl	80010bc <__aeabi_fcmplt>
 8003142:	2800      	cmp	r0, #0
 8003144:	d05e      	beq.n	8003204 <setArc+0x15c>
		right.setRPM = -1*right.setRPM;
		right.dir = true;
 8003146:	2201      	movs	r2, #1
		right.setRPM = -1*right.setRPM;
 8003148:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
 800314c:	f8c5 a000 	str.w	sl, [r5]
		right.dir = true;
 8003150:	712a      	strb	r2, [r5, #4]
	else
	{
		right.dir = false;
	}

	if (left.setRPM < 0){
 8003152:	2100      	movs	r1, #0
 8003154:	4658      	mov	r0, fp
 8003156:	f7fd ffb1 	bl	80010bc <__aeabi_fcmplt>
 800315a:	2800      	cmp	r0, #0
 800315c:	d054      	beq.n	8003208 <setArc+0x160>
		left.setRPM = -1*left.setRPM;
 800315e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003162:	6023      	str	r3, [r4, #0]
		left.dir = true;
 8003164:	2301      	movs	r3, #1
 8003166:	7123      	strb	r3, [r4, #4]
	else
	{
		left.dir = false;
	}
	//get arc length for distance target
	right.setDis = abs((R+CENTERDIS)*phi*M_PI/180);
 8003168:	9803      	ldr	r0, [sp, #12]
 800316a:	f7fd f975 	bl	8000458 <__aeabi_f2d>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4682      	mov	sl, r0
 8003174:	468b      	mov	fp, r1
 8003176:	4640      	mov	r0, r8
 8003178:	4649      	mov	r1, r9
 800317a:	f7fd f9c1 	bl	8000500 <__aeabi_dmul>
 800317e:	a32a      	add	r3, pc, #168	; (adr r3, 8003228 <setArc+0x180>)
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f7fd f9bc 	bl	8000500 <__aeabi_dmul>
 8003188:	2200      	movs	r2, #0
 800318a:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <setArc+0x190>)
 800318c:	f7fd fae2 	bl	8000754 <__aeabi_ddiv>
 8003190:	f7fd fc50 	bl	8000a34 <__aeabi_d2iz>
 8003194:	2800      	cmp	r0, #0
 8003196:	bfb8      	it	lt
 8003198:	4240      	neglt	r0, r0
 800319a:	f7fd fd9d 	bl	8000cd8 <__aeabi_i2f>
	left.setDis = abs((R-CENTERDIS)*phi*M_PI/180);
 800319e:	4652      	mov	r2, sl
	right.setDis = abs((R+CENTERDIS)*phi*M_PI/180);
 80031a0:	60e8      	str	r0, [r5, #12]
	left.setDis = abs((R-CENTERDIS)*phi*M_PI/180);
 80031a2:	465b      	mov	r3, fp
 80031a4:	4630      	mov	r0, r6
 80031a6:	4639      	mov	r1, r7
 80031a8:	f7fd f9aa 	bl	8000500 <__aeabi_dmul>
 80031ac:	a31e      	add	r3, pc, #120	; (adr r3, 8003228 <setArc+0x180>)
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	f7fd f9a5 	bl	8000500 <__aeabi_dmul>
 80031b6:	2200      	movs	r2, #0
 80031b8:	4b1f      	ldr	r3, [pc, #124]	; (8003238 <setArc+0x190>)
 80031ba:	f7fd facb 	bl	8000754 <__aeabi_ddiv>
 80031be:	f7fd fc39 	bl	8000a34 <__aeabi_d2iz>
 80031c2:	2800      	cmp	r0, #0
 80031c4:	bfb8      	it	lt
 80031c6:	4240      	neglt	r0, r0
 80031c8:	f7fd fd86 	bl	8000cd8 <__aeabi_i2f>
	//adjust again for negative phi
	if (phi < 0){
 80031cc:	2100      	movs	r1, #0
	left.setDis = abs((R-CENTERDIS)*phi*M_PI/180);
 80031ce:	60e0      	str	r0, [r4, #12]
	if (phi < 0){
 80031d0:	9803      	ldr	r0, [sp, #12]
 80031d2:	f7fd ff73 	bl	80010bc <__aeabi_fcmplt>
 80031d6:	b178      	cbz	r0, 80031f8 <setArc+0x150>
		left.setRPM = -1*left.setRPM;
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80031de:	6023      	str	r3, [r4, #0]
		left.dir = !left.dir;
 80031e0:	7923      	ldrb	r3, [r4, #4]
 80031e2:	f083 0301 	eor.w	r3, r3, #1
 80031e6:	7123      	strb	r3, [r4, #4]
		right.setRPM = -1*right.setRPM;
 80031e8:	682b      	ldr	r3, [r5, #0]
 80031ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80031ee:	602b      	str	r3, [r5, #0]
		right.dir = !right.dir;
 80031f0:	792b      	ldrb	r3, [r5, #4]
 80031f2:	f083 0301 	eor.w	r3, r3, #1
 80031f6:	712b      	strb	r3, [r5, #4]
	}
	//Re-initialize targeting to a rotation/distance
	right.distance_traveled = 0.0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60ab      	str	r3, [r5, #8]
	left.distance_traveled = 0.0;
 80031fc:	60a3      	str	r3, [r4, #8]
}
 80031fe:	b005      	add	sp, #20
 8003200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		right.dir = false;
 8003204:	7128      	strb	r0, [r5, #4]
 8003206:	e7a4      	b.n	8003152 <setArc+0xaa>
		left.dir = false;
 8003208:	7120      	strb	r0, [r4, #4]
 800320a:	e7ad      	b.n	8003168 <setArc+0xc0>
 800320c:	f3af 8000 	nop.w
 8003210:	00000000 	.word	0x00000000
 8003214:	406bc800 	.word	0x406bc800
 8003218:	60000000 	.word	0x60000000
 800321c:	3fc55555 	.word	0x3fc55555
 8003220:	b84c05c2 	.word	0xb84c05c2
 8003224:	3f970980 	.word	0x3f970980
 8003228:	54442d18 	.word	0x54442d18
 800322c:	400921fb 	.word	0x400921fb
 8003230:	20001670 	.word	0x20001670
 8003234:	200016c8 	.word	0x200016c8
 8003238:	40668000 	.word	0x40668000
 800323c:	00000000 	.word	0x00000000

08003240 <setLin>:
//sets targets for linear move
void setLin(float dis/*mm*/, float spd/*mm/s*/){
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	4607      	mov	r7, r0
	//calculate rpm
	right.setRPM = (spd/(2.0*M_PI*WHEELRAD))*60.0;
 8003244:	4608      	mov	r0, r1
 8003246:	f7fd f907 	bl	8000458 <__aeabi_f2d>
 800324a:	a313      	add	r3, pc, #76	; (adr r3, 8003298 <setLin+0x58>)
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	f7fd fa80 	bl	8000754 <__aeabi_ddiv>
 8003254:	2200      	movs	r2, #0
 8003256:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <setLin+0x60>)
 8003258:	f7fd f952 	bl	8000500 <__aeabi_dmul>
 800325c:	f7fd fc32 	bl	8000ac4 <__aeabi_d2f>
 8003260:	4d10      	ldr	r5, [pc, #64]	; (80032a4 <setLin+0x64>)
	left.setRPM = right.setRPM;
 8003262:	4c11      	ldr	r4, [pc, #68]	; (80032a8 <setLin+0x68>)
	right.setRPM = (spd/(2.0*M_PI*WHEELRAD))*60.0;
 8003264:	6028      	str	r0, [r5, #0]
	left.setRPM = right.setRPM;
 8003266:	6020      	str	r0, [r4, #0]
	//reverse if rpm negative
	if (right.setRPM < 0){
 8003268:	2100      	movs	r1, #0
	right.setRPM = (spd/(2.0*M_PI*WHEELRAD))*60.0;
 800326a:	4606      	mov	r6, r0
	if (right.setRPM < 0){
 800326c:	f7fd ff26 	bl	80010bc <__aeabi_fcmplt>
 8003270:	462a      	mov	r2, r5
 8003272:	4623      	mov	r3, r4
 8003274:	b160      	cbz	r0, 8003290 <setLin+0x50>
		right.setRPM = -1.0*right.setRPM;
		left.setRPM = -1.0*left.setRPM;
		right.dir = true;
 8003276:	2101      	movs	r1, #1
		right.setRPM = -1.0*right.setRPM;
 8003278:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800327c:	602e      	str	r6, [r5, #0]
		left.setRPM = -1.0*left.setRPM;
 800327e:	6026      	str	r6, [r4, #0]
		right.dir = true;
 8003280:	7129      	strb	r1, [r5, #4]
		left.dir = true;
 8003282:	7121      	strb	r1, [r4, #4]
	}
	//set distance
	right.setDis = dis;
	left.setDis = dis;
	//Re-initialize targeting to a rotation/distance
	right.distance_traveled = 0.0;
 8003284:	2100      	movs	r1, #0
	right.setDis = dis;
 8003286:	60d7      	str	r7, [r2, #12]
	left.setDis = dis;
 8003288:	60df      	str	r7, [r3, #12]
	right.distance_traveled = 0.0;
 800328a:	6091      	str	r1, [r2, #8]
	left.distance_traveled = 0.0;
 800328c:	6099      	str	r1, [r3, #8]
 800328e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		right.dir = false;
 8003290:	7128      	strb	r0, [r5, #4]
		left.dir = false;
 8003292:	7120      	strb	r0, [r4, #4]
 8003294:	e7f6      	b.n	8003284 <setLin+0x44>
 8003296:	bf00      	nop
 8003298:	f4b9c01f 	.word	0xf4b9c01f
 800329c:	40717499 	.word	0x40717499
 80032a0:	404e0000 	.word	0x404e0000
 80032a4:	20001670 	.word	0x20001670
 80032a8:	200016c8 	.word	0x200016c8

080032ac <Get_EncoderPos>:
}
//get Absolute difference in count of requested encoder since last call of Get_EncoderPos(), accounting for over/underflow
uint16_t Get_EncoderPos(struct motor* Mot){
	uint16_t newposition;
	//establish one master value of count
	uint16_t currentcount = __HAL_TIM_GET_COUNTER(Mot->encoder);
 80032ac:	6943      	ldr	r3, [r0, #20]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(Mot->encoder)){
 80032b2:	681b      	ldr	r3, [r3, #0]
	uint16_t currentcount = __HAL_TIM_GET_COUNTER(Mot->encoder);
 80032b4:	b291      	uxth	r1, r2
	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(Mot->encoder)){
 80032b6:	f013 0f10 	tst.w	r3, #16
 80032ba:	8a03      	ldrh	r3, [r0, #16]
 80032bc:	d00d      	beq.n	80032da <Get_EncoderPos+0x2e>
		if(Mot->prevcount < currentcount){
 80032be:	4299      	cmp	r1, r3
 80032c0:	d905      	bls.n	80032ce <Get_EncoderPos+0x22>
			//underflow condition
			newposition = 65535 - currentcount + Mot->prevcount;
 80032c2:	3b01      	subs	r3, #1
 80032c4:	1a5b      	subs	r3, r3, r1
	}else{
		if(Mot->prevcount > currentcount){
			//overflow condition
			newposition = currentcount + 65535 - Mot->prevcount;
		}else{
			newposition = abs(currentcount - Mot->prevcount);
 80032c6:	b29b      	uxth	r3, r3
		}
	}
	Mot->prevcount = currentcount;
 80032c8:	8201      	strh	r1, [r0, #16]
	return newposition;
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	4770      	bx	lr
			newposition = abs(Mot->prevcount-currentcount);
 80032ce:	b292      	uxth	r2, r2
 80032d0:	1a9b      	subs	r3, r3, r2
			newposition = abs(currentcount - Mot->prevcount);
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	bfb8      	it	lt
 80032d6:	425b      	neglt	r3, r3
 80032d8:	e7f5      	b.n	80032c6 <Get_EncoderPos+0x1a>
		if(Mot->prevcount > currentcount){
 80032da:	4299      	cmp	r1, r3
 80032dc:	d202      	bcs.n	80032e4 <Get_EncoderPos+0x38>
			newposition = currentcount + 65535 - Mot->prevcount;
 80032de:	43db      	mvns	r3, r3
 80032e0:	440b      	add	r3, r1
 80032e2:	e7f0      	b.n	80032c6 <Get_EncoderPos+0x1a>
			newposition = abs(currentcount - Mot->prevcount);
 80032e4:	b292      	uxth	r2, r2
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	e7f3      	b.n	80032d2 <Get_EncoderPos+0x26>
	...

080032ec <Get_LeftEncoderPos>:
//wrapper
uint16_t Get_LeftEncoderPos(){
	return Get_EncoderPos(&left);
 80032ec:	4801      	ldr	r0, [pc, #4]	; (80032f4 <Get_LeftEncoderPos+0x8>)
 80032ee:	f7ff bfdd 	b.w	80032ac <Get_EncoderPos>
 80032f2:	bf00      	nop
 80032f4:	200016c8 	.word	0x200016c8

080032f8 <Get_RightEncoderPos>:
}
//wrapper
uint16_t Get_RightEncoderPos(){
	return Get_EncoderPos(&right);
 80032f8:	4801      	ldr	r0, [pc, #4]	; (8003300 <Get_RightEncoderPos+0x8>)
 80032fa:	f7ff bfd7 	b.w	80032ac <Get_EncoderPos>
 80032fe:	bf00      	nop
 8003300:	20001670 	.word	0x20001670

08003304 <Set_MotorDir>:
}
//sets GPIOS for requested motor direction/break for L298 driver based on motor's data structure values
void Set_MotorDir(){
 8003304:	b538      	push	{r3, r4, r5, lr}
	if (right.setRPM == 0.0) {
 8003306:	4d1b      	ldr	r5, [pc, #108]	; (8003374 <Set_MotorDir+0x70>)
 8003308:	2100      	movs	r1, #0
 800330a:	6828      	ldr	r0, [r5, #0]
 800330c:	f7fd fecc 	bl	80010a8 <__aeabi_fcmpeq>
 8003310:	b1d8      	cbz	r0, 800334a <Set_MotorDir+0x46>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8003312:	2200      	movs	r2, #0
 8003314:	2101      	movs	r1, #1
 8003316:	4818      	ldr	r0, [pc, #96]	; (8003378 <Set_MotorDir+0x74>)
 8003318:	f7fe f8b4 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800331c:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
	}
	if (left.setRPM == 0.0) {
 800331e:	4d17      	ldr	r5, [pc, #92]	; (800337c <Set_MotorDir+0x78>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8003320:	2102      	movs	r1, #2
 8003322:	4815      	ldr	r0, [pc, #84]	; (8003378 <Set_MotorDir+0x74>)
 8003324:	f7fe f8ae 	bl	8001484 <HAL_GPIO_WritePin>
	if (left.setRPM == 0.0) {
 8003328:	2100      	movs	r1, #0
 800332a:	6828      	ldr	r0, [r5, #0]
 800332c:	f7fd febc 	bl	80010a8 <__aeabi_fcmpeq>
 8003330:	b1a8      	cbz	r0, 800335e <Set_MotorDir+0x5a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8003332:	2200      	movs	r2, #0
 8003334:	2104      	movs	r1, #4
 8003336:	4810      	ldr	r0, [pc, #64]	; (8003378 <Set_MotorDir+0x74>)
 8003338:	f7fe f8a4 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800333c:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
	}
}
 800333e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8003342:	2108      	movs	r1, #8
 8003344:	480c      	ldr	r0, [pc, #48]	; (8003378 <Set_MotorDir+0x74>)
 8003346:	f7fe b89d 	b.w	8001484 <HAL_GPIO_WritePin>
	} else if(right.dir == true) {
 800334a:	792a      	ldrb	r2, [r5, #4]
 800334c:	b10a      	cbz	r2, 8003352 <Set_MotorDir+0x4e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800334e:	2201      	movs	r2, #1
 8003350:	e7e0      	b.n	8003314 <Set_MotorDir+0x10>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8003352:	2101      	movs	r1, #1
 8003354:	4808      	ldr	r0, [pc, #32]	; (8003378 <Set_MotorDir+0x74>)
 8003356:	f7fe f895 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800335a:	2201      	movs	r2, #1
 800335c:	e7df      	b.n	800331e <Set_MotorDir+0x1a>
	}else if(left.dir == true) {
 800335e:	792a      	ldrb	r2, [r5, #4]
 8003360:	b10a      	cbz	r2, 8003366 <Set_MotorDir+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8003362:	2201      	movs	r2, #1
 8003364:	e7e6      	b.n	8003334 <Set_MotorDir+0x30>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8003366:	2104      	movs	r1, #4
 8003368:	4803      	ldr	r0, [pc, #12]	; (8003378 <Set_MotorDir+0x74>)
 800336a:	f7fe f88b 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800336e:	2201      	movs	r2, #1
 8003370:	e7e5      	b.n	800333e <Set_MotorDir+0x3a>
 8003372:	bf00      	nop
 8003374:	20001670 	.word	0x20001670
 8003378:	40020800 	.word	0x40020800
 800337c:	200016c8 	.word	0x200016c8

08003380 <Set_PIDOut>:
//updates left and right PID setpoints and Inputs, computes new output and updates PWM
void Set_PIDOut(float rpm1, float rpm2, UART_HandleTypeDef* huart){
 8003380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
//      setpoint - The desired setpoint the PID controller will try to obtain.
// Returns:
//      Nothing.
// 
inline void 
PIDSetpointSet(PIDControl *pid, float setpoint) { pid->setpoint = setpoint; }
 8003384:	4e26      	ldr	r6, [pc, #152]	; (8003420 <Set_PIDOut+0xa0>)
 8003386:	4603      	mov	r3, r0
//      input - The value the controller will work with.
// Returns:
//      Nothing.
// 
inline void 
PIDInputSet(PIDControl *pid, float input) { pid->input = input; }
 8003388:	4630      	mov	r0, r6
PIDSetpointSet(PIDControl *pid, float setpoint) { pid->setpoint = setpoint; }
 800338a:	6832      	ldr	r2, [r6, #0]
 800338c:	4c25      	ldr	r4, [pc, #148]	; (8003424 <Set_PIDOut+0xa4>)
 800338e:	6532      	str	r2, [r6, #80]	; 0x50
PIDInputSet(PIDControl *pid, float input) { pid->input = input; }
 8003390:	f840 3f1c 	str.w	r3, [r0, #28]!
 8003394:	460d      	mov	r5, r1
	PIDSetpointSet(&right.PID,right.setRPM);
	PIDInputSet(&right.PID,rpm1);
	PIDCompute(&right.PID);
 8003396:	f000 fb66 	bl	8003a66 <PIDCompute>
 800339a:	4620      	mov	r0, r4
PIDSetpointSet(PIDControl *pid, float setpoint) { pid->setpoint = setpoint; }
 800339c:	6823      	ldr	r3, [r4, #0]
PIDInputSet(PIDControl *pid, float input) { pid->input = input; }
 800339e:	f840 5f1c 	str.w	r5, [r0, #28]!
PIDSetpointSet(PIDControl *pid, float setpoint) { pid->setpoint = setpoint; }
 80033a2:	6523      	str	r3, [r4, #80]	; 0x50
	PIDSetpointSet(&left.PID,left.setRPM);
	PIDInputSet(&left.PID,rpm2);
	PIDCompute(&left.PID);
 80033a4:	f000 fb5f 	bl	8003a66 <PIDCompute>
	//uint16_t speed1 = (uint16_t)PIDOutputGet(&right.PID);
	uint16_t speed1 = 0;
	uint16_t speed2 = (uint16_t)PIDOutputGet(&left.PID);
 80033a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80033aa:	f7fd fed5 	bl	8001158 <__aeabi_f2uiz>
 80033ae:	b285      	uxth	r5, r0
	if (abs(left.setRPM) > 0) {
 80033b0:	6820      	ldr	r0, [r4, #0]
 80033b2:	f7fd feab 	bl	800110c <__aeabi_f2iz>
 80033b6:	ea80 77e0 	eor.w	r7, r0, r0, asr #31
 80033ba:	eba7 77e0 	sub.w	r7, r7, r0, asr #31
 80033be:	b1e0      	cbz	r0, 80033fa <Set_PIDOut+0x7a>
		speed1 = (uint16_t)(1.2*(abs(right.setRPM)/abs(left.setRPM))*speed2);
 80033c0:	6830      	ldr	r0, [r6, #0]
 80033c2:	f7fd fea3 	bl	800110c <__aeabi_f2iz>
 80033c6:	2800      	cmp	r0, #0
 80033c8:	bfb8      	it	lt
 80033ca:	4240      	neglt	r0, r0
 80033cc:	fb90 f0f7 	sdiv	r0, r0, r7
 80033d0:	f7fd f830 	bl	8000434 <__aeabi_i2d>
 80033d4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80033d8:	4b13      	ldr	r3, [pc, #76]	; (8003428 <Set_PIDOut+0xa8>)
 80033da:	f7fd f891 	bl	8000500 <__aeabi_dmul>
 80033de:	4680      	mov	r8, r0
 80033e0:	4628      	mov	r0, r5
 80033e2:	4689      	mov	r9, r1
 80033e4:	f7fd f826 	bl	8000434 <__aeabi_i2d>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4640      	mov	r0, r8
 80033ee:	4649      	mov	r1, r9
 80033f0:	f7fd f886 	bl	8000500 <__aeabi_dmul>
 80033f4:	f7fd fb46 	bl	8000a84 <__aeabi_d2uiz>
 80033f8:	b280      	uxth	r0, r0
	return;
}
//Arduino map function
uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80033fa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80033fe:	21ff      	movs	r1, #255	; 0xff
 8003400:	4350      	muls	r0, r2
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, speed1);
 8003402:	69b3      	ldr	r3, [r6, #24]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003404:	436a      	muls	r2, r5
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, speed1);
 8003406:	681e      	ldr	r6, [r3, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003408:	fb90 f3f1 	sdiv	r3, r0, r1
 800340c:	fb92 f2f1 	sdiv	r2, r2, r1
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, speed1);
 8003410:	b29b      	uxth	r3, r3
 8003412:	6373      	str	r3, [r6, #52]	; 0x34
	__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, speed2);
 8003414:	69a3      	ldr	r3, [r4, #24]
 8003416:	b292      	uxth	r2, r2
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	635a      	str	r2, [r3, #52]	; 0x34
 800341c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003420:	20001670 	.word	0x20001670
 8003424:	200016c8 	.word	0x200016c8
 8003428:	3ff33333 	.word	0x3ff33333
 800342c:	00000000 	.word	0x00000000

08003430 <Run_PID>:
void Run_PID(UART_HandleTypeDef* huart){
 8003430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003434:	b085      	sub	sp, #20
 8003436:	4606      	mov	r6, r0
	volatile uint64_t tim = HAL_GetTick();
 8003438:	f7fd fed6 	bl	80011e8 <HAL_GetTick>
 800343c:	2100      	movs	r1, #0
	volatile uint32_t deltat = (uint32_t)(tim - prevtim);
 800343e:	4c7a      	ldr	r4, [pc, #488]	; (8003628 <Run_PID+0x1f8>)
	volatile uint64_t tim = HAL_GetTick();
 8003440:	e9cd 0102 	strd	r0, r1, [sp, #8]
	volatile uint32_t deltat = (uint32_t)(tim - prevtim);
 8003444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	1ad2      	subs	r2, r2, r3
 800344c:	9201      	str	r2, [sp, #4]
	if(deltat < PID_PERIOD){
 800344e:	9b01      	ldr	r3, [sp, #4]
 8003450:	2b18      	cmp	r3, #24
 8003452:	f240 80d8 	bls.w	8003606 <Run_PID+0x1d6>
	Set_MotorDir();
 8003456:	f7ff ff55 	bl	8003304 <Set_MotorDir>
	uint16_t newposition1 = Get_RightEncoderPos();
 800345a:	f7ff ff4d 	bl	80032f8 <Get_RightEncoderPos>
 800345e:	4605      	mov	r5, r0
	uint16_t newposition2 = Get_LeftEncoderPos();
 8003460:	f7ff ff44 	bl	80032ec <Get_LeftEncoderPos>
	prevtim = tim;
 8003464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	uint16_t newposition2 = Get_LeftEncoderPos();
 8003468:	4607      	mov	r7, r0
	prevtim = tim;
 800346a:	e9c4 2300 	strd	r2, r3, [r4]
	float vel1 = ((float)newposition1) * 10; //encoder pulses per second
 800346e:	4628      	mov	r0, r5
 8003470:	f7fd fc2e 	bl	8000cd0 <__aeabi_ui2f>
 8003474:	496d      	ldr	r1, [pc, #436]	; (800362c <Run_PID+0x1fc>)
 8003476:	f7fd fc83 	bl	8000d80 <__aeabi_fmul>
	float rpm1 = ((vel1 * 60)/1500); //Measured motor RPM
 800347a:	496d      	ldr	r1, [pc, #436]	; (8003630 <Run_PID+0x200>)
 800347c:	f7fd fc80 	bl	8000d80 <__aeabi_fmul>
 8003480:	496c      	ldr	r1, [pc, #432]	; (8003634 <Run_PID+0x204>)
 8003482:	f7fd fd31 	bl	8000ee8 <__aeabi_fdiv>
 8003486:	4605      	mov	r5, r0
	float vel2 = ((float)newposition2) * 10; //encoder pulses per second
 8003488:	4638      	mov	r0, r7
 800348a:	f7fd fc21 	bl	8000cd0 <__aeabi_ui2f>
 800348e:	4967      	ldr	r1, [pc, #412]	; (800362c <Run_PID+0x1fc>)
 8003490:	f7fd fc76 	bl	8000d80 <__aeabi_fmul>
	float rpm2 = ((vel2 * 60)/1500);
 8003494:	4966      	ldr	r1, [pc, #408]	; (8003630 <Run_PID+0x200>)
 8003496:	f7fd fc73 	bl	8000d80 <__aeabi_fmul>
 800349a:	4966      	ldr	r1, [pc, #408]	; (8003634 <Run_PID+0x204>)
 800349c:	f7fd fd24 	bl	8000ee8 <__aeabi_fdiv>
	Set_PIDOut(rpm1, rpm2, huart);
 80034a0:	4632      	mov	r2, r6
	float rpm2 = ((vel2 * 60)/1500);
 80034a2:	4604      	mov	r4, r0
	Set_PIDOut(rpm1, rpm2, huart);
 80034a4:	4601      	mov	r1, r0
 80034a6:	4628      	mov	r0, r5
 80034a8:	f7ff ff6a 	bl	8003380 <Set_PIDOut>
	float realspeed1 = (rpm1 * 2.0 * M_PI * WHEELRAD)/60; //Linear speed in mm/s
 80034ac:	4628      	mov	r0, r5
 80034ae:	f7fc ffd3 	bl	8000458 <__aeabi_f2d>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	f7fc fe71 	bl	800019c <__adddf3>
 80034ba:	a355      	add	r3, pc, #340	; (adr r3, 8003610 <Run_PID+0x1e0>)
 80034bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c0:	f7fd f81e 	bl	8000500 <__aeabi_dmul>
 80034c4:	a354      	add	r3, pc, #336	; (adr r3, 8003618 <Run_PID+0x1e8>)
 80034c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ca:	f7fd f819 	bl	8000500 <__aeabi_dmul>
 80034ce:	2200      	movs	r2, #0
 80034d0:	4b59      	ldr	r3, [pc, #356]	; (8003638 <Run_PID+0x208>)
 80034d2:	f7fd f93f 	bl	8000754 <__aeabi_ddiv>
 80034d6:	f7fd faf5 	bl	8000ac4 <__aeabi_d2f>
	right.distance_traveled = right.distance_traveled + (realspeed1*deltat*1e-3); //integrate linear velocity to obtain distance
 80034da:	9e01      	ldr	r6, [sp, #4]
	float realspeed1 = (rpm1 * 2.0 * M_PI * WHEELRAD)/60; //Linear speed in mm/s
 80034dc:	4605      	mov	r5, r0
	right.distance_traveled = right.distance_traveled + (realspeed1*deltat*1e-3); //integrate linear velocity to obtain distance
 80034de:	4630      	mov	r0, r6
 80034e0:	f7fd fbf6 	bl	8000cd0 <__aeabi_ui2f>
 80034e4:	4601      	mov	r1, r0
 80034e6:	4628      	mov	r0, r5
 80034e8:	f7fd fc4a 	bl	8000d80 <__aeabi_fmul>
 80034ec:	f7fc ffb4 	bl	8000458 <__aeabi_f2d>
 80034f0:	a34b      	add	r3, pc, #300	; (adr r3, 8003620 <Run_PID+0x1f0>)
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	f7fd f803 	bl	8000500 <__aeabi_dmul>
 80034fa:	4d50      	ldr	r5, [pc, #320]	; (800363c <Run_PID+0x20c>)
 80034fc:	4606      	mov	r6, r0
 80034fe:	68a8      	ldr	r0, [r5, #8]
 8003500:	460f      	mov	r7, r1
 8003502:	f7fc ffa9 	bl	8000458 <__aeabi_f2d>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4630      	mov	r0, r6
 800350c:	4639      	mov	r1, r7
 800350e:	f7fc fe45 	bl	800019c <__adddf3>
 8003512:	f7fd fad7 	bl	8000ac4 <__aeabi_d2f>
 8003516:	60a8      	str	r0, [r5, #8]
 8003518:	4680      	mov	r8, r0
	float realspeed2 = (rpm2 * 2.0 * M_PI * WHEELRAD)/60; //Linear speed in mm/s
 800351a:	4620      	mov	r0, r4
 800351c:	f7fc ff9c 	bl	8000458 <__aeabi_f2d>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	f7fc fe3a 	bl	800019c <__adddf3>
 8003528:	a339      	add	r3, pc, #228	; (adr r3, 8003610 <Run_PID+0x1e0>)
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	f7fc ffe7 	bl	8000500 <__aeabi_dmul>
 8003532:	a339      	add	r3, pc, #228	; (adr r3, 8003618 <Run_PID+0x1e8>)
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f7fc ffe2 	bl	8000500 <__aeabi_dmul>
 800353c:	2200      	movs	r2, #0
 800353e:	4b3e      	ldr	r3, [pc, #248]	; (8003638 <Run_PID+0x208>)
 8003540:	f7fd f908 	bl	8000754 <__aeabi_ddiv>
 8003544:	f7fd fabe 	bl	8000ac4 <__aeabi_d2f>
	left.distance_traveled = left.distance_traveled + (realspeed2*deltat*1e-3); //integrate linear velocity to obtain distance
 8003548:	9e01      	ldr	r6, [sp, #4]
	float realspeed2 = (rpm2 * 2.0 * M_PI * WHEELRAD)/60; //Linear speed in mm/s
 800354a:	4604      	mov	r4, r0
	left.distance_traveled = left.distance_traveled + (realspeed2*deltat*1e-3); //integrate linear velocity to obtain distance
 800354c:	4630      	mov	r0, r6
 800354e:	f7fd fbbf 	bl	8000cd0 <__aeabi_ui2f>
 8003552:	4601      	mov	r1, r0
 8003554:	4620      	mov	r0, r4
 8003556:	f7fd fc13 	bl	8000d80 <__aeabi_fmul>
 800355a:	f7fc ff7d 	bl	8000458 <__aeabi_f2d>
 800355e:	a330      	add	r3, pc, #192	; (adr r3, 8003620 <Run_PID+0x1f0>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f7fc ffcc 	bl	8000500 <__aeabi_dmul>
 8003568:	4c35      	ldr	r4, [pc, #212]	; (8003640 <Run_PID+0x210>)
 800356a:	4606      	mov	r6, r0
 800356c:	68a0      	ldr	r0, [r4, #8]
 800356e:	460f      	mov	r7, r1
 8003570:	f7fc ff72 	bl	8000458 <__aeabi_f2d>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4630      	mov	r0, r6
 800357a:	4639      	mov	r1, r7
 800357c:	f7fc fe0e 	bl	800019c <__adddf3>
 8003580:	f7fd faa0 	bl	8000ac4 <__aeabi_d2f>
	if ((right.setDis==0 && left.setDis == 0)||(abs(right.distance_traveled-right.setDis) <= TOLERANCE)||(abs(left.distance_traveled-left.setDis) <= TOLERANCE) ){
 8003584:	f8d5 900c 	ldr.w	r9, [r5, #12]
	left.distance_traveled = left.distance_traveled + (realspeed2*deltat*1e-3); //integrate linear velocity to obtain distance
 8003588:	60a0      	str	r0, [r4, #8]
 800358a:	4607      	mov	r7, r0
	if ((right.setDis==0 && left.setDis == 0)||(abs(right.distance_traveled-right.setDis) <= TOLERANCE)||(abs(left.distance_traveled-left.setDis) <= TOLERANCE) ){
 800358c:	2100      	movs	r1, #0
 800358e:	4648      	mov	r0, r9
 8003590:	f7fd fd8a 	bl	80010a8 <__aeabi_fcmpeq>
 8003594:	2600      	movs	r6, #0
 8003596:	b120      	cbz	r0, 80035a2 <Run_PID+0x172>
 8003598:	4631      	mov	r1, r6
 800359a:	68e0      	ldr	r0, [r4, #12]
 800359c:	f7fd fd84 	bl	80010a8 <__aeabi_fcmpeq>
 80035a0:	b988      	cbnz	r0, 80035c6 <Run_PID+0x196>
 80035a2:	4649      	mov	r1, r9
 80035a4:	4640      	mov	r0, r8
 80035a6:	f7fd fae1 	bl	8000b6c <__aeabi_fsub>
 80035aa:	f7fd fdaf 	bl	800110c <__aeabi_f2iz>
 80035ae:	300a      	adds	r0, #10
 80035b0:	2814      	cmp	r0, #20
 80035b2:	d908      	bls.n	80035c6 <Run_PID+0x196>
 80035b4:	68e1      	ldr	r1, [r4, #12]
 80035b6:	4638      	mov	r0, r7
 80035b8:	f7fd fad8 	bl	8000b6c <__aeabi_fsub>
 80035bc:	f7fd fda6 	bl	800110c <__aeabi_f2iz>
 80035c0:	300a      	adds	r0, #10
 80035c2:	2814      	cmp	r0, #20
 80035c4:	d81f      	bhi.n	8003606 <Run_PID+0x1d6>
		__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, 0);
 80035c6:	69ab      	ldr	r3, [r5, #24]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	2300      	movs	r3, #0
 80035cc:	6353      	str	r3, [r2, #52]	; 0x34
		__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, 0);
 80035ce:	69a2      	ldr	r2, [r4, #24]
 80035d0:	6812      	ldr	r2, [r2, #0]
		right.dir = false;
 80035d2:	712b      	strb	r3, [r5, #4]
		__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, 0);
 80035d4:	6353      	str	r3, [r2, #52]	; 0x34
		left.dir = false;
 80035d6:	7123      	strb	r3, [r4, #4]
		right.setRPM = 0.0; //Brake
 80035d8:	602e      	str	r6, [r5, #0]
		left.setRPM = 0.0; //Brake
 80035da:	6026      	str	r6, [r4, #0]
		right.setDis = 0.0;
 80035dc:	60ee      	str	r6, [r5, #12]
		left.setDis = 0.0;
 80035de:	60e6      	str	r6, [r4, #12]
		right.distance_traveled = 0.0;
 80035e0:	60ae      	str	r6, [r5, #8]
		left.distance_traveled = 0.0;
 80035e2:	60a6      	str	r6, [r4, #8]
		Set_MotorDir();
 80035e4:	f7ff fe8e 	bl	8003304 <Set_MotorDir>
		if(!isEmpty()){
 80035e8:	f7ff fccc 	bl	8002f84 <isEmpty>
 80035ec:	b928      	cbnz	r0, 80035fa <Run_PID+0x1ca>
			EXE_CMD(deq(), &htim9, &huart1);
 80035ee:	f7ff fcd1 	bl	8002f94 <deq>
 80035f2:	4a14      	ldr	r2, [pc, #80]	; (8003644 <Run_PID+0x214>)
 80035f4:	4914      	ldr	r1, [pc, #80]	; (8003648 <Run_PID+0x218>)
 80035f6:	f7ff fb2b 	bl	8002c50 <EXE_CMD>
		Get_EncoderPos(&right);
 80035fa:	4810      	ldr	r0, [pc, #64]	; (800363c <Run_PID+0x20c>)
 80035fc:	f7ff fe56 	bl	80032ac <Get_EncoderPos>
		Get_EncoderPos(&left);
 8003600:	480f      	ldr	r0, [pc, #60]	; (8003640 <Run_PID+0x210>)
 8003602:	f7ff fe53 	bl	80032ac <Get_EncoderPos>
}
 8003606:	b005      	add	sp, #20
 8003608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800360c:	f3af 8000 	nop.w
 8003610:	54442d18 	.word	0x54442d18
 8003614:	400921fb 	.word	0x400921fb
 8003618:	9999999a 	.word	0x9999999a
 800361c:	40463999 	.word	0x40463999
 8003620:	d2f1a9fc 	.word	0xd2f1a9fc
 8003624:	3f50624d 	.word	0x3f50624d
 8003628:	20000200 	.word	0x20000200
 800362c:	41200000 	.word	0x41200000
 8003630:	42700000 	.word	0x42700000
 8003634:	44bb8000 	.word	0x44bb8000
 8003638:	404e0000 	.word	0x404e0000
 800363c:	20001670 	.word	0x20001670
 8003640:	200016c8 	.word	0x200016c8
 8003644:	200018e0 	.word	0x200018e0
 8003648:	20001870 	.word	0x20001870

0800364c <Run_MotorPWM>:
void Run_MotorPWM(int16_t pwm){
 800364c:	b508      	push	{r3, lr}
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, abs(pwm));
 800364e:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <Run_MotorPWM+0x6c>)
	if(pwm >= 0){
 8003650:	2800      	cmp	r0, #0
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, abs(pwm));
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 800365a:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 800365e:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, abs(pwm));
 8003660:	4a16      	ldr	r2, [pc, #88]	; (80036bc <Run_MotorPWM+0x70>)
 8003662:	6992      	ldr	r2, [r2, #24]
 8003664:	6812      	ldr	r2, [r2, #0]
 8003666:	6353      	str	r3, [r2, #52]	; 0x34
	if(pwm >= 0){
 8003668:	db15      	blt.n	8003696 <Run_MotorPWM+0x4a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800366a:	2200      	movs	r2, #0
 800366c:	2104      	movs	r1, #4
 800366e:	4814      	ldr	r0, [pc, #80]	; (80036c0 <Run_MotorPWM+0x74>)
 8003670:	f7fd ff08 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8003674:	2201      	movs	r2, #1
 8003676:	2108      	movs	r1, #8
 8003678:	4811      	ldr	r0, [pc, #68]	; (80036c0 <Run_MotorPWM+0x74>)
 800367a:	f7fd ff03 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800367e:	2200      	movs	r2, #0
 8003680:	2101      	movs	r1, #1
 8003682:	480f      	ldr	r0, [pc, #60]	; (80036c0 <Run_MotorPWM+0x74>)
 8003684:	f7fd fefe 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8003688:	2201      	movs	r2, #1
}
 800368a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800368e:	2102      	movs	r1, #2
 8003690:	480b      	ldr	r0, [pc, #44]	; (80036c0 <Run_MotorPWM+0x74>)
 8003692:	f7fd bef7 	b.w	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8003696:	2201      	movs	r2, #1
 8003698:	2104      	movs	r1, #4
 800369a:	4809      	ldr	r0, [pc, #36]	; (80036c0 <Run_MotorPWM+0x74>)
 800369c:	f7fd fef2 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80036a0:	2200      	movs	r2, #0
 80036a2:	2108      	movs	r1, #8
 80036a4:	4806      	ldr	r0, [pc, #24]	; (80036c0 <Run_MotorPWM+0x74>)
 80036a6:	f7fd feed 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80036aa:	2201      	movs	r2, #1
 80036ac:	4804      	ldr	r0, [pc, #16]	; (80036c0 <Run_MotorPWM+0x74>)
 80036ae:	4611      	mov	r1, r2
 80036b0:	f7fd fee8 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80036b4:	2200      	movs	r2, #0
 80036b6:	e7e8      	b.n	800368a <Run_MotorPWM+0x3e>
 80036b8:	20001670 	.word	0x20001670
 80036bc:	200016c8 	.word	0x200016c8
 80036c0:	40020800 	.word	0x40020800

080036c4 <Stop_Motors>:
void Stop_Motors(){
 80036c4:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80036c6:	4c17      	ldr	r4, [pc, #92]	; (8003724 <Stop_Motors+0x60>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	4620      	mov	r0, r4
 80036cc:	2101      	movs	r1, #1
 80036ce:	f7fd fed9 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80036d2:	4620      	mov	r0, r4
 80036d4:	2200      	movs	r2, #0
 80036d6:	2102      	movs	r1, #2
 80036d8:	f7fd fed4 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80036dc:	4620      	mov	r0, r4
 80036de:	2200      	movs	r2, #0
 80036e0:	2104      	movs	r1, #4
 80036e2:	f7fd fecf 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80036e6:	4620      	mov	r0, r4
 80036e8:	2200      	movs	r2, #0
 80036ea:	2108      	movs	r1, #8
 80036ec:	f7fd feca 	bl	8001484 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, 0);
 80036f0:	2200      	movs	r2, #0
 80036f2:	480d      	ldr	r0, [pc, #52]	; (8003728 <Stop_Motors+0x64>)
	__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, 0);
 80036f4:	4c0d      	ldr	r4, [pc, #52]	; (800372c <Stop_Motors+0x68>)
	__HAL_TIM_SetCompare(right.pwm, TIM_CHANNEL_1, 0);
 80036f6:	6983      	ldr	r3, [r0, #24]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, 0);
 80036fc:	69a3      	ldr	r3, [r4, #24]
 80036fe:	681b      	ldr	r3, [r3, #0]
	left.dir = false;
 8003700:	7122      	strb	r2, [r4, #4]
	__HAL_TIM_SetCompare(left.pwm, TIM_CHANNEL_1, 0);
 8003702:	635a      	str	r2, [r3, #52]	; 0x34
	right.setRPM = 0.0; //Brake
 8003704:	2300      	movs	r3, #0
	right.dir = false;
 8003706:	7102      	strb	r2, [r0, #4]
	left.setRPM = 0.0; //Brake
 8003708:	6023      	str	r3, [r4, #0]
	left.setDis = 0.0;
 800370a:	60e3      	str	r3, [r4, #12]
	left.distance_traveled = 0.0;
 800370c:	60a3      	str	r3, [r4, #8]
	right.setRPM = 0.0; //Brake
 800370e:	6003      	str	r3, [r0, #0]
	right.setDis = 0.0;
 8003710:	60c3      	str	r3, [r0, #12]
	right.distance_traveled = 0.0;
 8003712:	6083      	str	r3, [r0, #8]
	Get_EncoderPos(&right);
 8003714:	f7ff fdca 	bl	80032ac <Get_EncoderPos>
	Get_EncoderPos(&left);
 8003718:	4620      	mov	r0, r4
}
 800371a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Get_EncoderPos(&left);
 800371e:	f7ff bdc5 	b.w	80032ac <Get_EncoderPos>
 8003722:	bf00      	nop
 8003724:	40020800 	.word	0x40020800
 8003728:	20001670 	.word	0x20001670
 800372c:	200016c8 	.word	0x200016c8

08003730 <HAL_TIM_IC_CaptureCallback>:
 */
#include <WW_Sen.h>
struct ultrasonic x;
struct ultrasonic y;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
	if (htim->Instance==TIM5)
 8003730:	6802      	ldr	r2, [r0, #0]
 8003732:	4b18      	ldr	r3, [pc, #96]	; (8003794 <HAL_TIM_IC_CaptureCallback+0x64>)
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8003734:	b510      	push	{r4, lr}
	if (htim->Instance==TIM5)
 8003736:	429a      	cmp	r2, r3
 8003738:	d11b      	bne.n	8003772 <HAL_TIM_IC_CaptureCallback+0x42>
	{
		if ((htim->Channel)==HAL_TIM_ACTIVE_CHANNEL_3){
 800373a:	7d03      	ldrb	r3, [r0, #20]
 800373c:	2b04      	cmp	r3, #4
 800373e:	d119      	bne.n	8003774 <HAL_TIM_IC_CaptureCallback+0x44>
			y.edge_detect = !(y.edge_detect);
 8003740:	4a15      	ldr	r2, [pc, #84]	; (8003798 <HAL_TIM_IC_CaptureCallback+0x68>)
 8003742:	7b11      	ldrb	r1, [r2, #12]
			//__HAL_TIM_SET_CAPTUREPOLARITY()
			if (y.edge_detect){
				y.echo_rising_count = __HAL_TIM_GET_COMPARE(y.IC, TIM_CHANNEL_3);    //read TIM2 channel 1 capture value
 8003744:	6993      	ldr	r3, [r2, #24]
			y.edge_detect = !(y.edge_detect);
 8003746:	f081 0101 	eor.w	r1, r1, #1
 800374a:	7311      	strb	r1, [r2, #12]
			if (y.edge_detect){
 800374c:	b119      	cbz	r1, 8003756 <HAL_TIM_IC_CaptureCallback+0x26>
				y.echo_rising_count = __HAL_TIM_GET_COMPARE(y.IC, TIM_CHANNEL_3);    //read TIM2 channel 1 capture value
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			}
		} else if((htim->Channel)==HAL_TIM_ACTIVE_CHANNEL_4){
			x.edge_detect = !(x.edge_detect);
			//__HAL_TIM_SET_CAPTUREPOLARITY()
			if (x.edge_detect){
				x.echo_rising_count = __HAL_TIM_GET_COMPARE(x.IC, TIM_CHANNEL_4);    //read TIM2 channel 1 capture value
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	bd10      	pop	{r4, pc}
				y.echo_falling_count = __HAL_TIM_GET_COMPARE(y.IC, TIM_CHANNEL_3);
 8003756:	681c      	ldr	r4, [r3, #0]
 8003758:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				//__HAL_TIM_SET_CAPTUREPOLARITY(x.IC,TIM_CHANNEL_3,TIM_INPUTCHANNELPOLARITY_FALLING);
			}
			else {
				x.echo_falling_count = __HAL_TIM_GET_COMPARE(x.IC, TIM_CHANNEL_4);
				if(x.echo_falling_count>x.echo_rising_count){
 800375a:	6810      	ldr	r0, [r2, #0]
				x.echo_falling_count = __HAL_TIM_GET_COMPARE(x.IC, TIM_CHANNEL_4);
 800375c:	6053      	str	r3, [r2, #4]
				if(x.echo_falling_count>x.echo_rising_count){
 800375e:	4283      	cmp	r3, r0
					__HAL_TIM_SetCounter(x.IC, 0);    //reset counter after input capture interrupt occurs
					x.echo_pulse_width_count = x.echo_falling_count - x.echo_rising_count;
				}
				else {
					x.echo_falling_count += 1048575;
 8003760:	bf9e      	ittt	ls
 8003762:	f503 237f 	addls.w	r3, r3, #1044480	; 0xff000
 8003766:	f603 73ff 	addwls	r3, r3, #4095	; 0xfff
 800376a:	6053      	strls	r3, [r2, #4]
					__HAL_TIM_SetCounter(x.IC, 0);
					x.echo_pulse_width_count = x.echo_falling_count - x.echo_rising_count;
 800376c:	1a1b      	subs	r3, r3, r0
					__HAL_TIM_SetCounter(x.IC, 0);
 800376e:	6261      	str	r1, [r4, #36]	; 0x24
					x.echo_pulse_width_count = x.echo_falling_count - x.echo_rising_count;
 8003770:	6093      	str	r3, [r2, #8]
 8003772:	bd10      	pop	{r4, pc}
		} else if((htim->Channel)==HAL_TIM_ACTIVE_CHANNEL_4){
 8003774:	2b08      	cmp	r3, #8
 8003776:	d1fc      	bne.n	8003772 <HAL_TIM_IC_CaptureCallback+0x42>
			x.edge_detect = !(x.edge_detect);
 8003778:	4a08      	ldr	r2, [pc, #32]	; (800379c <HAL_TIM_IC_CaptureCallback+0x6c>)
 800377a:	7b11      	ldrb	r1, [r2, #12]
				x.echo_rising_count = __HAL_TIM_GET_COMPARE(x.IC, TIM_CHANNEL_4);    //read TIM2 channel 1 capture value
 800377c:	6993      	ldr	r3, [r2, #24]
			x.edge_detect = !(x.edge_detect);
 800377e:	f081 0101 	eor.w	r1, r1, #1
 8003782:	7311      	strb	r1, [r2, #12]
			if (x.edge_detect){
 8003784:	b111      	cbz	r1, 800378c <HAL_TIM_IC_CaptureCallback+0x5c>
				x.echo_rising_count = __HAL_TIM_GET_COMPARE(x.IC, TIM_CHANNEL_4);    //read TIM2 channel 1 capture value
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	e7e2      	b.n	8003752 <HAL_TIM_IC_CaptureCallback+0x22>
				x.echo_falling_count = __HAL_TIM_GET_COMPARE(x.IC, TIM_CHANNEL_4);
 800378c:	681c      	ldr	r4, [r3, #0]
 800378e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003790:	e7e3      	b.n	800375a <HAL_TIM_IC_CaptureCallback+0x2a>
 8003792:	bf00      	nop
 8003794:	40000c00 	.word	0x40000c00
 8003798:	2000173c 	.word	0x2000173c
 800379c:	20001720 	.word	0x20001720

080037a0 <initUltrasonics>:
	d = (0.997889*d)-0.26247;
	return d;
}
void initUltrasonics(TIM_HandleTypeDef* htim){
	x.GPIO_PingBank = GPIOA;
	x.GPIO_PingPin = 9;
 80037a0:	2309      	movs	r3, #9
	x.GPIO_PingBank = GPIOA;
 80037a2:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <initUltrasonics+0x2c>)
 80037a4:	490a      	ldr	r1, [pc, #40]	; (80037d0 <initUltrasonics+0x30>)
	x.GPIO_PingPin = 9;
 80037a6:	8293      	strh	r3, [r2, #20]
	x.echo_falling_count = 0;
 80037a8:	2300      	movs	r3, #0
	x.GPIO_PingBank = GPIOA;
 80037aa:	6111      	str	r1, [r2, #16]
	x.echo_falling_count = 0;
 80037ac:	6053      	str	r3, [r2, #4]
	x.echo_pulse_width_count = 0;
 80037ae:	6093      	str	r3, [r2, #8]
	x.echo_rising_count = 0;
 80037b0:	6013      	str	r3, [r2, #0]
	x.edge_detect = false;
 80037b2:	7313      	strb	r3, [r2, #12]
	x.IC = htim;
 80037b4:	6190      	str	r0, [r2, #24]

	y.GPIO_PingBank = GPIOA;
 80037b6:	4a07      	ldr	r2, [pc, #28]	; (80037d4 <initUltrasonics+0x34>)
 80037b8:	6111      	str	r1, [r2, #16]
	y.GPIO_PingPin = 8;
 80037ba:	2108      	movs	r1, #8
	y.echo_falling_count = 0;
 80037bc:	6053      	str	r3, [r2, #4]
	y.GPIO_PingPin = 8;
 80037be:	8291      	strh	r1, [r2, #20]
	y.echo_pulse_width_count = 0;
 80037c0:	6093      	str	r3, [r2, #8]
	y.echo_rising_count = 0;
 80037c2:	6013      	str	r3, [r2, #0]
	y.edge_detect = false;
 80037c4:	7313      	strb	r3, [r2, #12]
	y.IC = htim;
 80037c6:	6190      	str	r0, [r2, #24]
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	20001720 	.word	0x20001720
 80037d0:	40020000 	.word	0x40020000
 80037d4:	2000173c 	.word	0x2000173c

080037d8 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037d8:	4b3e      	ldr	r3, [pc, #248]	; (80038d4 <MX_GPIO_Init+0xfc>)
{
 80037da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037de:	69da      	ldr	r2, [r3, #28]
{
 80037e0:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037e2:	f042 0204 	orr.w	r2, r2, #4
 80037e6:	61da      	str	r2, [r3, #28]
 80037e8:	69da      	ldr	r2, [r3, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80037ea:	4e3b      	ldr	r6, [pc, #236]	; (80038d8 <MX_GPIO_Init+0x100>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ec:	f002 0204 	and.w	r2, r2, #4
 80037f0:	9200      	str	r2, [sp, #0]
 80037f2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f4:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80037f6:	4630      	mov	r0, r6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f8:	f042 0201 	orr.w	r2, r2, #1
 80037fc:	61da      	str	r2, [r3, #28]
 80037fe:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003800:	210f      	movs	r1, #15
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003802:	f002 0201 	and.w	r2, r2, #1
 8003806:	9201      	str	r2, [sp, #4]
 8003808:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800380a:	69da      	ldr	r2, [r3, #28]

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800380e:	f042 0202 	orr.w	r2, r2, #2
 8003812:	61da      	str	r2, [r3, #28]
 8003814:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003816:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	9302      	str	r3, [sp, #8]
 800381e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003820:	f7fd fe30 	bl	8001484 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003824:	230f      	movs	r3, #15
 8003826:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003828:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800382a:	a903      	add	r1, sp, #12
 800382c:	4630      	mov	r0, r6

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IDD_Measurement_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800382e:	2503      	movs	r5, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003830:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003834:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003836:	f7fd fd57 	bl	80012e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 800383a:	2310      	movs	r3, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 800383c:	4f27      	ldr	r7, [pc, #156]	; (80038dc <MX_GPIO_Init+0x104>)
 800383e:	a903      	add	r1, sp, #12
 8003840:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 8003842:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003844:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 8003848:	f7fd fd4e 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GRP2_Sampling_Pin|GRP2_Ground_Pin;
 800384c:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800384e:	a903      	add	r1, sp, #12
 8003850:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GRP2_Sampling_Pin|GRP2_Ground_Pin;
 8003852:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003854:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003856:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003858:	f7fd fd46 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GRP9_Sampling_Pin|GRP9_Ground_Pin;
 800385c:	2330      	movs	r3, #48	; 0x30

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GRP3_Sampling_Pin|GRP3_Ground_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80038e0 <MX_GPIO_Init+0x108>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003862:	a903      	add	r1, sp, #12
 8003864:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GRP9_Sampling_Pin|GRP9_Ground_Pin;
 8003866:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003868:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800386c:	f7fd fd3c 	bl	80012e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003870:	a903      	add	r1, sp, #12
 8003872:	4648      	mov	r0, r9

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG10_Pin 
                          |SEG11_Pin|SEG5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003874:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pin = GRP3_Sampling_Pin|GRP3_Ground_Pin;
 8003878:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800387a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800387e:	250b      	movs	r5, #11
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003880:	f7fd fd32 	bl	80012e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG10_Pin 
 8003884:	f64d 4320 	movw	r3, #56352	; 0xdc20
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003888:	a903      	add	r1, sp, #12
 800388a:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG10_Pin 
 800388c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388e:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003892:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003894:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8003896:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003898:	f7fd fd26 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SEG20_Pin|SEG21_Pin|SEG22_Pin|SEG23_Pin;
 800389c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038a0:	a903      	add	r1, sp, #12
 80038a2:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = SEG20_Pin|SEG21_Pin|SEG22_Pin|SEG23_Pin;
 80038a4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a6:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038aa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ac:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80038ae:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038b0:	f7fd fd1a 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = COM0_Pin|COM1_Pin|COM2_Pin;
 80038b4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b8:	a903      	add	r1, sp, #12
 80038ba:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = COM0_Pin|COM1_Pin|COM2_Pin;
 80038bc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038be:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80038c6:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c8:	f7fd fd0e 	bl	80012e8 <HAL_GPIO_Init>

}
 80038cc:	b009      	add	sp, #36	; 0x24
 80038ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40020800 	.word	0x40020800
 80038dc:	40020000 	.word	0x40020000
 80038e0:	40020400 	.word	0x40020400

080038e4 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038e4:	4a1e      	ldr	r2, [pc, #120]	; (8003960 <SystemClock_Config+0x7c>)
{
 80038e6:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038e8:	6813      	ldr	r3, [r2, #0]
{
 80038ea:	b092      	sub	sp, #72	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ec:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80038f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038f4:	6013      	str	r3, [r2, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038f6:	2302      	movs	r3, #2
 80038f8:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038fa:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038fc:	2300      	movs	r3, #0
 80038fe:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003900:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003904:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003906:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003908:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800390a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800390e:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003910:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003912:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8003914:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003916:	f7fd fdfb 	bl	8001510 <HAL_RCC_OscConfig>
 800391a:	b100      	cbz	r0, 800391e <SystemClock_Config+0x3a>
 800391c:	e7fe      	b.n	800391c <SystemClock_Config+0x38>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800391e:	220f      	movs	r2, #15
 8003920:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003922:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003924:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003926:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003928:	4621      	mov	r1, r4
 800392a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800392c:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003930:	f7fe f988 	bl	8001c44 <HAL_RCC_ClockConfig>
 8003934:	4604      	mov	r4, r0
 8003936:	b100      	cbz	r0, 800393a <SystemClock_Config+0x56>
 8003938:	e7fe      	b.n	8003938 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800393a:	f7fe fa61 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 800393e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003942:	fbb0 f0f3 	udiv	r0, r0, r3
 8003946:	f7fd fca7 	bl	8001298 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800394a:	2004      	movs	r0, #4
 800394c:	f7fd fcba 	bl	80012c4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003950:	4622      	mov	r2, r4
 8003952:	4621      	mov	r1, r4
 8003954:	f04f 30ff 	mov.w	r0, #4294967295
 8003958:	f7fd fc5e 	bl	8001218 <HAL_NVIC_SetPriority>
}
 800395c:	b012      	add	sp, #72	; 0x48
 800395e:	bd10      	pop	{r4, pc}
 8003960:	40007000 	.word	0x40007000

08003964 <setup>:

/* USER CODE BEGIN 4 */
void setup(){
 8003964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//start code initiation
	char buffer[25];
	uint8_t len=sprintf(buffer,"Init\r\n"); //sprintf will return the length of 'buffer'
	HAL_UART_Transmit(&huart1, (unsigned char*)buffer, len, 1000);
 8003968:	4d21      	ldr	r5, [pc, #132]	; (80039f0 <setup+0x8c>)
void setup(){
 800396a:	b088      	sub	sp, #32
	uint8_t len=sprintf(buffer,"Init\r\n"); //sprintf will return the length of 'buffer'
 800396c:	4921      	ldr	r1, [pc, #132]	; (80039f4 <setup+0x90>)
 800396e:	a801      	add	r0, sp, #4
 8003970:	f000 fd46 	bl	8004400 <strcpy>
	//start PWM clocks
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8003974:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003a10 <setup+0xac>
	HAL_UART_Transmit(&huart1, (unsigned char*)buffer, len, 1000);
 8003978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800397c:	2206      	movs	r2, #6
 800397e:	a901      	add	r1, sp, #4
 8003980:	4628      	mov	r0, r5
 8003982:	f7ff f811 	bl	80029a8 <HAL_UART_Transmit>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8003986:	4f1c      	ldr	r7, [pc, #112]	; (80039f8 <setup+0x94>)
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8003988:	2100      	movs	r1, #0
 800398a:	481c      	ldr	r0, [pc, #112]	; (80039fc <setup+0x98>)
 800398c:	f7fe fb80 	bl	8002090 <HAL_TIM_PWM_Start>
	//init motor data structures
	initMot(&htim3, &htim2, &htim11, &htim10);
 8003990:	4e1b      	ldr	r6, [pc, #108]	; (8003a00 <setup+0x9c>)
 8003992:	4c1c      	ldr	r4, [pc, #112]	; (8003a04 <setup+0xa0>)
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8003994:	2100      	movs	r1, #0
 8003996:	4640      	mov	r0, r8
 8003998:	f7fe fb7a 	bl	8002090 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800399c:	2100      	movs	r1, #0
 800399e:	4638      	mov	r0, r7
 80039a0:	f7fe fb76 	bl	8002090 <HAL_TIM_PWM_Start>
	initMot(&htim3, &htim2, &htim11, &htim10);
 80039a4:	4643      	mov	r3, r8
 80039a6:	463a      	mov	r2, r7
 80039a8:	4631      	mov	r1, r6
 80039aa:	4620      	mov	r0, r4
 80039ac:	f7ff fb1c 	bl	8002fe8 <initMot>
	//init command queue data structure
	initCOM();
 80039b0:	f7ff face 	bl	8002f50 <initCOM>
	//start millis() timer clock interrupt
	HAL_TIM_Base_Start_IT(&htim6);
 80039b4:	4814      	ldr	r0, [pc, #80]	; (8003a08 <setup+0xa4>)
 80039b6:	f7fe fb1d 	bl	8001ff4 <HAL_TIM_Base_Start_IT>
	//start encoder tracking
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80039ba:	2118      	movs	r1, #24
 80039bc:	4630      	mov	r0, r6
 80039be:	f7fe fbde 	bl	800217e <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80039c2:	4620      	mov	r0, r4
	//Init Ultrasonic Data Structures
	initUltrasonics(&htim5);
 80039c4:	4c11      	ldr	r4, [pc, #68]	; (8003a0c <setup+0xa8>)
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80039c6:	2118      	movs	r1, #24
 80039c8:	f7fe fbd9 	bl	800217e <HAL_TIM_Encoder_Start>
	initUltrasonics(&htim5);
 80039cc:	4620      	mov	r0, r4
 80039ce:	f7ff fee7 	bl	80037a0 <initUltrasonics>
	HAL_TIM_IC_Start_IT(&htim5,TIM_CHANNEL_3);
 80039d2:	2108      	movs	r1, #8
 80039d4:	4620      	mov	r0, r4
 80039d6:	f7fe fb5d 	bl	8002094 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim5,TIM_CHANNEL_4);
 80039da:	210c      	movs	r1, #12
 80039dc:	4620      	mov	r0, r4
 80039de:	f7fe fb59 	bl	8002094 <HAL_TIM_IC_Start_IT>
	//start UART receive interrupt
	UART_ReadStart(&huart1);
 80039e2:	4628      	mov	r0, r5
 80039e4:	f7ff fa62 	bl	8002eac <UART_ReadStart>
	return;
}
 80039e8:	b008      	add	sp, #32
 80039ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039ee:	bf00      	nop
 80039f0:	200018e0 	.word	0x200018e0
 80039f4:	0800699b 	.word	0x0800699b
 80039f8:	20001800 	.word	0x20001800
 80039fc:	20001870 	.word	0x20001870
 8003a00:	200018a8 	.word	0x200018a8
 8003a04:	200017c8 	.word	0x200017c8
 8003a08:	20001838 	.word	0x20001838
 8003a0c:	20001790 	.word	0x20001790
 8003a10:	20001758 	.word	0x20001758

08003a14 <main>:
{
 8003a14:	b508      	push	{r3, lr}
  HAL_Init();
 8003a16:	f7fd fbd3 	bl	80011c0 <HAL_Init>
  SystemClock_Config();
 8003a1a:	f7ff ff63 	bl	80038e4 <SystemClock_Config>
  MX_GPIO_Init();
 8003a1e:	f7ff fedb 	bl	80037d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003a22:	f000 fc23 	bl	800426c <MX_USART1_UART_Init>
  MX_TIM9_Init();
 8003a26:	f000 fb41 	bl	80040ac <MX_TIM9_Init>
  MX_TIM10_Init();
 8003a2a:	f000 fb8f 	bl	800414c <MX_TIM10_Init>
  MX_TIM11_Init();
 8003a2e:	f000 fbd5 	bl	80041dc <MX_TIM11_Init>
  MX_TIM3_Init();
 8003a32:	f000 f9b5 	bl	8003da0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8003a36:	f000 f981 	bl	8003d3c <MX_TIM2_Init>
  MX_TIM6_Init();
 8003a3a:	f000 fa37 	bl	8003eac <MX_TIM6_Init>
  MX_TIM5_Init();
 8003a3e:	f000 f9e1 	bl	8003e04 <MX_TIM5_Init>
  setup();
 8003a42:	f7ff ff8f 	bl	8003964 <setup>
	  Parse_CMD(&htim9, &huart1);
 8003a46:	4c05      	ldr	r4, [pc, #20]	; (8003a5c <main+0x48>)
 8003a48:	4d05      	ldr	r5, [pc, #20]	; (8003a60 <main+0x4c>)
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	f7ff fa33 	bl	8002eb8 <Parse_CMD>
	  Run_PID(&huart1);
 8003a52:	4620      	mov	r0, r4
 8003a54:	f7ff fcec 	bl	8003430 <Run_PID>
 8003a58:	e7f7      	b.n	8003a4a <main+0x36>
 8003a5a:	bf00      	nop
 8003a5c:	200018e0 	.word	0x200018e0
 8003a60:	20001870 	.word	0x20001870

08003a64 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003a64:	e7fe      	b.n	8003a64 <_Error_Handler>

08003a66 <PIDCompute>:
    PIDTuningsSet(pid, kp, ki, kd);
}
        
bool
PIDCompute(PIDControl *pid) 
{
 8003a66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a6a:	4604      	mov	r4, r0
    float error, dInput;

    if(pid->mode == MANUAL)
 8003a6c:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8003a70:	2800      	cmp	r0, #0
 8003a72:	d03d      	beq.n	8003af0 <PIDCompute+0x8a>
    {
        return false;
    }
    
    // The classic PID error term
    error = (pid->setpoint) - (pid->input);
 8003a74:	6827      	ldr	r7, [r4, #0]
 8003a76:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003a78:	4639      	mov	r1, r7
 8003a7a:	f7fd f877 	bl	8000b6c <__aeabi_fsub>
    
    // Compute the integral term separately ahead of time
    pid->iTerm += (pid->alteredKi) * error;
 8003a7e:	69e1      	ldr	r1, [r4, #28]
    error = (pid->setpoint) - (pid->input);
 8003a80:	4681      	mov	r9, r0
    pid->iTerm += (pid->alteredKi) * error;
 8003a82:	f7fd f97d 	bl	8000d80 <__aeabi_fmul>
 8003a86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003a88:	f7fd f872 	bl	8000b70 <__addsf3>
    
    // Constrain the integrator to make sure it does not exceed output bounds
    pid->iTerm = CONSTRAIN( (pid->iTerm), (pid->outMin), (pid->outMax) );
 8003a8c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    pid->iTerm += (pid->alteredKi) * error;
 8003a8e:	4680      	mov	r8, r0
    pid->iTerm = CONSTRAIN( (pid->iTerm), (pid->outMin), (pid->outMax) );
 8003a90:	4629      	mov	r1, r5
 8003a92:	f7fd fb13 	bl	80010bc <__aeabi_fcmplt>
 8003a96:	2800      	cmp	r0, #0
 8003a98:	d12c      	bne.n	8003af4 <PIDCompute+0x8e>
 8003a9a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003a9c:	4640      	mov	r0, r8
 8003a9e:	4631      	mov	r1, r6
 8003aa0:	f7fd fb2a 	bl	80010f8 <__aeabi_fcmpgt>
 8003aa4:	b900      	cbnz	r0, 8003aa8 <PIDCompute+0x42>
 8003aa6:	4646      	mov	r6, r8
 8003aa8:	6266      	str	r6, [r4, #36]	; 0x24
    
    // Take the "derivative on measurement" instead of "derivative on error"
    dInput = (pid->input) - (pid->lastInput);
    
    // Run all the terms together to get the overall output
    pid->output = (pid->alteredKp) * error + (pid->iTerm) - (pid->alteredKd) * dInput;
 8003aaa:	69a1      	ldr	r1, [r4, #24]
 8003aac:	4648      	mov	r0, r9
 8003aae:	f7fd f967 	bl	8000d80 <__aeabi_fmul>
 8003ab2:	4631      	mov	r1, r6
 8003ab4:	f7fd f85c 	bl	8000b70 <__addsf3>
    dInput = (pid->input) - (pid->lastInput);
 8003ab8:	6861      	ldr	r1, [r4, #4]
    pid->output = (pid->alteredKp) * error + (pid->iTerm) - (pid->alteredKd) * dInput;
 8003aba:	4606      	mov	r6, r0
    dInput = (pid->input) - (pid->lastInput);
 8003abc:	4638      	mov	r0, r7
 8003abe:	f7fd f855 	bl	8000b6c <__aeabi_fsub>
    pid->output = (pid->alteredKp) * error + (pid->iTerm) - (pid->alteredKd) * dInput;
 8003ac2:	6a21      	ldr	r1, [r4, #32]
 8003ac4:	f7fd f95c 	bl	8000d80 <__aeabi_fmul>
 8003ac8:	4601      	mov	r1, r0
 8003aca:	4630      	mov	r0, r6
 8003acc:	f7fd f84e 	bl	8000b6c <__aeabi_fsub>
 8003ad0:	4606      	mov	r6, r0
    
    // Bound the output
    pid->output = CONSTRAIN( (pid->output), (pid->outMin), (pid->outMax) );
 8003ad2:	4601      	mov	r1, r0
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	f7fd fb0f 	bl	80010f8 <__aeabi_fcmpgt>
 8003ada:	b930      	cbnz	r0, 8003aea <PIDCompute+0x84>
 8003adc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8003ade:	4630      	mov	r0, r6
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	f7fd fb09 	bl	80010f8 <__aeabi_fcmpgt>
 8003ae6:	b900      	cbnz	r0, 8003aea <PIDCompute+0x84>
 8003ae8:	4635      	mov	r5, r6
    
    // Make the current input the former input
    pid->lastInput = pid->input;
    
    return true;
 8003aea:	2001      	movs	r0, #1
    pid->output = CONSTRAIN( (pid->output), (pid->outMin), (pid->outMax) );
 8003aec:	60a5      	str	r5, [r4, #8]
    pid->lastInput = pid->input;
 8003aee:	6067      	str	r7, [r4, #4]
}
 8003af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pid->iTerm = CONSTRAIN( (pid->iTerm), (pid->outMin), (pid->outMax) );
 8003af4:	462e      	mov	r6, r5
 8003af6:	e7d7      	b.n	8003aa8 <PIDCompute+0x42>

08003af8 <PIDOutputLimitsSet>:
    pid->mode = mode;
}

void 
PIDOutputLimitsSet(PIDControl *pid, float min, float max) 							  							  
{
 8003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afa:	460c      	mov	r4, r1
 8003afc:	4605      	mov	r5, r0
    // Check if the parameters are valid
    if(min >= max)
 8003afe:	4611      	mov	r1, r2
 8003b00:	4620      	mov	r0, r4
{
 8003b02:	4616      	mov	r6, r2
    if(min >= max)
 8003b04:	f7fd faee 	bl	80010e4 <__aeabi_fcmpge>
 8003b08:	b9f0      	cbnz	r0, 8003b48 <PIDOutputLimitsSet+0x50>
    // Save the parameters
    pid->outMin = min;
    pid->outMax = max;
    
    // If in automatic, apply the new constraints
    if(pid->mode == AUTOMATIC)
 8003b0a:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    pid->outMin = min;
 8003b0e:	62ec      	str	r4, [r5, #44]	; 0x2c
    if(pid->mode == AUTOMATIC)
 8003b10:	2b01      	cmp	r3, #1
    pid->outMax = max;
 8003b12:	632e      	str	r6, [r5, #48]	; 0x30
    if(pid->mode == AUTOMATIC)
 8003b14:	d118      	bne.n	8003b48 <PIDOutputLimitsSet+0x50>
    {
        pid->output = CONSTRAIN(pid->output, min, max);
 8003b16:	68af      	ldr	r7, [r5, #8]
 8003b18:	4620      	mov	r0, r4
 8003b1a:	4639      	mov	r1, r7
 8003b1c:	f7fd faec 	bl	80010f8 <__aeabi_fcmpgt>
 8003b20:	b998      	cbnz	r0, 8003b4a <PIDOutputLimitsSet+0x52>
 8003b22:	4639      	mov	r1, r7
 8003b24:	4630      	mov	r0, r6
 8003b26:	f7fd fac9 	bl	80010bc <__aeabi_fcmplt>
 8003b2a:	b980      	cbnz	r0, 8003b4e <PIDOutputLimitsSet+0x56>
 8003b2c:	60af      	str	r7, [r5, #8]
        pid->iTerm  = CONSTRAIN(pid->iTerm,  min, max);
 8003b2e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8003b30:	4620      	mov	r0, r4
 8003b32:	4639      	mov	r1, r7
 8003b34:	f7fd fae0 	bl	80010f8 <__aeabi_fcmpgt>
 8003b38:	b928      	cbnz	r0, 8003b46 <PIDOutputLimitsSet+0x4e>
 8003b3a:	4639      	mov	r1, r7
 8003b3c:	4630      	mov	r0, r6
 8003b3e:	f7fd fabd 	bl	80010bc <__aeabi_fcmplt>
 8003b42:	b930      	cbnz	r0, 8003b52 <PIDOutputLimitsSet+0x5a>
 8003b44:	463c      	mov	r4, r7
 8003b46:	626c      	str	r4, [r5, #36]	; 0x24
 8003b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pid->output = CONSTRAIN(pid->output, min, max);
 8003b4a:	4627      	mov	r7, r4
 8003b4c:	e7ee      	b.n	8003b2c <PIDOutputLimitsSet+0x34>
 8003b4e:	4637      	mov	r7, r6
 8003b50:	e7ec      	b.n	8003b2c <PIDOutputLimitsSet+0x34>
        pid->iTerm  = CONSTRAIN(pid->iTerm,  min, max);
 8003b52:	4634      	mov	r4, r6
 8003b54:	e7f7      	b.n	8003b46 <PIDOutputLimitsSet+0x4e>

08003b56 <PIDTuningsSet>:
    }
}

void 
PIDTuningsSet(PIDControl *pid, float kp, float ki, float kd)         	                                         
{
 8003b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b5a:	460d      	mov	r5, r1
 8003b5c:	4604      	mov	r4, r0
    // Check if the parameters are valid
    if(kp < 0.0f || ki < 0.0f || kd < 0.0f)
 8003b5e:	2100      	movs	r1, #0
 8003b60:	4628      	mov	r0, r5
{
 8003b62:	4616      	mov	r6, r2
 8003b64:	461f      	mov	r7, r3
    if(kp < 0.0f || ki < 0.0f || kd < 0.0f)
 8003b66:	f7fd faa9 	bl	80010bc <__aeabi_fcmplt>
 8003b6a:	bb38      	cbnz	r0, 8003bbc <PIDTuningsSet+0x66>
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4630      	mov	r0, r6
 8003b70:	f7fd faa4 	bl	80010bc <__aeabi_fcmplt>
 8003b74:	bb10      	cbnz	r0, 8003bbc <PIDTuningsSet+0x66>
 8003b76:	2100      	movs	r1, #0
 8003b78:	4638      	mov	r0, r7
 8003b7a:	f7fd fa9f 	bl	80010bc <__aeabi_fcmplt>
 8003b7e:	b9e8      	cbnz	r0, 8003bbc <PIDTuningsSet+0x66>
    pid->dispKi = ki;
    pid->dispKd = kd;
    
    // Alter the parameters for PID
    pid->alteredKp = kp;
    pid->alteredKi = ki * pid->sampleTime;
 8003b80:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
    pid->dispKi = ki;
 8003b84:	6126      	str	r6, [r4, #16]
    pid->alteredKi = ki * pid->sampleTime;
 8003b86:	4641      	mov	r1, r8
 8003b88:	4630      	mov	r0, r6
    pid->dispKp = kp;
 8003b8a:	60e5      	str	r5, [r4, #12]
    pid->dispKd = kd;
 8003b8c:	6167      	str	r7, [r4, #20]
    pid->alteredKp = kp;
 8003b8e:	61a5      	str	r5, [r4, #24]
    pid->alteredKi = ki * pid->sampleTime;
 8003b90:	f7fd f8f6 	bl	8000d80 <__aeabi_fmul>
    pid->alteredKd = kd / pid->sampleTime;
 8003b94:	4641      	mov	r1, r8
    pid->alteredKi = ki * pid->sampleTime;
 8003b96:	61e0      	str	r0, [r4, #28]
 8003b98:	4606      	mov	r6, r0
    pid->alteredKd = kd / pid->sampleTime;
 8003b9a:	4638      	mov	r0, r7
 8003b9c:	f7fd f9a4 	bl	8000ee8 <__aeabi_fdiv>
    
    // Apply reverse direction to the altered values if necessary
    if(pid->controllerDirection == REVERSE)
 8003ba0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    pid->alteredKd = kd / pid->sampleTime;
 8003ba4:	6220      	str	r0, [r4, #32]
    if(pid->controllerDirection == REVERSE)
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d108      	bne.n	8003bbc <PIDTuningsSet+0x66>
    {
        pid->alteredKp = -(pid->alteredKp);
 8003baa:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        pid->alteredKi = -(pid->alteredKi);
 8003bae:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
        pid->alteredKd = -(pid->alteredKd);
 8003bb2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
        pid->alteredKp = -(pid->alteredKp);
 8003bb6:	61a5      	str	r5, [r4, #24]
        pid->alteredKi = -(pid->alteredKi);
 8003bb8:	61e6      	str	r6, [r4, #28]
        pid->alteredKd = -(pid->alteredKd);
 8003bba:	6220      	str	r0, [r4, #32]
 8003bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003bc0 <PIDInit>:
{
 8003bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc4:	460e      	mov	r6, r1
    pid->iTerm = 0.0f;
 8003bc6:	2100      	movs	r1, #0
{
 8003bc8:	4617      	mov	r7, r2
 8003bca:	4698      	mov	r8, r3
 8003bcc:	9d08      	ldr	r5, [sp, #32]
 8003bce:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8003bd2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8003bd6:	4604      	mov	r4, r0
    pid->controllerDirection = controllerDirection;
 8003bd8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    pid->mode = mode;
 8003bdc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    pid->iTerm = 0.0f;
 8003be0:	6241      	str	r1, [r0, #36]	; 0x24
    pid->input = 0.0f;
 8003be2:	6001      	str	r1, [r0, #0]
    pid->lastInput = 0.0f;
 8003be4:	6041      	str	r1, [r0, #4]
    pid->output = 0.0f;
 8003be6:	6081      	str	r1, [r0, #8]
    pid->setpoint = 0.0f;
 8003be8:	6341      	str	r1, [r0, #52]	; 0x34
    if(sampleTimeSeconds > 0.0f)
 8003bea:	4628      	mov	r0, r5
{
 8003bec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003bf0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    if(sampleTimeSeconds > 0.0f)
 8003bf4:	f7fd fa80 	bl	80010f8 <__aeabi_fcmpgt>
 8003bf8:	b168      	cbz	r0, 8003c16 <PIDInit+0x56>
        pid->sampleTime = sampleTimeSeconds;
 8003bfa:	62a5      	str	r5, [r4, #40]	; 0x28
    PIDOutputLimitsSet(pid, minOutput, maxOutput);
 8003bfc:	4652      	mov	r2, sl
 8003bfe:	4649      	mov	r1, r9
 8003c00:	4620      	mov	r0, r4
 8003c02:	f7ff ff79 	bl	8003af8 <PIDOutputLimitsSet>
    PIDTuningsSet(pid, kp, ki, kd);
 8003c06:	4643      	mov	r3, r8
 8003c08:	463a      	mov	r2, r7
 8003c0a:	4631      	mov	r1, r6
 8003c0c:	4620      	mov	r0, r4
}
 8003c0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    PIDTuningsSet(pid, kp, ki, kd);
 8003c12:	f7ff bfa0 	b.w	8003b56 <PIDTuningsSet>
        pid->sampleTime = 1.0f;
 8003c16:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003c1a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c1c:	e7ee      	b.n	8003bfc <PIDInit+0x3c>
	...

08003c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8003c22:	4b28      	ldr	r3, [pc, #160]	; (8003cc4 <HAL_MspInit+0xa4>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003c24:	2007      	movs	r0, #7
  __HAL_RCC_COMP_CLK_ENABLE();
 8003c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c28:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c2c:	625a      	str	r2, [r3, #36]	; 0x24
 8003c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c30:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003c34:	9201      	str	r2, [sp, #4]
 8003c36:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c38:	6a1a      	ldr	r2, [r3, #32]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	621a      	str	r2, [r3, #32]
 8003c40:	6a1a      	ldr	r2, [r3, #32]
 8003c42:	f002 0201 	and.w	r2, r2, #1
 8003c46:	9202      	str	r2, [sp, #8]
 8003c48:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c58:	9303      	str	r3, [sp, #12]
 8003c5a:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003c5c:	f7fd faca 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003c60:	2200      	movs	r2, #0
 8003c62:	f06f 000b 	mvn.w	r0, #11
 8003c66:	4611      	mov	r1, r2
 8003c68:	f7fd fad6 	bl	8001218 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f06f 000a 	mvn.w	r0, #10
 8003c72:	4611      	mov	r1, r2
 8003c74:	f7fd fad0 	bl	8001218 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f06f 0009 	mvn.w	r0, #9
 8003c7e:	4611      	mov	r1, r2
 8003c80:	f7fd faca 	bl	8001218 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8003c84:	2200      	movs	r2, #0
 8003c86:	f06f 0004 	mvn.w	r0, #4
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	f7fd fac4 	bl	8001218 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003c90:	2200      	movs	r2, #0
 8003c92:	f06f 0003 	mvn.w	r0, #3
 8003c96:	4611      	mov	r1, r2
 8003c98:	f7fd fabe 	bl	8001218 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f06f 0001 	mvn.w	r0, #1
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	f7fd fab8 	bl	8001218 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f04f 30ff 	mov.w	r0, #4294967295
 8003cae:	4611      	mov	r1, r2
 8003cb0:	f7fd fab2 	bl	8001218 <HAL_NVIC_SetPriority>

    /**Enables the output of internal reference voltage 
    */
  __HAL_SYSCFG_VREFINT_OUT_ENABLE();
 8003cb4:	4a04      	ldr	r2, [pc, #16]	; (8003cc8 <HAL_MspInit+0xa8>)
 8003cb6:	6813      	ldr	r3, [r2, #0]
 8003cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cbc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cbe:	b005      	add	sp, #20
 8003cc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	40007c00 	.word	0x40007c00

08003ccc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003ccc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cce:	f7fd fa83 	bl	80011d8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003cd6:	f7fd bb02 	b.w	80012de <HAL_SYSTICK_IRQHandler>
	...

08003cdc <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003cdc:	4801      	ldr	r0, [pc, #4]	; (8003ce4 <USART1_IRQHandler+0x8>)
 8003cde:	f7fe bef2 	b.w	8002ac6 <HAL_UART_IRQHandler>
 8003ce2:	bf00      	nop
 8003ce4:	200018e0 	.word	0x200018e0

08003ce8 <TIM6_IRQHandler>:
void TIM6_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ce8:	4801      	ldr	r0, [pc, #4]	; (8003cf0 <TIM6_IRQHandler+0x8>)
 8003cea:	f7fe bc36 	b.w	800255a <HAL_TIM_IRQHandler>
 8003cee:	bf00      	nop
 8003cf0:	20001838 	.word	0x20001838

08003cf4 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8003cf4:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <SystemInit+0x3c>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cfc:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8003cfe:	6899      	ldr	r1, [r3, #8]
 8003d00:	4a0c      	ldr	r2, [pc, #48]	; (8003d34 <SystemInit+0x40>)
 8003d02:	400a      	ands	r2, r1
 8003d04:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8003d0c:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8003d10:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d18:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8003d20:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003d22:	2200      	movs	r2, #0
 8003d24:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003d26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d2a:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <SystemInit+0x44>)
 8003d2c:	609a      	str	r2, [r3, #8]
 8003d2e:	4770      	bx	lr
 8003d30:	40023800 	.word	0x40023800
 8003d34:	88ffc00c 	.word	0x88ffc00c
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003d3c:	b510      	push	{r4, lr}
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
 8003d3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d42:	2400      	movs	r4, #0
  htim2.Instance = TIM2;
 8003d44:	4814      	ldr	r0, [pc, #80]	; (8003d98 <MX_TIM2_Init+0x5c>)
{
 8003d46:	b08c      	sub	sp, #48	; 0x30
  htim2.Init.Prescaler = 0;
 8003d48:	e880 0018 	stmia.w	r0, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
 8003d4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d50:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d52:	2303      	movs	r3, #3
 8003d54:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d56:	2301      	movs	r3, #1
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003d58:	a903      	add	r1, sp, #12
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d5a:	6084      	str	r4, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d5c:	6104      	str	r4, [r0, #16]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d5e:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d60:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d62:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 8003d64:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d66:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d68:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d6a:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003d6c:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003d6e:	f7fe f9bd 	bl	80020ec <HAL_TIM_Encoder_Init>
 8003d72:	b118      	cbz	r0, 8003d7c <MX_TIM2_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003d74:	214f      	movs	r1, #79	; 0x4f
 8003d76:	4809      	ldr	r0, [pc, #36]	; (8003d9c <MX_TIM2_Init+0x60>)
 8003d78:	f7ff fe74 	bl	8003a64 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d7c:	a901      	add	r1, sp, #4
 8003d7e:	4806      	ldr	r0, [pc, #24]	; (8003d98 <MX_TIM2_Init+0x5c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d80:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d82:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d84:	f7fe fc6f 	bl	8002666 <HAL_TIMEx_MasterConfigSynchronization>
 8003d88:	b118      	cbz	r0, 8003d92 <MX_TIM2_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003d8a:	2156      	movs	r1, #86	; 0x56
 8003d8c:	4803      	ldr	r0, [pc, #12]	; (8003d9c <MX_TIM2_Init+0x60>)
 8003d8e:	f7ff fe69 	bl	8003a64 <_Error_Handler>
  }

}
 8003d92:	b00c      	add	sp, #48	; 0x30
 8003d94:	bd10      	pop	{r4, pc}
 8003d96:	bf00      	nop
 8003d98:	200018a8 	.word	0x200018a8
 8003d9c:	080069c3 	.word	0x080069c3

08003da0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003da0:	b510      	push	{r4, lr}
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
 8003da2:	2400      	movs	r4, #0
  htim3.Instance = TIM3;
 8003da4:	4814      	ldr	r0, [pc, #80]	; (8003df8 <MX_TIM3_Init+0x58>)
  htim3.Init.Prescaler = 0;
 8003da6:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <MX_TIM3_Init+0x5c>)
{
 8003da8:	b08c      	sub	sp, #48	; 0x30
  htim3.Init.Prescaler = 0;
 8003daa:	e880 0018 	stmia.w	r0, {r3, r4}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
 8003dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003db2:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003db4:	2303      	movs	r3, #3
 8003db6:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003db8:	2301      	movs	r3, #1
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003dba:	a903      	add	r1, sp, #12
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dbc:	6084      	str	r4, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dbe:	6104      	str	r4, [r0, #16]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003dc0:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003dc2:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003dc4:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 8003dc6:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003dc8:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003dca:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003dcc:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003dce:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003dd0:	f7fe f98c 	bl	80020ec <HAL_TIM_Encoder_Init>
 8003dd4:	b118      	cbz	r0, 8003dde <MX_TIM3_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003dd6:	2170      	movs	r1, #112	; 0x70
 8003dd8:	4809      	ldr	r0, [pc, #36]	; (8003e00 <MX_TIM3_Init+0x60>)
 8003dda:	f7ff fe43 	bl	8003a64 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003dde:	a901      	add	r1, sp, #4
 8003de0:	4805      	ldr	r0, [pc, #20]	; (8003df8 <MX_TIM3_Init+0x58>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003de2:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003de4:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003de6:	f7fe fc3e 	bl	8002666 <HAL_TIMEx_MasterConfigSynchronization>
 8003dea:	b118      	cbz	r0, 8003df4 <MX_TIM3_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003dec:	2177      	movs	r1, #119	; 0x77
 8003dee:	4804      	ldr	r0, [pc, #16]	; (8003e00 <MX_TIM3_Init+0x60>)
 8003df0:	f7ff fe38 	bl	8003a64 <_Error_Handler>
  }

}
 8003df4:	b00c      	add	sp, #48	; 0x30
 8003df6:	bd10      	pop	{r4, pc}
 8003df8:	200017c8 	.word	0x200017c8
 8003dfc:	40000400 	.word	0x40000400
 8003e00:	080069c3 	.word	0x080069c3

08003e04 <MX_TIM5_Init>:
{
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim5.Instance = TIM5;
 8003e04:	4826      	ldr	r0, [pc, #152]	; (8003ea0 <MX_TIM5_Init+0x9c>)
 8003e06:	4b27      	ldr	r3, [pc, #156]	; (8003ea4 <MX_TIM5_Init+0xa0>)
{
 8003e08:	b510      	push	{r4, lr}
  htim5.Instance = TIM5;
 8003e0a:	6003      	str	r3, [r0, #0]
  htim5.Init.Prescaler = 0;
 8003e0c:	2300      	movs	r3, #0
{
 8003e0e:	b08a      	sub	sp, #40	; 0x28
  htim5.Init.Prescaler = 0;
 8003e10:	6043      	str	r3, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e12:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 0;
 8003e14:	60c3      	str	r3, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e16:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003e18:	f7fe f8d2 	bl	8001fc0 <HAL_TIM_Base_Init>
 8003e1c:	b118      	cbz	r0, 8003e26 <MX_TIM5_Init+0x22>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003e1e:	2189      	movs	r1, #137	; 0x89
 8003e20:	4821      	ldr	r0, [pc, #132]	; (8003ea8 <MX_TIM5_Init+0xa4>)
 8003e22:	f7ff fe1f 	bl	8003a64 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e2a:	a90a      	add	r1, sp, #40	; 0x28
 8003e2c:	f841 3d20 	str.w	r3, [r1, #-32]!
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003e30:	481b      	ldr	r0, [pc, #108]	; (8003ea0 <MX_TIM5_Init+0x9c>)
 8003e32:	f7fe fad6 	bl	80023e2 <HAL_TIM_ConfigClockSource>
 8003e36:	b118      	cbz	r0, 8003e40 <MX_TIM5_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003e38:	218f      	movs	r1, #143	; 0x8f
 8003e3a:	481b      	ldr	r0, [pc, #108]	; (8003ea8 <MX_TIM5_Init+0xa4>)
 8003e3c:	f7ff fe12 	bl	8003a64 <_Error_Handler>
  }

  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8003e40:	4817      	ldr	r0, [pc, #92]	; (8003ea0 <MX_TIM5_Init+0x9c>)
 8003e42:	f7fe f8fe 	bl	8002042 <HAL_TIM_IC_Init>
 8003e46:	b118      	cbz	r0, 8003e50 <MX_TIM5_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003e48:	2194      	movs	r1, #148	; 0x94
 8003e4a:	4817      	ldr	r0, [pc, #92]	; (8003ea8 <MX_TIM5_Init+0xa4>)
 8003e4c:	f7ff fe0a 	bl	8003a64 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e50:	2400      	movs	r4, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003e52:	4669      	mov	r1, sp
 8003e54:	4812      	ldr	r0, [pc, #72]	; (8003ea0 <MX_TIM5_Init+0x9c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e56:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e58:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003e5a:	f7fe fc04 	bl	8002666 <HAL_TIMEx_MasterConfigSynchronization>
 8003e5e:	b118      	cbz	r0, 8003e68 <MX_TIM5_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003e60:	219b      	movs	r1, #155	; 0x9b
 8003e62:	4811      	ldr	r0, [pc, #68]	; (8003ea8 <MX_TIM5_Init+0xa4>)
 8003e64:	f7ff fdfe 	bl	8003a64 <_Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003e68:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003e6a:	2208      	movs	r2, #8
 8003e6c:	a906      	add	r1, sp, #24
 8003e6e:	480c      	ldr	r0, [pc, #48]	; (8003ea0 <MX_TIM5_Init+0x9c>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003e70:	9406      	str	r4, [sp, #24]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003e72:	9307      	str	r3, [sp, #28]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003e74:	9408      	str	r4, [sp, #32]
  sConfigIC.ICFilter = 0;
 8003e76:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003e78:	f7fe f9a3 	bl	80021c2 <HAL_TIM_IC_ConfigChannel>
 8003e7c:	b118      	cbz	r0, 8003e86 <MX_TIM5_Init+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003e7e:	21a4      	movs	r1, #164	; 0xa4
 8003e80:	4809      	ldr	r0, [pc, #36]	; (8003ea8 <MX_TIM5_Init+0xa4>)
 8003e82:	f7ff fdef 	bl	8003a64 <_Error_Handler>
  }

  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003e86:	220c      	movs	r2, #12
 8003e88:	a906      	add	r1, sp, #24
 8003e8a:	4805      	ldr	r0, [pc, #20]	; (8003ea0 <MX_TIM5_Init+0x9c>)
 8003e8c:	f7fe f999 	bl	80021c2 <HAL_TIM_IC_ConfigChannel>
 8003e90:	b118      	cbz	r0, 8003e9a <MX_TIM5_Init+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003e92:	21a9      	movs	r1, #169	; 0xa9
 8003e94:	4804      	ldr	r0, [pc, #16]	; (8003ea8 <MX_TIM5_Init+0xa4>)
 8003e96:	f7ff fde5 	bl	8003a64 <_Error_Handler>
  }

}
 8003e9a:	b00a      	add	sp, #40	; 0x28
 8003e9c:	bd10      	pop	{r4, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20001790 	.word	0x20001790
 8003ea4:	40000c00 	.word	0x40000c00
 8003ea8:	080069c3 	.word	0x080069c3

08003eac <MX_TIM6_Init>:
void MX_TIM6_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 31999;
 8003eac:	f647 4cff 	movw	ip, #31999	; 0x7cff
{
 8003eb0:	b513      	push	{r0, r1, r4, lr}
  htim6.Init.Prescaler = 31999;
 8003eb2:	4b0e      	ldr	r3, [pc, #56]	; (8003eec <MX_TIM6_Init+0x40>)
  htim6.Instance = TIM6;
 8003eb4:	480e      	ldr	r0, [pc, #56]	; (8003ef0 <MX_TIM6_Init+0x44>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eb6:	2400      	movs	r4, #0
  htim6.Init.Prescaler = 31999;
 8003eb8:	e880 1008 	stmia.w	r0, {r3, ip}
  htim6.Init.Period = 1;
 8003ebc:	2301      	movs	r3, #1
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ebe:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 1;
 8003ec0:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003ec2:	f7fe f87d 	bl	8001fc0 <HAL_TIM_Base_Init>
 8003ec6:	b118      	cbz	r0, 8003ed0 <MX_TIM6_Init+0x24>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003ec8:	21b8      	movs	r1, #184	; 0xb8
 8003eca:	480a      	ldr	r0, [pc, #40]	; (8003ef4 <MX_TIM6_Init+0x48>)
 8003ecc:	f7ff fdca 	bl	8003a64 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003ed0:	4669      	mov	r1, sp
 8003ed2:	4807      	ldr	r0, [pc, #28]	; (8003ef0 <MX_TIM6_Init+0x44>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ed4:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ed6:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003ed8:	f7fe fbc5 	bl	8002666 <HAL_TIMEx_MasterConfigSynchronization>
 8003edc:	b118      	cbz	r0, 8003ee6 <MX_TIM6_Init+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003ede:	21bf      	movs	r1, #191	; 0xbf
 8003ee0:	4804      	ldr	r0, [pc, #16]	; (8003ef4 <MX_TIM6_Init+0x48>)
 8003ee2:	f7ff fdbf 	bl	8003a64 <_Error_Handler>
  }

}
 8003ee6:	b002      	add	sp, #8
 8003ee8:	bd10      	pop	{r4, pc}
 8003eea:	bf00      	nop
 8003eec:	40001000 	.word	0x40001000
 8003ef0:	20001838 	.word	0x20001838
 8003ef4:	080069c3 	.word	0x080069c3

08003ef8 <HAL_TIM_Encoder_MspInit>:
  HAL_TIM_MspPostInit(&htim11);

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003ef8:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_encoderHandle->Instance==TIM2)
 8003efa:	6803      	ldr	r3, [r0, #0]
{
 8003efc:	b089      	sub	sp, #36	; 0x24
  if(tim_encoderHandle->Instance==TIM2)
 8003efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f02:	d11a      	bne.n	8003f3a <HAL_TIM_Encoder_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f04:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8003f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f0a:	4818      	ldr	r0, [pc, #96]	; (8003f6c <HAL_TIM_Encoder_MspInit+0x74>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f0c:	f042 0201 	orr.w	r2, r2, #1
 8003f10:	625a      	str	r2, [r3, #36]	; 0x24
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f14:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8003f1e:	2322      	movs	r3, #34	; 0x22
 8003f20:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f22:	2302      	movs	r3, #2
 8003f24:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f2a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f30:	f7fd f9da 	bl	80012e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003f34:	b009      	add	sp, #36	; 0x24
 8003f36:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_encoderHandle->Instance==TIM3)
 8003f3a:	4a0d      	ldr	r2, [pc, #52]	; (8003f70 <HAL_TIM_Encoder_MspInit+0x78>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d1f9      	bne.n	8003f34 <HAL_TIM_Encoder_MspInit+0x3c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <HAL_TIM_Encoder_MspInit+0x7c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f42:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f46:	480c      	ldr	r0, [pc, #48]	; (8003f78 <HAL_TIM_Encoder_MspInit+0x80>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f48:	f042 0202 	orr.w	r2, r2, #2
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f50:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	9302      	str	r3, [sp, #8]
 8003f58:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f5a:	23c0      	movs	r3, #192	; 0xc0
 8003f5c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5e:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f62:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f64:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f66:	9307      	str	r3, [sp, #28]
 8003f68:	e7e2      	b.n	8003f30 <HAL_TIM_Encoder_MspInit+0x38>
 8003f6a:	bf00      	nop
 8003f6c:	40020000 	.word	0x40020000
 8003f70:	40000400 	.word	0x40000400
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40020800 	.word	0x40020800

08003f7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f7c:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_baseHandle->Instance==TIM5)
 8003f7e:	6803      	ldr	r3, [r0, #0]
 8003f80:	4a2e      	ldr	r2, [pc, #184]	; (800403c <HAL_TIM_Base_MspInit+0xc0>)
{
 8003f82:	b08b      	sub	sp, #44	; 0x2c
  if(tim_baseHandle->Instance==TIM5)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d118      	bne.n	8003fba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f88:	4b2d      	ldr	r3, [pc, #180]	; (8004040 <HAL_TIM_Base_MspInit+0xc4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8a:	a905      	add	r1, sp, #20
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8e:	482d      	ldr	r0, [pc, #180]	; (8004044 <HAL_TIM_Base_MspInit+0xc8>)
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f90:	f042 0208 	orr.w	r2, r2, #8
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f98:	2200      	movs	r2, #0
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003fa2:	230c      	movs	r3, #12
 8003fa4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa6:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa8:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003faa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fac:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003fae:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb0:	f7fd f99a 	bl	80012e8 <HAL_GPIO_Init>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003fb4:	b00b      	add	sp, #44	; 0x2c
 8003fb6:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM6)
 8003fba:	4a23      	ldr	r2, [pc, #140]	; (8004048 <HAL_TIM_Base_MspInit+0xcc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d112      	bne.n	8003fe6 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003fc0:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <HAL_TIM_Base_MspInit+0xc4>)
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003fc2:	202b      	movs	r0, #43	; 0x2b
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fc6:	f042 0210 	orr.w	r2, r2, #16
 8003fca:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003fcc:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003fd0:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	9302      	str	r3, [sp, #8]
 8003fd8:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003fda:	f7fd f91d 	bl	8001218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003fde:	202b      	movs	r0, #43	; 0x2b
 8003fe0:	f7fd f94e 	bl	8001280 <HAL_NVIC_EnableIRQ>
 8003fe4:	e7e6      	b.n	8003fb4 <HAL_TIM_Base_MspInit+0x38>
  else if(tim_baseHandle->Instance==TIM9)
 8003fe6:	4a19      	ldr	r2, [pc, #100]	; (800404c <HAL_TIM_Base_MspInit+0xd0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d10a      	bne.n	8004002 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003fec:	4b14      	ldr	r3, [pc, #80]	; (8004040 <HAL_TIM_Base_MspInit+0xc4>)
 8003fee:	6a1a      	ldr	r2, [r3, #32]
 8003ff0:	f042 0204 	orr.w	r2, r2, #4
 8003ff4:	621a      	str	r2, [r3, #32]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	9303      	str	r3, [sp, #12]
 8003ffe:	9b03      	ldr	r3, [sp, #12]
 8004000:	e7d8      	b.n	8003fb4 <HAL_TIM_Base_MspInit+0x38>
  else if(tim_baseHandle->Instance==TIM10)
 8004002:	4a13      	ldr	r2, [pc, #76]	; (8004050 <HAL_TIM_Base_MspInit+0xd4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d10a      	bne.n	800401e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004008:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <HAL_TIM_Base_MspInit+0xc4>)
 800400a:	6a1a      	ldr	r2, [r3, #32]
 800400c:	f042 0208 	orr.w	r2, r2, #8
 8004010:	621a      	str	r2, [r3, #32]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	9304      	str	r3, [sp, #16]
 800401a:	9b04      	ldr	r3, [sp, #16]
 800401c:	e7ca      	b.n	8003fb4 <HAL_TIM_Base_MspInit+0x38>
  else if(tim_baseHandle->Instance==TIM11)
 800401e:	4a0d      	ldr	r2, [pc, #52]	; (8004054 <HAL_TIM_Base_MspInit+0xd8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d1c7      	bne.n	8003fb4 <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004024:	4b06      	ldr	r3, [pc, #24]	; (8004040 <HAL_TIM_Base_MspInit+0xc4>)
 8004026:	6a1a      	ldr	r2, [r3, #32]
 8004028:	f042 0210 	orr.w	r2, r2, #16
 800402c:	621a      	str	r2, [r3, #32]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	9305      	str	r3, [sp, #20]
 8004036:	9b05      	ldr	r3, [sp, #20]
}
 8004038:	e7bc      	b.n	8003fb4 <HAL_TIM_Base_MspInit+0x38>
 800403a:	bf00      	nop
 800403c:	40000c00 	.word	0x40000c00
 8004040:	40023800 	.word	0x40023800
 8004044:	40020000 	.word	0x40020000
 8004048:	40001000 	.word	0x40001000
 800404c:	40010800 	.word	0x40010800
 8004050:	40010c00 	.word	0x40010c00
 8004054:	40011000 	.word	0x40011000

08004058 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004058:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM9)
 800405a:	6803      	ldr	r3, [r0, #0]
 800405c:	4a0f      	ldr	r2, [pc, #60]	; (800409c <HAL_TIM_MspPostInit+0x44>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d110      	bne.n	8004084 <HAL_TIM_MspPostInit+0x2c>

  /* USER CODE END TIM9_MspPostInit 0 */
    /**TIM9 GPIO Configuration    
    PB13     ------> TIM9_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  /* USER CODE END TIM11_MspPostInit 0 */
  
    /**TIM11 GPIO Configuration    
    PB9     ------> TIM11_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004066:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004068:	2302      	movs	r3, #2
 800406a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406c:	2300      	movs	r3, #0
 800406e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004070:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8004072:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004074:	a901      	add	r1, sp, #4
 8004076:	480a      	ldr	r0, [pc, #40]	; (80040a0 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8004078:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800407a:	f7fd f935 	bl	80012e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800407e:	b007      	add	sp, #28
 8004080:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(timHandle->Instance==TIM10)
 8004084:	4a07      	ldr	r2, [pc, #28]	; (80040a4 <HAL_TIM_MspPostInit+0x4c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d102      	bne.n	8004090 <HAL_TIM_MspPostInit+0x38>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800408a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800408e:	e7ea      	b.n	8004066 <HAL_TIM_MspPostInit+0xe>
  else if(timHandle->Instance==TIM11)
 8004090:	4a05      	ldr	r2, [pc, #20]	; (80040a8 <HAL_TIM_MspPostInit+0x50>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d1f3      	bne.n	800407e <HAL_TIM_MspPostInit+0x26>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800409a:	e7e4      	b.n	8004066 <HAL_TIM_MspPostInit+0xe>
 800409c:	40010800 	.word	0x40010800
 80040a0:	40020400 	.word	0x40020400
 80040a4:	40010c00 	.word	0x40010c00
 80040a8:	40011000 	.word	0x40011000

080040ac <MX_TIM9_Init>:
  htim9.Init.Prescaler = 125;
 80040ac:	237d      	movs	r3, #125	; 0x7d
  htim9.Instance = TIM9;
 80040ae:	4824      	ldr	r0, [pc, #144]	; (8004140 <MX_TIM9_Init+0x94>)
  htim9.Init.Prescaler = 125;
 80040b0:	4924      	ldr	r1, [pc, #144]	; (8004144 <MX_TIM9_Init+0x98>)
{
 80040b2:	b500      	push	{lr}
  htim9.Init.Period = 1024;
 80040b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  htim9.Init.Prescaler = 125;
 80040b8:	e880 000a 	stmia.w	r0, {r1, r3}
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040bc:	2300      	movs	r3, #0
{
 80040be:	b08d      	sub	sp, #52	; 0x34
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040c0:	6083      	str	r3, [r0, #8]
  htim9.Init.Period = 1024;
 80040c2:	60c2      	str	r2, [r0, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040c4:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80040c6:	f7fd ff7b 	bl	8001fc0 <HAL_TIM_Base_Init>
 80040ca:	b118      	cbz	r0, 80040d4 <MX_TIM9_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 80040cc:	21d1      	movs	r1, #209	; 0xd1
 80040ce:	481e      	ldr	r0, [pc, #120]	; (8004148 <MX_TIM9_Init+0x9c>)
 80040d0:	f7ff fcc8 	bl	8003a64 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040d8:	a90c      	add	r1, sp, #48	; 0x30
 80040da:	f841 3d24 	str.w	r3, [r1, #-36]!
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80040de:	4818      	ldr	r0, [pc, #96]	; (8004140 <MX_TIM9_Init+0x94>)
 80040e0:	f7fe f97f 	bl	80023e2 <HAL_TIM_ConfigClockSource>
 80040e4:	b118      	cbz	r0, 80040ee <MX_TIM9_Init+0x42>
    _Error_Handler(__FILE__, __LINE__);
 80040e6:	21d7      	movs	r1, #215	; 0xd7
 80040e8:	4817      	ldr	r0, [pc, #92]	; (8004148 <MX_TIM9_Init+0x9c>)
 80040ea:	f7ff fcbb 	bl	8003a64 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80040ee:	4814      	ldr	r0, [pc, #80]	; (8004140 <MX_TIM9_Init+0x94>)
 80040f0:	f7fd ff8c 	bl	800200c <HAL_TIM_PWM_Init>
 80040f4:	b118      	cbz	r0, 80040fe <MX_TIM9_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
 80040f6:	21dc      	movs	r1, #220	; 0xdc
 80040f8:	4813      	ldr	r0, [pc, #76]	; (8004148 <MX_TIM9_Init+0x9c>)
 80040fa:	f7ff fcb3 	bl	8003a64 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040fe:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8004100:	a901      	add	r1, sp, #4
 8004102:	480f      	ldr	r0, [pc, #60]	; (8004140 <MX_TIM9_Init+0x94>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004104:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004106:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8004108:	f7fe faad 	bl	8002666 <HAL_TIMEx_MasterConfigSynchronization>
 800410c:	b118      	cbz	r0, 8004116 <MX_TIM9_Init+0x6a>
    _Error_Handler(__FILE__, __LINE__);
 800410e:	21e3      	movs	r1, #227	; 0xe3
 8004110:	480d      	ldr	r0, [pc, #52]	; (8004148 <MX_TIM9_Init+0x9c>)
 8004112:	f7ff fca7 	bl	8003a64 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8004116:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004118:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800411a:	a907      	add	r1, sp, #28
 800411c:	4808      	ldr	r0, [pc, #32]	; (8004140 <MX_TIM9_Init+0x94>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800411e:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8004120:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004122:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004124:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004126:	f7fe f8d4 	bl	80022d2 <HAL_TIM_PWM_ConfigChannel>
 800412a:	b118      	cbz	r0, 8004134 <MX_TIM9_Init+0x88>
    _Error_Handler(__FILE__, __LINE__);
 800412c:	21ec      	movs	r1, #236	; 0xec
 800412e:	4806      	ldr	r0, [pc, #24]	; (8004148 <MX_TIM9_Init+0x9c>)
 8004130:	f7ff fc98 	bl	8003a64 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim9);
 8004134:	4802      	ldr	r0, [pc, #8]	; (8004140 <MX_TIM9_Init+0x94>)
 8004136:	f7ff ff8f 	bl	8004058 <HAL_TIM_MspPostInit>
}
 800413a:	b00d      	add	sp, #52	; 0x34
 800413c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004140:	20001870 	.word	0x20001870
 8004144:	40010800 	.word	0x40010800
 8004148:	080069c3 	.word	0x080069c3

0800414c <MX_TIM10_Init>:
  htim10.Init.Prescaler = 16;
 800414c:	2310      	movs	r3, #16
  htim10.Instance = TIM10;
 800414e:	4820      	ldr	r0, [pc, #128]	; (80041d0 <MX_TIM10_Init+0x84>)
  htim10.Init.Prescaler = 16;
 8004150:	4920      	ldr	r1, [pc, #128]	; (80041d4 <MX_TIM10_Init+0x88>)
{
 8004152:	b500      	push	{lr}
  htim10.Init.Period = 2000;
 8004154:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  htim10.Init.Prescaler = 16;
 8004158:	e880 000a 	stmia.w	r0, {r1, r3}
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800415c:	2300      	movs	r3, #0
{
 800415e:	b08b      	sub	sp, #44	; 0x2c
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004160:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 2000;
 8004162:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004164:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004166:	f7fd ff2b 	bl	8001fc0 <HAL_TIM_Base_Init>
 800416a:	b118      	cbz	r0, 8004174 <MX_TIM10_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 800416c:	21ff      	movs	r1, #255	; 0xff
 800416e:	481a      	ldr	r0, [pc, #104]	; (80041d8 <MX_TIM10_Init+0x8c>)
 8004170:	f7ff fc78 	bl	8003a64 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004178:	a90a      	add	r1, sp, #40	; 0x28
 800417a:	f841 3d24 	str.w	r3, [r1, #-36]!
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 800417e:	4814      	ldr	r0, [pc, #80]	; (80041d0 <MX_TIM10_Init+0x84>)
 8004180:	f7fe f92f 	bl	80023e2 <HAL_TIM_ConfigClockSource>
 8004184:	b120      	cbz	r0, 8004190 <MX_TIM10_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
 8004186:	f240 1105 	movw	r1, #261	; 0x105
 800418a:	4813      	ldr	r0, [pc, #76]	; (80041d8 <MX_TIM10_Init+0x8c>)
 800418c:	f7ff fc6a 	bl	8003a64 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8004190:	480f      	ldr	r0, [pc, #60]	; (80041d0 <MX_TIM10_Init+0x84>)
 8004192:	f7fd ff3b 	bl	800200c <HAL_TIM_PWM_Init>
 8004196:	b120      	cbz	r0, 80041a2 <MX_TIM10_Init+0x56>
    _Error_Handler(__FILE__, __LINE__);
 8004198:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800419c:	480e      	ldr	r0, [pc, #56]	; (80041d8 <MX_TIM10_Init+0x8c>)
 800419e:	f7ff fc61 	bl	8003a64 <_Error_Handler>
  sConfigOC.Pulse = 0;
 80041a2:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041a4:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041a6:	a905      	add	r1, sp, #20
 80041a8:	4809      	ldr	r0, [pc, #36]	; (80041d0 <MX_TIM10_Init+0x84>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041aa:	9305      	str	r3, [sp, #20]
  sConfigOC.Pulse = 0;
 80041ac:	9206      	str	r2, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041ae:	9207      	str	r2, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041b0:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041b2:	f7fe f88e 	bl	80022d2 <HAL_TIM_PWM_ConfigChannel>
 80041b6:	b120      	cbz	r0, 80041c2 <MX_TIM10_Init+0x76>
    _Error_Handler(__FILE__, __LINE__);
 80041b8:	f240 1113 	movw	r1, #275	; 0x113
 80041bc:	4806      	ldr	r0, [pc, #24]	; (80041d8 <MX_TIM10_Init+0x8c>)
 80041be:	f7ff fc51 	bl	8003a64 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim10);
 80041c2:	4803      	ldr	r0, [pc, #12]	; (80041d0 <MX_TIM10_Init+0x84>)
 80041c4:	f7ff ff48 	bl	8004058 <HAL_TIM_MspPostInit>
}
 80041c8:	b00b      	add	sp, #44	; 0x2c
 80041ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80041ce:	bf00      	nop
 80041d0:	20001758 	.word	0x20001758
 80041d4:	40010c00 	.word	0x40010c00
 80041d8:	080069c3 	.word	0x080069c3

080041dc <MX_TIM11_Init>:
  htim11.Init.Prescaler = 16;
 80041dc:	2310      	movs	r3, #16
  htim11.Instance = TIM11;
 80041de:	4820      	ldr	r0, [pc, #128]	; (8004260 <MX_TIM11_Init+0x84>)
  htim11.Init.Prescaler = 16;
 80041e0:	4920      	ldr	r1, [pc, #128]	; (8004264 <MX_TIM11_Init+0x88>)
{
 80041e2:	b500      	push	{lr}
  htim11.Init.Period = 2000;
 80041e4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  htim11.Init.Prescaler = 16;
 80041e8:	e880 000a 	stmia.w	r0, {r1, r3}
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ec:	2300      	movs	r3, #0
{
 80041ee:	b08b      	sub	sp, #44	; 0x2c
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f0:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 2000;
 80041f2:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041f4:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80041f6:	f7fd fee3 	bl	8001fc0 <HAL_TIM_Base_Init>
 80041fa:	b120      	cbz	r0, 8004206 <MX_TIM11_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 80041fc:	f44f 7193 	mov.w	r1, #294	; 0x126
 8004200:	4819      	ldr	r0, [pc, #100]	; (8004268 <MX_TIM11_Init+0x8c>)
 8004202:	f7ff fc2f 	bl	8003a64 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800420a:	a90a      	add	r1, sp, #40	; 0x28
 800420c:	f841 3d24 	str.w	r3, [r1, #-36]!
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8004210:	4813      	ldr	r0, [pc, #76]	; (8004260 <MX_TIM11_Init+0x84>)
 8004212:	f7fe f8e6 	bl	80023e2 <HAL_TIM_ConfigClockSource>
 8004216:	b120      	cbz	r0, 8004222 <MX_TIM11_Init+0x46>
    _Error_Handler(__FILE__, __LINE__);
 8004218:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800421c:	4812      	ldr	r0, [pc, #72]	; (8004268 <MX_TIM11_Init+0x8c>)
 800421e:	f7ff fc21 	bl	8003a64 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8004222:	480f      	ldr	r0, [pc, #60]	; (8004260 <MX_TIM11_Init+0x84>)
 8004224:	f7fd fef2 	bl	800200c <HAL_TIM_PWM_Init>
 8004228:	b120      	cbz	r0, 8004234 <MX_TIM11_Init+0x58>
    _Error_Handler(__FILE__, __LINE__);
 800422a:	f240 1131 	movw	r1, #305	; 0x131
 800422e:	480e      	ldr	r0, [pc, #56]	; (8004268 <MX_TIM11_Init+0x8c>)
 8004230:	f7ff fc18 	bl	8003a64 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8004234:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004236:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004238:	a905      	add	r1, sp, #20
 800423a:	4809      	ldr	r0, [pc, #36]	; (8004260 <MX_TIM11_Init+0x84>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800423c:	9305      	str	r3, [sp, #20]
  sConfigOC.Pulse = 0;
 800423e:	9206      	str	r2, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004240:	9207      	str	r2, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004242:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004244:	f7fe f845 	bl	80022d2 <HAL_TIM_PWM_ConfigChannel>
 8004248:	b120      	cbz	r0, 8004254 <MX_TIM11_Init+0x78>
    _Error_Handler(__FILE__, __LINE__);
 800424a:	f44f 719d 	mov.w	r1, #314	; 0x13a
 800424e:	4806      	ldr	r0, [pc, #24]	; (8004268 <MX_TIM11_Init+0x8c>)
 8004250:	f7ff fc08 	bl	8003a64 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim11);
 8004254:	4802      	ldr	r0, [pc, #8]	; (8004260 <MX_TIM11_Init+0x84>)
 8004256:	f7ff feff 	bl	8004058 <HAL_TIM_MspPostInit>
}
 800425a:	b00b      	add	sp, #44	; 0x2c
 800425c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004260:	20001800 	.word	0x20001800
 8004264:	40011000 	.word	0x40011000
 8004268:	080069c3 	.word	0x080069c3

0800426c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800426c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 800426e:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
  huart1.Instance = USART1;
 8004272:	480b      	ldr	r0, [pc, #44]	; (80042a0 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 9600;
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004276:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 9600;
 8004278:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800427c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800427e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004280:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004282:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004284:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004286:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004288:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800428a:	f7fe fb61 	bl	8002950 <HAL_UART_Init>
 800428e:	b128      	cbz	r0, 800429c <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8004290:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8004294:	2142      	movs	r1, #66	; 0x42
 8004296:	4804      	ldr	r0, [pc, #16]	; (80042a8 <MX_USART1_UART_Init+0x3c>)
 8004298:	f7ff bbe4 	b.w	8003a64 <_Error_Handler>
 800429c:	bd08      	pop	{r3, pc}
 800429e:	bf00      	nop
 80042a0:	200018e0 	.word	0x200018e0
 80042a4:	40013800 	.word	0x40013800
 80042a8:	080069d0 	.word	0x080069d0

080042ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80042ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 80042ae:	6802      	ldr	r2, [r0, #0]
 80042b0:	4b13      	ldr	r3, [pc, #76]	; (8004300 <HAL_UART_MspInit+0x54>)
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d120      	bne.n	80042f8 <HAL_UART_MspInit+0x4c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80042b6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80042ba:	6a1a      	ldr	r2, [r3, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042bc:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80042be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042c2:	621a      	str	r2, [r3, #32]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042c6:	480f      	ldr	r0, [pc, #60]	; (8004304 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80042c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042d0:	23c0      	movs	r3, #192	; 0xc0
 80042d2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d4:	2302      	movs	r3, #2
 80042d6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042d8:	2301      	movs	r3, #1
 80042da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042dc:	2303      	movs	r3, #3
 80042de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042e0:	2307      	movs	r3, #7
 80042e2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042e4:	f7fd f800 	bl	80012e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80042e8:	2200      	movs	r2, #0
 80042ea:	2025      	movs	r0, #37	; 0x25
 80042ec:	4611      	mov	r1, r2
 80042ee:	f7fc ff93 	bl	8001218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80042f2:	2025      	movs	r0, #37	; 0x25
 80042f4:	f7fc ffc4 	bl	8001280 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80042f8:	b007      	add	sp, #28
 80042fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80042fe:	bf00      	nop
 8004300:	40013800 	.word	0x40013800
 8004304:	40020400 	.word	0x40020400

08004308 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004308:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800430a:	e003      	b.n	8004314 <LoopCopyDataInit>

0800430c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800430e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004310:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004312:	3104      	adds	r1, #4

08004314 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004314:	480a      	ldr	r0, [pc, #40]	; (8004340 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004316:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004318:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800431a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800431c:	d3f6      	bcc.n	800430c <CopyDataInit>
  ldr r2, =_sbss
 800431e:	4a0a      	ldr	r2, [pc, #40]	; (8004348 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004320:	e002      	b.n	8004328 <LoopFillZerobss>

08004322 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004322:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004324:	f842 3b04 	str.w	r3, [r2], #4

08004328 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004328:	4b08      	ldr	r3, [pc, #32]	; (800434c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800432a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800432c:	d3f9      	bcc.n	8004322 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800432e:	f7ff fce1 	bl	8003cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004332:	f000 f815 	bl	8004360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004336:	f7ff fb6d 	bl	8003a14 <main>
  bx lr
 800433a:	4770      	bx	lr
  ldr r3, =_sidata
 800433c:	08006c88 	.word	0x08006c88
  ldr r0, =_sdata
 8004340:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004344:	200001d4 	.word	0x200001d4
  ldr r2, =_sbss
 8004348:	200001d8 	.word	0x200001d8
  ldr r3, = _ebss
 800434c:	20001924 	.word	0x20001924

08004350 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004350:	e7fe      	b.n	8004350 <ADC1_IRQHandler>

08004352 <atof>:
 8004352:	2100      	movs	r1, #0
 8004354:	f000 be88 	b.w	8005068 <strtod>

08004358 <atoi>:
 8004358:	220a      	movs	r2, #10
 800435a:	2100      	movs	r1, #0
 800435c:	f000 bf6a 	b.w	8005234 <strtol>

08004360 <__libc_init_array>:
 8004360:	b570      	push	{r4, r5, r6, lr}
 8004362:	2500      	movs	r5, #0
 8004364:	4e0c      	ldr	r6, [pc, #48]	; (8004398 <__libc_init_array+0x38>)
 8004366:	4c0d      	ldr	r4, [pc, #52]	; (800439c <__libc_init_array+0x3c>)
 8004368:	1ba4      	subs	r4, r4, r6
 800436a:	10a4      	asrs	r4, r4, #2
 800436c:	42a5      	cmp	r5, r4
 800436e:	d109      	bne.n	8004384 <__libc_init_array+0x24>
 8004370:	f002 faca 	bl	8006908 <_init>
 8004374:	2500      	movs	r5, #0
 8004376:	4e0a      	ldr	r6, [pc, #40]	; (80043a0 <__libc_init_array+0x40>)
 8004378:	4c0a      	ldr	r4, [pc, #40]	; (80043a4 <__libc_init_array+0x44>)
 800437a:	1ba4      	subs	r4, r4, r6
 800437c:	10a4      	asrs	r4, r4, #2
 800437e:	42a5      	cmp	r5, r4
 8004380:	d105      	bne.n	800438e <__libc_init_array+0x2e>
 8004382:	bd70      	pop	{r4, r5, r6, pc}
 8004384:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004388:	4798      	blx	r3
 800438a:	3501      	adds	r5, #1
 800438c:	e7ee      	b.n	800436c <__libc_init_array+0xc>
 800438e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004392:	4798      	blx	r3
 8004394:	3501      	adds	r5, #1
 8004396:	e7f2      	b.n	800437e <__libc_init_array+0x1e>
 8004398:	08006c80 	.word	0x08006c80
 800439c:	08006c80 	.word	0x08006c80
 80043a0:	08006c80 	.word	0x08006c80
 80043a4:	08006c84 	.word	0x08006c84

080043a8 <memset>:
 80043a8:	4603      	mov	r3, r0
 80043aa:	4402      	add	r2, r0
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d100      	bne.n	80043b2 <memset+0xa>
 80043b0:	4770      	bx	lr
 80043b2:	f803 1b01 	strb.w	r1, [r3], #1
 80043b6:	e7f9      	b.n	80043ac <memset+0x4>

080043b8 <siprintf>:
 80043b8:	b40e      	push	{r1, r2, r3}
 80043ba:	f44f 7102 	mov.w	r1, #520	; 0x208
 80043be:	b500      	push	{lr}
 80043c0:	b09c      	sub	sp, #112	; 0x70
 80043c2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80043c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043ca:	9104      	str	r1, [sp, #16]
 80043cc:	9107      	str	r1, [sp, #28]
 80043ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80043d2:	ab1d      	add	r3, sp, #116	; 0x74
 80043d4:	9002      	str	r0, [sp, #8]
 80043d6:	9006      	str	r0, [sp, #24]
 80043d8:	4808      	ldr	r0, [pc, #32]	; (80043fc <siprintf+0x44>)
 80043da:	f853 2b04 	ldr.w	r2, [r3], #4
 80043de:	f8ad 1016 	strh.w	r1, [sp, #22]
 80043e2:	6800      	ldr	r0, [r0, #0]
 80043e4:	a902      	add	r1, sp, #8
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	f001 ff7e 	bl	80062e8 <_svfiprintf_r>
 80043ec:	2200      	movs	r2, #0
 80043ee:	9b02      	ldr	r3, [sp, #8]
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	b01c      	add	sp, #112	; 0x70
 80043f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80043f8:	b003      	add	sp, #12
 80043fa:	4770      	bx	lr
 80043fc:	20000004 	.word	0x20000004

08004400 <strcpy>:
 8004400:	4603      	mov	r3, r0
 8004402:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004406:	f803 2b01 	strb.w	r2, [r3], #1
 800440a:	2a00      	cmp	r2, #0
 800440c:	d1f9      	bne.n	8004402 <strcpy+0x2>
 800440e:	4770      	bx	lr

08004410 <strncmp>:
 8004410:	b510      	push	{r4, lr}
 8004412:	b16a      	cbz	r2, 8004430 <strncmp+0x20>
 8004414:	3901      	subs	r1, #1
 8004416:	1884      	adds	r4, r0, r2
 8004418:	f810 3b01 	ldrb.w	r3, [r0], #1
 800441c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004420:	4293      	cmp	r3, r2
 8004422:	d103      	bne.n	800442c <strncmp+0x1c>
 8004424:	42a0      	cmp	r0, r4
 8004426:	d001      	beq.n	800442c <strncmp+0x1c>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1f5      	bne.n	8004418 <strncmp+0x8>
 800442c:	1a98      	subs	r0, r3, r2
 800442e:	bd10      	pop	{r4, pc}
 8004430:	4610      	mov	r0, r2
 8004432:	bd10      	pop	{r4, pc}

08004434 <sulp>:
 8004434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004438:	460f      	mov	r7, r1
 800443a:	4690      	mov	r8, r2
 800443c:	f001 fd18 	bl	8005e70 <__ulp>
 8004440:	4604      	mov	r4, r0
 8004442:	460d      	mov	r5, r1
 8004444:	f1b8 0f00 	cmp.w	r8, #0
 8004448:	d011      	beq.n	800446e <sulp+0x3a>
 800444a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800444e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004452:	2b00      	cmp	r3, #0
 8004454:	dd0b      	ble.n	800446e <sulp+0x3a>
 8004456:	2400      	movs	r4, #0
 8004458:	051b      	lsls	r3, r3, #20
 800445a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800445e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004462:	4622      	mov	r2, r4
 8004464:	462b      	mov	r3, r5
 8004466:	f7fc f84b 	bl	8000500 <__aeabi_dmul>
 800446a:	4604      	mov	r4, r0
 800446c:	460d      	mov	r5, r1
 800446e:	4620      	mov	r0, r4
 8004470:	4629      	mov	r1, r5
 8004472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004478 <_strtod_l>:
 8004478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447c:	4699      	mov	r9, r3
 800447e:	2300      	movs	r3, #0
 8004480:	b09f      	sub	sp, #124	; 0x7c
 8004482:	4680      	mov	r8, r0
 8004484:	4648      	mov	r0, r9
 8004486:	460c      	mov	r4, r1
 8004488:	9215      	str	r2, [sp, #84]	; 0x54
 800448a:	931a      	str	r3, [sp, #104]	; 0x68
 800448c:	f001 fa09 	bl	80058a2 <__localeconv_l>
 8004490:	4607      	mov	r7, r0
 8004492:	6800      	ldr	r0, [r0, #0]
 8004494:	f7fb fe74 	bl	8000180 <strlen>
 8004498:	f04f 0a00 	mov.w	sl, #0
 800449c:	4605      	mov	r5, r0
 800449e:	f04f 0b00 	mov.w	fp, #0
 80044a2:	9419      	str	r4, [sp, #100]	; 0x64
 80044a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80044a6:	781a      	ldrb	r2, [r3, #0]
 80044a8:	2a0d      	cmp	r2, #13
 80044aa:	d833      	bhi.n	8004514 <_strtod_l+0x9c>
 80044ac:	2a09      	cmp	r2, #9
 80044ae:	d237      	bcs.n	8004520 <_strtod_l+0xa8>
 80044b0:	2a00      	cmp	r2, #0
 80044b2:	d03f      	beq.n	8004534 <_strtod_l+0xbc>
 80044b4:	2300      	movs	r3, #0
 80044b6:	9309      	str	r3, [sp, #36]	; 0x24
 80044b8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80044ba:	7833      	ldrb	r3, [r6, #0]
 80044bc:	2b30      	cmp	r3, #48	; 0x30
 80044be:	f040 8101 	bne.w	80046c4 <_strtod_l+0x24c>
 80044c2:	7873      	ldrb	r3, [r6, #1]
 80044c4:	2b58      	cmp	r3, #88	; 0x58
 80044c6:	d001      	beq.n	80044cc <_strtod_l+0x54>
 80044c8:	2b78      	cmp	r3, #120	; 0x78
 80044ca:	d16b      	bne.n	80045a4 <_strtod_l+0x12c>
 80044cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	ab1a      	add	r3, sp, #104	; 0x68
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	4aaa      	ldr	r2, [pc, #680]	; (8004784 <_strtod_l+0x30c>)
 80044da:	ab1b      	add	r3, sp, #108	; 0x6c
 80044dc:	a919      	add	r1, sp, #100	; 0x64
 80044de:	4640      	mov	r0, r8
 80044e0:	f000 ff08 	bl	80052f4 <__gethex>
 80044e4:	f010 0407 	ands.w	r4, r0, #7
 80044e8:	4605      	mov	r5, r0
 80044ea:	d005      	beq.n	80044f8 <_strtod_l+0x80>
 80044ec:	2c06      	cmp	r4, #6
 80044ee:	d12b      	bne.n	8004548 <_strtod_l+0xd0>
 80044f0:	2300      	movs	r3, #0
 80044f2:	3601      	adds	r6, #1
 80044f4:	9619      	str	r6, [sp, #100]	; 0x64
 80044f6:	9309      	str	r3, [sp, #36]	; 0x24
 80044f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f040 859d 	bne.w	800503a <_strtod_l+0xbc2>
 8004500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004502:	b1e3      	cbz	r3, 800453e <_strtod_l+0xc6>
 8004504:	4652      	mov	r2, sl
 8004506:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800450a:	4610      	mov	r0, r2
 800450c:	4619      	mov	r1, r3
 800450e:	b01f      	add	sp, #124	; 0x7c
 8004510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004514:	2a2b      	cmp	r2, #43	; 0x2b
 8004516:	d006      	beq.n	8004526 <_strtod_l+0xae>
 8004518:	2a2d      	cmp	r2, #45	; 0x2d
 800451a:	d013      	beq.n	8004544 <_strtod_l+0xcc>
 800451c:	2a20      	cmp	r2, #32
 800451e:	d1c9      	bne.n	80044b4 <_strtod_l+0x3c>
 8004520:	3301      	adds	r3, #1
 8004522:	9319      	str	r3, [sp, #100]	; 0x64
 8004524:	e7be      	b.n	80044a4 <_strtod_l+0x2c>
 8004526:	2200      	movs	r2, #0
 8004528:	9209      	str	r2, [sp, #36]	; 0x24
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	9219      	str	r2, [sp, #100]	; 0x64
 800452e:	785b      	ldrb	r3, [r3, #1]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1c1      	bne.n	80044b8 <_strtod_l+0x40>
 8004534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004536:	9419      	str	r4, [sp, #100]	; 0x64
 8004538:	2b00      	cmp	r3, #0
 800453a:	f040 857c 	bne.w	8005036 <_strtod_l+0xbbe>
 800453e:	4652      	mov	r2, sl
 8004540:	465b      	mov	r3, fp
 8004542:	e7e2      	b.n	800450a <_strtod_l+0x92>
 8004544:	2201      	movs	r2, #1
 8004546:	e7ef      	b.n	8004528 <_strtod_l+0xb0>
 8004548:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800454a:	b13a      	cbz	r2, 800455c <_strtod_l+0xe4>
 800454c:	2135      	movs	r1, #53	; 0x35
 800454e:	a81c      	add	r0, sp, #112	; 0x70
 8004550:	f001 fd7b 	bl	800604a <__copybits>
 8004554:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004556:	4640      	mov	r0, r8
 8004558:	f001 f9ff 	bl	800595a <_Bfree>
 800455c:	3c01      	subs	r4, #1
 800455e:	2c04      	cmp	r4, #4
 8004560:	d808      	bhi.n	8004574 <_strtod_l+0xfc>
 8004562:	e8df f004 	tbb	[pc, r4]
 8004566:	030c      	.short	0x030c
 8004568:	1a17      	.short	0x1a17
 800456a:	0c          	.byte	0x0c
 800456b:	00          	.byte	0x00
 800456c:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8004570:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8004574:	0729      	lsls	r1, r5, #28
 8004576:	d5bf      	bpl.n	80044f8 <_strtod_l+0x80>
 8004578:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800457c:	e7bc      	b.n	80044f8 <_strtod_l+0x80>
 800457e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004580:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004582:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004586:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800458a:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800458e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004592:	e7ef      	b.n	8004574 <_strtod_l+0xfc>
 8004594:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8004790 <_strtod_l+0x318>
 8004598:	e7ec      	b.n	8004574 <_strtod_l+0xfc>
 800459a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800459e:	f04f 3aff 	mov.w	sl, #4294967295
 80045a2:	e7e7      	b.n	8004574 <_strtod_l+0xfc>
 80045a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	9219      	str	r2, [sp, #100]	; 0x64
 80045aa:	785b      	ldrb	r3, [r3, #1]
 80045ac:	2b30      	cmp	r3, #48	; 0x30
 80045ae:	d0f9      	beq.n	80045a4 <_strtod_l+0x12c>
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0a1      	beq.n	80044f8 <_strtod_l+0x80>
 80045b4:	2301      	movs	r3, #1
 80045b6:	9308      	str	r3, [sp, #32]
 80045b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80045ba:	220a      	movs	r2, #10
 80045bc:	930a      	str	r3, [sp, #40]	; 0x28
 80045be:	2300      	movs	r3, #0
 80045c0:	9305      	str	r3, [sp, #20]
 80045c2:	9306      	str	r3, [sp, #24]
 80045c4:	9304      	str	r3, [sp, #16]
 80045c6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80045c8:	7806      	ldrb	r6, [r0, #0]
 80045ca:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80045ce:	b2d9      	uxtb	r1, r3
 80045d0:	2909      	cmp	r1, #9
 80045d2:	d979      	bls.n	80046c8 <_strtod_l+0x250>
 80045d4:	462a      	mov	r2, r5
 80045d6:	6839      	ldr	r1, [r7, #0]
 80045d8:	f7ff ff1a 	bl	8004410 <strncmp>
 80045dc:	2800      	cmp	r0, #0
 80045de:	f000 8085 	beq.w	80046ec <_strtod_l+0x274>
 80045e2:	2000      	movs	r0, #0
 80045e4:	4633      	mov	r3, r6
 80045e6:	4602      	mov	r2, r0
 80045e8:	4601      	mov	r1, r0
 80045ea:	9d04      	ldr	r5, [sp, #16]
 80045ec:	2b65      	cmp	r3, #101	; 0x65
 80045ee:	d002      	beq.n	80045f6 <_strtod_l+0x17e>
 80045f0:	2b45      	cmp	r3, #69	; 0x45
 80045f2:	f040 80ef 	bne.w	80047d4 <_strtod_l+0x35c>
 80045f6:	b925      	cbnz	r5, 8004602 <_strtod_l+0x18a>
 80045f8:	b910      	cbnz	r0, 8004600 <_strtod_l+0x188>
 80045fa:	9b08      	ldr	r3, [sp, #32]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d099      	beq.n	8004534 <_strtod_l+0xbc>
 8004600:	2500      	movs	r5, #0
 8004602:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8004604:	1c63      	adds	r3, r4, #1
 8004606:	9319      	str	r3, [sp, #100]	; 0x64
 8004608:	7863      	ldrb	r3, [r4, #1]
 800460a:	2b2b      	cmp	r3, #43	; 0x2b
 800460c:	f000 80cf 	beq.w	80047ae <_strtod_l+0x336>
 8004610:	2b2d      	cmp	r3, #45	; 0x2d
 8004612:	f000 80d2 	beq.w	80047ba <_strtod_l+0x342>
 8004616:	2600      	movs	r6, #0
 8004618:	9607      	str	r6, [sp, #28]
 800461a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800461e:	2e09      	cmp	r6, #9
 8004620:	f200 80d7 	bhi.w	80047d2 <_strtod_l+0x35a>
 8004624:	2b30      	cmp	r3, #48	; 0x30
 8004626:	f000 80ca 	beq.w	80047be <_strtod_l+0x346>
 800462a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 800462e:	2e08      	cmp	r6, #8
 8004630:	f200 80d0 	bhi.w	80047d4 <_strtod_l+0x35c>
 8004634:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004638:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800463a:	f04f 0c0a 	mov.w	ip, #10
 800463e:	461f      	mov	r7, r3
 8004640:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004642:	1c5e      	adds	r6, r3, #1
 8004644:	9619      	str	r6, [sp, #100]	; 0x64
 8004646:	785b      	ldrb	r3, [r3, #1]
 8004648:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 800464c:	f1b9 0f09 	cmp.w	r9, #9
 8004650:	f240 80ba 	bls.w	80047c8 <_strtod_l+0x350>
 8004654:	1bf6      	subs	r6, r6, r7
 8004656:	2e08      	cmp	r6, #8
 8004658:	f644 691f 	movw	r9, #19999	; 0x4e1f
 800465c:	dc02      	bgt.n	8004664 <_strtod_l+0x1ec>
 800465e:	45f1      	cmp	r9, lr
 8004660:	bfa8      	it	ge
 8004662:	46f1      	movge	r9, lr
 8004664:	9e07      	ldr	r6, [sp, #28]
 8004666:	b10e      	cbz	r6, 800466c <_strtod_l+0x1f4>
 8004668:	f1c9 0900 	rsb	r9, r9, #0
 800466c:	2d00      	cmp	r5, #0
 800466e:	f040 80d7 	bne.w	8004820 <_strtod_l+0x3a8>
 8004672:	2800      	cmp	r0, #0
 8004674:	f47f af40 	bne.w	80044f8 <_strtod_l+0x80>
 8004678:	9a08      	ldr	r2, [sp, #32]
 800467a:	2a00      	cmp	r2, #0
 800467c:	f47f af3c 	bne.w	80044f8 <_strtod_l+0x80>
 8004680:	2900      	cmp	r1, #0
 8004682:	f47f af57 	bne.w	8004534 <_strtod_l+0xbc>
 8004686:	2b4e      	cmp	r3, #78	; 0x4e
 8004688:	f000 80ad 	beq.w	80047e6 <_strtod_l+0x36e>
 800468c:	f300 80a5 	bgt.w	80047da <_strtod_l+0x362>
 8004690:	2b49      	cmp	r3, #73	; 0x49
 8004692:	f47f af4f 	bne.w	8004534 <_strtod_l+0xbc>
 8004696:	493c      	ldr	r1, [pc, #240]	; (8004788 <_strtod_l+0x310>)
 8004698:	a819      	add	r0, sp, #100	; 0x64
 800469a:	f001 f85c 	bl	8005756 <__match>
 800469e:	2800      	cmp	r0, #0
 80046a0:	f43f af48 	beq.w	8004534 <_strtod_l+0xbc>
 80046a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80046a6:	4939      	ldr	r1, [pc, #228]	; (800478c <_strtod_l+0x314>)
 80046a8:	3b01      	subs	r3, #1
 80046aa:	a819      	add	r0, sp, #100	; 0x64
 80046ac:	9319      	str	r3, [sp, #100]	; 0x64
 80046ae:	f001 f852 	bl	8005756 <__match>
 80046b2:	b910      	cbnz	r0, 80046ba <_strtod_l+0x242>
 80046b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80046b6:	3301      	adds	r3, #1
 80046b8:	9319      	str	r3, [sp, #100]	; 0x64
 80046ba:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8004790 <_strtod_l+0x318>
 80046be:	f04f 0a00 	mov.w	sl, #0
 80046c2:	e719      	b.n	80044f8 <_strtod_l+0x80>
 80046c4:	2300      	movs	r3, #0
 80046c6:	e776      	b.n	80045b6 <_strtod_l+0x13e>
 80046c8:	9904      	ldr	r1, [sp, #16]
 80046ca:	3001      	adds	r0, #1
 80046cc:	2908      	cmp	r1, #8
 80046ce:	bfd5      	itete	le
 80046d0:	9906      	ldrle	r1, [sp, #24]
 80046d2:	9905      	ldrgt	r1, [sp, #20]
 80046d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80046d8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80046dc:	bfd4      	ite	le
 80046de:	9306      	strle	r3, [sp, #24]
 80046e0:	9305      	strgt	r3, [sp, #20]
 80046e2:	9b04      	ldr	r3, [sp, #16]
 80046e4:	9019      	str	r0, [sp, #100]	; 0x64
 80046e6:	3301      	adds	r3, #1
 80046e8:	9304      	str	r3, [sp, #16]
 80046ea:	e76c      	b.n	80045c6 <_strtod_l+0x14e>
 80046ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80046ee:	195a      	adds	r2, r3, r5
 80046f0:	9219      	str	r2, [sp, #100]	; 0x64
 80046f2:	9a04      	ldr	r2, [sp, #16]
 80046f4:	5d5b      	ldrb	r3, [r3, r5]
 80046f6:	2a00      	cmp	r2, #0
 80046f8:	d154      	bne.n	80047a4 <_strtod_l+0x32c>
 80046fa:	4610      	mov	r0, r2
 80046fc:	2b30      	cmp	r3, #48	; 0x30
 80046fe:	d02a      	beq.n	8004756 <_strtod_l+0x2de>
 8004700:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004704:	2a08      	cmp	r2, #8
 8004706:	f200 849d 	bhi.w	8005044 <_strtod_l+0xbcc>
 800470a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800470c:	920a      	str	r2, [sp, #40]	; 0x28
 800470e:	4602      	mov	r2, r0
 8004710:	2000      	movs	r0, #0
 8004712:	4605      	mov	r5, r0
 8004714:	3b30      	subs	r3, #48	; 0x30
 8004716:	f100 0101 	add.w	r1, r0, #1
 800471a:	d011      	beq.n	8004740 <_strtod_l+0x2c8>
 800471c:	440a      	add	r2, r1
 800471e:	260a      	movs	r6, #10
 8004720:	4629      	mov	r1, r5
 8004722:	eb00 0c05 	add.w	ip, r0, r5
 8004726:	4561      	cmp	r1, ip
 8004728:	d11b      	bne.n	8004762 <_strtod_l+0x2ea>
 800472a:	4428      	add	r0, r5
 800472c:	2808      	cmp	r0, #8
 800472e:	f100 0501 	add.w	r5, r0, #1
 8004732:	dc2f      	bgt.n	8004794 <_strtod_l+0x31c>
 8004734:	210a      	movs	r1, #10
 8004736:	9806      	ldr	r0, [sp, #24]
 8004738:	fb01 3300 	mla	r3, r1, r0, r3
 800473c:	9306      	str	r3, [sp, #24]
 800473e:	2100      	movs	r1, #0
 8004740:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004742:	1c58      	adds	r0, r3, #1
 8004744:	9019      	str	r0, [sp, #100]	; 0x64
 8004746:	4608      	mov	r0, r1
 8004748:	785b      	ldrb	r3, [r3, #1]
 800474a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800474e:	2909      	cmp	r1, #9
 8004750:	d9e0      	bls.n	8004714 <_strtod_l+0x29c>
 8004752:	2101      	movs	r1, #1
 8004754:	e74a      	b.n	80045ec <_strtod_l+0x174>
 8004756:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004758:	3001      	adds	r0, #1
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	9219      	str	r2, [sp, #100]	; 0x64
 800475e:	785b      	ldrb	r3, [r3, #1]
 8004760:	e7cc      	b.n	80046fc <_strtod_l+0x284>
 8004762:	3101      	adds	r1, #1
 8004764:	f101 3eff 	add.w	lr, r1, #4294967295
 8004768:	f1be 0f08 	cmp.w	lr, #8
 800476c:	dc03      	bgt.n	8004776 <_strtod_l+0x2fe>
 800476e:	9f06      	ldr	r7, [sp, #24]
 8004770:	4377      	muls	r7, r6
 8004772:	9706      	str	r7, [sp, #24]
 8004774:	e7d7      	b.n	8004726 <_strtod_l+0x2ae>
 8004776:	2910      	cmp	r1, #16
 8004778:	bfde      	ittt	le
 800477a:	9f05      	ldrle	r7, [sp, #20]
 800477c:	4377      	mulle	r7, r6
 800477e:	9705      	strle	r7, [sp, #20]
 8004780:	e7d1      	b.n	8004726 <_strtod_l+0x2ae>
 8004782:	bf00      	nop
 8004784:	080069ec 	.word	0x080069ec
 8004788:	080069df 	.word	0x080069df
 800478c:	080069e2 	.word	0x080069e2
 8004790:	7ff00000 	.word	0x7ff00000
 8004794:	2d10      	cmp	r5, #16
 8004796:	bfdf      	itttt	le
 8004798:	210a      	movle	r1, #10
 800479a:	9805      	ldrle	r0, [sp, #20]
 800479c:	fb01 3300 	mlale	r3, r1, r0, r3
 80047a0:	9305      	strle	r3, [sp, #20]
 80047a2:	e7cc      	b.n	800473e <_strtod_l+0x2c6>
 80047a4:	4602      	mov	r2, r0
 80047a6:	9d04      	ldr	r5, [sp, #16]
 80047a8:	e7cf      	b.n	800474a <_strtod_l+0x2d2>
 80047aa:	2101      	movs	r1, #1
 80047ac:	e724      	b.n	80045f8 <_strtod_l+0x180>
 80047ae:	2300      	movs	r3, #0
 80047b0:	9307      	str	r3, [sp, #28]
 80047b2:	1ca3      	adds	r3, r4, #2
 80047b4:	9319      	str	r3, [sp, #100]	; 0x64
 80047b6:	78a3      	ldrb	r3, [r4, #2]
 80047b8:	e72f      	b.n	800461a <_strtod_l+0x1a2>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e7f8      	b.n	80047b0 <_strtod_l+0x338>
 80047be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047c0:	1c5e      	adds	r6, r3, #1
 80047c2:	9619      	str	r6, [sp, #100]	; 0x64
 80047c4:	785b      	ldrb	r3, [r3, #1]
 80047c6:	e72d      	b.n	8004624 <_strtod_l+0x1ac>
 80047c8:	fb0c 3e0e 	mla	lr, ip, lr, r3
 80047cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80047d0:	e736      	b.n	8004640 <_strtod_l+0x1c8>
 80047d2:	9419      	str	r4, [sp, #100]	; 0x64
 80047d4:	f04f 0900 	mov.w	r9, #0
 80047d8:	e748      	b.n	800466c <_strtod_l+0x1f4>
 80047da:	2b69      	cmp	r3, #105	; 0x69
 80047dc:	f43f af5b 	beq.w	8004696 <_strtod_l+0x21e>
 80047e0:	2b6e      	cmp	r3, #110	; 0x6e
 80047e2:	f47f aea7 	bne.w	8004534 <_strtod_l+0xbc>
 80047e6:	498c      	ldr	r1, [pc, #560]	; (8004a18 <_strtod_l+0x5a0>)
 80047e8:	a819      	add	r0, sp, #100	; 0x64
 80047ea:	f000 ffb4 	bl	8005756 <__match>
 80047ee:	2800      	cmp	r0, #0
 80047f0:	f43f aea0 	beq.w	8004534 <_strtod_l+0xbc>
 80047f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b28      	cmp	r3, #40	; 0x28
 80047fa:	d10e      	bne.n	800481a <_strtod_l+0x3a2>
 80047fc:	aa1c      	add	r2, sp, #112	; 0x70
 80047fe:	4987      	ldr	r1, [pc, #540]	; (8004a1c <_strtod_l+0x5a4>)
 8004800:	a819      	add	r0, sp, #100	; 0x64
 8004802:	f000 ffbb 	bl	800577c <__hexnan>
 8004806:	2805      	cmp	r0, #5
 8004808:	d107      	bne.n	800481a <_strtod_l+0x3a2>
 800480a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800480c:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8004810:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004814:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004818:	e66e      	b.n	80044f8 <_strtod_l+0x80>
 800481a:	f8df b210 	ldr.w	fp, [pc, #528]	; 8004a2c <_strtod_l+0x5b4>
 800481e:	e74e      	b.n	80046be <_strtod_l+0x246>
 8004820:	9b04      	ldr	r3, [sp, #16]
 8004822:	462c      	mov	r4, r5
 8004824:	2b00      	cmp	r3, #0
 8004826:	bf08      	it	eq
 8004828:	462b      	moveq	r3, r5
 800482a:	2d10      	cmp	r5, #16
 800482c:	bfa8      	it	ge
 800482e:	2410      	movge	r4, #16
 8004830:	9806      	ldr	r0, [sp, #24]
 8004832:	eba9 0902 	sub.w	r9, r9, r2
 8004836:	9304      	str	r3, [sp, #16]
 8004838:	f7fb fdec 	bl	8000414 <__aeabi_ui2d>
 800483c:	2c09      	cmp	r4, #9
 800483e:	4682      	mov	sl, r0
 8004840:	468b      	mov	fp, r1
 8004842:	dd13      	ble.n	800486c <_strtod_l+0x3f4>
 8004844:	4b76      	ldr	r3, [pc, #472]	; (8004a20 <_strtod_l+0x5a8>)
 8004846:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800484a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800484e:	f7fb fe57 	bl	8000500 <__aeabi_dmul>
 8004852:	4606      	mov	r6, r0
 8004854:	9805      	ldr	r0, [sp, #20]
 8004856:	460f      	mov	r7, r1
 8004858:	f7fb fddc 	bl	8000414 <__aeabi_ui2d>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4630      	mov	r0, r6
 8004862:	4639      	mov	r1, r7
 8004864:	f7fb fc9a 	bl	800019c <__adddf3>
 8004868:	4682      	mov	sl, r0
 800486a:	468b      	mov	fp, r1
 800486c:	2d0f      	cmp	r5, #15
 800486e:	dc36      	bgt.n	80048de <_strtod_l+0x466>
 8004870:	f1b9 0f00 	cmp.w	r9, #0
 8004874:	f43f ae40 	beq.w	80044f8 <_strtod_l+0x80>
 8004878:	dd24      	ble.n	80048c4 <_strtod_l+0x44c>
 800487a:	f1b9 0f16 	cmp.w	r9, #22
 800487e:	dc0b      	bgt.n	8004898 <_strtod_l+0x420>
 8004880:	4652      	mov	r2, sl
 8004882:	465b      	mov	r3, fp
 8004884:	4d66      	ldr	r5, [pc, #408]	; (8004a20 <_strtod_l+0x5a8>)
 8004886:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 800488a:	e9d9 0100 	ldrd	r0, r1, [r9]
 800488e:	f7fb fe37 	bl	8000500 <__aeabi_dmul>
 8004892:	4682      	mov	sl, r0
 8004894:	468b      	mov	fp, r1
 8004896:	e62f      	b.n	80044f8 <_strtod_l+0x80>
 8004898:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800489c:	4599      	cmp	r9, r3
 800489e:	dc1e      	bgt.n	80048de <_strtod_l+0x466>
 80048a0:	4c5f      	ldr	r4, [pc, #380]	; (8004a20 <_strtod_l+0x5a8>)
 80048a2:	f1c5 050f 	rsb	r5, r5, #15
 80048a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80048aa:	eba9 0505 	sub.w	r5, r9, r5
 80048ae:	4652      	mov	r2, sl
 80048b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048b4:	465b      	mov	r3, fp
 80048b6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80048ba:	f7fb fe21 	bl	8000500 <__aeabi_dmul>
 80048be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80048c2:	e7e4      	b.n	800488e <_strtod_l+0x416>
 80048c4:	f119 0f16 	cmn.w	r9, #22
 80048c8:	db09      	blt.n	80048de <_strtod_l+0x466>
 80048ca:	4d55      	ldr	r5, [pc, #340]	; (8004a20 <_strtod_l+0x5a8>)
 80048cc:	4650      	mov	r0, sl
 80048ce:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 80048d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80048d6:	4659      	mov	r1, fp
 80048d8:	f7fb ff3c 	bl	8000754 <__aeabi_ddiv>
 80048dc:	e7d9      	b.n	8004892 <_strtod_l+0x41a>
 80048de:	1b2c      	subs	r4, r5, r4
 80048e0:	444c      	add	r4, r9
 80048e2:	2c00      	cmp	r4, #0
 80048e4:	dd73      	ble.n	80049ce <_strtod_l+0x556>
 80048e6:	f014 030f 	ands.w	r3, r4, #15
 80048ea:	d00a      	beq.n	8004902 <_strtod_l+0x48a>
 80048ec:	494c      	ldr	r1, [pc, #304]	; (8004a20 <_strtod_l+0x5a8>)
 80048ee:	4652      	mov	r2, sl
 80048f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80048f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048f8:	465b      	mov	r3, fp
 80048fa:	f7fb fe01 	bl	8000500 <__aeabi_dmul>
 80048fe:	4682      	mov	sl, r0
 8004900:	468b      	mov	fp, r1
 8004902:	f034 040f 	bics.w	r4, r4, #15
 8004906:	d054      	beq.n	80049b2 <_strtod_l+0x53a>
 8004908:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 800490c:	dd27      	ble.n	800495e <_strtod_l+0x4e6>
 800490e:	f04f 0900 	mov.w	r9, #0
 8004912:	f8cd 9010 	str.w	r9, [sp, #16]
 8004916:	f8cd 901c 	str.w	r9, [sp, #28]
 800491a:	f8cd 9018 	str.w	r9, [sp, #24]
 800491e:	2322      	movs	r3, #34	; 0x22
 8004920:	f04f 0a00 	mov.w	sl, #0
 8004924:	f8df b108 	ldr.w	fp, [pc, #264]	; 8004a30 <_strtod_l+0x5b8>
 8004928:	f8c8 3000 	str.w	r3, [r8]
 800492c:	9b07      	ldr	r3, [sp, #28]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f43f ade2 	beq.w	80044f8 <_strtod_l+0x80>
 8004934:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004936:	4640      	mov	r0, r8
 8004938:	f001 f80f 	bl	800595a <_Bfree>
 800493c:	9906      	ldr	r1, [sp, #24]
 800493e:	4640      	mov	r0, r8
 8004940:	f001 f80b 	bl	800595a <_Bfree>
 8004944:	9904      	ldr	r1, [sp, #16]
 8004946:	4640      	mov	r0, r8
 8004948:	f001 f807 	bl	800595a <_Bfree>
 800494c:	9907      	ldr	r1, [sp, #28]
 800494e:	4640      	mov	r0, r8
 8004950:	f001 f803 	bl	800595a <_Bfree>
 8004954:	4649      	mov	r1, r9
 8004956:	4640      	mov	r0, r8
 8004958:	f000 ffff 	bl	800595a <_Bfree>
 800495c:	e5cc      	b.n	80044f8 <_strtod_l+0x80>
 800495e:	2300      	movs	r3, #0
 8004960:	4650      	mov	r0, sl
 8004962:	4659      	mov	r1, fp
 8004964:	461f      	mov	r7, r3
 8004966:	4e2f      	ldr	r6, [pc, #188]	; (8004a24 <_strtod_l+0x5ac>)
 8004968:	1124      	asrs	r4, r4, #4
 800496a:	2c01      	cmp	r4, #1
 800496c:	dc24      	bgt.n	80049b8 <_strtod_l+0x540>
 800496e:	b10b      	cbz	r3, 8004974 <_strtod_l+0x4fc>
 8004970:	4682      	mov	sl, r0
 8004972:	468b      	mov	fp, r1
 8004974:	4b2b      	ldr	r3, [pc, #172]	; (8004a24 <_strtod_l+0x5ac>)
 8004976:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800497a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800497e:	4652      	mov	r2, sl
 8004980:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004984:	465b      	mov	r3, fp
 8004986:	f7fb fdbb 	bl	8000500 <__aeabi_dmul>
 800498a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800498e:	468b      	mov	fp, r1
 8004990:	460a      	mov	r2, r1
 8004992:	0d1b      	lsrs	r3, r3, #20
 8004994:	4924      	ldr	r1, [pc, #144]	; (8004a28 <_strtod_l+0x5b0>)
 8004996:	051b      	lsls	r3, r3, #20
 8004998:	428b      	cmp	r3, r1
 800499a:	4682      	mov	sl, r0
 800499c:	d8b7      	bhi.n	800490e <_strtod_l+0x496>
 800499e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80049a2:	428b      	cmp	r3, r1
 80049a4:	bf86      	itte	hi
 80049a6:	f04f 3aff 	movhi.w	sl, #4294967295
 80049aa:	f8df b088 	ldrhi.w	fp, [pc, #136]	; 8004a34 <_strtod_l+0x5bc>
 80049ae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80049b2:	2300      	movs	r3, #0
 80049b4:	9305      	str	r3, [sp, #20]
 80049b6:	e070      	b.n	8004a9a <_strtod_l+0x622>
 80049b8:	07e2      	lsls	r2, r4, #31
 80049ba:	d504      	bpl.n	80049c6 <_strtod_l+0x54e>
 80049bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80049c0:	f7fb fd9e 	bl	8000500 <__aeabi_dmul>
 80049c4:	2301      	movs	r3, #1
 80049c6:	3701      	adds	r7, #1
 80049c8:	1064      	asrs	r4, r4, #1
 80049ca:	3608      	adds	r6, #8
 80049cc:	e7cd      	b.n	800496a <_strtod_l+0x4f2>
 80049ce:	d0f0      	beq.n	80049b2 <_strtod_l+0x53a>
 80049d0:	4264      	negs	r4, r4
 80049d2:	f014 020f 	ands.w	r2, r4, #15
 80049d6:	d00a      	beq.n	80049ee <_strtod_l+0x576>
 80049d8:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <_strtod_l+0x5a8>)
 80049da:	4650      	mov	r0, sl
 80049dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049e0:	4659      	mov	r1, fp
 80049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e6:	f7fb feb5 	bl	8000754 <__aeabi_ddiv>
 80049ea:	4682      	mov	sl, r0
 80049ec:	468b      	mov	fp, r1
 80049ee:	1124      	asrs	r4, r4, #4
 80049f0:	d0df      	beq.n	80049b2 <_strtod_l+0x53a>
 80049f2:	2c1f      	cmp	r4, #31
 80049f4:	dd20      	ble.n	8004a38 <_strtod_l+0x5c0>
 80049f6:	f04f 0900 	mov.w	r9, #0
 80049fa:	f8cd 9010 	str.w	r9, [sp, #16]
 80049fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a02:	f8cd 9018 	str.w	r9, [sp, #24]
 8004a06:	2322      	movs	r3, #34	; 0x22
 8004a08:	f04f 0a00 	mov.w	sl, #0
 8004a0c:	f04f 0b00 	mov.w	fp, #0
 8004a10:	f8c8 3000 	str.w	r3, [r8]
 8004a14:	e78a      	b.n	800492c <_strtod_l+0x4b4>
 8004a16:	bf00      	nop
 8004a18:	080069e8 	.word	0x080069e8
 8004a1c:	08006a00 	.word	0x08006a00
 8004a20:	08006a78 	.word	0x08006a78
 8004a24:	08006a50 	.word	0x08006a50
 8004a28:	7ca00000 	.word	0x7ca00000
 8004a2c:	fff80000 	.word	0xfff80000
 8004a30:	7ff00000 	.word	0x7ff00000
 8004a34:	7fefffff 	.word	0x7fefffff
 8004a38:	f014 0310 	ands.w	r3, r4, #16
 8004a3c:	bf18      	it	ne
 8004a3e:	236a      	movne	r3, #106	; 0x6a
 8004a40:	4650      	mov	r0, sl
 8004a42:	9305      	str	r3, [sp, #20]
 8004a44:	4659      	mov	r1, fp
 8004a46:	2300      	movs	r3, #0
 8004a48:	4e9f      	ldr	r6, [pc, #636]	; (8004cc8 <_strtod_l+0x850>)
 8004a4a:	2c00      	cmp	r4, #0
 8004a4c:	f300 8109 	bgt.w	8004c62 <_strtod_l+0x7ea>
 8004a50:	b10b      	cbz	r3, 8004a56 <_strtod_l+0x5de>
 8004a52:	4682      	mov	sl, r0
 8004a54:	468b      	mov	fp, r1
 8004a56:	9b05      	ldr	r3, [sp, #20]
 8004a58:	b1bb      	cbz	r3, 8004a8a <_strtod_l+0x612>
 8004a5a:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004a5e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	4659      	mov	r1, fp
 8004a66:	dd10      	ble.n	8004a8a <_strtod_l+0x612>
 8004a68:	2b1f      	cmp	r3, #31
 8004a6a:	f340 8104 	ble.w	8004c76 <_strtod_l+0x7fe>
 8004a6e:	2b34      	cmp	r3, #52	; 0x34
 8004a70:	bfd8      	it	le
 8004a72:	f04f 32ff 	movle.w	r2, #4294967295
 8004a76:	f04f 0a00 	mov.w	sl, #0
 8004a7a:	bfcf      	iteee	gt
 8004a7c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004a80:	3b20      	suble	r3, #32
 8004a82:	fa02 f303 	lslle.w	r3, r2, r3
 8004a86:	ea03 0b01 	andle.w	fp, r3, r1
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	4650      	mov	r0, sl
 8004a90:	4659      	mov	r1, fp
 8004a92:	f7fb ff9d 	bl	80009d0 <__aeabi_dcmpeq>
 8004a96:	2800      	cmp	r0, #0
 8004a98:	d1ad      	bne.n	80049f6 <_strtod_l+0x57e>
 8004a9a:	9b06      	ldr	r3, [sp, #24]
 8004a9c:	9a04      	ldr	r2, [sp, #16]
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004aa2:	462b      	mov	r3, r5
 8004aa4:	4640      	mov	r0, r8
 8004aa6:	f000 ffaa 	bl	80059fe <__s2b>
 8004aaa:	9007      	str	r0, [sp, #28]
 8004aac:	2800      	cmp	r0, #0
 8004aae:	f43f af2e 	beq.w	800490e <_strtod_l+0x496>
 8004ab2:	f1b9 0f00 	cmp.w	r9, #0
 8004ab6:	f1c9 0300 	rsb	r3, r9, #0
 8004aba:	bfa8      	it	ge
 8004abc:	2300      	movge	r3, #0
 8004abe:	930e      	str	r3, [sp, #56]	; 0x38
 8004ac0:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 8004ac4:	f04f 0900 	mov.w	r9, #0
 8004ac8:	930f      	str	r3, [sp, #60]	; 0x3c
 8004aca:	f8cd 9010 	str.w	r9, [sp, #16]
 8004ace:	9b07      	ldr	r3, [sp, #28]
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	6859      	ldr	r1, [r3, #4]
 8004ad4:	f000 ff0d 	bl	80058f2 <_Balloc>
 8004ad8:	9006      	str	r0, [sp, #24]
 8004ada:	2800      	cmp	r0, #0
 8004adc:	f43f af1f 	beq.w	800491e <_strtod_l+0x4a6>
 8004ae0:	9b07      	ldr	r3, [sp, #28]
 8004ae2:	300c      	adds	r0, #12
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	f103 010c 	add.w	r1, r3, #12
 8004aea:	3202      	adds	r2, #2
 8004aec:	0092      	lsls	r2, r2, #2
 8004aee:	f000 fef5 	bl	80058dc <memcpy>
 8004af2:	ab1c      	add	r3, sp, #112	; 0x70
 8004af4:	9301      	str	r3, [sp, #4]
 8004af6:	ab1b      	add	r3, sp, #108	; 0x6c
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	4652      	mov	r2, sl
 8004afc:	465b      	mov	r3, fp
 8004afe:	4640      	mov	r0, r8
 8004b00:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004b04:	f001 fa2a 	bl	8005f5c <__d2b>
 8004b08:	901a      	str	r0, [sp, #104]	; 0x68
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	f43f af07 	beq.w	800491e <_strtod_l+0x4a6>
 8004b10:	2101      	movs	r1, #1
 8004b12:	4640      	mov	r0, r8
 8004b14:	f000 ffff 	bl	8005b16 <__i2b>
 8004b18:	9004      	str	r0, [sp, #16]
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	f43f aefe 	beq.w	800491e <_strtod_l+0x4a6>
 8004b22:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004b24:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004b26:	2d00      	cmp	r5, #0
 8004b28:	bfab      	itete	ge
 8004b2a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004b2c:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 8004b2e:	195e      	addge	r6, r3, r5
 8004b30:	1b5c      	sublt	r4, r3, r5
 8004b32:	9b05      	ldr	r3, [sp, #20]
 8004b34:	bfa8      	it	ge
 8004b36:	9c0f      	ldrge	r4, [sp, #60]	; 0x3c
 8004b38:	eba5 0503 	sub.w	r5, r5, r3
 8004b3c:	4415      	add	r5, r2
 8004b3e:	4b63      	ldr	r3, [pc, #396]	; (8004ccc <_strtod_l+0x854>)
 8004b40:	f105 35ff 	add.w	r5, r5, #4294967295
 8004b44:	bfb8      	it	lt
 8004b46:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004b48:	429d      	cmp	r5, r3
 8004b4a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004b4e:	f280 80a4 	bge.w	8004c9a <_strtod_l+0x822>
 8004b52:	1b5b      	subs	r3, r3, r5
 8004b54:	2b1f      	cmp	r3, #31
 8004b56:	eba2 0203 	sub.w	r2, r2, r3
 8004b5a:	f04f 0701 	mov.w	r7, #1
 8004b5e:	f300 8091 	bgt.w	8004c84 <_strtod_l+0x80c>
 8004b62:	2500      	movs	r5, #0
 8004b64:	fa07 f303 	lsl.w	r3, r7, r3
 8004b68:	9314      	str	r3, [sp, #80]	; 0x50
 8004b6a:	18b7      	adds	r7, r6, r2
 8004b6c:	9b05      	ldr	r3, [sp, #20]
 8004b6e:	42be      	cmp	r6, r7
 8004b70:	4414      	add	r4, r2
 8004b72:	441c      	add	r4, r3
 8004b74:	4633      	mov	r3, r6
 8004b76:	bfa8      	it	ge
 8004b78:	463b      	movge	r3, r7
 8004b7a:	42a3      	cmp	r3, r4
 8004b7c:	bfa8      	it	ge
 8004b7e:	4623      	movge	r3, r4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bfc2      	ittt	gt
 8004b84:	1aff      	subgt	r7, r7, r3
 8004b86:	1ae4      	subgt	r4, r4, r3
 8004b88:	1af6      	subgt	r6, r6, r3
 8004b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b8c:	b1bb      	cbz	r3, 8004bbe <_strtod_l+0x746>
 8004b8e:	461a      	mov	r2, r3
 8004b90:	9904      	ldr	r1, [sp, #16]
 8004b92:	4640      	mov	r0, r8
 8004b94:	f001 f854 	bl	8005c40 <__pow5mult>
 8004b98:	9004      	str	r0, [sp, #16]
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	f43f aebf 	beq.w	800491e <_strtod_l+0x4a6>
 8004ba0:	4601      	mov	r1, r0
 8004ba2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004ba4:	4640      	mov	r0, r8
 8004ba6:	f000 ffbf 	bl	8005b28 <__multiply>
 8004baa:	9008      	str	r0, [sp, #32]
 8004bac:	2800      	cmp	r0, #0
 8004bae:	f43f aeb6 	beq.w	800491e <_strtod_l+0x4a6>
 8004bb2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004bb4:	4640      	mov	r0, r8
 8004bb6:	f000 fed0 	bl	800595a <_Bfree>
 8004bba:	9b08      	ldr	r3, [sp, #32]
 8004bbc:	931a      	str	r3, [sp, #104]	; 0x68
 8004bbe:	2f00      	cmp	r7, #0
 8004bc0:	dc6f      	bgt.n	8004ca2 <_strtod_l+0x82a>
 8004bc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d175      	bne.n	8004cb4 <_strtod_l+0x83c>
 8004bc8:	2c00      	cmp	r4, #0
 8004bca:	dd08      	ble.n	8004bde <_strtod_l+0x766>
 8004bcc:	4622      	mov	r2, r4
 8004bce:	9906      	ldr	r1, [sp, #24]
 8004bd0:	4640      	mov	r0, r8
 8004bd2:	f001 f883 	bl	8005cdc <__lshift>
 8004bd6:	9006      	str	r0, [sp, #24]
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	f43f aea0 	beq.w	800491e <_strtod_l+0x4a6>
 8004bde:	2e00      	cmp	r6, #0
 8004be0:	dd08      	ble.n	8004bf4 <_strtod_l+0x77c>
 8004be2:	4632      	mov	r2, r6
 8004be4:	9904      	ldr	r1, [sp, #16]
 8004be6:	4640      	mov	r0, r8
 8004be8:	f001 f878 	bl	8005cdc <__lshift>
 8004bec:	9004      	str	r0, [sp, #16]
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	f43f ae95 	beq.w	800491e <_strtod_l+0x4a6>
 8004bf4:	9a06      	ldr	r2, [sp, #24]
 8004bf6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004bf8:	4640      	mov	r0, r8
 8004bfa:	f001 f8da 	bl	8005db2 <__mdiff>
 8004bfe:	4681      	mov	r9, r0
 8004c00:	2800      	cmp	r0, #0
 8004c02:	f43f ae8c 	beq.w	800491e <_strtod_l+0x4a6>
 8004c06:	2400      	movs	r4, #0
 8004c08:	68c3      	ldr	r3, [r0, #12]
 8004c0a:	9904      	ldr	r1, [sp, #16]
 8004c0c:	60c4      	str	r4, [r0, #12]
 8004c0e:	9308      	str	r3, [sp, #32]
 8004c10:	f001 f8b5 	bl	8005d7e <__mcmp>
 8004c14:	42a0      	cmp	r0, r4
 8004c16:	da5b      	bge.n	8004cd0 <_strtod_l+0x858>
 8004c18:	9b08      	ldr	r3, [sp, #32]
 8004c1a:	b9f3      	cbnz	r3, 8004c5a <_strtod_l+0x7e2>
 8004c1c:	f1ba 0f00 	cmp.w	sl, #0
 8004c20:	d11b      	bne.n	8004c5a <_strtod_l+0x7e2>
 8004c22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004c26:	b9c3      	cbnz	r3, 8004c5a <_strtod_l+0x7e2>
 8004c28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004c2c:	0d1b      	lsrs	r3, r3, #20
 8004c2e:	051b      	lsls	r3, r3, #20
 8004c30:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004c34:	d911      	bls.n	8004c5a <_strtod_l+0x7e2>
 8004c36:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8004c3a:	b91b      	cbnz	r3, 8004c44 <_strtod_l+0x7cc>
 8004c3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	dd0a      	ble.n	8004c5a <_strtod_l+0x7e2>
 8004c44:	4649      	mov	r1, r9
 8004c46:	2201      	movs	r2, #1
 8004c48:	4640      	mov	r0, r8
 8004c4a:	f001 f847 	bl	8005cdc <__lshift>
 8004c4e:	9904      	ldr	r1, [sp, #16]
 8004c50:	4681      	mov	r9, r0
 8004c52:	f001 f894 	bl	8005d7e <__mcmp>
 8004c56:	2800      	cmp	r0, #0
 8004c58:	dc6b      	bgt.n	8004d32 <_strtod_l+0x8ba>
 8004c5a:	9b05      	ldr	r3, [sp, #20]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d175      	bne.n	8004d4c <_strtod_l+0x8d4>
 8004c60:	e668      	b.n	8004934 <_strtod_l+0x4bc>
 8004c62:	07e2      	lsls	r2, r4, #31
 8004c64:	d504      	bpl.n	8004c70 <_strtod_l+0x7f8>
 8004c66:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004c6a:	f7fb fc49 	bl	8000500 <__aeabi_dmul>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	1064      	asrs	r4, r4, #1
 8004c72:	3608      	adds	r6, #8
 8004c74:	e6e9      	b.n	8004a4a <_strtod_l+0x5d2>
 8004c76:	f04f 32ff 	mov.w	r2, #4294967295
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	ea03 0a0a 	and.w	sl, r3, sl
 8004c82:	e702      	b.n	8004a8a <_strtod_l+0x612>
 8004c84:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004c88:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004c8c:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004c90:	35e2      	adds	r5, #226	; 0xe2
 8004c92:	fa07 f505 	lsl.w	r5, r7, r5
 8004c96:	9714      	str	r7, [sp, #80]	; 0x50
 8004c98:	e767      	b.n	8004b6a <_strtod_l+0x6f2>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	2500      	movs	r5, #0
 8004c9e:	9314      	str	r3, [sp, #80]	; 0x50
 8004ca0:	e763      	b.n	8004b6a <_strtod_l+0x6f2>
 8004ca2:	463a      	mov	r2, r7
 8004ca4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004ca6:	4640      	mov	r0, r8
 8004ca8:	f001 f818 	bl	8005cdc <__lshift>
 8004cac:	901a      	str	r0, [sp, #104]	; 0x68
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d187      	bne.n	8004bc2 <_strtod_l+0x74a>
 8004cb2:	e634      	b.n	800491e <_strtod_l+0x4a6>
 8004cb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cb6:	9906      	ldr	r1, [sp, #24]
 8004cb8:	4640      	mov	r0, r8
 8004cba:	f000 ffc1 	bl	8005c40 <__pow5mult>
 8004cbe:	9006      	str	r0, [sp, #24]
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	d181      	bne.n	8004bc8 <_strtod_l+0x750>
 8004cc4:	e62b      	b.n	800491e <_strtod_l+0x4a6>
 8004cc6:	bf00      	nop
 8004cc8:	08006a18 	.word	0x08006a18
 8004ccc:	fffffc02 	.word	0xfffffc02
 8004cd0:	f040 8086 	bne.w	8004de0 <_strtod_l+0x968>
 8004cd4:	9a08      	ldr	r2, [sp, #32]
 8004cd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004cda:	b332      	cbz	r2, 8004d2a <_strtod_l+0x8b2>
 8004cdc:	4aac      	ldr	r2, [pc, #688]	; (8004f90 <_strtod_l+0xb18>)
 8004cde:	4659      	mov	r1, fp
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d152      	bne.n	8004d8a <_strtod_l+0x912>
 8004ce4:	9b05      	ldr	r3, [sp, #20]
 8004ce6:	4650      	mov	r0, sl
 8004ce8:	b1d3      	cbz	r3, 8004d20 <_strtod_l+0x8a8>
 8004cea:	4aaa      	ldr	r2, [pc, #680]	; (8004f94 <_strtod_l+0xb1c>)
 8004cec:	f04f 34ff 	mov.w	r4, #4294967295
 8004cf0:	400a      	ands	r2, r1
 8004cf2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004cf6:	d816      	bhi.n	8004d26 <_strtod_l+0x8ae>
 8004cf8:	0d12      	lsrs	r2, r2, #20
 8004cfa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004cfe:	fa04 f303 	lsl.w	r3, r4, r3
 8004d02:	4283      	cmp	r3, r0
 8004d04:	d141      	bne.n	8004d8a <_strtod_l+0x912>
 8004d06:	4aa4      	ldr	r2, [pc, #656]	; (8004f98 <_strtod_l+0xb20>)
 8004d08:	4291      	cmp	r1, r2
 8004d0a:	d102      	bne.n	8004d12 <_strtod_l+0x89a>
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	f43f ae06 	beq.w	800491e <_strtod_l+0x4a6>
 8004d12:	4ba0      	ldr	r3, [pc, #640]	; (8004f94 <_strtod_l+0xb1c>)
 8004d14:	f04f 0a00 	mov.w	sl, #0
 8004d18:	400b      	ands	r3, r1
 8004d1a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004d1e:	e79c      	b.n	8004c5a <_strtod_l+0x7e2>
 8004d20:	f04f 33ff 	mov.w	r3, #4294967295
 8004d24:	e7ed      	b.n	8004d02 <_strtod_l+0x88a>
 8004d26:	4623      	mov	r3, r4
 8004d28:	e7eb      	b.n	8004d02 <_strtod_l+0x88a>
 8004d2a:	bb73      	cbnz	r3, 8004d8a <_strtod_l+0x912>
 8004d2c:	f1ba 0f00 	cmp.w	sl, #0
 8004d30:	d12b      	bne.n	8004d8a <_strtod_l+0x912>
 8004d32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004d36:	9a05      	ldr	r2, [sp, #20]
 8004d38:	0d1b      	lsrs	r3, r3, #20
 8004d3a:	051b      	lsls	r3, r3, #20
 8004d3c:	b1e2      	cbz	r2, 8004d78 <_strtod_l+0x900>
 8004d3e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004d42:	dc19      	bgt.n	8004d78 <_strtod_l+0x900>
 8004d44:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8004d48:	f77f ae5d 	ble.w	8004a06 <_strtod_l+0x58e>
 8004d4c:	4b93      	ldr	r3, [pc, #588]	; (8004f9c <_strtod_l+0xb24>)
 8004d4e:	4650      	mov	r0, sl
 8004d50:	930d      	str	r3, [sp, #52]	; 0x34
 8004d52:	2300      	movs	r3, #0
 8004d54:	930c      	str	r3, [sp, #48]	; 0x30
 8004d56:	4659      	mov	r1, fp
 8004d58:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d5c:	f7fb fbd0 	bl	8000500 <__aeabi_dmul>
 8004d60:	4682      	mov	sl, r0
 8004d62:	468b      	mov	fp, r1
 8004d64:	2900      	cmp	r1, #0
 8004d66:	f47f ade5 	bne.w	8004934 <_strtod_l+0x4bc>
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	f47f ade2 	bne.w	8004934 <_strtod_l+0x4bc>
 8004d70:	2322      	movs	r3, #34	; 0x22
 8004d72:	f8c8 3000 	str.w	r3, [r8]
 8004d76:	e5dd      	b.n	8004934 <_strtod_l+0x4bc>
 8004d78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004d7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004d80:	f04f 3aff 	mov.w	sl, #4294967295
 8004d84:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004d88:	e767      	b.n	8004c5a <_strtod_l+0x7e2>
 8004d8a:	b19d      	cbz	r5, 8004db4 <_strtod_l+0x93c>
 8004d8c:	ea15 0f0b 	tst.w	r5, fp
 8004d90:	f43f af63 	beq.w	8004c5a <_strtod_l+0x7e2>
 8004d94:	9b08      	ldr	r3, [sp, #32]
 8004d96:	9a05      	ldr	r2, [sp, #20]
 8004d98:	4650      	mov	r0, sl
 8004d9a:	4659      	mov	r1, fp
 8004d9c:	b173      	cbz	r3, 8004dbc <_strtod_l+0x944>
 8004d9e:	f7ff fb49 	bl	8004434 <sulp>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004daa:	f7fb f9f7 	bl	800019c <__adddf3>
 8004dae:	4682      	mov	sl, r0
 8004db0:	468b      	mov	fp, r1
 8004db2:	e752      	b.n	8004c5a <_strtod_l+0x7e2>
 8004db4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004db6:	ea13 0f0a 	tst.w	r3, sl
 8004dba:	e7e9      	b.n	8004d90 <_strtod_l+0x918>
 8004dbc:	f7ff fb3a 	bl	8004434 <sulp>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004dc8:	f7fb f9e6 	bl	8000198 <__aeabi_dsub>
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2300      	movs	r3, #0
 8004dd0:	4682      	mov	sl, r0
 8004dd2:	468b      	mov	fp, r1
 8004dd4:	f7fb fdfc 	bl	80009d0 <__aeabi_dcmpeq>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	f47f ae14 	bne.w	8004a06 <_strtod_l+0x58e>
 8004dde:	e73c      	b.n	8004c5a <_strtod_l+0x7e2>
 8004de0:	9904      	ldr	r1, [sp, #16]
 8004de2:	4648      	mov	r0, r9
 8004de4:	f001 f909 	bl	8005ffa <__ratio>
 8004de8:	2200      	movs	r2, #0
 8004dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dee:	4606      	mov	r6, r0
 8004df0:	460f      	mov	r7, r1
 8004df2:	f7fb fe01 	bl	80009f8 <__aeabi_dcmple>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	d070      	beq.n	8004edc <_strtod_l+0xa64>
 8004dfa:	9b08      	ldr	r3, [sp, #32]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d043      	beq.n	8004e88 <_strtod_l+0xa10>
 8004e00:	2600      	movs	r6, #0
 8004e02:	4f67      	ldr	r7, [pc, #412]	; (8004fa0 <_strtod_l+0xb28>)
 8004e04:	4d66      	ldr	r5, [pc, #408]	; (8004fa0 <_strtod_l+0xb28>)
 8004e06:	4b63      	ldr	r3, [pc, #396]	; (8004f94 <_strtod_l+0xb1c>)
 8004e08:	ea0b 0303 	and.w	r3, fp, r3
 8004e0c:	9314      	str	r3, [sp, #80]	; 0x50
 8004e0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004e10:	4b64      	ldr	r3, [pc, #400]	; (8004fa4 <_strtod_l+0xb2c>)
 8004e12:	429a      	cmp	r2, r3
 8004e14:	f040 80ce 	bne.w	8004fb4 <_strtod_l+0xb3c>
 8004e18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e1c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004e20:	4650      	mov	r0, sl
 8004e22:	4659      	mov	r1, fp
 8004e24:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004e28:	f001 f822 	bl	8005e70 <__ulp>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4630      	mov	r0, r6
 8004e32:	4639      	mov	r1, r7
 8004e34:	f7fb fb64 	bl	8000500 <__aeabi_dmul>
 8004e38:	4652      	mov	r2, sl
 8004e3a:	465b      	mov	r3, fp
 8004e3c:	f7fb f9ae 	bl	800019c <__adddf3>
 8004e40:	4a54      	ldr	r2, [pc, #336]	; (8004f94 <_strtod_l+0xb1c>)
 8004e42:	4b59      	ldr	r3, [pc, #356]	; (8004fa8 <_strtod_l+0xb30>)
 8004e44:	400a      	ands	r2, r1
 8004e46:	429a      	cmp	r2, r3
 8004e48:	4682      	mov	sl, r0
 8004e4a:	d95d      	bls.n	8004f08 <_strtod_l+0xa90>
 8004e4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e4e:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d103      	bne.n	8004e5e <_strtod_l+0x9e6>
 8004e56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e58:	3301      	adds	r3, #1
 8004e5a:	f43f ad60 	beq.w	800491e <_strtod_l+0x4a6>
 8004e5e:	f04f 3aff 	mov.w	sl, #4294967295
 8004e62:	f8df b134 	ldr.w	fp, [pc, #308]	; 8004f98 <_strtod_l+0xb20>
 8004e66:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004e68:	4640      	mov	r0, r8
 8004e6a:	f000 fd76 	bl	800595a <_Bfree>
 8004e6e:	9906      	ldr	r1, [sp, #24]
 8004e70:	4640      	mov	r0, r8
 8004e72:	f000 fd72 	bl	800595a <_Bfree>
 8004e76:	9904      	ldr	r1, [sp, #16]
 8004e78:	4640      	mov	r0, r8
 8004e7a:	f000 fd6e 	bl	800595a <_Bfree>
 8004e7e:	4649      	mov	r1, r9
 8004e80:	4640      	mov	r0, r8
 8004e82:	f000 fd6a 	bl	800595a <_Bfree>
 8004e86:	e622      	b.n	8004ace <_strtod_l+0x656>
 8004e88:	f1ba 0f00 	cmp.w	sl, #0
 8004e8c:	d118      	bne.n	8004ec0 <_strtod_l+0xa48>
 8004e8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004e92:	b9e3      	cbnz	r3, 8004ece <_strtod_l+0xa56>
 8004e94:	2200      	movs	r2, #0
 8004e96:	4b42      	ldr	r3, [pc, #264]	; (8004fa0 <_strtod_l+0xb28>)
 8004e98:	4630      	mov	r0, r6
 8004e9a:	4639      	mov	r1, r7
 8004e9c:	f7fb fda2 	bl	80009e4 <__aeabi_dcmplt>
 8004ea0:	b9c8      	cbnz	r0, 8004ed6 <_strtod_l+0xa5e>
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	4b41      	ldr	r3, [pc, #260]	; (8004fac <_strtod_l+0xb34>)
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	4639      	mov	r1, r7
 8004eaa:	f7fb fb29 	bl	8000500 <__aeabi_dmul>
 8004eae:	4604      	mov	r4, r0
 8004eb0:	460d      	mov	r5, r1
 8004eb2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004eb6:	9416      	str	r4, [sp, #88]	; 0x58
 8004eb8:	9317      	str	r3, [sp, #92]	; 0x5c
 8004eba:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004ebe:	e7a2      	b.n	8004e06 <_strtod_l+0x98e>
 8004ec0:	f1ba 0f01 	cmp.w	sl, #1
 8004ec4:	d103      	bne.n	8004ece <_strtod_l+0xa56>
 8004ec6:	f1bb 0f00 	cmp.w	fp, #0
 8004eca:	f43f ad9c 	beq.w	8004a06 <_strtod_l+0x58e>
 8004ece:	2600      	movs	r6, #0
 8004ed0:	4f37      	ldr	r7, [pc, #220]	; (8004fb0 <_strtod_l+0xb38>)
 8004ed2:	2400      	movs	r4, #0
 8004ed4:	e796      	b.n	8004e04 <_strtod_l+0x98c>
 8004ed6:	9c08      	ldr	r4, [sp, #32]
 8004ed8:	4d34      	ldr	r5, [pc, #208]	; (8004fac <_strtod_l+0xb34>)
 8004eda:	e7ea      	b.n	8004eb2 <_strtod_l+0xa3a>
 8004edc:	4b33      	ldr	r3, [pc, #204]	; (8004fac <_strtod_l+0xb34>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	4639      	mov	r1, r7
 8004ee4:	f7fb fb0c 	bl	8000500 <__aeabi_dmul>
 8004ee8:	9b08      	ldr	r3, [sp, #32]
 8004eea:	4604      	mov	r4, r0
 8004eec:	460d      	mov	r5, r1
 8004eee:	b933      	cbnz	r3, 8004efe <_strtod_l+0xa86>
 8004ef0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ef4:	9010      	str	r0, [sp, #64]	; 0x40
 8004ef6:	9311      	str	r3, [sp, #68]	; 0x44
 8004ef8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004efc:	e783      	b.n	8004e06 <_strtod_l+0x98e>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004f06:	e7f7      	b.n	8004ef8 <_strtod_l+0xa80>
 8004f08:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 8004f0c:	9b05      	ldr	r3, [sp, #20]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1a9      	bne.n	8004e66 <_strtod_l+0x9ee>
 8004f12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004f16:	0d1b      	lsrs	r3, r3, #20
 8004f18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004f1a:	051b      	lsls	r3, r3, #20
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	465e      	mov	r6, fp
 8004f20:	d1a1      	bne.n	8004e66 <_strtod_l+0x9ee>
 8004f22:	4629      	mov	r1, r5
 8004f24:	4620      	mov	r0, r4
 8004f26:	f7fb fd85 	bl	8000a34 <__aeabi_d2iz>
 8004f2a:	f7fb fa83 	bl	8000434 <__aeabi_i2d>
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4602      	mov	r2, r0
 8004f32:	4629      	mov	r1, r5
 8004f34:	4620      	mov	r0, r4
 8004f36:	f7fb f92f 	bl	8000198 <__aeabi_dsub>
 8004f3a:	9b08      	ldr	r3, [sp, #32]
 8004f3c:	4604      	mov	r4, r0
 8004f3e:	460d      	mov	r5, r1
 8004f40:	b933      	cbnz	r3, 8004f50 <_strtod_l+0xad8>
 8004f42:	f1ba 0f00 	cmp.w	sl, #0
 8004f46:	d103      	bne.n	8004f50 <_strtod_l+0xad8>
 8004f48:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8004f4c:	2e00      	cmp	r6, #0
 8004f4e:	d06c      	beq.n	800502a <_strtod_l+0xbb2>
 8004f50:	a30b      	add	r3, pc, #44	; (adr r3, 8004f80 <_strtod_l+0xb08>)
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	4620      	mov	r0, r4
 8004f58:	4629      	mov	r1, r5
 8004f5a:	f7fb fd43 	bl	80009e4 <__aeabi_dcmplt>
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	f47f ace8 	bne.w	8004934 <_strtod_l+0x4bc>
 8004f64:	a308      	add	r3, pc, #32	; (adr r3, 8004f88 <_strtod_l+0xb10>)
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	f7fb fd57 	bl	8000a20 <__aeabi_dcmpgt>
 8004f72:	2800      	cmp	r0, #0
 8004f74:	f43f af77 	beq.w	8004e66 <_strtod_l+0x9ee>
 8004f78:	e4dc      	b.n	8004934 <_strtod_l+0x4bc>
 8004f7a:	bf00      	nop
 8004f7c:	f3af 8000 	nop.w
 8004f80:	94a03595 	.word	0x94a03595
 8004f84:	3fdfffff 	.word	0x3fdfffff
 8004f88:	35afe535 	.word	0x35afe535
 8004f8c:	3fe00000 	.word	0x3fe00000
 8004f90:	000fffff 	.word	0x000fffff
 8004f94:	7ff00000 	.word	0x7ff00000
 8004f98:	7fefffff 	.word	0x7fefffff
 8004f9c:	39500000 	.word	0x39500000
 8004fa0:	3ff00000 	.word	0x3ff00000
 8004fa4:	7fe00000 	.word	0x7fe00000
 8004fa8:	7c9fffff 	.word	0x7c9fffff
 8004fac:	3fe00000 	.word	0x3fe00000
 8004fb0:	bff00000 	.word	0xbff00000
 8004fb4:	9b05      	ldr	r3, [sp, #20]
 8004fb6:	b313      	cbz	r3, 8004ffe <_strtod_l+0xb86>
 8004fb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004fba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004fbe:	d81e      	bhi.n	8004ffe <_strtod_l+0xb86>
 8004fc0:	a325      	add	r3, pc, #148	; (adr r3, 8005058 <_strtod_l+0xbe0>)
 8004fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	4629      	mov	r1, r5
 8004fca:	f7fb fd15 	bl	80009f8 <__aeabi_dcmple>
 8004fce:	b190      	cbz	r0, 8004ff6 <_strtod_l+0xb7e>
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f7fb fd56 	bl	8000a84 <__aeabi_d2uiz>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	bf08      	it	eq
 8004fdc:	2001      	moveq	r0, #1
 8004fde:	f7fb fa19 	bl	8000414 <__aeabi_ui2d>
 8004fe2:	9b08      	ldr	r3, [sp, #32]
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	460d      	mov	r5, r1
 8004fe8:	b9d3      	cbnz	r3, 8005020 <_strtod_l+0xba8>
 8004fea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fee:	9012      	str	r0, [sp, #72]	; 0x48
 8004ff0:	9313      	str	r3, [sp, #76]	; 0x4c
 8004ff2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004ff6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004ff8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004ffc:	1a9f      	subs	r7, r3, r2
 8004ffe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005002:	f000 ff35 	bl	8005e70 <__ulp>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4630      	mov	r0, r6
 800500c:	4639      	mov	r1, r7
 800500e:	f7fb fa77 	bl	8000500 <__aeabi_dmul>
 8005012:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005016:	f7fb f8c1 	bl	800019c <__adddf3>
 800501a:	4682      	mov	sl, r0
 800501c:	468b      	mov	fp, r1
 800501e:	e775      	b.n	8004f0c <_strtod_l+0xa94>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005028:	e7e3      	b.n	8004ff2 <_strtod_l+0xb7a>
 800502a:	a30d      	add	r3, pc, #52	; (adr r3, 8005060 <_strtod_l+0xbe8>)
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	f7fb fcd8 	bl	80009e4 <__aeabi_dcmplt>
 8005034:	e79d      	b.n	8004f72 <_strtod_l+0xafa>
 8005036:	2300      	movs	r3, #0
 8005038:	9309      	str	r3, [sp, #36]	; 0x24
 800503a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800503c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	f7ff ba5e 	b.w	8004500 <_strtod_l+0x88>
 8005044:	2b65      	cmp	r3, #101	; 0x65
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	f43f abae 	beq.w	80047aa <_strtod_l+0x332>
 800504e:	4615      	mov	r5, r2
 8005050:	2101      	movs	r1, #1
 8005052:	f7ff bacd 	b.w	80045f0 <_strtod_l+0x178>
 8005056:	bf00      	nop
 8005058:	ffc00000 	.word	0xffc00000
 800505c:	41dfffff 	.word	0x41dfffff
 8005060:	94a03595 	.word	0x94a03595
 8005064:	3fcfffff 	.word	0x3fcfffff

08005068 <strtod>:
 8005068:	4b06      	ldr	r3, [pc, #24]	; (8005084 <strtod+0x1c>)
 800506a:	b410      	push	{r4}
 800506c:	681c      	ldr	r4, [r3, #0]
 800506e:	4a06      	ldr	r2, [pc, #24]	; (8005088 <strtod+0x20>)
 8005070:	6a23      	ldr	r3, [r4, #32]
 8005072:	2b00      	cmp	r3, #0
 8005074:	bf08      	it	eq
 8005076:	4613      	moveq	r3, r2
 8005078:	460a      	mov	r2, r1
 800507a:	4601      	mov	r1, r0
 800507c:	4620      	mov	r0, r4
 800507e:	bc10      	pop	{r4}
 8005080:	f7ff b9fa 	b.w	8004478 <_strtod_l>
 8005084:	20000004 	.word	0x20000004
 8005088:	20000068 	.word	0x20000068

0800508c <strtok>:
 800508c:	4b13      	ldr	r3, [pc, #76]	; (80050dc <strtok+0x50>)
 800508e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005092:	681d      	ldr	r5, [r3, #0]
 8005094:	4606      	mov	r6, r0
 8005096:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8005098:	460f      	mov	r7, r1
 800509a:	b9b4      	cbnz	r4, 80050ca <strtok+0x3e>
 800509c:	2050      	movs	r0, #80	; 0x50
 800509e:	f000 fc03 	bl	80058a8 <malloc>
 80050a2:	65a8      	str	r0, [r5, #88]	; 0x58
 80050a4:	6004      	str	r4, [r0, #0]
 80050a6:	6044      	str	r4, [r0, #4]
 80050a8:	6084      	str	r4, [r0, #8]
 80050aa:	60c4      	str	r4, [r0, #12]
 80050ac:	6104      	str	r4, [r0, #16]
 80050ae:	6144      	str	r4, [r0, #20]
 80050b0:	6184      	str	r4, [r0, #24]
 80050b2:	6284      	str	r4, [r0, #40]	; 0x28
 80050b4:	62c4      	str	r4, [r0, #44]	; 0x2c
 80050b6:	6304      	str	r4, [r0, #48]	; 0x30
 80050b8:	6344      	str	r4, [r0, #52]	; 0x34
 80050ba:	6384      	str	r4, [r0, #56]	; 0x38
 80050bc:	63c4      	str	r4, [r0, #60]	; 0x3c
 80050be:	6404      	str	r4, [r0, #64]	; 0x40
 80050c0:	6444      	str	r4, [r0, #68]	; 0x44
 80050c2:	6484      	str	r4, [r0, #72]	; 0x48
 80050c4:	64c4      	str	r4, [r0, #76]	; 0x4c
 80050c6:	7704      	strb	r4, [r0, #28]
 80050c8:	6244      	str	r4, [r0, #36]	; 0x24
 80050ca:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80050cc:	4639      	mov	r1, r7
 80050ce:	4630      	mov	r0, r6
 80050d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050d4:	2301      	movs	r3, #1
 80050d6:	f000 b803 	b.w	80050e0 <__strtok_r>
 80050da:	bf00      	nop
 80050dc:	20000004 	.word	0x20000004

080050e0 <__strtok_r>:
 80050e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e2:	b918      	cbnz	r0, 80050ec <__strtok_r+0xc>
 80050e4:	6810      	ldr	r0, [r2, #0]
 80050e6:	b908      	cbnz	r0, 80050ec <__strtok_r+0xc>
 80050e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ea:	4620      	mov	r0, r4
 80050ec:	4604      	mov	r4, r0
 80050ee:	460f      	mov	r7, r1
 80050f0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80050f4:	f817 6b01 	ldrb.w	r6, [r7], #1
 80050f8:	b91e      	cbnz	r6, 8005102 <__strtok_r+0x22>
 80050fa:	b965      	cbnz	r5, 8005116 <__strtok_r+0x36>
 80050fc:	6015      	str	r5, [r2, #0]
 80050fe:	4628      	mov	r0, r5
 8005100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005102:	42b5      	cmp	r5, r6
 8005104:	d1f6      	bne.n	80050f4 <__strtok_r+0x14>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1ef      	bne.n	80050ea <__strtok_r+0xa>
 800510a:	6014      	str	r4, [r2, #0]
 800510c:	7003      	strb	r3, [r0, #0]
 800510e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005110:	461c      	mov	r4, r3
 8005112:	e00c      	b.n	800512e <__strtok_r+0x4e>
 8005114:	b915      	cbnz	r5, 800511c <__strtok_r+0x3c>
 8005116:	460e      	mov	r6, r1
 8005118:	f814 3b01 	ldrb.w	r3, [r4], #1
 800511c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005120:	42ab      	cmp	r3, r5
 8005122:	d1f7      	bne.n	8005114 <__strtok_r+0x34>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f3      	beq.n	8005110 <__strtok_r+0x30>
 8005128:	2300      	movs	r3, #0
 800512a:	f804 3c01 	strb.w	r3, [r4, #-1]
 800512e:	6014      	str	r4, [r2, #0]
 8005130:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005132 <_strtol_l.isra.0>:
 8005132:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005136:	4680      	mov	r8, r0
 8005138:	4689      	mov	r9, r1
 800513a:	4692      	mov	sl, r2
 800513c:	461f      	mov	r7, r3
 800513e:	468b      	mov	fp, r1
 8005140:	465d      	mov	r5, fp
 8005142:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005144:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005148:	f000 fba8 	bl	800589c <__locale_ctype_ptr_l>
 800514c:	4420      	add	r0, r4
 800514e:	7846      	ldrb	r6, [r0, #1]
 8005150:	f016 0608 	ands.w	r6, r6, #8
 8005154:	d10b      	bne.n	800516e <_strtol_l.isra.0+0x3c>
 8005156:	2c2d      	cmp	r4, #45	; 0x2d
 8005158:	d10b      	bne.n	8005172 <_strtol_l.isra.0+0x40>
 800515a:	2601      	movs	r6, #1
 800515c:	782c      	ldrb	r4, [r5, #0]
 800515e:	f10b 0502 	add.w	r5, fp, #2
 8005162:	b167      	cbz	r7, 800517e <_strtol_l.isra.0+0x4c>
 8005164:	2f10      	cmp	r7, #16
 8005166:	d114      	bne.n	8005192 <_strtol_l.isra.0+0x60>
 8005168:	2c30      	cmp	r4, #48	; 0x30
 800516a:	d00a      	beq.n	8005182 <_strtol_l.isra.0+0x50>
 800516c:	e011      	b.n	8005192 <_strtol_l.isra.0+0x60>
 800516e:	46ab      	mov	fp, r5
 8005170:	e7e6      	b.n	8005140 <_strtol_l.isra.0+0xe>
 8005172:	2c2b      	cmp	r4, #43	; 0x2b
 8005174:	bf04      	itt	eq
 8005176:	782c      	ldrbeq	r4, [r5, #0]
 8005178:	f10b 0502 	addeq.w	r5, fp, #2
 800517c:	e7f1      	b.n	8005162 <_strtol_l.isra.0+0x30>
 800517e:	2c30      	cmp	r4, #48	; 0x30
 8005180:	d127      	bne.n	80051d2 <_strtol_l.isra.0+0xa0>
 8005182:	782b      	ldrb	r3, [r5, #0]
 8005184:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005188:	2b58      	cmp	r3, #88	; 0x58
 800518a:	d14b      	bne.n	8005224 <_strtol_l.isra.0+0xf2>
 800518c:	2710      	movs	r7, #16
 800518e:	786c      	ldrb	r4, [r5, #1]
 8005190:	3502      	adds	r5, #2
 8005192:	2e00      	cmp	r6, #0
 8005194:	bf0c      	ite	eq
 8005196:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800519a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800519e:	2200      	movs	r2, #0
 80051a0:	fbb1 fef7 	udiv	lr, r1, r7
 80051a4:	4610      	mov	r0, r2
 80051a6:	fb07 1c1e 	mls	ip, r7, lr, r1
 80051aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80051ae:	2b09      	cmp	r3, #9
 80051b0:	d811      	bhi.n	80051d6 <_strtol_l.isra.0+0xa4>
 80051b2:	461c      	mov	r4, r3
 80051b4:	42a7      	cmp	r7, r4
 80051b6:	dd1d      	ble.n	80051f4 <_strtol_l.isra.0+0xc2>
 80051b8:	1c53      	adds	r3, r2, #1
 80051ba:	d007      	beq.n	80051cc <_strtol_l.isra.0+0x9a>
 80051bc:	4586      	cmp	lr, r0
 80051be:	d316      	bcc.n	80051ee <_strtol_l.isra.0+0xbc>
 80051c0:	d101      	bne.n	80051c6 <_strtol_l.isra.0+0x94>
 80051c2:	45a4      	cmp	ip, r4
 80051c4:	db13      	blt.n	80051ee <_strtol_l.isra.0+0xbc>
 80051c6:	2201      	movs	r2, #1
 80051c8:	fb00 4007 	mla	r0, r0, r7, r4
 80051cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051d0:	e7eb      	b.n	80051aa <_strtol_l.isra.0+0x78>
 80051d2:	270a      	movs	r7, #10
 80051d4:	e7dd      	b.n	8005192 <_strtol_l.isra.0+0x60>
 80051d6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80051da:	2b19      	cmp	r3, #25
 80051dc:	d801      	bhi.n	80051e2 <_strtol_l.isra.0+0xb0>
 80051de:	3c37      	subs	r4, #55	; 0x37
 80051e0:	e7e8      	b.n	80051b4 <_strtol_l.isra.0+0x82>
 80051e2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80051e6:	2b19      	cmp	r3, #25
 80051e8:	d804      	bhi.n	80051f4 <_strtol_l.isra.0+0xc2>
 80051ea:	3c57      	subs	r4, #87	; 0x57
 80051ec:	e7e2      	b.n	80051b4 <_strtol_l.isra.0+0x82>
 80051ee:	f04f 32ff 	mov.w	r2, #4294967295
 80051f2:	e7eb      	b.n	80051cc <_strtol_l.isra.0+0x9a>
 80051f4:	1c53      	adds	r3, r2, #1
 80051f6:	d108      	bne.n	800520a <_strtol_l.isra.0+0xd8>
 80051f8:	2322      	movs	r3, #34	; 0x22
 80051fa:	4608      	mov	r0, r1
 80051fc:	f8c8 3000 	str.w	r3, [r8]
 8005200:	f1ba 0f00 	cmp.w	sl, #0
 8005204:	d107      	bne.n	8005216 <_strtol_l.isra.0+0xe4>
 8005206:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800520a:	b106      	cbz	r6, 800520e <_strtol_l.isra.0+0xdc>
 800520c:	4240      	negs	r0, r0
 800520e:	f1ba 0f00 	cmp.w	sl, #0
 8005212:	d00c      	beq.n	800522e <_strtol_l.isra.0+0xfc>
 8005214:	b122      	cbz	r2, 8005220 <_strtol_l.isra.0+0xee>
 8005216:	3d01      	subs	r5, #1
 8005218:	f8ca 5000 	str.w	r5, [sl]
 800521c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005220:	464d      	mov	r5, r9
 8005222:	e7f9      	b.n	8005218 <_strtol_l.isra.0+0xe6>
 8005224:	2430      	movs	r4, #48	; 0x30
 8005226:	2f00      	cmp	r7, #0
 8005228:	d1b3      	bne.n	8005192 <_strtol_l.isra.0+0x60>
 800522a:	2708      	movs	r7, #8
 800522c:	e7b1      	b.n	8005192 <_strtol_l.isra.0+0x60>
 800522e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005234 <strtol>:
 8005234:	4b08      	ldr	r3, [pc, #32]	; (8005258 <strtol+0x24>)
 8005236:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005238:	681c      	ldr	r4, [r3, #0]
 800523a:	4d08      	ldr	r5, [pc, #32]	; (800525c <strtol+0x28>)
 800523c:	6a23      	ldr	r3, [r4, #32]
 800523e:	2b00      	cmp	r3, #0
 8005240:	bf08      	it	eq
 8005242:	462b      	moveq	r3, r5
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	4613      	mov	r3, r2
 8005248:	460a      	mov	r2, r1
 800524a:	4601      	mov	r1, r0
 800524c:	4620      	mov	r0, r4
 800524e:	f7ff ff70 	bl	8005132 <_strtol_l.isra.0>
 8005252:	b003      	add	sp, #12
 8005254:	bd30      	pop	{r4, r5, pc}
 8005256:	bf00      	nop
 8005258:	20000004 	.word	0x20000004
 800525c:	20000068 	.word	0x20000068

08005260 <rshift>:
 8005260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005262:	6906      	ldr	r6, [r0, #16]
 8005264:	114b      	asrs	r3, r1, #5
 8005266:	42b3      	cmp	r3, r6
 8005268:	f100 0514 	add.w	r5, r0, #20
 800526c:	da2b      	bge.n	80052c6 <rshift+0x66>
 800526e:	f011 011f 	ands.w	r1, r1, #31
 8005272:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8005276:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800527a:	d108      	bne.n	800528e <rshift+0x2e>
 800527c:	4629      	mov	r1, r5
 800527e:	42b2      	cmp	r2, r6
 8005280:	460b      	mov	r3, r1
 8005282:	d210      	bcs.n	80052a6 <rshift+0x46>
 8005284:	f852 3b04 	ldr.w	r3, [r2], #4
 8005288:	f841 3b04 	str.w	r3, [r1], #4
 800528c:	e7f7      	b.n	800527e <rshift+0x1e>
 800528e:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 8005292:	462b      	mov	r3, r5
 8005294:	f1c1 0e20 	rsb	lr, r1, #32
 8005298:	3204      	adds	r2, #4
 800529a:	40cc      	lsrs	r4, r1
 800529c:	42b2      	cmp	r2, r6
 800529e:	d308      	bcc.n	80052b2 <rshift+0x52>
 80052a0:	601c      	str	r4, [r3, #0]
 80052a2:	b104      	cbz	r4, 80052a6 <rshift+0x46>
 80052a4:	3304      	adds	r3, #4
 80052a6:	1b5b      	subs	r3, r3, r5
 80052a8:	109b      	asrs	r3, r3, #2
 80052aa:	6103      	str	r3, [r0, #16]
 80052ac:	b903      	cbnz	r3, 80052b0 <rshift+0x50>
 80052ae:	6143      	str	r3, [r0, #20]
 80052b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052b2:	6817      	ldr	r7, [r2, #0]
 80052b4:	fa07 f70e 	lsl.w	r7, r7, lr
 80052b8:	433c      	orrs	r4, r7
 80052ba:	f843 4b04 	str.w	r4, [r3], #4
 80052be:	f852 4b04 	ldr.w	r4, [r2], #4
 80052c2:	40cc      	lsrs	r4, r1
 80052c4:	e7ea      	b.n	800529c <rshift+0x3c>
 80052c6:	462b      	mov	r3, r5
 80052c8:	e7ed      	b.n	80052a6 <rshift+0x46>

080052ca <__hexdig_fun>:
 80052ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80052ce:	2b09      	cmp	r3, #9
 80052d0:	d802      	bhi.n	80052d8 <__hexdig_fun+0xe>
 80052d2:	3820      	subs	r0, #32
 80052d4:	b2c0      	uxtb	r0, r0
 80052d6:	4770      	bx	lr
 80052d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80052dc:	2b05      	cmp	r3, #5
 80052de:	d801      	bhi.n	80052e4 <__hexdig_fun+0x1a>
 80052e0:	3847      	subs	r0, #71	; 0x47
 80052e2:	e7f7      	b.n	80052d4 <__hexdig_fun+0xa>
 80052e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80052e8:	2b05      	cmp	r3, #5
 80052ea:	d801      	bhi.n	80052f0 <__hexdig_fun+0x26>
 80052ec:	3827      	subs	r0, #39	; 0x27
 80052ee:	e7f1      	b.n	80052d4 <__hexdig_fun+0xa>
 80052f0:	2000      	movs	r0, #0
 80052f2:	4770      	bx	lr

080052f4 <__gethex>:
 80052f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f8:	b08b      	sub	sp, #44	; 0x2c
 80052fa:	9002      	str	r0, [sp, #8]
 80052fc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80052fe:	468a      	mov	sl, r1
 8005300:	4690      	mov	r8, r2
 8005302:	9306      	str	r3, [sp, #24]
 8005304:	f000 facd 	bl	80058a2 <__localeconv_l>
 8005308:	6803      	ldr	r3, [r0, #0]
 800530a:	f04f 0b00 	mov.w	fp, #0
 800530e:	4618      	mov	r0, r3
 8005310:	9303      	str	r3, [sp, #12]
 8005312:	f7fa ff35 	bl	8000180 <strlen>
 8005316:	9b03      	ldr	r3, [sp, #12]
 8005318:	9001      	str	r0, [sp, #4]
 800531a:	4403      	add	r3, r0
 800531c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005320:	9307      	str	r3, [sp, #28]
 8005322:	f8da 3000 	ldr.w	r3, [sl]
 8005326:	3302      	adds	r3, #2
 8005328:	461f      	mov	r7, r3
 800532a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800532e:	2830      	cmp	r0, #48	; 0x30
 8005330:	d06c      	beq.n	800540c <__gethex+0x118>
 8005332:	f7ff ffca 	bl	80052ca <__hexdig_fun>
 8005336:	4604      	mov	r4, r0
 8005338:	2800      	cmp	r0, #0
 800533a:	d16a      	bne.n	8005412 <__gethex+0x11e>
 800533c:	9a01      	ldr	r2, [sp, #4]
 800533e:	9903      	ldr	r1, [sp, #12]
 8005340:	4638      	mov	r0, r7
 8005342:	f7ff f865 	bl	8004410 <strncmp>
 8005346:	2800      	cmp	r0, #0
 8005348:	d166      	bne.n	8005418 <__gethex+0x124>
 800534a:	9b01      	ldr	r3, [sp, #4]
 800534c:	5cf8      	ldrb	r0, [r7, r3]
 800534e:	18fe      	adds	r6, r7, r3
 8005350:	f7ff ffbb 	bl	80052ca <__hexdig_fun>
 8005354:	2800      	cmp	r0, #0
 8005356:	d062      	beq.n	800541e <__gethex+0x12a>
 8005358:	4633      	mov	r3, r6
 800535a:	7818      	ldrb	r0, [r3, #0]
 800535c:	461f      	mov	r7, r3
 800535e:	2830      	cmp	r0, #48	; 0x30
 8005360:	f103 0301 	add.w	r3, r3, #1
 8005364:	d0f9      	beq.n	800535a <__gethex+0x66>
 8005366:	f7ff ffb0 	bl	80052ca <__hexdig_fun>
 800536a:	fab0 f580 	clz	r5, r0
 800536e:	4634      	mov	r4, r6
 8005370:	f04f 0b01 	mov.w	fp, #1
 8005374:	096d      	lsrs	r5, r5, #5
 8005376:	463a      	mov	r2, r7
 8005378:	4616      	mov	r6, r2
 800537a:	7830      	ldrb	r0, [r6, #0]
 800537c:	3201      	adds	r2, #1
 800537e:	f7ff ffa4 	bl	80052ca <__hexdig_fun>
 8005382:	2800      	cmp	r0, #0
 8005384:	d1f8      	bne.n	8005378 <__gethex+0x84>
 8005386:	9a01      	ldr	r2, [sp, #4]
 8005388:	9903      	ldr	r1, [sp, #12]
 800538a:	4630      	mov	r0, r6
 800538c:	f7ff f840 	bl	8004410 <strncmp>
 8005390:	b950      	cbnz	r0, 80053a8 <__gethex+0xb4>
 8005392:	b954      	cbnz	r4, 80053aa <__gethex+0xb6>
 8005394:	9b01      	ldr	r3, [sp, #4]
 8005396:	18f4      	adds	r4, r6, r3
 8005398:	4622      	mov	r2, r4
 800539a:	4616      	mov	r6, r2
 800539c:	7830      	ldrb	r0, [r6, #0]
 800539e:	3201      	adds	r2, #1
 80053a0:	f7ff ff93 	bl	80052ca <__hexdig_fun>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d1f8      	bne.n	800539a <__gethex+0xa6>
 80053a8:	b10c      	cbz	r4, 80053ae <__gethex+0xba>
 80053aa:	1ba4      	subs	r4, r4, r6
 80053ac:	00a4      	lsls	r4, r4, #2
 80053ae:	7833      	ldrb	r3, [r6, #0]
 80053b0:	2b50      	cmp	r3, #80	; 0x50
 80053b2:	d001      	beq.n	80053b8 <__gethex+0xc4>
 80053b4:	2b70      	cmp	r3, #112	; 0x70
 80053b6:	d140      	bne.n	800543a <__gethex+0x146>
 80053b8:	7873      	ldrb	r3, [r6, #1]
 80053ba:	2b2b      	cmp	r3, #43	; 0x2b
 80053bc:	d035      	beq.n	800542a <__gethex+0x136>
 80053be:	2b2d      	cmp	r3, #45	; 0x2d
 80053c0:	d02f      	beq.n	8005422 <__gethex+0x12e>
 80053c2:	f04f 0900 	mov.w	r9, #0
 80053c6:	1c71      	adds	r1, r6, #1
 80053c8:	7808      	ldrb	r0, [r1, #0]
 80053ca:	f7ff ff7e 	bl	80052ca <__hexdig_fun>
 80053ce:	1e43      	subs	r3, r0, #1
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b18      	cmp	r3, #24
 80053d4:	d831      	bhi.n	800543a <__gethex+0x146>
 80053d6:	f1a0 0210 	sub.w	r2, r0, #16
 80053da:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80053de:	f7ff ff74 	bl	80052ca <__hexdig_fun>
 80053e2:	1e43      	subs	r3, r0, #1
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b18      	cmp	r3, #24
 80053e8:	d922      	bls.n	8005430 <__gethex+0x13c>
 80053ea:	f1b9 0f00 	cmp.w	r9, #0
 80053ee:	d000      	beq.n	80053f2 <__gethex+0xfe>
 80053f0:	4252      	negs	r2, r2
 80053f2:	4414      	add	r4, r2
 80053f4:	f8ca 1000 	str.w	r1, [sl]
 80053f8:	b30d      	cbz	r5, 800543e <__gethex+0x14a>
 80053fa:	f1bb 0f00 	cmp.w	fp, #0
 80053fe:	bf14      	ite	ne
 8005400:	2700      	movne	r7, #0
 8005402:	2706      	moveq	r7, #6
 8005404:	4638      	mov	r0, r7
 8005406:	b00b      	add	sp, #44	; 0x2c
 8005408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800540c:	f10b 0b01 	add.w	fp, fp, #1
 8005410:	e78a      	b.n	8005328 <__gethex+0x34>
 8005412:	2500      	movs	r5, #0
 8005414:	462c      	mov	r4, r5
 8005416:	e7ae      	b.n	8005376 <__gethex+0x82>
 8005418:	463e      	mov	r6, r7
 800541a:	2501      	movs	r5, #1
 800541c:	e7c7      	b.n	80053ae <__gethex+0xba>
 800541e:	4604      	mov	r4, r0
 8005420:	e7fb      	b.n	800541a <__gethex+0x126>
 8005422:	f04f 0901 	mov.w	r9, #1
 8005426:	1cb1      	adds	r1, r6, #2
 8005428:	e7ce      	b.n	80053c8 <__gethex+0xd4>
 800542a:	f04f 0900 	mov.w	r9, #0
 800542e:	e7fa      	b.n	8005426 <__gethex+0x132>
 8005430:	230a      	movs	r3, #10
 8005432:	fb03 0202 	mla	r2, r3, r2, r0
 8005436:	3a10      	subs	r2, #16
 8005438:	e7cf      	b.n	80053da <__gethex+0xe6>
 800543a:	4631      	mov	r1, r6
 800543c:	e7da      	b.n	80053f4 <__gethex+0x100>
 800543e:	4629      	mov	r1, r5
 8005440:	1bf3      	subs	r3, r6, r7
 8005442:	3b01      	subs	r3, #1
 8005444:	2b07      	cmp	r3, #7
 8005446:	dc49      	bgt.n	80054dc <__gethex+0x1e8>
 8005448:	9802      	ldr	r0, [sp, #8]
 800544a:	f000 fa52 	bl	80058f2 <_Balloc>
 800544e:	f04f 0b00 	mov.w	fp, #0
 8005452:	4605      	mov	r5, r0
 8005454:	46da      	mov	sl, fp
 8005456:	9b01      	ldr	r3, [sp, #4]
 8005458:	f100 0914 	add.w	r9, r0, #20
 800545c:	f1c3 0301 	rsb	r3, r3, #1
 8005460:	f8cd 9010 	str.w	r9, [sp, #16]
 8005464:	9308      	str	r3, [sp, #32]
 8005466:	42b7      	cmp	r7, r6
 8005468:	d33b      	bcc.n	80054e2 <__gethex+0x1ee>
 800546a:	9804      	ldr	r0, [sp, #16]
 800546c:	f840 ab04 	str.w	sl, [r0], #4
 8005470:	eba0 0009 	sub.w	r0, r0, r9
 8005474:	1080      	asrs	r0, r0, #2
 8005476:	6128      	str	r0, [r5, #16]
 8005478:	0147      	lsls	r7, r0, #5
 800547a:	4650      	mov	r0, sl
 800547c:	f000 fafd 	bl	8005a7a <__hi0bits>
 8005480:	f8d8 6000 	ldr.w	r6, [r8]
 8005484:	1a3f      	subs	r7, r7, r0
 8005486:	42b7      	cmp	r7, r6
 8005488:	dd64      	ble.n	8005554 <__gethex+0x260>
 800548a:	1bbf      	subs	r7, r7, r6
 800548c:	4639      	mov	r1, r7
 800548e:	4628      	mov	r0, r5
 8005490:	f000 fdf5 	bl	800607e <__any_on>
 8005494:	4682      	mov	sl, r0
 8005496:	b178      	cbz	r0, 80054b8 <__gethex+0x1c4>
 8005498:	f04f 0a01 	mov.w	sl, #1
 800549c:	1e7b      	subs	r3, r7, #1
 800549e:	1159      	asrs	r1, r3, #5
 80054a0:	f003 021f 	and.w	r2, r3, #31
 80054a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80054a8:	fa0a f202 	lsl.w	r2, sl, r2
 80054ac:	420a      	tst	r2, r1
 80054ae:	d003      	beq.n	80054b8 <__gethex+0x1c4>
 80054b0:	4553      	cmp	r3, sl
 80054b2:	dc46      	bgt.n	8005542 <__gethex+0x24e>
 80054b4:	f04f 0a02 	mov.w	sl, #2
 80054b8:	4639      	mov	r1, r7
 80054ba:	4628      	mov	r0, r5
 80054bc:	f7ff fed0 	bl	8005260 <rshift>
 80054c0:	443c      	add	r4, r7
 80054c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80054c6:	429c      	cmp	r4, r3
 80054c8:	dd52      	ble.n	8005570 <__gethex+0x27c>
 80054ca:	4629      	mov	r1, r5
 80054cc:	9802      	ldr	r0, [sp, #8]
 80054ce:	f000 fa44 	bl	800595a <_Bfree>
 80054d2:	2300      	movs	r3, #0
 80054d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80054d6:	27a3      	movs	r7, #163	; 0xa3
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	e793      	b.n	8005404 <__gethex+0x110>
 80054dc:	3101      	adds	r1, #1
 80054de:	105b      	asrs	r3, r3, #1
 80054e0:	e7b0      	b.n	8005444 <__gethex+0x150>
 80054e2:	1e73      	subs	r3, r6, #1
 80054e4:	9305      	str	r3, [sp, #20]
 80054e6:	9a07      	ldr	r2, [sp, #28]
 80054e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d018      	beq.n	8005522 <__gethex+0x22e>
 80054f0:	f1bb 0f20 	cmp.w	fp, #32
 80054f4:	d107      	bne.n	8005506 <__gethex+0x212>
 80054f6:	9b04      	ldr	r3, [sp, #16]
 80054f8:	f8c3 a000 	str.w	sl, [r3]
 80054fc:	f04f 0a00 	mov.w	sl, #0
 8005500:	46d3      	mov	fp, sl
 8005502:	3304      	adds	r3, #4
 8005504:	9304      	str	r3, [sp, #16]
 8005506:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800550a:	f7ff fede 	bl	80052ca <__hexdig_fun>
 800550e:	f000 000f 	and.w	r0, r0, #15
 8005512:	fa00 f00b 	lsl.w	r0, r0, fp
 8005516:	ea4a 0a00 	orr.w	sl, sl, r0
 800551a:	f10b 0b04 	add.w	fp, fp, #4
 800551e:	9b05      	ldr	r3, [sp, #20]
 8005520:	e00d      	b.n	800553e <__gethex+0x24a>
 8005522:	9b05      	ldr	r3, [sp, #20]
 8005524:	9a08      	ldr	r2, [sp, #32]
 8005526:	4413      	add	r3, r2
 8005528:	429f      	cmp	r7, r3
 800552a:	d8e1      	bhi.n	80054f0 <__gethex+0x1fc>
 800552c:	4618      	mov	r0, r3
 800552e:	9a01      	ldr	r2, [sp, #4]
 8005530:	9903      	ldr	r1, [sp, #12]
 8005532:	9309      	str	r3, [sp, #36]	; 0x24
 8005534:	f7fe ff6c 	bl	8004410 <strncmp>
 8005538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800553a:	2800      	cmp	r0, #0
 800553c:	d1d8      	bne.n	80054f0 <__gethex+0x1fc>
 800553e:	461e      	mov	r6, r3
 8005540:	e791      	b.n	8005466 <__gethex+0x172>
 8005542:	1eb9      	subs	r1, r7, #2
 8005544:	4628      	mov	r0, r5
 8005546:	f000 fd9a 	bl	800607e <__any_on>
 800554a:	2800      	cmp	r0, #0
 800554c:	d0b2      	beq.n	80054b4 <__gethex+0x1c0>
 800554e:	f04f 0a03 	mov.w	sl, #3
 8005552:	e7b1      	b.n	80054b8 <__gethex+0x1c4>
 8005554:	da09      	bge.n	800556a <__gethex+0x276>
 8005556:	1bf7      	subs	r7, r6, r7
 8005558:	4629      	mov	r1, r5
 800555a:	463a      	mov	r2, r7
 800555c:	9802      	ldr	r0, [sp, #8]
 800555e:	f000 fbbd 	bl	8005cdc <__lshift>
 8005562:	4605      	mov	r5, r0
 8005564:	1be4      	subs	r4, r4, r7
 8005566:	f100 0914 	add.w	r9, r0, #20
 800556a:	f04f 0a00 	mov.w	sl, #0
 800556e:	e7a8      	b.n	80054c2 <__gethex+0x1ce>
 8005570:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005574:	4284      	cmp	r4, r0
 8005576:	da6b      	bge.n	8005650 <__gethex+0x35c>
 8005578:	1b04      	subs	r4, r0, r4
 800557a:	42a6      	cmp	r6, r4
 800557c:	dc2e      	bgt.n	80055dc <__gethex+0x2e8>
 800557e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d022      	beq.n	80055cc <__gethex+0x2d8>
 8005586:	2b03      	cmp	r3, #3
 8005588:	d024      	beq.n	80055d4 <__gethex+0x2e0>
 800558a:	2b01      	cmp	r3, #1
 800558c:	d115      	bne.n	80055ba <__gethex+0x2c6>
 800558e:	42a6      	cmp	r6, r4
 8005590:	d113      	bne.n	80055ba <__gethex+0x2c6>
 8005592:	2e01      	cmp	r6, #1
 8005594:	dc0b      	bgt.n	80055ae <__gethex+0x2ba>
 8005596:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800559a:	9a06      	ldr	r2, [sp, #24]
 800559c:	2762      	movs	r7, #98	; 0x62
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	2301      	movs	r3, #1
 80055a2:	612b      	str	r3, [r5, #16]
 80055a4:	f8c9 3000 	str.w	r3, [r9]
 80055a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80055aa:	601d      	str	r5, [r3, #0]
 80055ac:	e72a      	b.n	8005404 <__gethex+0x110>
 80055ae:	1e71      	subs	r1, r6, #1
 80055b0:	4628      	mov	r0, r5
 80055b2:	f000 fd64 	bl	800607e <__any_on>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	d1ed      	bne.n	8005596 <__gethex+0x2a2>
 80055ba:	4629      	mov	r1, r5
 80055bc:	9802      	ldr	r0, [sp, #8]
 80055be:	f000 f9cc 	bl	800595a <_Bfree>
 80055c2:	2300      	movs	r3, #0
 80055c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80055c6:	2750      	movs	r7, #80	; 0x50
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	e71b      	b.n	8005404 <__gethex+0x110>
 80055cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0e1      	beq.n	8005596 <__gethex+0x2a2>
 80055d2:	e7f2      	b.n	80055ba <__gethex+0x2c6>
 80055d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1dd      	bne.n	8005596 <__gethex+0x2a2>
 80055da:	e7ee      	b.n	80055ba <__gethex+0x2c6>
 80055dc:	1e67      	subs	r7, r4, #1
 80055de:	f1ba 0f00 	cmp.w	sl, #0
 80055e2:	d132      	bne.n	800564a <__gethex+0x356>
 80055e4:	b127      	cbz	r7, 80055f0 <__gethex+0x2fc>
 80055e6:	4639      	mov	r1, r7
 80055e8:	4628      	mov	r0, r5
 80055ea:	f000 fd48 	bl	800607e <__any_on>
 80055ee:	4682      	mov	sl, r0
 80055f0:	2301      	movs	r3, #1
 80055f2:	117a      	asrs	r2, r7, #5
 80055f4:	f007 071f 	and.w	r7, r7, #31
 80055f8:	fa03 f707 	lsl.w	r7, r3, r7
 80055fc:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005600:	4621      	mov	r1, r4
 8005602:	421f      	tst	r7, r3
 8005604:	f04f 0702 	mov.w	r7, #2
 8005608:	4628      	mov	r0, r5
 800560a:	bf18      	it	ne
 800560c:	f04a 0a02 	orrne.w	sl, sl, #2
 8005610:	1b36      	subs	r6, r6, r4
 8005612:	f7ff fe25 	bl	8005260 <rshift>
 8005616:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800561a:	f1ba 0f00 	cmp.w	sl, #0
 800561e:	d045      	beq.n	80056ac <__gethex+0x3b8>
 8005620:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d015      	beq.n	8005654 <__gethex+0x360>
 8005628:	2b03      	cmp	r3, #3
 800562a:	d017      	beq.n	800565c <__gethex+0x368>
 800562c:	2b01      	cmp	r3, #1
 800562e:	d109      	bne.n	8005644 <__gethex+0x350>
 8005630:	f01a 0f02 	tst.w	sl, #2
 8005634:	d006      	beq.n	8005644 <__gethex+0x350>
 8005636:	f8d9 3000 	ldr.w	r3, [r9]
 800563a:	ea4a 0a03 	orr.w	sl, sl, r3
 800563e:	f01a 0f01 	tst.w	sl, #1
 8005642:	d10e      	bne.n	8005662 <__gethex+0x36e>
 8005644:	f047 0710 	orr.w	r7, r7, #16
 8005648:	e030      	b.n	80056ac <__gethex+0x3b8>
 800564a:	f04f 0a01 	mov.w	sl, #1
 800564e:	e7cf      	b.n	80055f0 <__gethex+0x2fc>
 8005650:	2701      	movs	r7, #1
 8005652:	e7e2      	b.n	800561a <__gethex+0x326>
 8005654:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005656:	f1c3 0301 	rsb	r3, r3, #1
 800565a:	9315      	str	r3, [sp, #84]	; 0x54
 800565c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0f0      	beq.n	8005644 <__gethex+0x350>
 8005662:	2000      	movs	r0, #0
 8005664:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8005668:	f105 0314 	add.w	r3, r5, #20
 800566c:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8005670:	eb03 010a 	add.w	r1, r3, sl
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	f1b2 3fff 	cmp.w	r2, #4294967295
 800567a:	d01c      	beq.n	80056b6 <__gethex+0x3c2>
 800567c:	3201      	adds	r2, #1
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	2f02      	cmp	r7, #2
 8005682:	f105 0314 	add.w	r3, r5, #20
 8005686:	d138      	bne.n	80056fa <__gethex+0x406>
 8005688:	f8d8 2000 	ldr.w	r2, [r8]
 800568c:	3a01      	subs	r2, #1
 800568e:	4296      	cmp	r6, r2
 8005690:	d10a      	bne.n	80056a8 <__gethex+0x3b4>
 8005692:	2201      	movs	r2, #1
 8005694:	1171      	asrs	r1, r6, #5
 8005696:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800569a:	f006 061f 	and.w	r6, r6, #31
 800569e:	fa02 f606 	lsl.w	r6, r2, r6
 80056a2:	421e      	tst	r6, r3
 80056a4:	bf18      	it	ne
 80056a6:	4617      	movne	r7, r2
 80056a8:	f047 0720 	orr.w	r7, r7, #32
 80056ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056ae:	601d      	str	r5, [r3, #0]
 80056b0:	9b06      	ldr	r3, [sp, #24]
 80056b2:	601c      	str	r4, [r3, #0]
 80056b4:	e6a6      	b.n	8005404 <__gethex+0x110>
 80056b6:	f843 0b04 	str.w	r0, [r3], #4
 80056ba:	4299      	cmp	r1, r3
 80056bc:	d8da      	bhi.n	8005674 <__gethex+0x380>
 80056be:	68ab      	ldr	r3, [r5, #8]
 80056c0:	4599      	cmp	r9, r3
 80056c2:	db12      	blt.n	80056ea <__gethex+0x3f6>
 80056c4:	6869      	ldr	r1, [r5, #4]
 80056c6:	9802      	ldr	r0, [sp, #8]
 80056c8:	3101      	adds	r1, #1
 80056ca:	f000 f912 	bl	80058f2 <_Balloc>
 80056ce:	4683      	mov	fp, r0
 80056d0:	692a      	ldr	r2, [r5, #16]
 80056d2:	f105 010c 	add.w	r1, r5, #12
 80056d6:	3202      	adds	r2, #2
 80056d8:	0092      	lsls	r2, r2, #2
 80056da:	300c      	adds	r0, #12
 80056dc:	f000 f8fe 	bl	80058dc <memcpy>
 80056e0:	4629      	mov	r1, r5
 80056e2:	9802      	ldr	r0, [sp, #8]
 80056e4:	f000 f939 	bl	800595a <_Bfree>
 80056e8:	465d      	mov	r5, fp
 80056ea:	692b      	ldr	r3, [r5, #16]
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	612a      	str	r2, [r5, #16]
 80056f0:	2201      	movs	r2, #1
 80056f2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80056f6:	615a      	str	r2, [r3, #20]
 80056f8:	e7c2      	b.n	8005680 <__gethex+0x38c>
 80056fa:	692a      	ldr	r2, [r5, #16]
 80056fc:	4591      	cmp	r9, r2
 80056fe:	da0b      	bge.n	8005718 <__gethex+0x424>
 8005700:	2101      	movs	r1, #1
 8005702:	4628      	mov	r0, r5
 8005704:	f7ff fdac 	bl	8005260 <rshift>
 8005708:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800570c:	3401      	adds	r4, #1
 800570e:	429c      	cmp	r4, r3
 8005710:	f73f aedb 	bgt.w	80054ca <__gethex+0x1d6>
 8005714:	2701      	movs	r7, #1
 8005716:	e7c7      	b.n	80056a8 <__gethex+0x3b4>
 8005718:	f016 061f 	ands.w	r6, r6, #31
 800571c:	d0fa      	beq.n	8005714 <__gethex+0x420>
 800571e:	449a      	add	sl, r3
 8005720:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005724:	f000 f9a9 	bl	8005a7a <__hi0bits>
 8005728:	f1c6 0620 	rsb	r6, r6, #32
 800572c:	42b0      	cmp	r0, r6
 800572e:	dbe7      	blt.n	8005700 <__gethex+0x40c>
 8005730:	e7f0      	b.n	8005714 <__gethex+0x420>

08005732 <L_shift>:
 8005732:	f1c2 0208 	rsb	r2, r2, #8
 8005736:	0092      	lsls	r2, r2, #2
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	f1c2 0620 	rsb	r6, r2, #32
 800573e:	6843      	ldr	r3, [r0, #4]
 8005740:	6804      	ldr	r4, [r0, #0]
 8005742:	fa03 f506 	lsl.w	r5, r3, r6
 8005746:	432c      	orrs	r4, r5
 8005748:	40d3      	lsrs	r3, r2
 800574a:	6004      	str	r4, [r0, #0]
 800574c:	f840 3f04 	str.w	r3, [r0, #4]!
 8005750:	4288      	cmp	r0, r1
 8005752:	d3f4      	bcc.n	800573e <L_shift+0xc>
 8005754:	bd70      	pop	{r4, r5, r6, pc}

08005756 <__match>:
 8005756:	b530      	push	{r4, r5, lr}
 8005758:	6803      	ldr	r3, [r0, #0]
 800575a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800575e:	3301      	adds	r3, #1
 8005760:	b914      	cbnz	r4, 8005768 <__match+0x12>
 8005762:	6003      	str	r3, [r0, #0]
 8005764:	2001      	movs	r0, #1
 8005766:	bd30      	pop	{r4, r5, pc}
 8005768:	781a      	ldrb	r2, [r3, #0]
 800576a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800576e:	2d19      	cmp	r5, #25
 8005770:	bf98      	it	ls
 8005772:	3220      	addls	r2, #32
 8005774:	42a2      	cmp	r2, r4
 8005776:	d0f0      	beq.n	800575a <__match+0x4>
 8005778:	2000      	movs	r0, #0
 800577a:	bd30      	pop	{r4, r5, pc}

0800577c <__hexnan>:
 800577c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005780:	2500      	movs	r5, #0
 8005782:	680b      	ldr	r3, [r1, #0]
 8005784:	4682      	mov	sl, r0
 8005786:	115f      	asrs	r7, r3, #5
 8005788:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800578c:	f013 031f 	ands.w	r3, r3, #31
 8005790:	bf18      	it	ne
 8005792:	3704      	addne	r7, #4
 8005794:	1f3e      	subs	r6, r7, #4
 8005796:	4690      	mov	r8, r2
 8005798:	46b1      	mov	r9, r6
 800579a:	4634      	mov	r4, r6
 800579c:	46ab      	mov	fp, r5
 800579e:	b087      	sub	sp, #28
 80057a0:	6801      	ldr	r1, [r0, #0]
 80057a2:	9302      	str	r3, [sp, #8]
 80057a4:	f847 5c04 	str.w	r5, [r7, #-4]
 80057a8:	9501      	str	r5, [sp, #4]
 80057aa:	784a      	ldrb	r2, [r1, #1]
 80057ac:	1c4b      	adds	r3, r1, #1
 80057ae:	9303      	str	r3, [sp, #12]
 80057b0:	b342      	cbz	r2, 8005804 <__hexnan+0x88>
 80057b2:	4610      	mov	r0, r2
 80057b4:	9105      	str	r1, [sp, #20]
 80057b6:	9204      	str	r2, [sp, #16]
 80057b8:	f7ff fd87 	bl	80052ca <__hexdig_fun>
 80057bc:	2800      	cmp	r0, #0
 80057be:	d143      	bne.n	8005848 <__hexnan+0xcc>
 80057c0:	9a04      	ldr	r2, [sp, #16]
 80057c2:	9905      	ldr	r1, [sp, #20]
 80057c4:	2a20      	cmp	r2, #32
 80057c6:	d818      	bhi.n	80057fa <__hexnan+0x7e>
 80057c8:	9b01      	ldr	r3, [sp, #4]
 80057ca:	459b      	cmp	fp, r3
 80057cc:	dd13      	ble.n	80057f6 <__hexnan+0x7a>
 80057ce:	454c      	cmp	r4, r9
 80057d0:	d206      	bcs.n	80057e0 <__hexnan+0x64>
 80057d2:	2d07      	cmp	r5, #7
 80057d4:	dc04      	bgt.n	80057e0 <__hexnan+0x64>
 80057d6:	462a      	mov	r2, r5
 80057d8:	4649      	mov	r1, r9
 80057da:	4620      	mov	r0, r4
 80057dc:	f7ff ffa9 	bl	8005732 <L_shift>
 80057e0:	4544      	cmp	r4, r8
 80057e2:	d944      	bls.n	800586e <__hexnan+0xf2>
 80057e4:	2300      	movs	r3, #0
 80057e6:	f1a4 0904 	sub.w	r9, r4, #4
 80057ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80057ee:	461d      	mov	r5, r3
 80057f0:	464c      	mov	r4, r9
 80057f2:	f8cd b004 	str.w	fp, [sp, #4]
 80057f6:	9903      	ldr	r1, [sp, #12]
 80057f8:	e7d7      	b.n	80057aa <__hexnan+0x2e>
 80057fa:	2a29      	cmp	r2, #41	; 0x29
 80057fc:	d14a      	bne.n	8005894 <__hexnan+0x118>
 80057fe:	3102      	adds	r1, #2
 8005800:	f8ca 1000 	str.w	r1, [sl]
 8005804:	f1bb 0f00 	cmp.w	fp, #0
 8005808:	d044      	beq.n	8005894 <__hexnan+0x118>
 800580a:	454c      	cmp	r4, r9
 800580c:	d206      	bcs.n	800581c <__hexnan+0xa0>
 800580e:	2d07      	cmp	r5, #7
 8005810:	dc04      	bgt.n	800581c <__hexnan+0xa0>
 8005812:	462a      	mov	r2, r5
 8005814:	4649      	mov	r1, r9
 8005816:	4620      	mov	r0, r4
 8005818:	f7ff ff8b 	bl	8005732 <L_shift>
 800581c:	4544      	cmp	r4, r8
 800581e:	d928      	bls.n	8005872 <__hexnan+0xf6>
 8005820:	4643      	mov	r3, r8
 8005822:	f854 2b04 	ldr.w	r2, [r4], #4
 8005826:	42a6      	cmp	r6, r4
 8005828:	f843 2b04 	str.w	r2, [r3], #4
 800582c:	d2f9      	bcs.n	8005822 <__hexnan+0xa6>
 800582e:	2200      	movs	r2, #0
 8005830:	f843 2b04 	str.w	r2, [r3], #4
 8005834:	429e      	cmp	r6, r3
 8005836:	d2fb      	bcs.n	8005830 <__hexnan+0xb4>
 8005838:	6833      	ldr	r3, [r6, #0]
 800583a:	b91b      	cbnz	r3, 8005844 <__hexnan+0xc8>
 800583c:	4546      	cmp	r6, r8
 800583e:	d127      	bne.n	8005890 <__hexnan+0x114>
 8005840:	2301      	movs	r3, #1
 8005842:	6033      	str	r3, [r6, #0]
 8005844:	2005      	movs	r0, #5
 8005846:	e026      	b.n	8005896 <__hexnan+0x11a>
 8005848:	3501      	adds	r5, #1
 800584a:	2d08      	cmp	r5, #8
 800584c:	f10b 0b01 	add.w	fp, fp, #1
 8005850:	dd06      	ble.n	8005860 <__hexnan+0xe4>
 8005852:	4544      	cmp	r4, r8
 8005854:	d9cf      	bls.n	80057f6 <__hexnan+0x7a>
 8005856:	2300      	movs	r3, #0
 8005858:	2501      	movs	r5, #1
 800585a:	f844 3c04 	str.w	r3, [r4, #-4]
 800585e:	3c04      	subs	r4, #4
 8005860:	6822      	ldr	r2, [r4, #0]
 8005862:	f000 000f 	and.w	r0, r0, #15
 8005866:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800586a:	6020      	str	r0, [r4, #0]
 800586c:	e7c3      	b.n	80057f6 <__hexnan+0x7a>
 800586e:	2508      	movs	r5, #8
 8005870:	e7c1      	b.n	80057f6 <__hexnan+0x7a>
 8005872:	9b02      	ldr	r3, [sp, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0df      	beq.n	8005838 <__hexnan+0xbc>
 8005878:	f04f 32ff 	mov.w	r2, #4294967295
 800587c:	f1c3 0320 	rsb	r3, r3, #32
 8005880:	fa22 f303 	lsr.w	r3, r2, r3
 8005884:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005888:	401a      	ands	r2, r3
 800588a:	f847 2c04 	str.w	r2, [r7, #-4]
 800588e:	e7d3      	b.n	8005838 <__hexnan+0xbc>
 8005890:	3e04      	subs	r6, #4
 8005892:	e7d1      	b.n	8005838 <__hexnan+0xbc>
 8005894:	2004      	movs	r0, #4
 8005896:	b007      	add	sp, #28
 8005898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800589c <__locale_ctype_ptr_l>:
 800589c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80058a0:	4770      	bx	lr

080058a2 <__localeconv_l>:
 80058a2:	30f0      	adds	r0, #240	; 0xf0
 80058a4:	4770      	bx	lr
	...

080058a8 <malloc>:
 80058a8:	4b02      	ldr	r3, [pc, #8]	; (80058b4 <malloc+0xc>)
 80058aa:	4601      	mov	r1, r0
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	f000 bc61 	b.w	8006174 <_malloc_r>
 80058b2:	bf00      	nop
 80058b4:	20000004 	.word	0x20000004

080058b8 <__ascii_mbtowc>:
 80058b8:	b082      	sub	sp, #8
 80058ba:	b901      	cbnz	r1, 80058be <__ascii_mbtowc+0x6>
 80058bc:	a901      	add	r1, sp, #4
 80058be:	b142      	cbz	r2, 80058d2 <__ascii_mbtowc+0x1a>
 80058c0:	b14b      	cbz	r3, 80058d6 <__ascii_mbtowc+0x1e>
 80058c2:	7813      	ldrb	r3, [r2, #0]
 80058c4:	600b      	str	r3, [r1, #0]
 80058c6:	7812      	ldrb	r2, [r2, #0]
 80058c8:	1c10      	adds	r0, r2, #0
 80058ca:	bf18      	it	ne
 80058cc:	2001      	movne	r0, #1
 80058ce:	b002      	add	sp, #8
 80058d0:	4770      	bx	lr
 80058d2:	4610      	mov	r0, r2
 80058d4:	e7fb      	b.n	80058ce <__ascii_mbtowc+0x16>
 80058d6:	f06f 0001 	mvn.w	r0, #1
 80058da:	e7f8      	b.n	80058ce <__ascii_mbtowc+0x16>

080058dc <memcpy>:
 80058dc:	b510      	push	{r4, lr}
 80058de:	1e43      	subs	r3, r0, #1
 80058e0:	440a      	add	r2, r1
 80058e2:	4291      	cmp	r1, r2
 80058e4:	d100      	bne.n	80058e8 <memcpy+0xc>
 80058e6:	bd10      	pop	{r4, pc}
 80058e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058f0:	e7f7      	b.n	80058e2 <memcpy+0x6>

080058f2 <_Balloc>:
 80058f2:	b570      	push	{r4, r5, r6, lr}
 80058f4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80058f6:	4604      	mov	r4, r0
 80058f8:	460e      	mov	r6, r1
 80058fa:	b93d      	cbnz	r5, 800590c <_Balloc+0x1a>
 80058fc:	2010      	movs	r0, #16
 80058fe:	f7ff ffd3 	bl	80058a8 <malloc>
 8005902:	6260      	str	r0, [r4, #36]	; 0x24
 8005904:	6045      	str	r5, [r0, #4]
 8005906:	6085      	str	r5, [r0, #8]
 8005908:	6005      	str	r5, [r0, #0]
 800590a:	60c5      	str	r5, [r0, #12]
 800590c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800590e:	68eb      	ldr	r3, [r5, #12]
 8005910:	b183      	cbz	r3, 8005934 <_Balloc+0x42>
 8005912:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800591a:	b9b8      	cbnz	r0, 800594c <_Balloc+0x5a>
 800591c:	2101      	movs	r1, #1
 800591e:	fa01 f506 	lsl.w	r5, r1, r6
 8005922:	1d6a      	adds	r2, r5, #5
 8005924:	0092      	lsls	r2, r2, #2
 8005926:	4620      	mov	r0, r4
 8005928:	f000 fbca 	bl	80060c0 <_calloc_r>
 800592c:	b160      	cbz	r0, 8005948 <_Balloc+0x56>
 800592e:	6046      	str	r6, [r0, #4]
 8005930:	6085      	str	r5, [r0, #8]
 8005932:	e00e      	b.n	8005952 <_Balloc+0x60>
 8005934:	2221      	movs	r2, #33	; 0x21
 8005936:	2104      	movs	r1, #4
 8005938:	4620      	mov	r0, r4
 800593a:	f000 fbc1 	bl	80060c0 <_calloc_r>
 800593e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005940:	60e8      	str	r0, [r5, #12]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e4      	bne.n	8005912 <_Balloc+0x20>
 8005948:	2000      	movs	r0, #0
 800594a:	bd70      	pop	{r4, r5, r6, pc}
 800594c:	6802      	ldr	r2, [r0, #0]
 800594e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005952:	2300      	movs	r3, #0
 8005954:	6103      	str	r3, [r0, #16]
 8005956:	60c3      	str	r3, [r0, #12]
 8005958:	bd70      	pop	{r4, r5, r6, pc}

0800595a <_Bfree>:
 800595a:	b570      	push	{r4, r5, r6, lr}
 800595c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800595e:	4606      	mov	r6, r0
 8005960:	460d      	mov	r5, r1
 8005962:	b93c      	cbnz	r4, 8005974 <_Bfree+0x1a>
 8005964:	2010      	movs	r0, #16
 8005966:	f7ff ff9f 	bl	80058a8 <malloc>
 800596a:	6270      	str	r0, [r6, #36]	; 0x24
 800596c:	6044      	str	r4, [r0, #4]
 800596e:	6084      	str	r4, [r0, #8]
 8005970:	6004      	str	r4, [r0, #0]
 8005972:	60c4      	str	r4, [r0, #12]
 8005974:	b13d      	cbz	r5, 8005986 <_Bfree+0x2c>
 8005976:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005978:	686a      	ldr	r2, [r5, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005980:	6029      	str	r1, [r5, #0]
 8005982:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005986:	bd70      	pop	{r4, r5, r6, pc}

08005988 <__multadd>:
 8005988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800598c:	461f      	mov	r7, r3
 800598e:	4606      	mov	r6, r0
 8005990:	460c      	mov	r4, r1
 8005992:	2300      	movs	r3, #0
 8005994:	690d      	ldr	r5, [r1, #16]
 8005996:	f101 0e14 	add.w	lr, r1, #20
 800599a:	f8de 0000 	ldr.w	r0, [lr]
 800599e:	3301      	adds	r3, #1
 80059a0:	b281      	uxth	r1, r0
 80059a2:	fb02 7101 	mla	r1, r2, r1, r7
 80059a6:	0c00      	lsrs	r0, r0, #16
 80059a8:	0c0f      	lsrs	r7, r1, #16
 80059aa:	fb02 7000 	mla	r0, r2, r0, r7
 80059ae:	b289      	uxth	r1, r1
 80059b0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80059b4:	429d      	cmp	r5, r3
 80059b6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80059ba:	f84e 1b04 	str.w	r1, [lr], #4
 80059be:	dcec      	bgt.n	800599a <__multadd+0x12>
 80059c0:	b1d7      	cbz	r7, 80059f8 <__multadd+0x70>
 80059c2:	68a3      	ldr	r3, [r4, #8]
 80059c4:	429d      	cmp	r5, r3
 80059c6:	db12      	blt.n	80059ee <__multadd+0x66>
 80059c8:	6861      	ldr	r1, [r4, #4]
 80059ca:	4630      	mov	r0, r6
 80059cc:	3101      	adds	r1, #1
 80059ce:	f7ff ff90 	bl	80058f2 <_Balloc>
 80059d2:	4680      	mov	r8, r0
 80059d4:	6922      	ldr	r2, [r4, #16]
 80059d6:	f104 010c 	add.w	r1, r4, #12
 80059da:	3202      	adds	r2, #2
 80059dc:	0092      	lsls	r2, r2, #2
 80059de:	300c      	adds	r0, #12
 80059e0:	f7ff ff7c 	bl	80058dc <memcpy>
 80059e4:	4621      	mov	r1, r4
 80059e6:	4630      	mov	r0, r6
 80059e8:	f7ff ffb7 	bl	800595a <_Bfree>
 80059ec:	4644      	mov	r4, r8
 80059ee:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059f2:	3501      	adds	r5, #1
 80059f4:	615f      	str	r7, [r3, #20]
 80059f6:	6125      	str	r5, [r4, #16]
 80059f8:	4620      	mov	r0, r4
 80059fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080059fe <__s2b>:
 80059fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a02:	4615      	mov	r5, r2
 8005a04:	2209      	movs	r2, #9
 8005a06:	461f      	mov	r7, r3
 8005a08:	3308      	adds	r3, #8
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a10:	4606      	mov	r6, r0
 8005a12:	2201      	movs	r2, #1
 8005a14:	2100      	movs	r1, #0
 8005a16:	429a      	cmp	r2, r3
 8005a18:	db20      	blt.n	8005a5c <__s2b+0x5e>
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	f7ff ff69 	bl	80058f2 <_Balloc>
 8005a20:	9b08      	ldr	r3, [sp, #32]
 8005a22:	2d09      	cmp	r5, #9
 8005a24:	6143      	str	r3, [r0, #20]
 8005a26:	f04f 0301 	mov.w	r3, #1
 8005a2a:	6103      	str	r3, [r0, #16]
 8005a2c:	dd19      	ble.n	8005a62 <__s2b+0x64>
 8005a2e:	f104 0909 	add.w	r9, r4, #9
 8005a32:	46c8      	mov	r8, r9
 8005a34:	442c      	add	r4, r5
 8005a36:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005a3a:	4601      	mov	r1, r0
 8005a3c:	3b30      	subs	r3, #48	; 0x30
 8005a3e:	220a      	movs	r2, #10
 8005a40:	4630      	mov	r0, r6
 8005a42:	f7ff ffa1 	bl	8005988 <__multadd>
 8005a46:	45a0      	cmp	r8, r4
 8005a48:	d1f5      	bne.n	8005a36 <__s2b+0x38>
 8005a4a:	f1a5 0408 	sub.w	r4, r5, #8
 8005a4e:	444c      	add	r4, r9
 8005a50:	1b2d      	subs	r5, r5, r4
 8005a52:	1963      	adds	r3, r4, r5
 8005a54:	42bb      	cmp	r3, r7
 8005a56:	db07      	blt.n	8005a68 <__s2b+0x6a>
 8005a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a5c:	0052      	lsls	r2, r2, #1
 8005a5e:	3101      	adds	r1, #1
 8005a60:	e7d9      	b.n	8005a16 <__s2b+0x18>
 8005a62:	340a      	adds	r4, #10
 8005a64:	2509      	movs	r5, #9
 8005a66:	e7f3      	b.n	8005a50 <__s2b+0x52>
 8005a68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005a6c:	4601      	mov	r1, r0
 8005a6e:	3b30      	subs	r3, #48	; 0x30
 8005a70:	220a      	movs	r2, #10
 8005a72:	4630      	mov	r0, r6
 8005a74:	f7ff ff88 	bl	8005988 <__multadd>
 8005a78:	e7eb      	b.n	8005a52 <__s2b+0x54>

08005a7a <__hi0bits>:
 8005a7a:	0c02      	lsrs	r2, r0, #16
 8005a7c:	0412      	lsls	r2, r2, #16
 8005a7e:	4603      	mov	r3, r0
 8005a80:	b9b2      	cbnz	r2, 8005ab0 <__hi0bits+0x36>
 8005a82:	0403      	lsls	r3, r0, #16
 8005a84:	2010      	movs	r0, #16
 8005a86:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005a8a:	bf04      	itt	eq
 8005a8c:	021b      	lsleq	r3, r3, #8
 8005a8e:	3008      	addeq	r0, #8
 8005a90:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005a94:	bf04      	itt	eq
 8005a96:	011b      	lsleq	r3, r3, #4
 8005a98:	3004      	addeq	r0, #4
 8005a9a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005a9e:	bf04      	itt	eq
 8005aa0:	009b      	lsleq	r3, r3, #2
 8005aa2:	3002      	addeq	r0, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	db06      	blt.n	8005ab6 <__hi0bits+0x3c>
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	d503      	bpl.n	8005ab4 <__hi0bits+0x3a>
 8005aac:	3001      	adds	r0, #1
 8005aae:	4770      	bx	lr
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	e7e8      	b.n	8005a86 <__hi0bits+0xc>
 8005ab4:	2020      	movs	r0, #32
 8005ab6:	4770      	bx	lr

08005ab8 <__lo0bits>:
 8005ab8:	6803      	ldr	r3, [r0, #0]
 8005aba:	4601      	mov	r1, r0
 8005abc:	f013 0207 	ands.w	r2, r3, #7
 8005ac0:	d00b      	beq.n	8005ada <__lo0bits+0x22>
 8005ac2:	07da      	lsls	r2, r3, #31
 8005ac4:	d423      	bmi.n	8005b0e <__lo0bits+0x56>
 8005ac6:	0798      	lsls	r0, r3, #30
 8005ac8:	bf49      	itett	mi
 8005aca:	085b      	lsrmi	r3, r3, #1
 8005acc:	089b      	lsrpl	r3, r3, #2
 8005ace:	2001      	movmi	r0, #1
 8005ad0:	600b      	strmi	r3, [r1, #0]
 8005ad2:	bf5c      	itt	pl
 8005ad4:	600b      	strpl	r3, [r1, #0]
 8005ad6:	2002      	movpl	r0, #2
 8005ad8:	4770      	bx	lr
 8005ada:	b298      	uxth	r0, r3
 8005adc:	b9a8      	cbnz	r0, 8005b0a <__lo0bits+0x52>
 8005ade:	2010      	movs	r0, #16
 8005ae0:	0c1b      	lsrs	r3, r3, #16
 8005ae2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005ae6:	bf04      	itt	eq
 8005ae8:	0a1b      	lsreq	r3, r3, #8
 8005aea:	3008      	addeq	r0, #8
 8005aec:	071a      	lsls	r2, r3, #28
 8005aee:	bf04      	itt	eq
 8005af0:	091b      	lsreq	r3, r3, #4
 8005af2:	3004      	addeq	r0, #4
 8005af4:	079a      	lsls	r2, r3, #30
 8005af6:	bf04      	itt	eq
 8005af8:	089b      	lsreq	r3, r3, #2
 8005afa:	3002      	addeq	r0, #2
 8005afc:	07da      	lsls	r2, r3, #31
 8005afe:	d402      	bmi.n	8005b06 <__lo0bits+0x4e>
 8005b00:	085b      	lsrs	r3, r3, #1
 8005b02:	d006      	beq.n	8005b12 <__lo0bits+0x5a>
 8005b04:	3001      	adds	r0, #1
 8005b06:	600b      	str	r3, [r1, #0]
 8005b08:	4770      	bx	lr
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	e7e9      	b.n	8005ae2 <__lo0bits+0x2a>
 8005b0e:	2000      	movs	r0, #0
 8005b10:	4770      	bx	lr
 8005b12:	2020      	movs	r0, #32
 8005b14:	4770      	bx	lr

08005b16 <__i2b>:
 8005b16:	b510      	push	{r4, lr}
 8005b18:	460c      	mov	r4, r1
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	f7ff fee9 	bl	80058f2 <_Balloc>
 8005b20:	2201      	movs	r2, #1
 8005b22:	6144      	str	r4, [r0, #20]
 8005b24:	6102      	str	r2, [r0, #16]
 8005b26:	bd10      	pop	{r4, pc}

08005b28 <__multiply>:
 8005b28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b2c:	4614      	mov	r4, r2
 8005b2e:	690a      	ldr	r2, [r1, #16]
 8005b30:	6923      	ldr	r3, [r4, #16]
 8005b32:	4689      	mov	r9, r1
 8005b34:	429a      	cmp	r2, r3
 8005b36:	bfbe      	ittt	lt
 8005b38:	460b      	movlt	r3, r1
 8005b3a:	46a1      	movlt	r9, r4
 8005b3c:	461c      	movlt	r4, r3
 8005b3e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005b42:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005b46:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005b4a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005b4e:	eb07 060a 	add.w	r6, r7, sl
 8005b52:	429e      	cmp	r6, r3
 8005b54:	bfc8      	it	gt
 8005b56:	3101      	addgt	r1, #1
 8005b58:	f7ff fecb 	bl	80058f2 <_Balloc>
 8005b5c:	f100 0514 	add.w	r5, r0, #20
 8005b60:	462b      	mov	r3, r5
 8005b62:	2200      	movs	r2, #0
 8005b64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005b68:	4543      	cmp	r3, r8
 8005b6a:	d316      	bcc.n	8005b9a <__multiply+0x72>
 8005b6c:	f104 0214 	add.w	r2, r4, #20
 8005b70:	f109 0114 	add.w	r1, r9, #20
 8005b74:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8005b78:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005b7c:	9301      	str	r3, [sp, #4]
 8005b7e:	9c01      	ldr	r4, [sp, #4]
 8005b80:	4613      	mov	r3, r2
 8005b82:	4294      	cmp	r4, r2
 8005b84:	d80c      	bhi.n	8005ba0 <__multiply+0x78>
 8005b86:	2e00      	cmp	r6, #0
 8005b88:	dd03      	ble.n	8005b92 <__multiply+0x6a>
 8005b8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d054      	beq.n	8005c3c <__multiply+0x114>
 8005b92:	6106      	str	r6, [r0, #16]
 8005b94:	b003      	add	sp, #12
 8005b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b9a:	f843 2b04 	str.w	r2, [r3], #4
 8005b9e:	e7e3      	b.n	8005b68 <__multiply+0x40>
 8005ba0:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ba4:	3204      	adds	r2, #4
 8005ba6:	f1ba 0f00 	cmp.w	sl, #0
 8005baa:	d020      	beq.n	8005bee <__multiply+0xc6>
 8005bac:	46ae      	mov	lr, r5
 8005bae:	4689      	mov	r9, r1
 8005bb0:	f04f 0c00 	mov.w	ip, #0
 8005bb4:	f859 4b04 	ldr.w	r4, [r9], #4
 8005bb8:	f8be b000 	ldrh.w	fp, [lr]
 8005bbc:	b2a3      	uxth	r3, r4
 8005bbe:	fb0a b303 	mla	r3, sl, r3, fp
 8005bc2:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8005bc6:	f8de 4000 	ldr.w	r4, [lr]
 8005bca:	4463      	add	r3, ip
 8005bcc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005bd0:	fb0a c40b 	mla	r4, sl, fp, ip
 8005bd4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005bde:	454f      	cmp	r7, r9
 8005be0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005be4:	f84e 3b04 	str.w	r3, [lr], #4
 8005be8:	d8e4      	bhi.n	8005bb4 <__multiply+0x8c>
 8005bea:	f8ce c000 	str.w	ip, [lr]
 8005bee:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8005bf2:	f1b9 0f00 	cmp.w	r9, #0
 8005bf6:	d01f      	beq.n	8005c38 <__multiply+0x110>
 8005bf8:	46ae      	mov	lr, r5
 8005bfa:	468c      	mov	ip, r1
 8005bfc:	f04f 0a00 	mov.w	sl, #0
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	f8bc 4000 	ldrh.w	r4, [ip]
 8005c06:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	fb09 b404 	mla	r4, r9, r4, fp
 8005c10:	44a2      	add	sl, r4
 8005c12:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8005c16:	f84e 3b04 	str.w	r3, [lr], #4
 8005c1a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005c1e:	f8be 4000 	ldrh.w	r4, [lr]
 8005c22:	0c1b      	lsrs	r3, r3, #16
 8005c24:	fb09 4303 	mla	r3, r9, r3, r4
 8005c28:	4567      	cmp	r7, ip
 8005c2a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8005c2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c32:	d8e6      	bhi.n	8005c02 <__multiply+0xda>
 8005c34:	f8ce 3000 	str.w	r3, [lr]
 8005c38:	3504      	adds	r5, #4
 8005c3a:	e7a0      	b.n	8005b7e <__multiply+0x56>
 8005c3c:	3e01      	subs	r6, #1
 8005c3e:	e7a2      	b.n	8005b86 <__multiply+0x5e>

08005c40 <__pow5mult>:
 8005c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c44:	4615      	mov	r5, r2
 8005c46:	f012 0203 	ands.w	r2, r2, #3
 8005c4a:	4606      	mov	r6, r0
 8005c4c:	460f      	mov	r7, r1
 8005c4e:	d007      	beq.n	8005c60 <__pow5mult+0x20>
 8005c50:	4c21      	ldr	r4, [pc, #132]	; (8005cd8 <__pow5mult+0x98>)
 8005c52:	3a01      	subs	r2, #1
 8005c54:	2300      	movs	r3, #0
 8005c56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c5a:	f7ff fe95 	bl	8005988 <__multadd>
 8005c5e:	4607      	mov	r7, r0
 8005c60:	10ad      	asrs	r5, r5, #2
 8005c62:	d035      	beq.n	8005cd0 <__pow5mult+0x90>
 8005c64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005c66:	b93c      	cbnz	r4, 8005c78 <__pow5mult+0x38>
 8005c68:	2010      	movs	r0, #16
 8005c6a:	f7ff fe1d 	bl	80058a8 <malloc>
 8005c6e:	6270      	str	r0, [r6, #36]	; 0x24
 8005c70:	6044      	str	r4, [r0, #4]
 8005c72:	6084      	str	r4, [r0, #8]
 8005c74:	6004      	str	r4, [r0, #0]
 8005c76:	60c4      	str	r4, [r0, #12]
 8005c78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c80:	b94c      	cbnz	r4, 8005c96 <__pow5mult+0x56>
 8005c82:	f240 2171 	movw	r1, #625	; 0x271
 8005c86:	4630      	mov	r0, r6
 8005c88:	f7ff ff45 	bl	8005b16 <__i2b>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	4604      	mov	r4, r0
 8005c90:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c94:	6003      	str	r3, [r0, #0]
 8005c96:	f04f 0800 	mov.w	r8, #0
 8005c9a:	07eb      	lsls	r3, r5, #31
 8005c9c:	d50a      	bpl.n	8005cb4 <__pow5mult+0x74>
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	4622      	mov	r2, r4
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f7ff ff40 	bl	8005b28 <__multiply>
 8005ca8:	4681      	mov	r9, r0
 8005caa:	4639      	mov	r1, r7
 8005cac:	4630      	mov	r0, r6
 8005cae:	f7ff fe54 	bl	800595a <_Bfree>
 8005cb2:	464f      	mov	r7, r9
 8005cb4:	106d      	asrs	r5, r5, #1
 8005cb6:	d00b      	beq.n	8005cd0 <__pow5mult+0x90>
 8005cb8:	6820      	ldr	r0, [r4, #0]
 8005cba:	b938      	cbnz	r0, 8005ccc <__pow5mult+0x8c>
 8005cbc:	4622      	mov	r2, r4
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f7ff ff31 	bl	8005b28 <__multiply>
 8005cc6:	6020      	str	r0, [r4, #0]
 8005cc8:	f8c0 8000 	str.w	r8, [r0]
 8005ccc:	4604      	mov	r4, r0
 8005cce:	e7e4      	b.n	8005c9a <__pow5mult+0x5a>
 8005cd0:	4638      	mov	r0, r7
 8005cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cd6:	bf00      	nop
 8005cd8:	08006b40 	.word	0x08006b40

08005cdc <__lshift>:
 8005cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	4607      	mov	r7, r0
 8005ce4:	4616      	mov	r6, r2
 8005ce6:	6923      	ldr	r3, [r4, #16]
 8005ce8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cec:	eb0a 0903 	add.w	r9, sl, r3
 8005cf0:	6849      	ldr	r1, [r1, #4]
 8005cf2:	68a3      	ldr	r3, [r4, #8]
 8005cf4:	f109 0501 	add.w	r5, r9, #1
 8005cf8:	42ab      	cmp	r3, r5
 8005cfa:	db31      	blt.n	8005d60 <__lshift+0x84>
 8005cfc:	4638      	mov	r0, r7
 8005cfe:	f7ff fdf8 	bl	80058f2 <_Balloc>
 8005d02:	2200      	movs	r2, #0
 8005d04:	4680      	mov	r8, r0
 8005d06:	4611      	mov	r1, r2
 8005d08:	f100 0314 	add.w	r3, r0, #20
 8005d0c:	4552      	cmp	r2, sl
 8005d0e:	db2a      	blt.n	8005d66 <__lshift+0x8a>
 8005d10:	6920      	ldr	r0, [r4, #16]
 8005d12:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d16:	f104 0114 	add.w	r1, r4, #20
 8005d1a:	f016 021f 	ands.w	r2, r6, #31
 8005d1e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8005d22:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8005d26:	d022      	beq.n	8005d6e <__lshift+0x92>
 8005d28:	2000      	movs	r0, #0
 8005d2a:	f1c2 0c20 	rsb	ip, r2, #32
 8005d2e:	680e      	ldr	r6, [r1, #0]
 8005d30:	4096      	lsls	r6, r2
 8005d32:	4330      	orrs	r0, r6
 8005d34:	f843 0b04 	str.w	r0, [r3], #4
 8005d38:	f851 0b04 	ldr.w	r0, [r1], #4
 8005d3c:	458e      	cmp	lr, r1
 8005d3e:	fa20 f00c 	lsr.w	r0, r0, ip
 8005d42:	d8f4      	bhi.n	8005d2e <__lshift+0x52>
 8005d44:	6018      	str	r0, [r3, #0]
 8005d46:	b108      	cbz	r0, 8005d4c <__lshift+0x70>
 8005d48:	f109 0502 	add.w	r5, r9, #2
 8005d4c:	3d01      	subs	r5, #1
 8005d4e:	4638      	mov	r0, r7
 8005d50:	f8c8 5010 	str.w	r5, [r8, #16]
 8005d54:	4621      	mov	r1, r4
 8005d56:	f7ff fe00 	bl	800595a <_Bfree>
 8005d5a:	4640      	mov	r0, r8
 8005d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d60:	3101      	adds	r1, #1
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	e7c8      	b.n	8005cf8 <__lshift+0x1c>
 8005d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005d6a:	3201      	adds	r2, #1
 8005d6c:	e7ce      	b.n	8005d0c <__lshift+0x30>
 8005d6e:	3b04      	subs	r3, #4
 8005d70:	f851 2b04 	ldr.w	r2, [r1], #4
 8005d74:	458e      	cmp	lr, r1
 8005d76:	f843 2f04 	str.w	r2, [r3, #4]!
 8005d7a:	d8f9      	bhi.n	8005d70 <__lshift+0x94>
 8005d7c:	e7e6      	b.n	8005d4c <__lshift+0x70>

08005d7e <__mcmp>:
 8005d7e:	6903      	ldr	r3, [r0, #16]
 8005d80:	690a      	ldr	r2, [r1, #16]
 8005d82:	b530      	push	{r4, r5, lr}
 8005d84:	1a9b      	subs	r3, r3, r2
 8005d86:	d10c      	bne.n	8005da2 <__mcmp+0x24>
 8005d88:	0092      	lsls	r2, r2, #2
 8005d8a:	3014      	adds	r0, #20
 8005d8c:	3114      	adds	r1, #20
 8005d8e:	1884      	adds	r4, r0, r2
 8005d90:	4411      	add	r1, r2
 8005d92:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d96:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d9a:	4295      	cmp	r5, r2
 8005d9c:	d003      	beq.n	8005da6 <__mcmp+0x28>
 8005d9e:	d305      	bcc.n	8005dac <__mcmp+0x2e>
 8005da0:	2301      	movs	r3, #1
 8005da2:	4618      	mov	r0, r3
 8005da4:	bd30      	pop	{r4, r5, pc}
 8005da6:	42a0      	cmp	r0, r4
 8005da8:	d3f3      	bcc.n	8005d92 <__mcmp+0x14>
 8005daa:	e7fa      	b.n	8005da2 <__mcmp+0x24>
 8005dac:	f04f 33ff 	mov.w	r3, #4294967295
 8005db0:	e7f7      	b.n	8005da2 <__mcmp+0x24>

08005db2 <__mdiff>:
 8005db2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db6:	460d      	mov	r5, r1
 8005db8:	4607      	mov	r7, r0
 8005dba:	4611      	mov	r1, r2
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	4614      	mov	r4, r2
 8005dc0:	f7ff ffdd 	bl	8005d7e <__mcmp>
 8005dc4:	1e06      	subs	r6, r0, #0
 8005dc6:	d108      	bne.n	8005dda <__mdiff+0x28>
 8005dc8:	4631      	mov	r1, r6
 8005dca:	4638      	mov	r0, r7
 8005dcc:	f7ff fd91 	bl	80058f2 <_Balloc>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	6146      	str	r6, [r0, #20]
 8005dd4:	6103      	str	r3, [r0, #16]
 8005dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dda:	bfa4      	itt	ge
 8005ddc:	4623      	movge	r3, r4
 8005dde:	462c      	movge	r4, r5
 8005de0:	4638      	mov	r0, r7
 8005de2:	6861      	ldr	r1, [r4, #4]
 8005de4:	bfa6      	itte	ge
 8005de6:	461d      	movge	r5, r3
 8005de8:	2600      	movge	r6, #0
 8005dea:	2601      	movlt	r6, #1
 8005dec:	f7ff fd81 	bl	80058f2 <_Balloc>
 8005df0:	f04f 0c00 	mov.w	ip, #0
 8005df4:	60c6      	str	r6, [r0, #12]
 8005df6:	692b      	ldr	r3, [r5, #16]
 8005df8:	6926      	ldr	r6, [r4, #16]
 8005dfa:	f104 0214 	add.w	r2, r4, #20
 8005dfe:	f105 0914 	add.w	r9, r5, #20
 8005e02:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005e06:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005e0a:	f100 0114 	add.w	r1, r0, #20
 8005e0e:	f852 ab04 	ldr.w	sl, [r2], #4
 8005e12:	f859 5b04 	ldr.w	r5, [r9], #4
 8005e16:	fa1f f38a 	uxth.w	r3, sl
 8005e1a:	4463      	add	r3, ip
 8005e1c:	b2ac      	uxth	r4, r5
 8005e1e:	1b1b      	subs	r3, r3, r4
 8005e20:	0c2c      	lsrs	r4, r5, #16
 8005e22:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005e26:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005e30:	45c8      	cmp	r8, r9
 8005e32:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005e36:	4696      	mov	lr, r2
 8005e38:	f841 4b04 	str.w	r4, [r1], #4
 8005e3c:	d8e7      	bhi.n	8005e0e <__mdiff+0x5c>
 8005e3e:	45be      	cmp	lr, r7
 8005e40:	d305      	bcc.n	8005e4e <__mdiff+0x9c>
 8005e42:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005e46:	b18b      	cbz	r3, 8005e6c <__mdiff+0xba>
 8005e48:	6106      	str	r6, [r0, #16]
 8005e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e4e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005e52:	b2a2      	uxth	r2, r4
 8005e54:	4462      	add	r2, ip
 8005e56:	1413      	asrs	r3, r2, #16
 8005e58:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005e5c:	b292      	uxth	r2, r2
 8005e5e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005e62:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005e66:	f841 2b04 	str.w	r2, [r1], #4
 8005e6a:	e7e8      	b.n	8005e3e <__mdiff+0x8c>
 8005e6c:	3e01      	subs	r6, #1
 8005e6e:	e7e8      	b.n	8005e42 <__mdiff+0x90>

08005e70 <__ulp>:
 8005e70:	4b10      	ldr	r3, [pc, #64]	; (8005eb4 <__ulp+0x44>)
 8005e72:	400b      	ands	r3, r1
 8005e74:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	dd02      	ble.n	8005e82 <__ulp+0x12>
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4770      	bx	lr
 8005e82:	425b      	negs	r3, r3
 8005e84:	151b      	asrs	r3, r3, #20
 8005e86:	2b13      	cmp	r3, #19
 8005e88:	f04f 0000 	mov.w	r0, #0
 8005e8c:	f04f 0100 	mov.w	r1, #0
 8005e90:	dc04      	bgt.n	8005e9c <__ulp+0x2c>
 8005e92:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005e96:	fa42 f103 	asr.w	r1, r2, r3
 8005e9a:	4770      	bx	lr
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	3b14      	subs	r3, #20
 8005ea0:	2b1e      	cmp	r3, #30
 8005ea2:	bfce      	itee	gt
 8005ea4:	4613      	movgt	r3, r2
 8005ea6:	f1c3 031f 	rsble	r3, r3, #31
 8005eaa:	fa02 f303 	lslle.w	r3, r2, r3
 8005eae:	4618      	mov	r0, r3
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	7ff00000 	.word	0x7ff00000

08005eb8 <__b2d>:
 8005eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ebc:	6907      	ldr	r7, [r0, #16]
 8005ebe:	f100 0914 	add.w	r9, r0, #20
 8005ec2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8005ec6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8005eca:	f1a7 0804 	sub.w	r8, r7, #4
 8005ece:	4630      	mov	r0, r6
 8005ed0:	f7ff fdd3 	bl	8005a7a <__hi0bits>
 8005ed4:	f1c0 0320 	rsb	r3, r0, #32
 8005ed8:	280a      	cmp	r0, #10
 8005eda:	600b      	str	r3, [r1, #0]
 8005edc:	491e      	ldr	r1, [pc, #120]	; (8005f58 <__b2d+0xa0>)
 8005ede:	dc17      	bgt.n	8005f10 <__b2d+0x58>
 8005ee0:	45c1      	cmp	r9, r8
 8005ee2:	bf28      	it	cs
 8005ee4:	2200      	movcs	r2, #0
 8005ee6:	f1c0 0e0b 	rsb	lr, r0, #11
 8005eea:	fa26 f30e 	lsr.w	r3, r6, lr
 8005eee:	bf38      	it	cc
 8005ef0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005ef4:	ea43 0501 	orr.w	r5, r3, r1
 8005ef8:	f100 0315 	add.w	r3, r0, #21
 8005efc:	fa06 f303 	lsl.w	r3, r6, r3
 8005f00:	fa22 f20e 	lsr.w	r2, r2, lr
 8005f04:	ea43 0402 	orr.w	r4, r3, r2
 8005f08:	4620      	mov	r0, r4
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f10:	45c1      	cmp	r9, r8
 8005f12:	bf3a      	itte	cc
 8005f14:	f1a7 0808 	subcc.w	r8, r7, #8
 8005f18:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005f1c:	2200      	movcs	r2, #0
 8005f1e:	f1b0 030b 	subs.w	r3, r0, #11
 8005f22:	d015      	beq.n	8005f50 <__b2d+0x98>
 8005f24:	409e      	lsls	r6, r3
 8005f26:	f1c3 0720 	rsb	r7, r3, #32
 8005f2a:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8005f2e:	fa22 f107 	lsr.w	r1, r2, r7
 8005f32:	45c8      	cmp	r8, r9
 8005f34:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8005f38:	ea46 0501 	orr.w	r5, r6, r1
 8005f3c:	bf94      	ite	ls
 8005f3e:	2100      	movls	r1, #0
 8005f40:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8005f44:	fa02 f003 	lsl.w	r0, r2, r3
 8005f48:	40f9      	lsrs	r1, r7
 8005f4a:	ea40 0401 	orr.w	r4, r0, r1
 8005f4e:	e7db      	b.n	8005f08 <__b2d+0x50>
 8005f50:	ea46 0501 	orr.w	r5, r6, r1
 8005f54:	4614      	mov	r4, r2
 8005f56:	e7d7      	b.n	8005f08 <__b2d+0x50>
 8005f58:	3ff00000 	.word	0x3ff00000

08005f5c <__d2b>:
 8005f5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005f60:	461c      	mov	r4, r3
 8005f62:	2101      	movs	r1, #1
 8005f64:	4690      	mov	r8, r2
 8005f66:	9e08      	ldr	r6, [sp, #32]
 8005f68:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005f6a:	f7ff fcc2 	bl	80058f2 <_Balloc>
 8005f6e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005f72:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005f76:	4607      	mov	r7, r0
 8005f78:	bb34      	cbnz	r4, 8005fc8 <__d2b+0x6c>
 8005f7a:	9201      	str	r2, [sp, #4]
 8005f7c:	f1b8 0f00 	cmp.w	r8, #0
 8005f80:	d027      	beq.n	8005fd2 <__d2b+0x76>
 8005f82:	a802      	add	r0, sp, #8
 8005f84:	f840 8d08 	str.w	r8, [r0, #-8]!
 8005f88:	f7ff fd96 	bl	8005ab8 <__lo0bits>
 8005f8c:	9900      	ldr	r1, [sp, #0]
 8005f8e:	b1f0      	cbz	r0, 8005fce <__d2b+0x72>
 8005f90:	9a01      	ldr	r2, [sp, #4]
 8005f92:	f1c0 0320 	rsb	r3, r0, #32
 8005f96:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9a:	430b      	orrs	r3, r1
 8005f9c:	40c2      	lsrs	r2, r0
 8005f9e:	617b      	str	r3, [r7, #20]
 8005fa0:	9201      	str	r2, [sp, #4]
 8005fa2:	9b01      	ldr	r3, [sp, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	bf14      	ite	ne
 8005fa8:	2102      	movne	r1, #2
 8005faa:	2101      	moveq	r1, #1
 8005fac:	61bb      	str	r3, [r7, #24]
 8005fae:	6139      	str	r1, [r7, #16]
 8005fb0:	b1c4      	cbz	r4, 8005fe4 <__d2b+0x88>
 8005fb2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005fb6:	4404      	add	r4, r0
 8005fb8:	6034      	str	r4, [r6, #0]
 8005fba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005fbe:	6028      	str	r0, [r5, #0]
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	b002      	add	sp, #8
 8005fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fc8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005fcc:	e7d5      	b.n	8005f7a <__d2b+0x1e>
 8005fce:	6179      	str	r1, [r7, #20]
 8005fd0:	e7e7      	b.n	8005fa2 <__d2b+0x46>
 8005fd2:	a801      	add	r0, sp, #4
 8005fd4:	f7ff fd70 	bl	8005ab8 <__lo0bits>
 8005fd8:	2101      	movs	r1, #1
 8005fda:	9b01      	ldr	r3, [sp, #4]
 8005fdc:	6139      	str	r1, [r7, #16]
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	3020      	adds	r0, #32
 8005fe2:	e7e5      	b.n	8005fb0 <__d2b+0x54>
 8005fe4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005fe8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005fec:	6030      	str	r0, [r6, #0]
 8005fee:	6918      	ldr	r0, [r3, #16]
 8005ff0:	f7ff fd43 	bl	8005a7a <__hi0bits>
 8005ff4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005ff8:	e7e1      	b.n	8005fbe <__d2b+0x62>

08005ffa <__ratio>:
 8005ffa:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005ffe:	4688      	mov	r8, r1
 8006000:	4669      	mov	r1, sp
 8006002:	4681      	mov	r9, r0
 8006004:	f7ff ff58 	bl	8005eb8 <__b2d>
 8006008:	460d      	mov	r5, r1
 800600a:	4604      	mov	r4, r0
 800600c:	a901      	add	r1, sp, #4
 800600e:	4640      	mov	r0, r8
 8006010:	f7ff ff52 	bl	8005eb8 <__b2d>
 8006014:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006018:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800601c:	9e00      	ldr	r6, [sp, #0]
 800601e:	1a9a      	subs	r2, r3, r2
 8006020:	9b01      	ldr	r3, [sp, #4]
 8006022:	1af3      	subs	r3, r6, r3
 8006024:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8006028:	2b00      	cmp	r3, #0
 800602a:	bfd6      	itet	le
 800602c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006030:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8006034:	eb01 5103 	addle.w	r1, r1, r3, lsl #20
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	4620      	mov	r0, r4
 800603e:	4629      	mov	r1, r5
 8006040:	f7fa fb88 	bl	8000754 <__aeabi_ddiv>
 8006044:	b002      	add	sp, #8
 8006046:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0800604a <__copybits>:
 800604a:	3901      	subs	r1, #1
 800604c:	b510      	push	{r4, lr}
 800604e:	1149      	asrs	r1, r1, #5
 8006050:	6914      	ldr	r4, [r2, #16]
 8006052:	3101      	adds	r1, #1
 8006054:	f102 0314 	add.w	r3, r2, #20
 8006058:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800605c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006060:	42a3      	cmp	r3, r4
 8006062:	4602      	mov	r2, r0
 8006064:	d303      	bcc.n	800606e <__copybits+0x24>
 8006066:	2300      	movs	r3, #0
 8006068:	428a      	cmp	r2, r1
 800606a:	d305      	bcc.n	8006078 <__copybits+0x2e>
 800606c:	bd10      	pop	{r4, pc}
 800606e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006072:	f840 2b04 	str.w	r2, [r0], #4
 8006076:	e7f3      	b.n	8006060 <__copybits+0x16>
 8006078:	f842 3b04 	str.w	r3, [r2], #4
 800607c:	e7f4      	b.n	8006068 <__copybits+0x1e>

0800607e <__any_on>:
 800607e:	f100 0214 	add.w	r2, r0, #20
 8006082:	6900      	ldr	r0, [r0, #16]
 8006084:	114b      	asrs	r3, r1, #5
 8006086:	4298      	cmp	r0, r3
 8006088:	b510      	push	{r4, lr}
 800608a:	db11      	blt.n	80060b0 <__any_on+0x32>
 800608c:	dd0a      	ble.n	80060a4 <__any_on+0x26>
 800608e:	f011 011f 	ands.w	r1, r1, #31
 8006092:	d007      	beq.n	80060a4 <__any_on+0x26>
 8006094:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006098:	fa24 f001 	lsr.w	r0, r4, r1
 800609c:	fa00 f101 	lsl.w	r1, r0, r1
 80060a0:	428c      	cmp	r4, r1
 80060a2:	d10b      	bne.n	80060bc <__any_on+0x3e>
 80060a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d803      	bhi.n	80060b4 <__any_on+0x36>
 80060ac:	2000      	movs	r0, #0
 80060ae:	bd10      	pop	{r4, pc}
 80060b0:	4603      	mov	r3, r0
 80060b2:	e7f7      	b.n	80060a4 <__any_on+0x26>
 80060b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80060b8:	2900      	cmp	r1, #0
 80060ba:	d0f5      	beq.n	80060a8 <__any_on+0x2a>
 80060bc:	2001      	movs	r0, #1
 80060be:	bd10      	pop	{r4, pc}

080060c0 <_calloc_r>:
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	fb02 f401 	mul.w	r4, r2, r1
 80060c6:	4621      	mov	r1, r4
 80060c8:	f000 f854 	bl	8006174 <_malloc_r>
 80060cc:	4605      	mov	r5, r0
 80060ce:	b118      	cbz	r0, 80060d8 <_calloc_r+0x18>
 80060d0:	4622      	mov	r2, r4
 80060d2:	2100      	movs	r1, #0
 80060d4:	f7fe f968 	bl	80043a8 <memset>
 80060d8:	4628      	mov	r0, r5
 80060da:	bd38      	pop	{r3, r4, r5, pc}

080060dc <_free_r>:
 80060dc:	b538      	push	{r3, r4, r5, lr}
 80060de:	4605      	mov	r5, r0
 80060e0:	2900      	cmp	r1, #0
 80060e2:	d043      	beq.n	800616c <_free_r+0x90>
 80060e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060e8:	1f0c      	subs	r4, r1, #4
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	bfb8      	it	lt
 80060ee:	18e4      	addlt	r4, r4, r3
 80060f0:	f000 fbcb 	bl	800688a <__malloc_lock>
 80060f4:	4a1e      	ldr	r2, [pc, #120]	; (8006170 <_free_r+0x94>)
 80060f6:	6813      	ldr	r3, [r2, #0]
 80060f8:	4610      	mov	r0, r2
 80060fa:	b933      	cbnz	r3, 800610a <_free_r+0x2e>
 80060fc:	6063      	str	r3, [r4, #4]
 80060fe:	6014      	str	r4, [r2, #0]
 8006100:	4628      	mov	r0, r5
 8006102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006106:	f000 bbc1 	b.w	800688c <__malloc_unlock>
 800610a:	42a3      	cmp	r3, r4
 800610c:	d90b      	bls.n	8006126 <_free_r+0x4a>
 800610e:	6821      	ldr	r1, [r4, #0]
 8006110:	1862      	adds	r2, r4, r1
 8006112:	4293      	cmp	r3, r2
 8006114:	bf01      	itttt	eq
 8006116:	681a      	ldreq	r2, [r3, #0]
 8006118:	685b      	ldreq	r3, [r3, #4]
 800611a:	1852      	addeq	r2, r2, r1
 800611c:	6022      	streq	r2, [r4, #0]
 800611e:	6063      	str	r3, [r4, #4]
 8006120:	6004      	str	r4, [r0, #0]
 8006122:	e7ed      	b.n	8006100 <_free_r+0x24>
 8006124:	4613      	mov	r3, r2
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	b10a      	cbz	r2, 800612e <_free_r+0x52>
 800612a:	42a2      	cmp	r2, r4
 800612c:	d9fa      	bls.n	8006124 <_free_r+0x48>
 800612e:	6819      	ldr	r1, [r3, #0]
 8006130:	1858      	adds	r0, r3, r1
 8006132:	42a0      	cmp	r0, r4
 8006134:	d10b      	bne.n	800614e <_free_r+0x72>
 8006136:	6820      	ldr	r0, [r4, #0]
 8006138:	4401      	add	r1, r0
 800613a:	1858      	adds	r0, r3, r1
 800613c:	4282      	cmp	r2, r0
 800613e:	6019      	str	r1, [r3, #0]
 8006140:	d1de      	bne.n	8006100 <_free_r+0x24>
 8006142:	6810      	ldr	r0, [r2, #0]
 8006144:	6852      	ldr	r2, [r2, #4]
 8006146:	4401      	add	r1, r0
 8006148:	6019      	str	r1, [r3, #0]
 800614a:	605a      	str	r2, [r3, #4]
 800614c:	e7d8      	b.n	8006100 <_free_r+0x24>
 800614e:	d902      	bls.n	8006156 <_free_r+0x7a>
 8006150:	230c      	movs	r3, #12
 8006152:	602b      	str	r3, [r5, #0]
 8006154:	e7d4      	b.n	8006100 <_free_r+0x24>
 8006156:	6820      	ldr	r0, [r4, #0]
 8006158:	1821      	adds	r1, r4, r0
 800615a:	428a      	cmp	r2, r1
 800615c:	bf01      	itttt	eq
 800615e:	6811      	ldreq	r1, [r2, #0]
 8006160:	6852      	ldreq	r2, [r2, #4]
 8006162:	1809      	addeq	r1, r1, r0
 8006164:	6021      	streq	r1, [r4, #0]
 8006166:	6062      	str	r2, [r4, #4]
 8006168:	605c      	str	r4, [r3, #4]
 800616a:	e7c9      	b.n	8006100 <_free_r+0x24>
 800616c:	bd38      	pop	{r3, r4, r5, pc}
 800616e:	bf00      	nop
 8006170:	20000208 	.word	0x20000208

08006174 <_malloc_r>:
 8006174:	b570      	push	{r4, r5, r6, lr}
 8006176:	1ccd      	adds	r5, r1, #3
 8006178:	f025 0503 	bic.w	r5, r5, #3
 800617c:	3508      	adds	r5, #8
 800617e:	2d0c      	cmp	r5, #12
 8006180:	bf38      	it	cc
 8006182:	250c      	movcc	r5, #12
 8006184:	2d00      	cmp	r5, #0
 8006186:	4606      	mov	r6, r0
 8006188:	db01      	blt.n	800618e <_malloc_r+0x1a>
 800618a:	42a9      	cmp	r1, r5
 800618c:	d903      	bls.n	8006196 <_malloc_r+0x22>
 800618e:	230c      	movs	r3, #12
 8006190:	6033      	str	r3, [r6, #0]
 8006192:	2000      	movs	r0, #0
 8006194:	bd70      	pop	{r4, r5, r6, pc}
 8006196:	f000 fb78 	bl	800688a <__malloc_lock>
 800619a:	4a23      	ldr	r2, [pc, #140]	; (8006228 <_malloc_r+0xb4>)
 800619c:	6814      	ldr	r4, [r2, #0]
 800619e:	4621      	mov	r1, r4
 80061a0:	b991      	cbnz	r1, 80061c8 <_malloc_r+0x54>
 80061a2:	4c22      	ldr	r4, [pc, #136]	; (800622c <_malloc_r+0xb8>)
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	b91b      	cbnz	r3, 80061b0 <_malloc_r+0x3c>
 80061a8:	4630      	mov	r0, r6
 80061aa:	f000 fb29 	bl	8006800 <_sbrk_r>
 80061ae:	6020      	str	r0, [r4, #0]
 80061b0:	4629      	mov	r1, r5
 80061b2:	4630      	mov	r0, r6
 80061b4:	f000 fb24 	bl	8006800 <_sbrk_r>
 80061b8:	1c43      	adds	r3, r0, #1
 80061ba:	d126      	bne.n	800620a <_malloc_r+0x96>
 80061bc:	230c      	movs	r3, #12
 80061be:	4630      	mov	r0, r6
 80061c0:	6033      	str	r3, [r6, #0]
 80061c2:	f000 fb63 	bl	800688c <__malloc_unlock>
 80061c6:	e7e4      	b.n	8006192 <_malloc_r+0x1e>
 80061c8:	680b      	ldr	r3, [r1, #0]
 80061ca:	1b5b      	subs	r3, r3, r5
 80061cc:	d41a      	bmi.n	8006204 <_malloc_r+0x90>
 80061ce:	2b0b      	cmp	r3, #11
 80061d0:	d90f      	bls.n	80061f2 <_malloc_r+0x7e>
 80061d2:	600b      	str	r3, [r1, #0]
 80061d4:	18cc      	adds	r4, r1, r3
 80061d6:	50cd      	str	r5, [r1, r3]
 80061d8:	4630      	mov	r0, r6
 80061da:	f000 fb57 	bl	800688c <__malloc_unlock>
 80061de:	f104 000b 	add.w	r0, r4, #11
 80061e2:	1d23      	adds	r3, r4, #4
 80061e4:	f020 0007 	bic.w	r0, r0, #7
 80061e8:	1ac3      	subs	r3, r0, r3
 80061ea:	d01b      	beq.n	8006224 <_malloc_r+0xb0>
 80061ec:	425a      	negs	r2, r3
 80061ee:	50e2      	str	r2, [r4, r3]
 80061f0:	bd70      	pop	{r4, r5, r6, pc}
 80061f2:	428c      	cmp	r4, r1
 80061f4:	bf0b      	itete	eq
 80061f6:	6863      	ldreq	r3, [r4, #4]
 80061f8:	684b      	ldrne	r3, [r1, #4]
 80061fa:	6013      	streq	r3, [r2, #0]
 80061fc:	6063      	strne	r3, [r4, #4]
 80061fe:	bf18      	it	ne
 8006200:	460c      	movne	r4, r1
 8006202:	e7e9      	b.n	80061d8 <_malloc_r+0x64>
 8006204:	460c      	mov	r4, r1
 8006206:	6849      	ldr	r1, [r1, #4]
 8006208:	e7ca      	b.n	80061a0 <_malloc_r+0x2c>
 800620a:	1cc4      	adds	r4, r0, #3
 800620c:	f024 0403 	bic.w	r4, r4, #3
 8006210:	42a0      	cmp	r0, r4
 8006212:	d005      	beq.n	8006220 <_malloc_r+0xac>
 8006214:	1a21      	subs	r1, r4, r0
 8006216:	4630      	mov	r0, r6
 8006218:	f000 faf2 	bl	8006800 <_sbrk_r>
 800621c:	3001      	adds	r0, #1
 800621e:	d0cd      	beq.n	80061bc <_malloc_r+0x48>
 8006220:	6025      	str	r5, [r4, #0]
 8006222:	e7d9      	b.n	80061d8 <_malloc_r+0x64>
 8006224:	bd70      	pop	{r4, r5, r6, pc}
 8006226:	bf00      	nop
 8006228:	20000208 	.word	0x20000208
 800622c:	2000020c 	.word	0x2000020c

08006230 <__ssputs_r>:
 8006230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006234:	688e      	ldr	r6, [r1, #8]
 8006236:	4682      	mov	sl, r0
 8006238:	429e      	cmp	r6, r3
 800623a:	460c      	mov	r4, r1
 800623c:	4691      	mov	r9, r2
 800623e:	4698      	mov	r8, r3
 8006240:	d835      	bhi.n	80062ae <__ssputs_r+0x7e>
 8006242:	898a      	ldrh	r2, [r1, #12]
 8006244:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006248:	d031      	beq.n	80062ae <__ssputs_r+0x7e>
 800624a:	2302      	movs	r3, #2
 800624c:	6825      	ldr	r5, [r4, #0]
 800624e:	6909      	ldr	r1, [r1, #16]
 8006250:	1a6f      	subs	r7, r5, r1
 8006252:	6965      	ldr	r5, [r4, #20]
 8006254:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006258:	fb95 f5f3 	sdiv	r5, r5, r3
 800625c:	f108 0301 	add.w	r3, r8, #1
 8006260:	443b      	add	r3, r7
 8006262:	429d      	cmp	r5, r3
 8006264:	bf38      	it	cc
 8006266:	461d      	movcc	r5, r3
 8006268:	0553      	lsls	r3, r2, #21
 800626a:	d531      	bpl.n	80062d0 <__ssputs_r+0xa0>
 800626c:	4629      	mov	r1, r5
 800626e:	f7ff ff81 	bl	8006174 <_malloc_r>
 8006272:	4606      	mov	r6, r0
 8006274:	b950      	cbnz	r0, 800628c <__ssputs_r+0x5c>
 8006276:	230c      	movs	r3, #12
 8006278:	f8ca 3000 	str.w	r3, [sl]
 800627c:	89a3      	ldrh	r3, [r4, #12]
 800627e:	f04f 30ff 	mov.w	r0, #4294967295
 8006282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006286:	81a3      	strh	r3, [r4, #12]
 8006288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628c:	463a      	mov	r2, r7
 800628e:	6921      	ldr	r1, [r4, #16]
 8006290:	f7ff fb24 	bl	80058dc <memcpy>
 8006294:	89a3      	ldrh	r3, [r4, #12]
 8006296:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800629a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629e:	81a3      	strh	r3, [r4, #12]
 80062a0:	6126      	str	r6, [r4, #16]
 80062a2:	443e      	add	r6, r7
 80062a4:	6026      	str	r6, [r4, #0]
 80062a6:	4646      	mov	r6, r8
 80062a8:	6165      	str	r5, [r4, #20]
 80062aa:	1bed      	subs	r5, r5, r7
 80062ac:	60a5      	str	r5, [r4, #8]
 80062ae:	4546      	cmp	r6, r8
 80062b0:	bf28      	it	cs
 80062b2:	4646      	movcs	r6, r8
 80062b4:	4649      	mov	r1, r9
 80062b6:	4632      	mov	r2, r6
 80062b8:	6820      	ldr	r0, [r4, #0]
 80062ba:	f000 facc 	bl	8006856 <memmove>
 80062be:	68a3      	ldr	r3, [r4, #8]
 80062c0:	2000      	movs	r0, #0
 80062c2:	1b9b      	subs	r3, r3, r6
 80062c4:	60a3      	str	r3, [r4, #8]
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	441e      	add	r6, r3
 80062ca:	6026      	str	r6, [r4, #0]
 80062cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d0:	462a      	mov	r2, r5
 80062d2:	f000 fadc 	bl	800688e <_realloc_r>
 80062d6:	4606      	mov	r6, r0
 80062d8:	2800      	cmp	r0, #0
 80062da:	d1e1      	bne.n	80062a0 <__ssputs_r+0x70>
 80062dc:	6921      	ldr	r1, [r4, #16]
 80062de:	4650      	mov	r0, sl
 80062e0:	f7ff fefc 	bl	80060dc <_free_r>
 80062e4:	e7c7      	b.n	8006276 <__ssputs_r+0x46>
	...

080062e8 <_svfiprintf_r>:
 80062e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ec:	b09d      	sub	sp, #116	; 0x74
 80062ee:	9303      	str	r3, [sp, #12]
 80062f0:	898b      	ldrh	r3, [r1, #12]
 80062f2:	4680      	mov	r8, r0
 80062f4:	061c      	lsls	r4, r3, #24
 80062f6:	460d      	mov	r5, r1
 80062f8:	4616      	mov	r6, r2
 80062fa:	d50f      	bpl.n	800631c <_svfiprintf_r+0x34>
 80062fc:	690b      	ldr	r3, [r1, #16]
 80062fe:	b96b      	cbnz	r3, 800631c <_svfiprintf_r+0x34>
 8006300:	2140      	movs	r1, #64	; 0x40
 8006302:	f7ff ff37 	bl	8006174 <_malloc_r>
 8006306:	6028      	str	r0, [r5, #0]
 8006308:	6128      	str	r0, [r5, #16]
 800630a:	b928      	cbnz	r0, 8006318 <_svfiprintf_r+0x30>
 800630c:	230c      	movs	r3, #12
 800630e:	f8c8 3000 	str.w	r3, [r8]
 8006312:	f04f 30ff 	mov.w	r0, #4294967295
 8006316:	e0c4      	b.n	80064a2 <_svfiprintf_r+0x1ba>
 8006318:	2340      	movs	r3, #64	; 0x40
 800631a:	616b      	str	r3, [r5, #20]
 800631c:	2300      	movs	r3, #0
 800631e:	9309      	str	r3, [sp, #36]	; 0x24
 8006320:	2320      	movs	r3, #32
 8006322:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006326:	2330      	movs	r3, #48	; 0x30
 8006328:	f04f 0b01 	mov.w	fp, #1
 800632c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006330:	4637      	mov	r7, r6
 8006332:	463c      	mov	r4, r7
 8006334:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d13c      	bne.n	80063b6 <_svfiprintf_r+0xce>
 800633c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006340:	d00b      	beq.n	800635a <_svfiprintf_r+0x72>
 8006342:	4653      	mov	r3, sl
 8006344:	4632      	mov	r2, r6
 8006346:	4629      	mov	r1, r5
 8006348:	4640      	mov	r0, r8
 800634a:	f7ff ff71 	bl	8006230 <__ssputs_r>
 800634e:	3001      	adds	r0, #1
 8006350:	f000 80a2 	beq.w	8006498 <_svfiprintf_r+0x1b0>
 8006354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006356:	4453      	add	r3, sl
 8006358:	9309      	str	r3, [sp, #36]	; 0x24
 800635a:	783b      	ldrb	r3, [r7, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 809b 	beq.w	8006498 <_svfiprintf_r+0x1b0>
 8006362:	2300      	movs	r3, #0
 8006364:	f04f 32ff 	mov.w	r2, #4294967295
 8006368:	9304      	str	r3, [sp, #16]
 800636a:	9307      	str	r3, [sp, #28]
 800636c:	9205      	str	r2, [sp, #20]
 800636e:	9306      	str	r3, [sp, #24]
 8006370:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006374:	931a      	str	r3, [sp, #104]	; 0x68
 8006376:	2205      	movs	r2, #5
 8006378:	7821      	ldrb	r1, [r4, #0]
 800637a:	4850      	ldr	r0, [pc, #320]	; (80064bc <_svfiprintf_r+0x1d4>)
 800637c:	f000 fa5d 	bl	800683a <memchr>
 8006380:	1c67      	adds	r7, r4, #1
 8006382:	9b04      	ldr	r3, [sp, #16]
 8006384:	b9d8      	cbnz	r0, 80063be <_svfiprintf_r+0xd6>
 8006386:	06d9      	lsls	r1, r3, #27
 8006388:	bf44      	itt	mi
 800638a:	2220      	movmi	r2, #32
 800638c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006390:	071a      	lsls	r2, r3, #28
 8006392:	bf44      	itt	mi
 8006394:	222b      	movmi	r2, #43	; 0x2b
 8006396:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800639a:	7822      	ldrb	r2, [r4, #0]
 800639c:	2a2a      	cmp	r2, #42	; 0x2a
 800639e:	d016      	beq.n	80063ce <_svfiprintf_r+0xe6>
 80063a0:	2100      	movs	r1, #0
 80063a2:	200a      	movs	r0, #10
 80063a4:	9a07      	ldr	r2, [sp, #28]
 80063a6:	4627      	mov	r7, r4
 80063a8:	783b      	ldrb	r3, [r7, #0]
 80063aa:	3401      	adds	r4, #1
 80063ac:	3b30      	subs	r3, #48	; 0x30
 80063ae:	2b09      	cmp	r3, #9
 80063b0:	d950      	bls.n	8006454 <_svfiprintf_r+0x16c>
 80063b2:	b1c9      	cbz	r1, 80063e8 <_svfiprintf_r+0x100>
 80063b4:	e011      	b.n	80063da <_svfiprintf_r+0xf2>
 80063b6:	2b25      	cmp	r3, #37	; 0x25
 80063b8:	d0c0      	beq.n	800633c <_svfiprintf_r+0x54>
 80063ba:	4627      	mov	r7, r4
 80063bc:	e7b9      	b.n	8006332 <_svfiprintf_r+0x4a>
 80063be:	4a3f      	ldr	r2, [pc, #252]	; (80064bc <_svfiprintf_r+0x1d4>)
 80063c0:	463c      	mov	r4, r7
 80063c2:	1a80      	subs	r0, r0, r2
 80063c4:	fa0b f000 	lsl.w	r0, fp, r0
 80063c8:	4318      	orrs	r0, r3
 80063ca:	9004      	str	r0, [sp, #16]
 80063cc:	e7d3      	b.n	8006376 <_svfiprintf_r+0x8e>
 80063ce:	9a03      	ldr	r2, [sp, #12]
 80063d0:	1d11      	adds	r1, r2, #4
 80063d2:	6812      	ldr	r2, [r2, #0]
 80063d4:	9103      	str	r1, [sp, #12]
 80063d6:	2a00      	cmp	r2, #0
 80063d8:	db01      	blt.n	80063de <_svfiprintf_r+0xf6>
 80063da:	9207      	str	r2, [sp, #28]
 80063dc:	e004      	b.n	80063e8 <_svfiprintf_r+0x100>
 80063de:	4252      	negs	r2, r2
 80063e0:	f043 0302 	orr.w	r3, r3, #2
 80063e4:	9207      	str	r2, [sp, #28]
 80063e6:	9304      	str	r3, [sp, #16]
 80063e8:	783b      	ldrb	r3, [r7, #0]
 80063ea:	2b2e      	cmp	r3, #46	; 0x2e
 80063ec:	d10d      	bne.n	800640a <_svfiprintf_r+0x122>
 80063ee:	787b      	ldrb	r3, [r7, #1]
 80063f0:	1c79      	adds	r1, r7, #1
 80063f2:	2b2a      	cmp	r3, #42	; 0x2a
 80063f4:	d132      	bne.n	800645c <_svfiprintf_r+0x174>
 80063f6:	9b03      	ldr	r3, [sp, #12]
 80063f8:	3702      	adds	r7, #2
 80063fa:	1d1a      	adds	r2, r3, #4
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	9203      	str	r2, [sp, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	bfb8      	it	lt
 8006404:	f04f 33ff 	movlt.w	r3, #4294967295
 8006408:	9305      	str	r3, [sp, #20]
 800640a:	4c2d      	ldr	r4, [pc, #180]	; (80064c0 <_svfiprintf_r+0x1d8>)
 800640c:	2203      	movs	r2, #3
 800640e:	7839      	ldrb	r1, [r7, #0]
 8006410:	4620      	mov	r0, r4
 8006412:	f000 fa12 	bl	800683a <memchr>
 8006416:	b138      	cbz	r0, 8006428 <_svfiprintf_r+0x140>
 8006418:	2340      	movs	r3, #64	; 0x40
 800641a:	1b00      	subs	r0, r0, r4
 800641c:	fa03 f000 	lsl.w	r0, r3, r0
 8006420:	9b04      	ldr	r3, [sp, #16]
 8006422:	3701      	adds	r7, #1
 8006424:	4303      	orrs	r3, r0
 8006426:	9304      	str	r3, [sp, #16]
 8006428:	7839      	ldrb	r1, [r7, #0]
 800642a:	2206      	movs	r2, #6
 800642c:	4825      	ldr	r0, [pc, #148]	; (80064c4 <_svfiprintf_r+0x1dc>)
 800642e:	1c7e      	adds	r6, r7, #1
 8006430:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006434:	f000 fa01 	bl	800683a <memchr>
 8006438:	2800      	cmp	r0, #0
 800643a:	d035      	beq.n	80064a8 <_svfiprintf_r+0x1c0>
 800643c:	4b22      	ldr	r3, [pc, #136]	; (80064c8 <_svfiprintf_r+0x1e0>)
 800643e:	b9fb      	cbnz	r3, 8006480 <_svfiprintf_r+0x198>
 8006440:	9b03      	ldr	r3, [sp, #12]
 8006442:	3307      	adds	r3, #7
 8006444:	f023 0307 	bic.w	r3, r3, #7
 8006448:	3308      	adds	r3, #8
 800644a:	9303      	str	r3, [sp, #12]
 800644c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800644e:	444b      	add	r3, r9
 8006450:	9309      	str	r3, [sp, #36]	; 0x24
 8006452:	e76d      	b.n	8006330 <_svfiprintf_r+0x48>
 8006454:	fb00 3202 	mla	r2, r0, r2, r3
 8006458:	2101      	movs	r1, #1
 800645a:	e7a4      	b.n	80063a6 <_svfiprintf_r+0xbe>
 800645c:	2300      	movs	r3, #0
 800645e:	240a      	movs	r4, #10
 8006460:	4618      	mov	r0, r3
 8006462:	9305      	str	r3, [sp, #20]
 8006464:	460f      	mov	r7, r1
 8006466:	783a      	ldrb	r2, [r7, #0]
 8006468:	3101      	adds	r1, #1
 800646a:	3a30      	subs	r2, #48	; 0x30
 800646c:	2a09      	cmp	r2, #9
 800646e:	d903      	bls.n	8006478 <_svfiprintf_r+0x190>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0ca      	beq.n	800640a <_svfiprintf_r+0x122>
 8006474:	9005      	str	r0, [sp, #20]
 8006476:	e7c8      	b.n	800640a <_svfiprintf_r+0x122>
 8006478:	fb04 2000 	mla	r0, r4, r0, r2
 800647c:	2301      	movs	r3, #1
 800647e:	e7f1      	b.n	8006464 <_svfiprintf_r+0x17c>
 8006480:	ab03      	add	r3, sp, #12
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	462a      	mov	r2, r5
 8006486:	4b11      	ldr	r3, [pc, #68]	; (80064cc <_svfiprintf_r+0x1e4>)
 8006488:	a904      	add	r1, sp, #16
 800648a:	4640      	mov	r0, r8
 800648c:	f3af 8000 	nop.w
 8006490:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006494:	4681      	mov	r9, r0
 8006496:	d1d9      	bne.n	800644c <_svfiprintf_r+0x164>
 8006498:	89ab      	ldrh	r3, [r5, #12]
 800649a:	065b      	lsls	r3, r3, #25
 800649c:	f53f af39 	bmi.w	8006312 <_svfiprintf_r+0x2a>
 80064a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064a2:	b01d      	add	sp, #116	; 0x74
 80064a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a8:	ab03      	add	r3, sp, #12
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	462a      	mov	r2, r5
 80064ae:	4b07      	ldr	r3, [pc, #28]	; (80064cc <_svfiprintf_r+0x1e4>)
 80064b0:	a904      	add	r1, sp, #16
 80064b2:	4640      	mov	r0, r8
 80064b4:	f000 f884 	bl	80065c0 <_printf_i>
 80064b8:	e7ea      	b.n	8006490 <_svfiprintf_r+0x1a8>
 80064ba:	bf00      	nop
 80064bc:	08006b4c 	.word	0x08006b4c
 80064c0:	08006b52 	.word	0x08006b52
 80064c4:	08006b56 	.word	0x08006b56
 80064c8:	00000000 	.word	0x00000000
 80064cc:	08006231 	.word	0x08006231

080064d0 <_printf_common>:
 80064d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d4:	4691      	mov	r9, r2
 80064d6:	461f      	mov	r7, r3
 80064d8:	688a      	ldr	r2, [r1, #8]
 80064da:	690b      	ldr	r3, [r1, #16]
 80064dc:	4606      	mov	r6, r0
 80064de:	4293      	cmp	r3, r2
 80064e0:	bfb8      	it	lt
 80064e2:	4613      	movlt	r3, r2
 80064e4:	f8c9 3000 	str.w	r3, [r9]
 80064e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064ec:	460c      	mov	r4, r1
 80064ee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064f2:	b112      	cbz	r2, 80064fa <_printf_common+0x2a>
 80064f4:	3301      	adds	r3, #1
 80064f6:	f8c9 3000 	str.w	r3, [r9]
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	0699      	lsls	r1, r3, #26
 80064fe:	bf42      	ittt	mi
 8006500:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006504:	3302      	addmi	r3, #2
 8006506:	f8c9 3000 	strmi.w	r3, [r9]
 800650a:	6825      	ldr	r5, [r4, #0]
 800650c:	f015 0506 	ands.w	r5, r5, #6
 8006510:	d107      	bne.n	8006522 <_printf_common+0x52>
 8006512:	f104 0a19 	add.w	sl, r4, #25
 8006516:	68e3      	ldr	r3, [r4, #12]
 8006518:	f8d9 2000 	ldr.w	r2, [r9]
 800651c:	1a9b      	subs	r3, r3, r2
 800651e:	429d      	cmp	r5, r3
 8006520:	db2a      	blt.n	8006578 <_printf_common+0xa8>
 8006522:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006526:	6822      	ldr	r2, [r4, #0]
 8006528:	3300      	adds	r3, #0
 800652a:	bf18      	it	ne
 800652c:	2301      	movne	r3, #1
 800652e:	0692      	lsls	r2, r2, #26
 8006530:	d42f      	bmi.n	8006592 <_printf_common+0xc2>
 8006532:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006536:	4639      	mov	r1, r7
 8006538:	4630      	mov	r0, r6
 800653a:	47c0      	blx	r8
 800653c:	3001      	adds	r0, #1
 800653e:	d022      	beq.n	8006586 <_printf_common+0xb6>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	68e5      	ldr	r5, [r4, #12]
 8006544:	f003 0306 	and.w	r3, r3, #6
 8006548:	2b04      	cmp	r3, #4
 800654a:	bf18      	it	ne
 800654c:	2500      	movne	r5, #0
 800654e:	f8d9 2000 	ldr.w	r2, [r9]
 8006552:	f04f 0900 	mov.w	r9, #0
 8006556:	bf08      	it	eq
 8006558:	1aad      	subeq	r5, r5, r2
 800655a:	68a3      	ldr	r3, [r4, #8]
 800655c:	6922      	ldr	r2, [r4, #16]
 800655e:	bf08      	it	eq
 8006560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006564:	4293      	cmp	r3, r2
 8006566:	bfc4      	itt	gt
 8006568:	1a9b      	subgt	r3, r3, r2
 800656a:	18ed      	addgt	r5, r5, r3
 800656c:	341a      	adds	r4, #26
 800656e:	454d      	cmp	r5, r9
 8006570:	d11b      	bne.n	80065aa <_printf_common+0xda>
 8006572:	2000      	movs	r0, #0
 8006574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006578:	2301      	movs	r3, #1
 800657a:	4652      	mov	r2, sl
 800657c:	4639      	mov	r1, r7
 800657e:	4630      	mov	r0, r6
 8006580:	47c0      	blx	r8
 8006582:	3001      	adds	r0, #1
 8006584:	d103      	bne.n	800658e <_printf_common+0xbe>
 8006586:	f04f 30ff 	mov.w	r0, #4294967295
 800658a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800658e:	3501      	adds	r5, #1
 8006590:	e7c1      	b.n	8006516 <_printf_common+0x46>
 8006592:	2030      	movs	r0, #48	; 0x30
 8006594:	18e1      	adds	r1, r4, r3
 8006596:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065a0:	4422      	add	r2, r4
 80065a2:	3302      	adds	r3, #2
 80065a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065a8:	e7c3      	b.n	8006532 <_printf_common+0x62>
 80065aa:	2301      	movs	r3, #1
 80065ac:	4622      	mov	r2, r4
 80065ae:	4639      	mov	r1, r7
 80065b0:	4630      	mov	r0, r6
 80065b2:	47c0      	blx	r8
 80065b4:	3001      	adds	r0, #1
 80065b6:	d0e6      	beq.n	8006586 <_printf_common+0xb6>
 80065b8:	f109 0901 	add.w	r9, r9, #1
 80065bc:	e7d7      	b.n	800656e <_printf_common+0x9e>
	...

080065c0 <_printf_i>:
 80065c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065c4:	4617      	mov	r7, r2
 80065c6:	7e0a      	ldrb	r2, [r1, #24]
 80065c8:	b085      	sub	sp, #20
 80065ca:	2a6e      	cmp	r2, #110	; 0x6e
 80065cc:	4698      	mov	r8, r3
 80065ce:	4606      	mov	r6, r0
 80065d0:	460c      	mov	r4, r1
 80065d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065d4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80065d8:	f000 80bc 	beq.w	8006754 <_printf_i+0x194>
 80065dc:	d81a      	bhi.n	8006614 <_printf_i+0x54>
 80065de:	2a63      	cmp	r2, #99	; 0x63
 80065e0:	d02e      	beq.n	8006640 <_printf_i+0x80>
 80065e2:	d80a      	bhi.n	80065fa <_printf_i+0x3a>
 80065e4:	2a00      	cmp	r2, #0
 80065e6:	f000 80c8 	beq.w	800677a <_printf_i+0x1ba>
 80065ea:	2a58      	cmp	r2, #88	; 0x58
 80065ec:	f000 808a 	beq.w	8006704 <_printf_i+0x144>
 80065f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065f4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80065f8:	e02a      	b.n	8006650 <_printf_i+0x90>
 80065fa:	2a64      	cmp	r2, #100	; 0x64
 80065fc:	d001      	beq.n	8006602 <_printf_i+0x42>
 80065fe:	2a69      	cmp	r2, #105	; 0x69
 8006600:	d1f6      	bne.n	80065f0 <_printf_i+0x30>
 8006602:	6821      	ldr	r1, [r4, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	f011 0f80 	tst.w	r1, #128	; 0x80
 800660a:	d023      	beq.n	8006654 <_printf_i+0x94>
 800660c:	1d11      	adds	r1, r2, #4
 800660e:	6019      	str	r1, [r3, #0]
 8006610:	6813      	ldr	r3, [r2, #0]
 8006612:	e027      	b.n	8006664 <_printf_i+0xa4>
 8006614:	2a73      	cmp	r2, #115	; 0x73
 8006616:	f000 80b4 	beq.w	8006782 <_printf_i+0x1c2>
 800661a:	d808      	bhi.n	800662e <_printf_i+0x6e>
 800661c:	2a6f      	cmp	r2, #111	; 0x6f
 800661e:	d02a      	beq.n	8006676 <_printf_i+0xb6>
 8006620:	2a70      	cmp	r2, #112	; 0x70
 8006622:	d1e5      	bne.n	80065f0 <_printf_i+0x30>
 8006624:	680a      	ldr	r2, [r1, #0]
 8006626:	f042 0220 	orr.w	r2, r2, #32
 800662a:	600a      	str	r2, [r1, #0]
 800662c:	e003      	b.n	8006636 <_printf_i+0x76>
 800662e:	2a75      	cmp	r2, #117	; 0x75
 8006630:	d021      	beq.n	8006676 <_printf_i+0xb6>
 8006632:	2a78      	cmp	r2, #120	; 0x78
 8006634:	d1dc      	bne.n	80065f0 <_printf_i+0x30>
 8006636:	2278      	movs	r2, #120	; 0x78
 8006638:	496f      	ldr	r1, [pc, #444]	; (80067f8 <_printf_i+0x238>)
 800663a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800663e:	e064      	b.n	800670a <_printf_i+0x14a>
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006646:	1d11      	adds	r1, r2, #4
 8006648:	6019      	str	r1, [r3, #0]
 800664a:	6813      	ldr	r3, [r2, #0]
 800664c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006650:	2301      	movs	r3, #1
 8006652:	e0a3      	b.n	800679c <_printf_i+0x1dc>
 8006654:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006658:	f102 0104 	add.w	r1, r2, #4
 800665c:	6019      	str	r1, [r3, #0]
 800665e:	d0d7      	beq.n	8006610 <_printf_i+0x50>
 8006660:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006664:	2b00      	cmp	r3, #0
 8006666:	da03      	bge.n	8006670 <_printf_i+0xb0>
 8006668:	222d      	movs	r2, #45	; 0x2d
 800666a:	425b      	negs	r3, r3
 800666c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006670:	4962      	ldr	r1, [pc, #392]	; (80067fc <_printf_i+0x23c>)
 8006672:	220a      	movs	r2, #10
 8006674:	e017      	b.n	80066a6 <_printf_i+0xe6>
 8006676:	6820      	ldr	r0, [r4, #0]
 8006678:	6819      	ldr	r1, [r3, #0]
 800667a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800667e:	d003      	beq.n	8006688 <_printf_i+0xc8>
 8006680:	1d08      	adds	r0, r1, #4
 8006682:	6018      	str	r0, [r3, #0]
 8006684:	680b      	ldr	r3, [r1, #0]
 8006686:	e006      	b.n	8006696 <_printf_i+0xd6>
 8006688:	f010 0f40 	tst.w	r0, #64	; 0x40
 800668c:	f101 0004 	add.w	r0, r1, #4
 8006690:	6018      	str	r0, [r3, #0]
 8006692:	d0f7      	beq.n	8006684 <_printf_i+0xc4>
 8006694:	880b      	ldrh	r3, [r1, #0]
 8006696:	2a6f      	cmp	r2, #111	; 0x6f
 8006698:	bf14      	ite	ne
 800669a:	220a      	movne	r2, #10
 800669c:	2208      	moveq	r2, #8
 800669e:	4957      	ldr	r1, [pc, #348]	; (80067fc <_printf_i+0x23c>)
 80066a0:	2000      	movs	r0, #0
 80066a2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80066a6:	6865      	ldr	r5, [r4, #4]
 80066a8:	2d00      	cmp	r5, #0
 80066aa:	60a5      	str	r5, [r4, #8]
 80066ac:	f2c0 809c 	blt.w	80067e8 <_printf_i+0x228>
 80066b0:	6820      	ldr	r0, [r4, #0]
 80066b2:	f020 0004 	bic.w	r0, r0, #4
 80066b6:	6020      	str	r0, [r4, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d13f      	bne.n	800673c <_printf_i+0x17c>
 80066bc:	2d00      	cmp	r5, #0
 80066be:	f040 8095 	bne.w	80067ec <_printf_i+0x22c>
 80066c2:	4675      	mov	r5, lr
 80066c4:	2a08      	cmp	r2, #8
 80066c6:	d10b      	bne.n	80066e0 <_printf_i+0x120>
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	07da      	lsls	r2, r3, #31
 80066cc:	d508      	bpl.n	80066e0 <_printf_i+0x120>
 80066ce:	6923      	ldr	r3, [r4, #16]
 80066d0:	6862      	ldr	r2, [r4, #4]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	bfde      	ittt	le
 80066d6:	2330      	movle	r3, #48	; 0x30
 80066d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066e0:	ebae 0305 	sub.w	r3, lr, r5
 80066e4:	6123      	str	r3, [r4, #16]
 80066e6:	f8cd 8000 	str.w	r8, [sp]
 80066ea:	463b      	mov	r3, r7
 80066ec:	aa03      	add	r2, sp, #12
 80066ee:	4621      	mov	r1, r4
 80066f0:	4630      	mov	r0, r6
 80066f2:	f7ff feed 	bl	80064d0 <_printf_common>
 80066f6:	3001      	adds	r0, #1
 80066f8:	d155      	bne.n	80067a6 <_printf_i+0x1e6>
 80066fa:	f04f 30ff 	mov.w	r0, #4294967295
 80066fe:	b005      	add	sp, #20
 8006700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006704:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006708:	493c      	ldr	r1, [pc, #240]	; (80067fc <_printf_i+0x23c>)
 800670a:	6822      	ldr	r2, [r4, #0]
 800670c:	6818      	ldr	r0, [r3, #0]
 800670e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006712:	f100 0504 	add.w	r5, r0, #4
 8006716:	601d      	str	r5, [r3, #0]
 8006718:	d001      	beq.n	800671e <_printf_i+0x15e>
 800671a:	6803      	ldr	r3, [r0, #0]
 800671c:	e002      	b.n	8006724 <_printf_i+0x164>
 800671e:	0655      	lsls	r5, r2, #25
 8006720:	d5fb      	bpl.n	800671a <_printf_i+0x15a>
 8006722:	8803      	ldrh	r3, [r0, #0]
 8006724:	07d0      	lsls	r0, r2, #31
 8006726:	bf44      	itt	mi
 8006728:	f042 0220 	orrmi.w	r2, r2, #32
 800672c:	6022      	strmi	r2, [r4, #0]
 800672e:	b91b      	cbnz	r3, 8006738 <_printf_i+0x178>
 8006730:	6822      	ldr	r2, [r4, #0]
 8006732:	f022 0220 	bic.w	r2, r2, #32
 8006736:	6022      	str	r2, [r4, #0]
 8006738:	2210      	movs	r2, #16
 800673a:	e7b1      	b.n	80066a0 <_printf_i+0xe0>
 800673c:	4675      	mov	r5, lr
 800673e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006742:	fb02 3310 	mls	r3, r2, r0, r3
 8006746:	5ccb      	ldrb	r3, [r1, r3]
 8006748:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800674c:	4603      	mov	r3, r0
 800674e:	2800      	cmp	r0, #0
 8006750:	d1f5      	bne.n	800673e <_printf_i+0x17e>
 8006752:	e7b7      	b.n	80066c4 <_printf_i+0x104>
 8006754:	6808      	ldr	r0, [r1, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	f010 0f80 	tst.w	r0, #128	; 0x80
 800675c:	6949      	ldr	r1, [r1, #20]
 800675e:	d004      	beq.n	800676a <_printf_i+0x1aa>
 8006760:	1d10      	adds	r0, r2, #4
 8006762:	6018      	str	r0, [r3, #0]
 8006764:	6813      	ldr	r3, [r2, #0]
 8006766:	6019      	str	r1, [r3, #0]
 8006768:	e007      	b.n	800677a <_printf_i+0x1ba>
 800676a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800676e:	f102 0004 	add.w	r0, r2, #4
 8006772:	6018      	str	r0, [r3, #0]
 8006774:	6813      	ldr	r3, [r2, #0]
 8006776:	d0f6      	beq.n	8006766 <_printf_i+0x1a6>
 8006778:	8019      	strh	r1, [r3, #0]
 800677a:	2300      	movs	r3, #0
 800677c:	4675      	mov	r5, lr
 800677e:	6123      	str	r3, [r4, #16]
 8006780:	e7b1      	b.n	80066e6 <_printf_i+0x126>
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	1d11      	adds	r1, r2, #4
 8006786:	6019      	str	r1, [r3, #0]
 8006788:	6815      	ldr	r5, [r2, #0]
 800678a:	2100      	movs	r1, #0
 800678c:	6862      	ldr	r2, [r4, #4]
 800678e:	4628      	mov	r0, r5
 8006790:	f000 f853 	bl	800683a <memchr>
 8006794:	b108      	cbz	r0, 800679a <_printf_i+0x1da>
 8006796:	1b40      	subs	r0, r0, r5
 8006798:	6060      	str	r0, [r4, #4]
 800679a:	6863      	ldr	r3, [r4, #4]
 800679c:	6123      	str	r3, [r4, #16]
 800679e:	2300      	movs	r3, #0
 80067a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067a4:	e79f      	b.n	80066e6 <_printf_i+0x126>
 80067a6:	6923      	ldr	r3, [r4, #16]
 80067a8:	462a      	mov	r2, r5
 80067aa:	4639      	mov	r1, r7
 80067ac:	4630      	mov	r0, r6
 80067ae:	47c0      	blx	r8
 80067b0:	3001      	adds	r0, #1
 80067b2:	d0a2      	beq.n	80066fa <_printf_i+0x13a>
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	079b      	lsls	r3, r3, #30
 80067b8:	d507      	bpl.n	80067ca <_printf_i+0x20a>
 80067ba:	2500      	movs	r5, #0
 80067bc:	f104 0919 	add.w	r9, r4, #25
 80067c0:	68e3      	ldr	r3, [r4, #12]
 80067c2:	9a03      	ldr	r2, [sp, #12]
 80067c4:	1a9b      	subs	r3, r3, r2
 80067c6:	429d      	cmp	r5, r3
 80067c8:	db05      	blt.n	80067d6 <_printf_i+0x216>
 80067ca:	68e0      	ldr	r0, [r4, #12]
 80067cc:	9b03      	ldr	r3, [sp, #12]
 80067ce:	4298      	cmp	r0, r3
 80067d0:	bfb8      	it	lt
 80067d2:	4618      	movlt	r0, r3
 80067d4:	e793      	b.n	80066fe <_printf_i+0x13e>
 80067d6:	2301      	movs	r3, #1
 80067d8:	464a      	mov	r2, r9
 80067da:	4639      	mov	r1, r7
 80067dc:	4630      	mov	r0, r6
 80067de:	47c0      	blx	r8
 80067e0:	3001      	adds	r0, #1
 80067e2:	d08a      	beq.n	80066fa <_printf_i+0x13a>
 80067e4:	3501      	adds	r5, #1
 80067e6:	e7eb      	b.n	80067c0 <_printf_i+0x200>
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1a7      	bne.n	800673c <_printf_i+0x17c>
 80067ec:	780b      	ldrb	r3, [r1, #0]
 80067ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067f6:	e765      	b.n	80066c4 <_printf_i+0x104>
 80067f8:	08006b6e 	.word	0x08006b6e
 80067fc:	08006b5d 	.word	0x08006b5d

08006800 <_sbrk_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	2300      	movs	r3, #0
 8006804:	4c05      	ldr	r4, [pc, #20]	; (800681c <_sbrk_r+0x1c>)
 8006806:	4605      	mov	r5, r0
 8006808:	4608      	mov	r0, r1
 800680a:	6023      	str	r3, [r4, #0]
 800680c:	f000 f86e 	bl	80068ec <_sbrk>
 8006810:	1c43      	adds	r3, r0, #1
 8006812:	d102      	bne.n	800681a <_sbrk_r+0x1a>
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	b103      	cbz	r3, 800681a <_sbrk_r+0x1a>
 8006818:	602b      	str	r3, [r5, #0]
 800681a:	bd38      	pop	{r3, r4, r5, pc}
 800681c:	20001920 	.word	0x20001920

08006820 <__ascii_wctomb>:
 8006820:	b149      	cbz	r1, 8006836 <__ascii_wctomb+0x16>
 8006822:	2aff      	cmp	r2, #255	; 0xff
 8006824:	bf8b      	itete	hi
 8006826:	238a      	movhi	r3, #138	; 0x8a
 8006828:	700a      	strbls	r2, [r1, #0]
 800682a:	6003      	strhi	r3, [r0, #0]
 800682c:	2001      	movls	r0, #1
 800682e:	bf88      	it	hi
 8006830:	f04f 30ff 	movhi.w	r0, #4294967295
 8006834:	4770      	bx	lr
 8006836:	4608      	mov	r0, r1
 8006838:	4770      	bx	lr

0800683a <memchr>:
 800683a:	b510      	push	{r4, lr}
 800683c:	b2c9      	uxtb	r1, r1
 800683e:	4402      	add	r2, r0
 8006840:	4290      	cmp	r0, r2
 8006842:	4603      	mov	r3, r0
 8006844:	d101      	bne.n	800684a <memchr+0x10>
 8006846:	2000      	movs	r0, #0
 8006848:	bd10      	pop	{r4, pc}
 800684a:	781c      	ldrb	r4, [r3, #0]
 800684c:	3001      	adds	r0, #1
 800684e:	428c      	cmp	r4, r1
 8006850:	d1f6      	bne.n	8006840 <memchr+0x6>
 8006852:	4618      	mov	r0, r3
 8006854:	bd10      	pop	{r4, pc}

08006856 <memmove>:
 8006856:	4288      	cmp	r0, r1
 8006858:	b510      	push	{r4, lr}
 800685a:	eb01 0302 	add.w	r3, r1, r2
 800685e:	d803      	bhi.n	8006868 <memmove+0x12>
 8006860:	1e42      	subs	r2, r0, #1
 8006862:	4299      	cmp	r1, r3
 8006864:	d10c      	bne.n	8006880 <memmove+0x2a>
 8006866:	bd10      	pop	{r4, pc}
 8006868:	4298      	cmp	r0, r3
 800686a:	d2f9      	bcs.n	8006860 <memmove+0xa>
 800686c:	1881      	adds	r1, r0, r2
 800686e:	1ad2      	subs	r2, r2, r3
 8006870:	42d3      	cmn	r3, r2
 8006872:	d100      	bne.n	8006876 <memmove+0x20>
 8006874:	bd10      	pop	{r4, pc}
 8006876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800687a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800687e:	e7f7      	b.n	8006870 <memmove+0x1a>
 8006880:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006884:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006888:	e7eb      	b.n	8006862 <memmove+0xc>

0800688a <__malloc_lock>:
 800688a:	4770      	bx	lr

0800688c <__malloc_unlock>:
 800688c:	4770      	bx	lr

0800688e <_realloc_r>:
 800688e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006890:	4607      	mov	r7, r0
 8006892:	4614      	mov	r4, r2
 8006894:	460e      	mov	r6, r1
 8006896:	b921      	cbnz	r1, 80068a2 <_realloc_r+0x14>
 8006898:	4611      	mov	r1, r2
 800689a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800689e:	f7ff bc69 	b.w	8006174 <_malloc_r>
 80068a2:	b922      	cbnz	r2, 80068ae <_realloc_r+0x20>
 80068a4:	f7ff fc1a 	bl	80060dc <_free_r>
 80068a8:	4625      	mov	r5, r4
 80068aa:	4628      	mov	r0, r5
 80068ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ae:	f000 f814 	bl	80068da <_malloc_usable_size_r>
 80068b2:	4284      	cmp	r4, r0
 80068b4:	d90f      	bls.n	80068d6 <_realloc_r+0x48>
 80068b6:	4621      	mov	r1, r4
 80068b8:	4638      	mov	r0, r7
 80068ba:	f7ff fc5b 	bl	8006174 <_malloc_r>
 80068be:	4605      	mov	r5, r0
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d0f2      	beq.n	80068aa <_realloc_r+0x1c>
 80068c4:	4631      	mov	r1, r6
 80068c6:	4622      	mov	r2, r4
 80068c8:	f7ff f808 	bl	80058dc <memcpy>
 80068cc:	4631      	mov	r1, r6
 80068ce:	4638      	mov	r0, r7
 80068d0:	f7ff fc04 	bl	80060dc <_free_r>
 80068d4:	e7e9      	b.n	80068aa <_realloc_r+0x1c>
 80068d6:	4635      	mov	r5, r6
 80068d8:	e7e7      	b.n	80068aa <_realloc_r+0x1c>

080068da <_malloc_usable_size_r>:
 80068da:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80068de:	2800      	cmp	r0, #0
 80068e0:	f1a0 0004 	sub.w	r0, r0, #4
 80068e4:	bfbc      	itt	lt
 80068e6:	580b      	ldrlt	r3, [r1, r0]
 80068e8:	18c0      	addlt	r0, r0, r3
 80068ea:	4770      	bx	lr

080068ec <_sbrk>:
 80068ec:	4b04      	ldr	r3, [pc, #16]	; (8006900 <_sbrk+0x14>)
 80068ee:	4602      	mov	r2, r0
 80068f0:	6819      	ldr	r1, [r3, #0]
 80068f2:	b909      	cbnz	r1, 80068f8 <_sbrk+0xc>
 80068f4:	4903      	ldr	r1, [pc, #12]	; (8006904 <_sbrk+0x18>)
 80068f6:	6019      	str	r1, [r3, #0]
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	4402      	add	r2, r0
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	4770      	bx	lr
 8006900:	20000210 	.word	0x20000210
 8006904:	20001924 	.word	0x20001924

08006908 <_init>:
 8006908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690a:	bf00      	nop
 800690c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690e:	bc08      	pop	{r3}
 8006910:	469e      	mov	lr, r3
 8006912:	4770      	bx	lr

08006914 <_fini>:
 8006914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006916:	bf00      	nop
 8006918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800691a:	bc08      	pop	{r3}
 800691c:	469e      	mov	lr, r3
 800691e:	4770      	bx	lr
